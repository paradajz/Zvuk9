
Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010c  00800100  00010692  00010726  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00010692  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000011cd  0080020c  0080020c  00010832  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00010832  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00010864  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001188  00000000  00000000  000108a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0006488e  00000000  00000000  00011a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00008894  00000000  00000000  000762ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00013583  00000000  00000000  0007eb4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000043a8  00000000  00000000  000920d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000ab28  00000000  00000000  0009647c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000202b1  00000000  00000000  000a0fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002658  00000000  00000000  000c1255  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	cb c6       	rjmp	.+3478   	; 0xd98 <__ctors_end>
       2:	00 00       	nop
       4:	f3 c6       	rjmp	.+3558   	; 0xdec <__bad_interrupt>
       6:	00 00       	nop
       8:	f1 c6       	rjmp	.+3554   	; 0xdec <__bad_interrupt>
       a:	00 00       	nop
       c:	ef c6       	rjmp	.+3550   	; 0xdec <__bad_interrupt>
       e:	00 00       	nop
      10:	ed c6       	rjmp	.+3546   	; 0xdec <__bad_interrupt>
      12:	00 00       	nop
      14:	eb c6       	rjmp	.+3542   	; 0xdec <__bad_interrupt>
      16:	00 00       	nop
      18:	e9 c6       	rjmp	.+3538   	; 0xdec <__bad_interrupt>
      1a:	00 00       	nop
      1c:	e7 c6       	rjmp	.+3534   	; 0xdec <__bad_interrupt>
      1e:	00 00       	nop
      20:	e5 c6       	rjmp	.+3530   	; 0xdec <__bad_interrupt>
      22:	00 00       	nop
      24:	e3 c6       	rjmp	.+3526   	; 0xdec <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 cc 1d 	jmp	0x3b98	; 0x3b98 <__vector_10>
      2c:	0c 94 95 1e 	jmp	0x3d2a	; 0x3d2a <__vector_11>
      30:	dd c6       	rjmp	.+3514   	; 0xdec <__bad_interrupt>
      32:	00 00       	nop
      34:	db c6       	rjmp	.+3510   	; 0xdec <__bad_interrupt>
      36:	00 00       	nop
      38:	d9 c6       	rjmp	.+3506   	; 0xdec <__bad_interrupt>
      3a:	00 00       	nop
      3c:	d7 c6       	rjmp	.+3502   	; 0xdec <__bad_interrupt>
      3e:	00 00       	nop
      40:	d5 c6       	rjmp	.+3498   	; 0xdec <__bad_interrupt>
      42:	00 00       	nop
      44:	d3 c6       	rjmp	.+3494   	; 0xdec <__bad_interrupt>
      46:	00 00       	nop
      48:	d1 c6       	rjmp	.+3490   	; 0xdec <__bad_interrupt>
      4a:	00 00       	nop
      4c:	cf c6       	rjmp	.+3486   	; 0xdec <__bad_interrupt>
      4e:	00 00       	nop
      50:	cd c6       	rjmp	.+3482   	; 0xdec <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 68 15 	jmp	0x2ad0	; 0x2ad0 <__vector_21>
      58:	c9 c6       	rjmp	.+3474   	; 0xdec <__bad_interrupt>
      5a:	00 00       	nop
      5c:	c7 c6       	rjmp	.+3470   	; 0xdec <__bad_interrupt>
      5e:	00 00       	nop
      60:	c5 c6       	rjmp	.+3466   	; 0xdec <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 8d 19 	jmp	0x331a	; 0x331a <__vector_25>
      68:	0c 94 b8 19 	jmp	0x3370	; 0x3370 <__vector_26>
      6c:	0c 94 ef 19 	jmp	0x33de	; 0x33de <__vector_27>
      70:	bd c6       	rjmp	.+3450   	; 0xdec <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__vector_29>
      78:	b9 c6       	rjmp	.+3442   	; 0xdec <__bad_interrupt>
      7a:	00 00       	nop
      7c:	b7 c6       	rjmp	.+3438   	; 0xdec <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <__vector_32>
      84:	b3 c6       	rjmp	.+3430   	; 0xdec <__bad_interrupt>
      86:	00 00       	nop
      88:	b1 c6       	rjmp	.+3426   	; 0xdec <__bad_interrupt>
      8a:	00 00       	nop
      8c:	af c6       	rjmp	.+3422   	; 0xdec <__bad_interrupt>
      8e:	00 00       	nop
      90:	ad c6       	rjmp	.+3418   	; 0xdec <__bad_interrupt>
      92:	00 00       	nop
      94:	ab c6       	rjmp	.+3414   	; 0xdec <__bad_interrupt>
      96:	00 00       	nop
      98:	54 13       	cpse	r21, r20
      9a:	6e 13       	cpse	r22, r30
      9c:	6e 13       	cpse	r22, r30
      9e:	6e 13       	cpse	r22, r30
      a0:	6e 13       	cpse	r22, r30
      a2:	6e 13       	cpse	r22, r30
      a4:	6e 13       	cpse	r22, r30
      a6:	6e 13       	cpse	r22, r30
      a8:	6e 13       	cpse	r22, r30
      aa:	6e 13       	cpse	r22, r30
      ac:	6e 13       	cpse	r22, r30
      ae:	6e 13       	cpse	r22, r30
      b0:	6e 13       	cpse	r22, r30
      b2:	6e 13       	cpse	r22, r30
      b4:	6e 13       	cpse	r22, r30
      b6:	6e 13       	cpse	r22, r30
      b8:	54 13       	cpse	r21, r20
      ba:	6e 13       	cpse	r22, r30
      bc:	6e 13       	cpse	r22, r30
      be:	6e 13       	cpse	r22, r30
      c0:	6e 13       	cpse	r22, r30
      c2:	6e 13       	cpse	r22, r30
      c4:	6e 13       	cpse	r22, r30
      c6:	6e 13       	cpse	r22, r30
      c8:	6e 13       	cpse	r22, r30
      ca:	6e 13       	cpse	r22, r30
      cc:	6e 13       	cpse	r22, r30
      ce:	6e 13       	cpse	r22, r30
      d0:	6e 13       	cpse	r22, r30
      d2:	6e 13       	cpse	r22, r30
      d4:	6e 13       	cpse	r22, r30
      d6:	6e 13       	cpse	r22, r30
      d8:	54 13       	cpse	r21, r20
      da:	6e 13       	cpse	r22, r30
      dc:	6e 13       	cpse	r22, r30
      de:	6e 13       	cpse	r22, r30
      e0:	6e 13       	cpse	r22, r30
      e2:	6e 13       	cpse	r22, r30
      e4:	6e 13       	cpse	r22, r30
      e6:	6e 13       	cpse	r22, r30
      e8:	6e 13       	cpse	r22, r30
      ea:	6e 13       	cpse	r22, r30
      ec:	6e 13       	cpse	r22, r30
      ee:	6e 13       	cpse	r22, r30
      f0:	6e 13       	cpse	r22, r30
      f2:	6e 13       	cpse	r22, r30
      f4:	6e 13       	cpse	r22, r30
      f6:	6e 13       	cpse	r22, r30
      f8:	54 13       	cpse	r21, r20
      fa:	6e 13       	cpse	r22, r30
      fc:	6e 13       	cpse	r22, r30
      fe:	6e 13       	cpse	r22, r30
     100:	6e 13       	cpse	r22, r30
     102:	6e 13       	cpse	r22, r30
     104:	6e 13       	cpse	r22, r30
     106:	6e 13       	cpse	r22, r30
     108:	6e 13       	cpse	r22, r30
     10a:	6e 13       	cpse	r22, r30
     10c:	6e 13       	cpse	r22, r30
     10e:	6e 13       	cpse	r22, r30
     110:	6e 13       	cpse	r22, r30
     112:	6e 13       	cpse	r22, r30
     114:	6e 13       	cpse	r22, r30
     116:	6e 13       	cpse	r22, r30
     118:	48 13       	cpse	r20, r24
     11a:	6e 13       	cpse	r22, r30
     11c:	6e 13       	cpse	r22, r30
     11e:	6e 13       	cpse	r22, r30
     120:	6e 13       	cpse	r22, r30
     122:	6e 13       	cpse	r22, r30
     124:	6e 13       	cpse	r22, r30
     126:	6e 13       	cpse	r22, r30
     128:	6e 13       	cpse	r22, r30
     12a:	6e 13       	cpse	r22, r30
     12c:	6e 13       	cpse	r22, r30
     12e:	6e 13       	cpse	r22, r30
     130:	6e 13       	cpse	r22, r30
     132:	6e 13       	cpse	r22, r30
     134:	6e 13       	cpse	r22, r30
     136:	6e 13       	cpse	r22, r30
     138:	48 13       	cpse	r20, r24
     13a:	6e 13       	cpse	r22, r30
     13c:	6e 13       	cpse	r22, r30
     13e:	6e 13       	cpse	r22, r30
     140:	6e 13       	cpse	r22, r30
     142:	6e 13       	cpse	r22, r30
     144:	6e 13       	cpse	r22, r30
     146:	6e 13       	cpse	r22, r30
     148:	6e 13       	cpse	r22, r30
     14a:	6e 13       	cpse	r22, r30
     14c:	6e 13       	cpse	r22, r30
     14e:	6e 13       	cpse	r22, r30
     150:	6e 13       	cpse	r22, r30
     152:	6e 13       	cpse	r22, r30
     154:	6e 13       	cpse	r22, r30
     156:	6e 13       	cpse	r22, r30
     158:	54 13       	cpse	r21, r20
     15a:	6e 13       	cpse	r22, r30
     15c:	6e 13       	cpse	r22, r30
     15e:	6e 13       	cpse	r22, r30
     160:	6e 13       	cpse	r22, r30
     162:	6e 13       	cpse	r22, r30
     164:	6e 13       	cpse	r22, r30
     166:	6e 13       	cpse	r22, r30
     168:	6e 13       	cpse	r22, r30
     16a:	6e 13       	cpse	r22, r30
     16c:	6e 13       	cpse	r22, r30
     16e:	6e 13       	cpse	r22, r30
     170:	6e 13       	cpse	r22, r30
     172:	6e 13       	cpse	r22, r30
     174:	6e 13       	cpse	r22, r30
     176:	6e 13       	cpse	r22, r30
     178:	60 13       	cpse	r22, r16
     17a:	48 13       	cpse	r20, r24
     17c:	54 13       	cpse	r21, r20
     17e:	48 13       	cpse	r20, r24
     180:	6e 13       	cpse	r22, r30
     182:	6e 13       	cpse	r22, r30
     184:	3c 13       	cpse	r19, r28
     186:	6e 13       	cpse	r22, r30
     188:	3c 13       	cpse	r19, r28
     18a:	6e 13       	cpse	r22, r30
     18c:	3c 13       	cpse	r19, r28
     18e:	3c 13       	cpse	r19, r28
     190:	3c 13       	cpse	r19, r28
     192:	6e 13       	cpse	r22, r30
     194:	3c 13       	cpse	r19, r28
     196:	3c 13       	cpse	r19, r28
     198:	14 1f       	adc	r17, r20
     19a:	3c 1f       	adc	r19, r28
     19c:	29 20       	and	r2, r9
     19e:	3c 1f       	adc	r19, r28
     1a0:	29 20       	and	r2, r9
     1a2:	7c 1f       	adc	r23, r28
     1a4:	9f 1f       	adc	r25, r31
     1a6:	29 20       	and	r2, r9
     1a8:	f6 1f       	adc	r31, r22
     1aa:	06 20       	and	r0, r6
     1ac:	6c 21       	and	r22, r12
     1ae:	6a 21       	and	r22, r10
     1b0:	68 21       	and	r22, r8
     1b2:	66 21       	and	r22, r6
     1b4:	64 21       	and	r22, r4
     1b6:	62 21       	and	r22, r2
     1b8:	6e 21       	and	r22, r14
     1ba:	6e 21       	and	r22, r14
     1bc:	6e 21       	and	r22, r14
     1be:	6e 21       	and	r22, r14
     1c0:	6e 21       	and	r22, r14
     1c2:	6e 21       	and	r22, r14
     1c4:	6e 21       	and	r22, r14
     1c6:	6e 21       	and	r22, r14
     1c8:	5e 21       	and	r21, r14
     1ca:	60 21       	and	r22, r0
     1cc:	5a 21       	and	r21, r10
     1ce:	5c 21       	and	r21, r12
     1d0:	70 21       	and	r23, r0
     1d2:	58 21       	and	r21, r8
     1d4:	4a 25       	eor	r20, r10
     1d6:	4a 25       	eor	r20, r10
     1d8:	4a 25       	eor	r20, r10
     1da:	4a 25       	eor	r20, r10
     1dc:	4a 25       	eor	r20, r10
     1de:	4a 25       	eor	r20, r10
     1e0:	43 25       	eor	r20, r3
     1e2:	3f 25       	eor	r19, r15
     1e4:	50 25       	eor	r21, r0
     1e6:	50 25       	eor	r21, r0
     1e8:	50 25       	eor	r21, r0
     1ea:	50 25       	eor	r21, r0
     1ec:	50 25       	eor	r21, r0
     1ee:	50 25       	eor	r21, r0
     1f0:	4a 25       	eor	r20, r10
     1f2:	4a 25       	eor	r20, r10
     1f4:	4a 25       	eor	r20, r10
     1f6:	4a 25       	eor	r20, r10
     1f8:	4a 25       	eor	r20, r10
     1fa:	4a 25       	eor	r20, r10
     1fc:	47 25       	eor	r20, r7
     1fe:	47 25       	eor	r20, r7
     200:	47 25       	eor	r20, r7
     202:	50 25       	eor	r21, r0
     204:	50 25       	eor	r21, r0
     206:	50 25       	eor	r21, r0
     208:	50 25       	eor	r21, r0
     20a:	3c 25       	eor	r19, r12
     20c:	3c 25       	eor	r19, r12
     20e:	3c 25       	eor	r19, r12
     210:	3c 25       	eor	r19, r12
     212:	3c 25       	eor	r19, r12
     214:	74 27       	eor	r23, r20
     216:	e7 27       	eor	r30, r23
     218:	7a 28       	or	r7, r10
     21a:	48 28       	or	r4, r8
     21c:	7a 28       	or	r7, r10
     21e:	48 28       	or	r4, r8
     220:	48 28       	or	r4, r8
     222:	24 28       	or	r2, r4
     224:	24 28       	or	r2, r4
     226:	48 28       	or	r4, r8
     228:	cc 36       	cpi	r28, 0x6C	; 108
     22a:	d3 36       	cpi	r29, 0x63	; 99
     22c:	da 36       	cpi	r29, 0x6A	; 106
     22e:	e1 36       	cpi	r30, 0x61	; 97
     230:	e8 36       	cpi	r30, 0x68	; 104
     232:	f6 36       	cpi	r31, 0x66	; 102
     234:	ef 36       	cpi	r30, 0x6F	; 111
     236:	59 7e       	andi	r21, 0xE9	; 233
     238:	5f 7e       	andi	r21, 0xEF	; 239
     23a:	65 7e       	andi	r22, 0xE5	; 229
     23c:	6b 7e       	andi	r22, 0xEB	; 235
     23e:	71 7e       	andi	r23, 0xE1	; 225
     240:	77 7e       	andi	r23, 0xE7	; 231
     242:	7d 7e       	andi	r23, 0xED	; 237
     244:	08 00       	.word	0x0008	; ????
     246:	00 00       	nop
     248:	be 92       	st	-X, r11
     24a:	24 49       	sbci	r18, 0x94	; 148
     24c:	12 3e       	cpi	r17, 0xE2	; 226
     24e:	ab aa       	std	Y+51, r10	; 0x33
     250:	aa 2a       	or	r10, r26
     252:	be cd       	rjmp	.-1156   	; 0xfffffdd0 <__eeprom_end+0xff7efdd0>
     254:	cc cc       	rjmp	.-1640   	; 0xfffffbee <__eeprom_end+0xff7efbee>
     256:	4c 3e       	cpi	r20, 0xEC	; 236
     258:	00 00       	nop
     25a:	00 80       	ld	r0, Z
     25c:	be ab       	std	Y+54, r27	; 0x36
     25e:	aa aa       	std	Y+50, r10	; 0x32
     260:	aa 3e       	cpi	r26, 0xEA	; 234
     262:	00 00       	nop
     264:	00 00       	nop
     266:	bf 00       	.word	0x00bf	; ????
     268:	00 00       	nop
     26a:	80 3f       	cpi	r24, 0xF0	; 240
     26c:	00 00       	nop
     26e:	00 00       	nop
     270:	00 08       	sbc	r0, r0
     272:	41 78       	andi	r20, 0x81	; 129
     274:	d3 bb       	out	0x13, r29	; 19
     276:	43 87       	std	Z+11, r20	; 0x0b
     278:	d1 13       	cpse	r29, r17
     27a:	3d 19       	sub	r19, r13
     27c:	0e 3c       	cpi	r16, 0xCE	; 206
     27e:	c3 bd       	out	0x23, r28	; 35
     280:	42 82       	std	Z+2, r4	; 0x02
     282:	ad 2b       	or	r26, r29
     284:	3e 68       	ori	r19, 0x8E	; 142
     286:	ec 82       	std	Y+4, r14	; 0x04
     288:	76 be       	out	0x36, r7	; 54
     28a:	d9 8f       	std	Y+25, r29	; 0x19
     28c:	e1 a9       	ldd	r30, Z+49	; 0x31
     28e:	3e 4c       	sbci	r19, 0xCE	; 206
     290:	80 ef       	ldi	r24, 0xF0	; 240
     292:	ff be       	out	0x3f, r15	; 63
     294:	01 c4       	rjmp	.+2050   	; 0xa98 <_ZL6gain_6+0x15>
     296:	ff 7f       	andi	r31, 0xFF	; 255
     298:	3f 00       	.word	0x003f	; ????
     29a:	00 00       	nop
     29c:	00 00       	nop
     29e:	07 63       	ori	r16, 0x37	; 55
     2a0:	42 36       	cpi	r20, 0x62	; 98
     2a2:	b7 9b       	sbis	0x16, 7	; 22
     2a4:	d8 a7       	std	Y+40, r29	; 0x28
     2a6:	1a 39       	cpi	r17, 0x9A	; 154
     2a8:	68 56       	subi	r22, 0x68	; 104
     2aa:	18 ae       	std	Y+56, r1	; 0x38
     2ac:	ba ab       	std	Y+50, r27	; 0x32
     2ae:	55 8c       	ldd	r5, Z+29	; 0x1d
     2b0:	1d 3c       	cpi	r17, 0xCD	; 205
     2b2:	b7 cc       	rjmp	.-1682   	; 0xfffffc22 <__eeprom_end+0xff7efc22>
     2b4:	57 63       	ori	r21, 0x37	; 55
     2b6:	bd 6d       	ori	r27, 0xDD	; 221
     2b8:	ed fd       	.word	0xfded	; ????
     2ba:	75 3e       	cpi	r23, 0xE5	; 229
     2bc:	f6 17       	cp	r31, r22
     2be:	72 31       	cpi	r23, 0x12	; 18
     2c0:	bf 00       	.word	0x00bf	; ????
     2c2:	00 00       	nop
     2c4:	80 3f       	cpi	r24, 0xF0	; 240

000002c6 <__trampolines_end>:
     2c6:	43 6f       	ori	r20, 0xF3	; 243
     2c8:	6d 70       	andi	r22, 0x0D	; 13
     2ca:	6c 65       	ori	r22, 0x5C	; 92
     2cc:	74 65       	ori	r23, 0x54	; 84
     2ce:	21 00       	.word	0x0021	; ????

000002d0 <_ZL17pleaseWait_string>:
     2d0:	50 6c 65 61 73 65 20 77 61 69 74 2e 2e 2e 00        Please wait....

000002df <_ZL24restoringDefaults_string>:
     2df:	52 65 73 74 6f 72 69 6e 67 20 64 65 66 61 75 6c     Restoring defaul
     2ef:	74 73 2e 00                                         ts..

000002f3 <ProductString>:
     2f3:	0c 03 5a 00 76 00 75 00 6b 00 39 00 00 00           ..Z.v.u.k.9...

00000301 <ManufacturerString>:
     301:	16 03 41 00 64 00 20 00 42 00 69 00 74 00 20 00     ..A.d. .B.i.t. .
     311:	4c 00 4c 00 43 00 00 00                             L.L.C...

00000319 <LanguageString>:
     319:	04 03 09 04                                         ....

0000031d <ConfigurationDescriptor>:
     31d:	09 02 65 00 02 01 00 c0 fa 09 04 00 00 00 01 01     ..e.............
     32d:	00 00 09 24 01 00 01 09 00 01 01 09 04 01 00 02     ...$............
     33d:	01 03 00 00 07 24 01 00 01 41 00 06 24 02 01 01     .....$...A..$...
     34d:	00 06 24 02 02 02 00 09 24 03 01 03 01 02 01 00     ..$.....$.......
     35d:	09 24 03 02 04 01 01 01 00 09 05 02 02 40 00 05     .$...........@..
     36d:	00 00 05 25 01 01 01 09 05 81 02 40 00 05 00 00     ...%.......@....
     37d:	05 25 01 01 03                                      .%...

00000382 <DeviceDescriptor>:
     382:	12 01 00 02 00 00 00 08 c1 16 85 04 01 00 01 02     ................
     392:	00 01                                               ..

00000394 <_ZL27calibration_pressure_string>:
     394:	43 61 6c 69 62 72 61 74 65 20 70 72 65 73 73 75     Calibrate pressu
     3a4:	72 65 00                                            re.

000003a7 <_ZL20calibration_y_string>:
     3a7:	43 61 6c 69 62 72 61 74 65 20 59 00                 Calibrate Y.

000003b3 <_ZL20calibration_x_string>:
     3b3:	43 61 6c 69 62 72 61 74 65 20 58 00                 Calibrate X.

000003bf <_ZL30menuOption_factoryReset_string>:
     3bf:	46 61 63 74 6f 72 79 20 72 65 73 65 74 00           Factory reset.

000003cd <_ZL28menuOption_deviceInfo_string>:
     3cd:	44 65 76 69 63 65 20 69 6e 66 6f 00                 Device info.

000003d9 <_ZL32menuOption_padCalibration_string>:
     3d9:	50 61 64 20 63 61 6c 69 62 72 61 74 69 6f 6e 00     Pad calibration.

000003e9 <_ZL25noteOff_offChannel_string>:
     3e9:	4f 66 66 20 63 68 61 6e 6e 65 6c 00                 Off channel.

000003f5 <_ZL22noteOff_zeroVel_string>:
     3f5:	4f 6e 20 63 68 61 6e 6e 65 6c 2f 30 20 76 65 6c     On channel/0 vel
	...

00000406 <_ZL22disabled_string_string>:
     406:	44 69 73 61 62 6c 65 64 00                          Disabled.

0000040f <_ZL21enabled_string_string>:
     40f:	45 6e 61 62 6c 65 64 00                             Enabled.

00000417 <_ZL26aftertouchType_poly_string>:
     417:	50 6f 6c 79 00                                      Poly.

0000041c <_ZL29aftertouchType_channel_string>:
     41c:	43 68 61 6e 6e 65 6c 00                             Channel.

00000424 <_ZL27midiSettings_noteOff_string>:
     424:	4e 6f 74 65 20 6f 66 66 00                          Note off.

0000042d <_ZL33midiSettings_runningStatus_string>:
     42d:	52 75 6e 6e 69 6e 67 20 73 74 61 74 75 73 00        Running status.

0000043c <_ZL30midiSettings_atouchType_string>:
     43c:	41 66 74 65 72 74 6f 75 63 68 20 74 79 70 65 00     Aftertouch type.

0000044c <_ZL29pressure_curve_inv_exp_string>:
     44c:	45 78 70 2e 00                                      Exp..

00000451 <_ZL25pressure_curve_log_string>:
     451:	4c 6f 67 2e 00                                      Log..

00000456 <_ZL28pressure_curve_linear_string>:
     456:	4c 69 6e 65 61 72 00                                Linear.

0000045d <_ZL29pressure_sensitivity_3_string>:
     45d:	48 61 72 64 00                                      Hard.

00000462 <_ZL29pressure_sensitivity_2_string>:
     462:	4d 65 64 69 75 6d 00                                Medium.

00000469 <_ZL29pressure_sensitivity_1_string>:
     469:	53 6f 66 74 00                                      Soft.

0000046e <_ZL30menuOption_midiSettings_string>:
     46e:	4d 49 44 49 20 73 65 74 74 69 6e 67 73 00           MIDI settings.

0000047c <_ZL31menuOption_pressureCurve_string>:
     47c:	50 72 65 73 73 2e 20 63 75 72 76 65 00              Press. curve.

00000489 <_ZL37menuOption_pressureSensitivity_string>:
     489:	50 72 65 73 73 2e 20 73 65 6e 73 69 74 69 76 69     Press. sensitivi
     499:	74 79 00                                            ty.

0000049c <_ZL30menuOption_factoryReset_string>:
     49c:	46 61 63 74 6f 72 79 20 72 65 73 65 74 00           Factory reset.

000004aa <_ZL28menuOption_deviceInfo_string>:
     4aa:	44 65 76 69 63 65 20 69 6e 66 6f 00                 Device info.

000004b6 <_ZL16emptyLine_string>:
     4b6:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     4c6:	20 20 20 20 00                                          .

000004cb <_ZL16unchecked_string>:
     4cb:	5b 20 5d 00                                         [ ].

000004cf <_ZL14checked_string>:
     4cf:	5b 78 5d 00                                         [x].

000004d3 <_ZL23menuType_service_string>:
     4d3:	53 65 72 76 69 63 65 20 6d 65 6e 75 00              Service menu.

000004e0 <_ZL20menuType_user_string>:
     4e0:	53 65 74 74 69 6e 67 73 00                          Settings.

000004e9 <_ZL16firmware_updated>:
     4e9:	46 69 72 6d 77 61 72 65 20 75 70 64 61 74 65 64     Firmware updated
     4f9:	21 00                                               !.

000004fb <_ZL18midiChannel_string>:
     4fb:	63 68 00                                            ch.

000004fe <_ZL22aftertouchClear_string>:
     4fe:	20 20 20 20 20 00                                        .

00000504 <_ZL17editingPad_string>:
     504:	45 64 69 74 69 6e 67 20 70 61 64 00                 Editing pad.

00000510 <_ZL24midiChannelChange_string>:
     510:	4d 49 44 49 20 63 68 61 6e 6e 65 6c 20 00           MIDI channel .

0000051e <_ZL14welcome_string>:
     51e:	57 65 6c 63 6f 6d 65 21 00                          Welcome!.

00000527 <_ZL17aftertouch_string>:
     527:	61 74 00                                            at.

0000052a <_ZL14program_string>:
     52a:	50 00                                               P.

0000052c <_ZL16emptyLine_string>:
     52c:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     53c:	20 20 20 20 00                                          .

00000541 <_ZL19padAmountAll_string>:
     541:	61 6c 6c 20 70 61 64 73 00                          all pads.

0000054a <_ZL22padAmountSingle_string>:
     54a:	70 61 64 00                                         pad.

0000054e <_ZL33transportControlChangeArray_sizes>:
     54e:	04 04 09 0a                                         ....

00000552 <_ZL27transportControlChangeArray>:
     552:	74 05 6f 05 65 05 5a 05                             t.o.e.Z.

0000055a <_ZL32transportControlRecordOff_string>:
     55a:	52 65 63 6f 72 64 20 6f 66 66 00                    Record off.

00000565 <_ZL31transportControlRecordOn_string>:
     565:	52 65 63 6f 72 64 20 6f 6e 00                       Record on.

0000056f <_ZL27transportControlStop_string>:
     56f:	53 74 6f 70 00                                      Stop.

00000574 <_ZL27transportControlPlay_string>:
     574:	50 6c 61 79 00                                      Play.

00000579 <_ZL13ccArray_sizes>:
     579:	05 05                                               ..

0000057b <_ZL7ccArray>:
     57b:	a3 05 9d 05                                         ....

0000057f <_ZL26curveCoordinateArray_sizes>:
     57f:	08 08                                               ..

00000581 <_ZL20curveCoordinateArray>:
     581:	eb 05 e2 05                                         ....

00000585 <_ZL16xyCCclear_string>:
     585:	20 20 20 20 20 20 00                                      .

0000058c <_ZL22xyPositionClear_string>:
     58c:	20 20 20 20 00                                          .

00000591 <_ZL16yPosition_string>:
     591:	79 00                                               y.

00000593 <_ZL16xPosition_string>:
     593:	78 00                                               x.

00000595 <_ZL12yCCid_string>:
     595:	43 43 79 00                                         CCy.

00000599 <_ZL12xCCid_string>:
     599:	43 43 78 00                                         CCx.

0000059d <_ZL10yCC_string>:
     59d:	59 20 43 43 3d 00                                   Y CC=.

000005a3 <_ZL10xCC_string>:
     5a3:	58 20 43 43 3d 00                                   X CC=.

000005a9 <_ZL11yMin_string>:
     5a9:	59 20 6d 69 6e 3d 00                                Y min=.

000005b0 <_ZL11yMax_string>:
     5b0:	59 20 6d 61 78 3d 00                                Y max=.

000005b7 <_ZL11xMin_string>:
     5b7:	58 20 6d 69 6e 3d 00                                X min=.

000005be <_ZL11xMax_string>:
     5be:	58 20 6d 61 78 3d 00                                X max=.

000005c5 <_ZL24curveTypeWideEnds_string>:
     5c5:	77 69 64 65 20 65 6e 64 73 00                       wide ends.

000005cf <_ZL26curveTypeWideMiddle_string>:
     5cf:	77 69 64 65 20 6d 69 64 64 6c 65 00                 wide middle.

000005db <_ZL22curveTypeLinear_string>:
     5db:	6c 69 6e 65 61 72 00                                linear.

000005e2 <_ZL23curveCoordinateY_string>:
     5e2:	59 20 63 75 72 76 65 3d 00                          Y curve=.

000005eb <_ZL23curveCoordinateX_string>:
     5eb:	58 20 63 75 72 76 65 3d 00                          X curve=.

000005f4 <_ZL13onArray_sizes>:
     5f4:	08 0d 04 04 08                                      .....

000005f9 <_ZL7onArray>:
     5f9:	33 06 25 06 20 06 1b 06 12 06                       3.%. .....

00000603 <_ZL14offArray_sizes>:
     603:	09 0e 05 05 09                                      .....

00000608 <_ZL8offArray>:
     608:	61 06 52 06 4c 06 46 06 3c 06                       a.R.L.F.<.

00000612 <_ZL14onSplit_string>:
     612:	53 70 6c 69 74 20 6f 6e 00                          Split on.

0000061b <_ZL10onY_string>:
     61b:	59 20 6f 6e 00                                      Y on.

00000620 <_ZL10onX_string>:
     620:	58 20 6f 6e 00                                      X on.

00000625 <_ZL19onAftertouch_string>:
     625:	41 66 74 65 72 74 6f 75 63 68 20 6f 6e 00           Aftertouch on.

00000633 <_ZL14onNotes_string>:
     633:	4e 6f 74 65 73 20 6f 6e 00                          Notes on.

0000063c <_ZL15offSplit_string>:
     63c:	53 70 6c 69 74 20 6f 66 66 00                       Split off.

00000646 <_ZL11offY_string>:
     646:	59 20 6f 66 66 00                                   Y off.

0000064c <_ZL11offX_string>:
     64c:	58 20 6f 66 66 00                                   X off.

00000652 <_ZL20offAftertouch_string>:
     652:	41 66 74 65 72 74 6f 75 63 68 20 6f 66 66 00        Aftertouch off.

00000661 <_ZL15offNotes_string>:
     661:	4e 6f 74 65 73 20 6f 66 66 00                       Notes off.

0000066b <_ZL21presetNameArray_sizes>:
     66b:	0d 0d 0e 05 0e 10 10 0b                             ........

00000673 <_ZL15presetNameArray>:
     673:	e3 06 d5 06 c6 06 c0 06 b1 06 a0 06 8f 06 83 06     ................

00000683 <_ZL17presetUser_string>:
     683:	55 73 65 72 20 70 72 65 73 65 74 00                 User preset.

0000068f <_ZL28presetMajorPentatonic_string>:
     68f:	4d 61 6a 6f 72 20 50 65 6e 74 61 74 6f 6e 69 63     Major Pentatonic
	...

000006a0 <_ZL28presetMinorPentatonic_string>:
     6a0:	4d 69 6e 6f 72 20 50 65 6e 74 61 74 6f 6e 69 63     Minor Pentatonic
	...

000006b1 <_ZL26presetHarmonicMajor_string>:
     6b1:	48 61 72 6d 6f 6e 69 63 20 4d 61 6a 6f 72 00        Harmonic Major.

000006c0 <_ZL18presetMajor_string>:
     6c0:	4d 61 6a 6f 72 00                                   Major.

000006c6 <_ZL26presetHarmonicMinor_string>:
     6c6:	48 61 72 6d 6f 6e 69 63 20 4d 69 6e 6f 72 00        Harmonic Minor.

000006d5 <_ZL25presetMelodicMinor_string>:
     6d5:	4d 65 6c 6f 64 69 63 20 4d 69 6e 6f 72 00           Melodic Minor.

000006e3 <_ZL25presetNaturalMinor_string>:
     6e3:	4e 61 74 75 72 61 6c 20 4d 69 6e 6f 72 00           Natural Minor.

000006f1 <_ZL30factory_reset_warning_3_string>:
     6f1:	20 43 61 6e 63 65 6c 3a 20 61 6e 79 20 6f 74 68      Cancel: any oth
     701:	65 72 00                                            er.

00000704 <_ZL30factory_reset_warning_2_string>:
     704:	20 20 31 5b 20 5d 20 37 5b 20 5d 20 39 5b 20 5d       1[ ] 7[ ] 9[ ]
     714:	20 20 20 00                                            .

00000718 <_ZL30factory_reset_warning_1_string>:
     718:	20 43 6f 6e 66 69 72 6d 20 77 69 74 68 20 70 61      Confirm with pa
     728:	64 73 3a 00                                         ds:.

0000072c <_ZL27deviceInfo_hwVersion_string>:
     72c:	48 61 72 64 77 61 72 65 3a 20 00                    Hardware: .

00000737 <_ZL27deviceInfo_swVersion_string>:
     737:	53 6f 66 74 77 61 72 65 3a 20 00                    Software: .

00000742 <_ZL35menuOption_factoryReset_caps_string>:
     742:	2a 2a 2a 46 41 43 54 4f 52 59 20 52 45 53 45 54     ***FACTORY RESET
     752:	2a 2a 2a 00                                         ***.

00000756 <_ZL19maxNotesSet1_string>:
     756:	6e 6f 74 65 73 20 73 65 74 00                       notes set.

00000760 <_ZL19maxNotesSet0_string>:
     760:	4d 61 78 69 6d 75 6d 20 6e 75 6d 62 65 72 20 6f     Maximum number o
     770:	66 00                                               f.

00000772 <_ZL18exitPadMode_string>:
     772:	45 78 69 74 20 70 61 64 20 6d 6f 64 65 20 74 6f     Exit pad mode to
	...

00000783 <_ZL22calibrationMode_string>:
     783:	65 6e 74 65 72 20 63 61 6c 69 62 72 61 74 69 6f     enter calibratio
     793:	6e 00                                               n.

00000795 <_ZL23enterPadEditMode_string>:
     795:	65 6e 74 65 72 20 70 61 64 20 65 64 69 74 20 6d     enter pad edit m
     7a5:	6f 64 65 00                                         ode.

000007a9 <_ZL20changeCClimit_string>:
     7a9:	63 68 61 6e 67 65 20 43 43 20 6c 69 6d 69 74 00     change CC limit.

000007b9 <_ZL15changeCC_string>:
     7b9:	63 68 61 6e 67 65 20 43 43 00                       change CC.

000007c3 <_ZL18changeCurve_string>:
     7c3:	63 68 61 6e 67 65 20 63 75 72 76 65 00              change curve.

000007d0 <_ZL19changePreset_string>:
     7d0:	63 68 61 6e 67 65 20 70 72 65 73 65 74 00           change preset.

000007de <_ZL20changeProgram_string>:
     7de:	63 68 61 6e 67 65 20 70 72 6f 67 72 61 6d 00        change program.

000007ed <_ZL23changeParameters_string>:
     7ed:	63 68 61 6e 67 65 20 70 61 72 61 6d 65 74 65 72     change parameter
     7fd:	73 00                                               s.

000007ff <_ZL16relasePad_string>:
     7ff:	52 65 6c 65 61 73 65 20 61 6c 6c 20 70 61 64 73     Release all pads
     80f:	20 74 6f 00                                          to.

00000813 <_ZL26editModeEnterError1_string>:
     813:	74 6f 20 65 64 69 74 20 70 61 64 20 6e 6f 74 65     to edit pad note
     823:	73 00                                               s.

00000825 <_ZL26editModeEnterError0_string>:
     825:	53 65 6c 65 63 74 20 75 73 65 72 20 70 72 65 73     Select user pres
     835:	65 74 00                                            et.

00000838 <_ZL17outOfRange_string>:
     838:	4f 75 74 20 6f 66 20 72 61 6e 67 65 00              Out of range.

00000845 <_ZL19noteNameArray_sizes>:
     845:	01 02 01 02 01 01 02 01 02 01 02 01                 ............

00000851 <_ZL13noteNameArray>:
     851:	ef 08 ec 08 ea 08 e7 08 e5 08 e3 08 e0 08 de 08     ................
     861:	db 08 d9 08 d6 08 d4 08                             ........

00000869 <_ZL16noteShift_string>:
     869:	6e 00                                               n.

0000086b <_ZL17notesClear_string>:
     86b:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
     87b:	20 20 20 20 20 20 20 20 20 00                                .

00000885 <_ZL15velocity_string>:
     885:	76 00                                               v.

00000887 <_ZL13noteUp_string>:
     887:	4f 6e 65 20 6e 6f 74 65 20 75 70 00                 One note up.

00000893 <_ZL15noteDown_string>:
     893:	4f 6e 65 20 6e 6f 74 65 20 64 6f 77 6e 00           One note down.

000008a1 <_ZL19activeOctave_string>:
     8a1:	41 63 74 69 76 65 20 6f 63 74 61 76 65 3a 20 00     Active octave: .

000008b1 <_ZL13octave_string>:
     8b1:	4f 63 74 61 76 65 20 00                             Octave .

000008b9 <_ZL12tonic_string>:
     8b9:	54 6f 6e 69 63 20 00                                Tonic .

000008c0 <_ZL14noNotes_string>:
     8c0:	3c 6e 6f 20 61 73 73 69 67 6e 65 64 20 6e 6f 74     <no assigned not
     8d0:	65 73 3e 00                                         es>.

000008d4 <_ZL12tonicB_strig>:
     8d4:	42 00                                               B.

000008d6 <_ZL18tonicASharp_string>:
     8d6:	41 23 00                                            A#.

000008d9 <_ZL13tonicA_string>:
     8d9:	41 00                                               A.

000008db <_ZL18tonicGSharp_string>:
     8db:	47 23 00                                            G#.

000008de <_ZL13tonicG_string>:
     8de:	47 00                                               G.

000008e0 <_ZL18tonicFSharp_string>:
     8e0:	46 23 00                                            F#.

000008e3 <_ZL13tonicF_string>:
     8e3:	46 00                                               F.

000008e5 <_ZL13tonicE_string>:
     8e5:	45 00                                               E.

000008e7 <_ZL18tonicDSharp_string>:
     8e7:	44 23 00                                            D#.

000008ea <_ZL13tonicD_string>:
     8ea:	44 00                                               D.

000008ec <_ZL18tonicCSharp_string>:
     8ec:	43 23 00                                            C#.

000008ef <_ZL13tonicC_string>:
     8ef:	43 00                                               C.

000008f1 <_ZL10scaleArray>:
     8f1:	03 0d 83 0c 03 0c 83 0b 03 0b 83 0a 03 0a 83 09     ................
     901:	03 09                                               ..

00000903 <_ZL6gain_9>:
	...
     90f:	00 00 00 01 01 01 01 01 01 02 02 02 03 03 03 04     ................
     91f:	04 05 05 06 07 07 08 09 0a 0b 0c 0d 0e 0f 10 11     ................
     92f:	13 14 16 17 19 1b 1d 1f 21 23 25 27 2a 2c 2f 32     ........!#%'*,/2
     93f:	35 38 3b 3e 41 44 47 4a 4d 50 53 55 58 5a 5c 5e     58;>ADGJMPSUXZ\^
     94f:	60 62 64 66 68 69 6b 6c 6e 6f 70 71 72 73 74 75     `bdfhiklnopqrstu
     95f:	76 77 78 78 79 7a 7a 7b 7b 7c 7c 7c 7d 7d 7d 7e     vwxxyzz{{|||}}}~
     96f:	7e 7e 7e 7e 7e 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ~~~~~...........
     97f:	7f 7f 7f 7f                                         ....

00000983 <_ZL6gain_8>:
	...
     98b:	01 01 01 01 01 02 02 02 03 03 03 04 04 05 05 06     ................
     99b:	07 07 08 09 09 0a 0b 0c 0d 0e 0f 10 11 12 13 14     ................
     9ab:	16 17 18 1a 1b 1d 1e 20 21 23 24 26 28 2a 2c 2d     ....... !#$&(*,-
     9bb:	2f 31 33 36 38 3a 3c 3e 41 43 45 47 49 4c 4e 50     /1368:<>ACEGILNP
     9cb:	52 53 55 57 59 5b 5c 5e 5f 61 62 64 65 67 68 69     RSUWY[\^_abdeghi
     9db:	6b 6c 6d 6e 6f 70 71 72 73 74 75 76 76 77 78 78     klmnopqrstuvvwxx
     9eb:	79 7a 7a 7b 7b 7c 7c 7c 7d 7d 7d 7e 7e 7e 7e 7e     yzz{{|||}}}~~~~~
     9fb:	7f 7f 7f 7f 7f 7f 7f 7f                             ........

00000a03 <_ZL6gain_7>:
     a03:	00 00 00 00 01 01 01 01 02 02 03 03 04 04 05 05     ................
     a13:	06 06 07 08 09 09 0a 0b 0c 0d 0d 0e 0f 10 11 12     ................
     a23:	13 14 15 17 18 19 1a 1b 1c 1e 1f 20 22 23 24 26     ........... "#$&
     a33:	27 28 2a 2b 2d 2e 30 31 33 35 36 38 3a 3b 3d 3f     '(*+-.013568:;=?
     a43:	40 42 44 45 47 49 4a 4c 4e 4f 51 52 54 55 57 58     @BDEGIJLNOQRTUWX
     a53:	59 5b 5c 5d 5f 60 61 63 64 65 66 67 68 6a 6b 6c     Y[\]_`acdefghjkl
     a63:	6d 6e 6f 70 71 72 72 73 74 75 76 76 77 78 79 79     mnopqrrstuvvwxyy
     a73:	7a 7a 7b 7b 7c 7c 7d 7d 7e 7e 7e 7e 7f 7f 7f 7f     zz{{||}}~~~~....

00000a83 <_ZL6gain_6>:
     a83:	00 00 01 01 02 02 03 03 04 05 06 06 07 08 09 09     ................
     a93:	0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19     ................
     aa3:	1a 1b 1c 1d 1e 1f 20 21 22 24 25 26 27 28 29 2b     ...... !"$%&'()+
     ab3:	2c 2d 2e 30 31 32 33 35 36 37 38 3a 3b 3c 3e 3f     ,-.01235678:;<>?
     ac3:	40 41 43 44 45 47 48 49 4a 4c 4d 4e 4f 51 52 53     @ACDEGHIJLMNOQRS
     ad3:	54 56 57 58 59 5a 5b 5d 5e 5f 60 61 62 63 64 65     TVWXYZ[]^_`abcde
     ae3:	66 67 68 69 6a 6b 6c 6d 6e 6f 70 71 72 73 74 75     fghijklmnopqrstu
     af3:	76 76 77 78 79 79 7a 7b 7c 7c 7d 7d 7e 7e 7f 7f     vvwxyyz{||}}~~..

00000b03 <_ZL6gain_5>:
     b03:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f     ................
     b13:	10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
     b23:	20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f      !"#$%&'()*+,-./
     b33:	30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f     0123456789:;<=>?
     b43:	40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f     @ABCDEFGHIJKLMNO
     b53:	50 51 52 53 54 55 56 57 58 59 5a 5b 5c 5d 5e 5f     PQRSTUVWXYZ[\]^_
     b63:	60 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f     `abcdefghijklmno
     b73:	70 71 72 73 74 75 76 77 78 79 7a 7b 7c 7d 7e 7f     pqrstuvwxyz{|}~.

00000b83 <_ZL6gain_4>:
     b83:	00 03 05 07 08 0a 0b 0d 0e 0f 10 11 13 14 15 16     ................
     b93:	17 18 19 1a 1b 1c 1d 1e 1f 20 21 22 23 24 25 25     ......... !"#$%%
     ba3:	26 27 28 29 2a 2b 2b 2c 2d 2e 2f 30 30 31 32 33     &'()*++,-./00123
     bb3:	34 34 35 36 37 38 38 39 3a 3b 3b 3c 3d 3e 3e 3f     44567889:;;<=>>?
     bc3:	40 41 41 42 43 44 44 45 46 47 47 48 49 4a 4b 4b     @AABCDDEFGGHIJKK
     bd3:	4c 4d 4e 4f 4f 50 51 52 53 54 54 55 56 57 58 59     LMNOOPQRSTTUVWXY
     be3:	5a 5a 5b 5c 5d 5e 5f 60 61 62 63 64 65 66 67 68     ZZ[\]^_`abcdefgh
     bf3:	69 6a 6b 6c 6e 6f 70 71 72 74 75 77 78 7a 7c 7f     ijklnopqrtuwxz|.

00000c03 <_ZL6gain_3>:
     c03:	00 08 0b 0d 0f 11 13 14 16 17 19 1a 1b 1c 1d 1e     ................
     c13:	1f 20 21 22 23 24 25 26 26 27 28 29 2a 2a 2b 2c     . !"#$%&&'()**+,
     c23:	2d 2d 2e 2f 2f 30 31 31 32 33 33 34 35 35 36 36     --.//01123345566
     c33:	37 38 38 39 39 3a 3a 3b 3c 3c 3d 3d 3e 3e 3f 3f     78899::;<<==>>??
     c43:	40 40 41 41 42 42 43 43 44 45 45 46 46 47 47 48     @@AABBCCDEEFFGGH
     c53:	49 49 4a 4a 4b 4c 4c 4d 4e 4e 4f 50 50 51 52 52     IIJJKLLMNNOPPQRR
     c63:	53 54 55 55 56 57 58 59 59 5a 5b 5c 5d 5e 5f 60     STUUVWXYYZ[\]^_`
     c73:	61 62 63 64 65 66 68 69 6b 6c 6e 70 72 74 77 7f     abcdefhiklnprtw.

00000c83 <_ZL6gain_2>:
     c83:	00 11 15 18 1a 1c 1e 1f 21 22 23 24 25 26 27 28     ........!"#$%&'(
     c93:	29 2a 2a 2b 2c 2c 2d 2e 2e 2f 30 30 31 31 32 32     )**+,,-../001122
     ca3:	33 33 34 34 35 35 36 36 37 37 38 38 38 39 39 3a     334455667788899:
     cb3:	3a 3a 3b 3b 3c 3c 3c 3d 3d 3d 3e 3e 3e 3f 3f 3f     ::;;<<<===>>>???
     cc3:	40 40 40 41 41 41 42 42 42 43 43 43 44 44 45 45     @@@AAABBBCCCDDEE
     cd3:	45 46 46 47 47 47 48 48 49 49 4a 4a 4b 4b 4c 4c     EFFGGGHHIIJJKKLL
     ce3:	4d 4d 4e 4e 4f 4f 50 51 51 52 53 53 54 55 55 56     MMNNOOPQQRSSTUUV
     cf3:	57 58 59 5a 5b 5c 5d 5e 60 61 63 65 67 6a 6e 7f     WXYZ[\]^`acegjn.

00000d03 <_ZL6gain_1>:
     d03:	00 22 26 28 2a 2b 2c 2d 2e 2f 30 31 31 32 32 33     ."&(*+,-./011223
     d13:	33 34 34 35 35 36 36 36 37 37 37 38 38 38 39 39     3445566677788899
     d23:	39 39 3a 3a 3a 3a 3b 3b 3b 3b 3c 3c 3c 3c 3c 3d     99::::;;;;<<<<<=
     d33:	3d 3d 3d 3d 3e 3e 3e 3e 3e 3e 3f 3f 3f 3f 3f 3f     ====>>>>>>??????
     d43:	40 40 40 40 40 40 41 41 41 41 41 41 42 42 42 42     @@@@@@AAAAAABBBB
     d53:	42 43 43 43 43 43 44 44 44 44 45 45 45 45 46 46     BCCCCCDDDDEEEEFF
     d63:	46 46 47 47 47 48 48 48 49 49 49 4a 4a 4b 4b 4c     FFGGGHHHIIIJJKKL
     d73:	4c 4d 4d 4e 4e 4f 50 51 52 53 54 55 57 59 5d 7f     LMMNNOPQRSTUWY].
	...

00000d84 <__ctors_start>:
     d84:	ba 0c       	add	r11, r10
     d86:	56 15       	cp	r21, r6
     d88:	2f 24       	eor	r2, r15
     d8a:	20 29       	or	r18, r0
     d8c:	bb 31       	cpi	r27, 0x1B	; 27
     d8e:	44 46       	sbci	r20, 0x64	; 100
     d90:	81 49       	sbci	r24, 0x91	; 145
     d92:	b5 6a       	ori	r27, 0xA5	; 165
     d94:	40 6b       	ori	r20, 0xB0	; 176
     d96:	0f 7c       	andi	r16, 0xCF	; 207

00000d98 <__ctors_end>:
     d98:	11 24       	eor	r1, r1
     d9a:	1f be       	out	0x3f, r1	; 63
     d9c:	cf ef       	ldi	r28, 0xFF	; 255
     d9e:	d0 e2       	ldi	r29, 0x20	; 32
     da0:	de bf       	out	0x3e, r29	; 62
     da2:	cd bf       	out	0x3d, r28	; 61

00000da4 <__do_copy_data>:
     da4:	12 e0       	ldi	r17, 0x02	; 2
     da6:	a0 e0       	ldi	r26, 0x00	; 0
     da8:	b1 e0       	ldi	r27, 0x01	; 1
     daa:	e2 e9       	ldi	r30, 0x92	; 146
     dac:	f6 e0       	ldi	r31, 0x06	; 6
     dae:	01 e0       	ldi	r16, 0x01	; 1
     db0:	0b bf       	out	0x3b, r16	; 59
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <__do_copy_data+0x14>
     db4:	07 90       	elpm	r0, Z+
     db6:	0d 92       	st	X+, r0
     db8:	ac 30       	cpi	r26, 0x0C	; 12
     dba:	b1 07       	cpc	r27, r17
     dbc:	d9 f7       	brne	.-10     	; 0xdb4 <__do_copy_data+0x10>

00000dbe <__do_clear_bss>:
     dbe:	23 e1       	ldi	r18, 0x13	; 19
     dc0:	ac e0       	ldi	r26, 0x0C	; 12
     dc2:	b2 e0       	ldi	r27, 0x02	; 2
     dc4:	01 c0       	rjmp	.+2      	; 0xdc8 <.do_clear_bss_start>

00000dc6 <.do_clear_bss_loop>:
     dc6:	1d 92       	st	X+, r1

00000dc8 <.do_clear_bss_start>:
     dc8:	a9 3d       	cpi	r26, 0xD9	; 217
     dca:	b2 07       	cpc	r27, r18
     dcc:	e1 f7       	brne	.-8      	; 0xdc6 <.do_clear_bss_loop>

00000dce <__do_global_ctors>:
     dce:	16 e0       	ldi	r17, 0x06	; 6
     dd0:	cc ec       	ldi	r28, 0xCC	; 204
     dd2:	d6 e0       	ldi	r29, 0x06	; 6
     dd4:	04 c0       	rjmp	.+8      	; 0xdde <__do_global_ctors+0x10>
     dd6:	21 97       	sbiw	r28, 0x01	; 1
     dd8:	fe 01       	movw	r30, r28
     dda:	0e 94 84 82 	call	0x10508	; 0x10508 <__tablejump2__>
     dde:	c2 3c       	cpi	r28, 0xC2	; 194
     de0:	d1 07       	cpc	r29, r17
     de2:	c9 f7       	brne	.-14     	; 0xdd6 <__do_global_ctors+0x8>
     de4:	0e 94 45 7c 	call	0xf88a	; 0xf88a <main>
     de8:	0c 94 47 83 	jmp	0x1068e	; 0x1068e <_exit>

00000dec <__bad_interrupt>:
     dec:	09 c9       	rjmp	.-3566   	; 0x0 <__vectors>

00000dee <_ZN13Configuration14writeSignatureEv>:
        _delay_ms(2000);
    #endif

}

void Configuration::writeSignature()    {
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29

    uint8_t unique_id_invert = invertByte(EEPROM_UNIQUE_ID);

    for (int i=0; i<START_OFFSET; i++)
     df2:	c0 e0       	ldi	r28, 0x00	; 0
     df4:	d0 e0       	ldi	r29, 0x00	; 0
        (i%2) ? eeprom_update_byte((uint8_t*)i, unique_id_invert) : eeprom_update_byte((uint8_t*)i, EEPROM_UNIQUE_ID);
     df6:	c0 ff       	sbrs	r28, 0
     df8:	05 c0       	rjmp	.+10     	; 0xe04 <_ZN13Configuration14writeSignatureEv+0x16>
     dfa:	6d ec       	ldi	r22, 0xCD	; 205
     dfc:	ce 01       	movw	r24, r28
     dfe:	0e 94 21 83 	call	0x10642	; 0x10642 <eeprom_update_byte>
     e02:	04 c0       	rjmp	.+8      	; 0xe0c <_ZN13Configuration14writeSignatureEv+0x1e>
     e04:	62 e3       	ldi	r22, 0x32	; 50
     e06:	ce 01       	movw	r24, r28
     e08:	0e 94 21 83 	call	0x10642	; 0x10642 <eeprom_update_byte>

void Configuration::writeSignature()    {

    uint8_t unique_id_invert = invertByte(EEPROM_UNIQUE_ID);

    for (int i=0; i<START_OFFSET; i++)
     e0c:	21 96       	adiw	r28, 0x01	; 1
     e0e:	c5 30       	cpi	r28, 0x05	; 5
     e10:	d1 05       	cpc	r29, r1
     e12:	89 f7       	brne	.-30     	; 0xdf6 <_ZN13Configuration14writeSignatureEv+0x8>
        (i%2) ? eeprom_update_byte((uint8_t*)i, unique_id_invert) : eeprom_update_byte((uint8_t*)i, EEPROM_UNIQUE_ID);

}
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	08 95       	ret

00000e1a <_ZN13ConfigurationC1Ev>:

Configuration::Configuration()    {
     e1a:	0f 93       	push	r16
     e1c:	1f 93       	push	r17
     e1e:	cf 93       	push	r28
     e20:	df 93       	push	r29
     e22:	8c 01       	movw	r16, r24
     e24:	0e 94 a9 42 	call	0x8552	; 0x8552 <_ZN3LCDC1Ev>
     e28:	e8 01       	movw	r28, r16
     e2a:	cf 57       	subi	r28, 0x7F	; 127
     e2c:	dc 4f       	sbci	r29, 0xFC	; 252
     e2e:	f8 01       	movw	r30, r16
     e30:	ef 53       	subi	r30, 0x3F	; 63
     e32:	fc 4f       	sbci	r31, 0xFC	; 252
     e34:	98 01       	movw	r18, r16
     e36:	2f 5b       	subi	r18, 0xBF	; 191
     e38:	3b 4f       	sbci	r19, 0xFB	; 251
     e3a:	d9 01       	movw	r26, r18

    //def const
    #ifdef ENABLE_ASYNC_UPDATE
    for (int i=0; i<EEPROM_UPDATE_BUFFER_SIZE; i++) {

        eeprom_update_bufer_param_type[i] = 0;
     e3c:	19 92       	st	Y+, r1
        eeprom_update_bufer_value[i] = 0;
     e3e:	11 92       	st	Z+, r1
     e40:	11 92       	st	Z+, r1
        eeprom_update_bufer_address[i] = 0;
     e42:	1d 92       	st	X+, r1
     e44:	1d 92       	st	X+, r1

Configuration::Configuration()    {

    //def const
    #ifdef ENABLE_ASYNC_UPDATE
    for (int i=0; i<EEPROM_UPDATE_BUFFER_SIZE; i++) {
     e46:	e2 17       	cp	r30, r18
     e48:	f3 07       	cpc	r31, r19
     e4a:	c1 f7       	brne	.-16     	; 0xe3c <_ZN13ConfigurationC1Ev+0x22>
        eeprom_update_bufer_value[i] = 0;
        eeprom_update_bufer_address[i] = 0;

    }

    eeprom_update_buffer_head = 0;
     e4c:	f8 01       	movw	r30, r16
     e4e:	ef 53       	subi	r30, 0x3F	; 63
     e50:	fb 4f       	sbci	r31, 0xFB	; 251
     e52:	10 82       	st	Z, r1
    eeprom_update_buffer_tail = 0;
     e54:	31 96       	adiw	r30, 0x01	; 1
     e56:	10 82       	st	Z, r1
    #endif

}
     e58:	df 91       	pop	r29
     e5a:	cf 91       	pop	r28
     e5c:	1f 91       	pop	r17
     e5e:	0f 91       	pop	r16
     e60:	08 95       	ret

00000e62 <_ZN13Configuration11clearEEPROMEv>:

    }

}

void Configuration::clearEEPROM()  {
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29

    for (int i=0; i<EEPROM_SIZE; i++) eeprom_update_byte((uint8_t*)i, 0xFF);
     e66:	c0 e0       	ldi	r28, 0x00	; 0
     e68:	d0 e0       	ldi	r29, 0x00	; 0
     e6a:	6f ef       	ldi	r22, 0xFF	; 255
     e6c:	ce 01       	movw	r24, r28
     e6e:	0e 94 21 83 	call	0x10642	; 0x10642 <eeprom_update_byte>
     e72:	21 96       	adiw	r28, 0x01	; 1
     e74:	c1 15       	cp	r28, r1
     e76:	80 e1       	ldi	r24, 0x10	; 16
     e78:	d8 07       	cpc	r29, r24
     e7a:	b9 f7       	brne	.-18     	; 0xe6a <_ZN13Configuration11clearEEPROMEv+0x8>

}
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	08 95       	ret

00000e82 <_ZN13Configuration22createSectionAddressesEv>:

void Configuration::createSectionAddresses()   {
     e82:	2f 92       	push	r2
     e84:	3f 92       	push	r3
     e86:	4f 92       	push	r4
     e88:	5f 92       	push	r5
     e8a:	6f 92       	push	r6
     e8c:	7f 92       	push	r7
     e8e:	8f 92       	push	r8
     e90:	9f 92       	push	r9
     e92:	af 92       	push	r10
     e94:	bf 92       	push	r11
     e96:	cf 92       	push	r12
     e98:	df 92       	push	r13
     e9a:	ef 92       	push	r14
     e9c:	ff 92       	push	r15
     e9e:	0f 93       	push	r16
     ea0:	1f 93       	push	r17
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	00 d0       	rcall	.+0      	; 0xea8 <_ZN13Configuration22createSectionAddressesEv+0x26>
     ea8:	00 d0       	rcall	.+0      	; 0xeaa <_ZN13Configuration22createSectionAddressesEv+0x28>
     eaa:	00 d0       	rcall	.+0      	; 0xeac <_ZN13Configuration22createSectionAddressesEv+0x2a>
     eac:	cd b7       	in	r28, 0x3d	; 61
     eae:	de b7       	in	r29, 0x3e	; 62
     eb0:	5c 01       	movw	r10, r24
     eb2:	8c 01       	movw	r16, r24
     eb4:	02 59       	subi	r16, 0x92	; 146
     eb6:	1d 4f       	sbci	r17, 0xFD	; 253
     eb8:	4c 01       	movw	r8, r24
     eba:	28 e6       	ldi	r18, 0x68	; 104
     ebc:	82 1a       	sub	r8, r18
     ebe:	2d ef       	ldi	r18, 0xFD	; 253
     ec0:	92 0a       	sbc	r9, r18

    for (int i=0; i<CONF_BLOCKS; i++)  {
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	70 e0       	ldi	r23, 0x00	; 0

        uint16_t memory_usage = 0;

        for (int j=0; j<blocks[i].sections; j++)    {
     ec6:	51 2c       	mov	r5, r1
     ec8:	41 2c       	mov	r4, r1
            }   else {

                switch(blocks[i].sectionParameterType[j-1])   {

                    case BIT_PARAMETER:
                    blocks[i].sectionAddress[j] = ((blocks[i].sectionParameters[j]%8 != 0) + blocks[i].sectionParameters[j-1]/8) + blocks[i].sectionAddress[j-1];
     eca:	33 24       	eor	r3, r3
     ecc:	33 94       	inc	r3
     ece:	21 2c       	mov	r2, r1
     ed0:	59 82       	std	Y+1, r5	; 0x01
     ed2:	4a 82       	std	Y+2, r4	; 0x02

        }

        uint8_t lastSection = blocks[i].sections-1;

        switch(blocks[i].sectionParameterType[lastSection]) {
     ed4:	0f 2e       	mov	r0, r31
     ed6:	f6 e3       	ldi	r31, 0x36	; 54
     ed8:	7f 2e       	mov	r7, r31
     eda:	f0 2d       	mov	r31, r0
            case BIT_PARAMETER:
            memory_usage = blocks[i].sectionAddress[lastSection]+((blocks[i].sectionParameters[lastSection]%8 != 0)+blocks[i].sectionParameters[lastSection]/8);
            break;

            case BYTE_PARAMETER:
            memory_usage = blocks[i].sectionAddress[lastSection]+blocks[i].sectionParameters[lastSection];
     edc:	0f 2e       	mov	r0, r31
     ede:	fb e1       	ldi	r31, 0x1B	; 27
     ee0:	6f 2e       	mov	r6, r31
     ee2:	f0 2d       	mov	r31, r0
     ee4:	68 01       	movw	r12, r16
     ee6:	dd c0       	rjmp	.+442    	; 0x10a2 <_ZN13Configuration22createSectionAddressesEv+0x220>

        uint16_t memory_usage = 0;

        for (int j=0; j<blocks[i].sections; j++)    {

            if (!j) {
     ee8:	00 97       	sbiw	r24, 0x00	; 0
     eea:	39 f4       	brne	.+14     	; 0xefa <_ZN13Configuration22createSectionAddressesEv+0x78>

                //first section address is always 0
                blocks[i].sectionAddress[0] = 0;
     eec:	ad 81       	ldd	r26, Y+5	; 0x05
     eee:	be 81       	ldd	r27, Y+6	; 0x06
     ef0:	14 96       	adiw	r26, 0x04	; 4
     ef2:	1c 92       	st	X, r1
     ef4:	1e 92       	st	-X, r1
     ef6:	13 97       	sbiw	r26, 0x03	; 3
     ef8:	3c c0       	rjmp	.+120    	; 0xf72 <_ZN13Configuration22createSectionAddressesEv+0xf0>

            }   else {

                switch(blocks[i].sectionParameterType[j-1])   {
     efa:	ab 81       	ldd	r26, Y+3	; 0x03
     efc:	bc 81       	ldd	r27, Y+4	; 0x04
     efe:	2c 91       	ld	r18, X
     f00:	21 30       	cpi	r18, 0x01	; 1
     f02:	21 f1       	breq	.+72     	; 0xf4c <_ZN13Configuration22createSectionAddressesEv+0xca>
     f04:	18 f0       	brcs	.+6      	; 0xf0c <_ZN13Configuration22createSectionAddressesEv+0x8a>
     f06:	22 30       	cpi	r18, 0x02	; 2
     f08:	51 f1       	breq	.+84     	; 0xf5e <_ZN13Configuration22createSectionAddressesEv+0xdc>
     f0a:	33 c0       	rjmp	.+102    	; 0xf72 <_ZN13Configuration22createSectionAddressesEv+0xf0>
     f0c:	7f 01       	movw	r14, r30

                    case BIT_PARAMETER:
                    blocks[i].sectionAddress[j] = ((blocks[i].sectionParameters[j]%8 != 0) + blocks[i].sectionParameters[j-1]/8) + blocks[i].sectionAddress[j-1];
     f0e:	24 89       	ldd	r18, Z+20	; 0x14
     f10:	35 89       	ldd	r19, Z+21	; 0x15
     f12:	36 95       	lsr	r19
     f14:	27 95       	ror	r18
     f16:	36 95       	lsr	r19
     f18:	27 95       	ror	r18
     f1a:	36 95       	lsr	r19
     f1c:	27 95       	ror	r18
     f1e:	40 81       	ld	r20, Z
     f20:	51 81       	ldd	r21, Z+1	; 0x01
     f22:	89 01       	movw	r16, r18
     f24:	04 0f       	add	r16, r20
     f26:	15 1f       	adc	r17, r21
     f28:	46 89       	ldd	r20, Z+22	; 0x16
     f2a:	57 89       	ldd	r21, Z+23	; 0x17
     f2c:	47 70       	andi	r20, 0x07	; 7
     f2e:	55 27       	eor	r21, r21
     f30:	23 2d       	mov	r18, r3
     f32:	32 2d       	mov	r19, r2
     f34:	45 2b       	or	r20, r21
     f36:	11 f4       	brne	.+4      	; 0xf3c <_ZN13Configuration22createSectionAddressesEv+0xba>
     f38:	29 81       	ldd	r18, Y+1	; 0x01
     f3a:	3a 81       	ldd	r19, Y+2	; 0x02
     f3c:	20 0f       	add	r18, r16
     f3e:	31 1f       	adc	r19, r17
     f40:	d7 01       	movw	r26, r14
     f42:	13 96       	adiw	r26, 0x03	; 3
     f44:	3c 93       	st	X, r19
     f46:	2e 93       	st	-X, r18
     f48:	12 97       	sbiw	r26, 0x02	; 2
                    break;
     f4a:	13 c0       	rjmp	.+38     	; 0xf72 <_ZN13Configuration22createSectionAddressesEv+0xf0>

                    case BYTE_PARAMETER:
                    blocks[i].sectionAddress[j] = blocks[i].sectionParameters[j-1] + blocks[i].sectionAddress[j-1];
     f4c:	40 81       	ld	r20, Z
     f4e:	51 81       	ldd	r21, Z+1	; 0x01
     f50:	24 89       	ldd	r18, Z+20	; 0x14
     f52:	35 89       	ldd	r19, Z+21	; 0x15
     f54:	24 0f       	add	r18, r20
     f56:	35 1f       	adc	r19, r21
     f58:	33 83       	std	Z+3, r19	; 0x03
     f5a:	22 83       	std	Z+2, r18	; 0x02
                    break;
     f5c:	0a c0       	rjmp	.+20     	; 0xf72 <_ZN13Configuration22createSectionAddressesEv+0xf0>

                    case WORD_PARAMETER:
                    blocks[i].sectionAddress[j] = 2*blocks[i].sectionParameters[j-1] + blocks[i].sectionAddress[j-1];
     f5e:	44 89       	ldd	r20, Z+20	; 0x14
     f60:	55 89       	ldd	r21, Z+21	; 0x15
     f62:	44 0f       	add	r20, r20
     f64:	55 1f       	adc	r21, r21
     f66:	20 81       	ld	r18, Z
     f68:	31 81       	ldd	r19, Z+1	; 0x01
     f6a:	24 0f       	add	r18, r20
     f6c:	35 1f       	adc	r19, r21
     f6e:	33 83       	std	Z+3, r19	; 0x03
     f70:	22 83       	std	Z+2, r18	; 0x02

    for (int i=0; i<CONF_BLOCKS; i++)  {

        uint16_t memory_usage = 0;

        for (int j=0; j<blocks[i].sections; j++)    {
     f72:	01 96       	adiw	r24, 0x01	; 1
     f74:	ad 81       	ldd	r26, Y+5	; 0x05
     f76:	be 81       	ldd	r27, Y+6	; 0x06
     f78:	4c 91       	ld	r20, X
     f7a:	2b 81       	ldd	r18, Y+3	; 0x03
     f7c:	3c 81       	ldd	r19, Y+4	; 0x04
     f7e:	2f 5f       	subi	r18, 0xFF	; 255
     f80:	3f 4f       	sbci	r19, 0xFF	; 255
     f82:	3c 83       	std	Y+4, r19	; 0x04
     f84:	2b 83       	std	Y+3, r18	; 0x03
     f86:	32 96       	adiw	r30, 0x02	; 2
     f88:	24 2f       	mov	r18, r20
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	82 17       	cp	r24, r18
     f8e:	93 07       	cpc	r25, r19
     f90:	0c f4       	brge	.+2      	; 0xf94 <_ZN13Configuration22createSectionAddressesEv+0x112>
     f92:	aa cf       	rjmp	.-172    	; 0xee8 <_ZN13Configuration22createSectionAddressesEv+0x66>
     f94:	8d 01       	movw	r16, r26

            }

        }

        uint8_t lastSection = blocks[i].sections-1;
     f96:	41 50       	subi	r20, 0x01	; 1

        switch(blocks[i].sectionParameterType[lastSection]) {
     f98:	84 2f       	mov	r24, r20
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	76 9e       	mul	r7, r22
     f9e:	f0 01       	movw	r30, r0
     fa0:	77 9e       	mul	r7, r23
     fa2:	f0 0d       	add	r31, r0
     fa4:	11 24       	eor	r1, r1
     fa6:	ea 0d       	add	r30, r10
     fa8:	fb 1d       	adc	r31, r11
     faa:	e8 0f       	add	r30, r24
     fac:	f9 1f       	adc	r31, r25
     fae:	e7 56       	subi	r30, 0x67	; 103
     fb0:	fd 4f       	sbci	r31, 0xFD	; 253
     fb2:	20 81       	ld	r18, Z
     fb4:	21 30       	cpi	r18, 0x01	; 1
     fb6:	61 f1       	breq	.+88     	; 0x1010 <_ZN13Configuration22createSectionAddressesEv+0x18e>
     fb8:	20 f0       	brcs	.+8      	; 0xfc2 <_ZN13Configuration22createSectionAddressesEv+0x140>
     fba:	22 30       	cpi	r18, 0x02	; 2
     fbc:	09 f4       	brne	.+2      	; 0xfc0 <_ZN13Configuration22createSectionAddressesEv+0x13e>
     fbe:	3f c0       	rjmp	.+126    	; 0x103e <_ZN13Configuration22createSectionAddressesEv+0x1bc>
     fc0:	56 c0       	rjmp	.+172    	; 0x106e <_ZN13Configuration22createSectionAddressesEv+0x1ec>

            case BIT_PARAMETER:
            memory_usage = blocks[i].sectionAddress[lastSection]+((blocks[i].sectionParameters[lastSection]%8 != 0)+blocks[i].sectionParameters[lastSection]/8);
     fc2:	66 9e       	mul	r6, r22
     fc4:	90 01       	movw	r18, r0
     fc6:	67 9e       	mul	r6, r23
     fc8:	30 0d       	add	r19, r0
     fca:	11 24       	eor	r1, r1
     fcc:	28 0f       	add	r18, r24
     fce:	39 1f       	adc	r19, r25
     fd0:	22 0f       	add	r18, r18
     fd2:	33 1f       	adc	r19, r19
     fd4:	2a 0d       	add	r18, r10
     fd6:	3b 1d       	adc	r19, r11
     fd8:	f9 01       	movw	r30, r18
     fda:	eb 57       	subi	r30, 0x7B	; 123
     fdc:	fd 4f       	sbci	r31, 0xFD	; 253
     fde:	40 81       	ld	r20, Z
     fe0:	51 81       	ldd	r21, Z+1	; 0x01
     fe2:	ca 01       	movw	r24, r20
     fe4:	96 95       	lsr	r25
     fe6:	87 95       	ror	r24
     fe8:	96 95       	lsr	r25
     fea:	87 95       	ror	r24
     fec:	96 95       	lsr	r25
     fee:	87 95       	ror	r24
     ff0:	74 97       	sbiw	r30, 0x14	; 20
     ff2:	20 81       	ld	r18, Z
     ff4:	31 81       	ldd	r19, Z+1	; 0x01
     ff6:	28 0f       	add	r18, r24
     ff8:	39 1f       	adc	r19, r25
     ffa:	47 70       	andi	r20, 0x07	; 7
     ffc:	55 27       	eor	r21, r21
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	45 2b       	or	r20, r21
    1004:	11 f4       	brne	.+4      	; 0x100a <_ZN13Configuration22createSectionAddressesEv+0x188>
    1006:	85 2d       	mov	r24, r5
    1008:	94 2d       	mov	r25, r4
    100a:	82 0f       	add	r24, r18
    100c:	93 1f       	adc	r25, r19
            break;
    100e:	31 c0       	rjmp	.+98     	; 0x1072 <_ZN13Configuration22createSectionAddressesEv+0x1f0>

            case BYTE_PARAMETER:
            memory_usage = blocks[i].sectionAddress[lastSection]+blocks[i].sectionParameters[lastSection];
    1010:	66 9e       	mul	r6, r22
    1012:	f0 01       	movw	r30, r0
    1014:	67 9e       	mul	r6, r23
    1016:	f0 0d       	add	r31, r0
    1018:	11 24       	eor	r1, r1
    101a:	e8 0f       	add	r30, r24
    101c:	f9 1f       	adc	r31, r25
    101e:	ee 0f       	add	r30, r30
    1020:	ff 1f       	adc	r31, r31
    1022:	ea 0d       	add	r30, r10
    1024:	fb 1d       	adc	r31, r11
    1026:	df 01       	movw	r26, r30
    1028:	ab 57       	subi	r26, 0x7B	; 123
    102a:	bd 4f       	sbci	r27, 0xFD	; 253
    102c:	ef 58       	subi	r30, 0x8F	; 143
    102e:	fd 4f       	sbci	r31, 0xFD	; 253
    1030:	2d 91       	ld	r18, X+
    1032:	3c 91       	ld	r19, X
    1034:	80 81       	ld	r24, Z
    1036:	91 81       	ldd	r25, Z+1	; 0x01
    1038:	82 0f       	add	r24, r18
    103a:	93 1f       	adc	r25, r19
            break;
    103c:	1a c0       	rjmp	.+52     	; 0x1072 <_ZN13Configuration22createSectionAddressesEv+0x1f0>

            case WORD_PARAMETER:
            memory_usage = blocks[i].sectionAddress[lastSection]+2*blocks[i].sectionParameters[lastSection];
    103e:	66 9e       	mul	r6, r22
    1040:	a0 01       	movw	r20, r0
    1042:	67 9e       	mul	r6, r23
    1044:	50 0d       	add	r21, r0
    1046:	11 24       	eor	r1, r1
    1048:	48 0f       	add	r20, r24
    104a:	59 1f       	adc	r21, r25
    104c:	44 0f       	add	r20, r20
    104e:	55 1f       	adc	r21, r21
    1050:	4a 0d       	add	r20, r10
    1052:	5b 1d       	adc	r21, r11
    1054:	fa 01       	movw	r30, r20
    1056:	eb 57       	subi	r30, 0x7B	; 123
    1058:	fd 4f       	sbci	r31, 0xFD	; 253
    105a:	80 81       	ld	r24, Z
    105c:	91 81       	ldd	r25, Z+1	; 0x01
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	74 97       	sbiw	r30, 0x14	; 20
    1064:	20 81       	ld	r18, Z
    1066:	31 81       	ldd	r19, Z+1	; 0x01
    1068:	82 0f       	add	r24, r18
    106a:	93 1f       	adc	r25, r19
            break;
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <_ZN13Configuration22createSectionAddressesEv+0x1f0>

void Configuration::createSectionAddresses()   {

    for (int i=0; i<CONF_BLOCKS; i++)  {

        uint16_t memory_usage = 0;
    106e:	85 2d       	mov	r24, r5
    1070:	94 2d       	mov	r25, r4
            memory_usage = blocks[i].sectionAddress[lastSection]+2*blocks[i].sectionParameters[lastSection];
            break;

        }

        if (i < CONF_BLOCKS-1) {
    1072:	64 30       	cpi	r22, 0x04	; 4
    1074:	71 05       	cpc	r23, r1
    1076:	54 f4       	brge	.+20     	; 0x108c <_ZN13Configuration22createSectionAddressesEv+0x20a>

            blocks[i+1].blockStartAddress = blocks[i].blockStartAddress + memory_usage;
    1078:	d8 01       	movw	r26, r16
    107a:	11 96       	adiw	r26, 0x01	; 1
    107c:	2d 91       	ld	r18, X+
    107e:	3c 91       	ld	r19, X
    1080:	12 97       	sbiw	r26, 0x02	; 2
    1082:	82 0f       	add	r24, r18
    1084:	93 1f       	adc	r25, r19
    1086:	f4 01       	movw	r30, r8
    1088:	96 87       	std	Z+14, r25	; 0x0e
    108a:	85 87       	std	Z+13, r24	; 0x0d

}

void Configuration::createSectionAddresses()   {

    for (int i=0; i<CONF_BLOCKS; i++)  {
    108c:	6f 5f       	subi	r22, 0xFF	; 255
    108e:	7f 4f       	sbci	r23, 0xFF	; 255
    1090:	f6 e3       	ldi	r31, 0x36	; 54
    1092:	cf 0e       	add	r12, r31
    1094:	d1 1c       	adc	r13, r1
    1096:	26 e3       	ldi	r18, 0x36	; 54
    1098:	82 0e       	add	r8, r18
    109a:	91 1c       	adc	r9, r1
    109c:	65 30       	cpi	r22, 0x05	; 5
    109e:	71 05       	cpc	r23, r1
    10a0:	79 f0       	breq	.+30     	; 0x10c0 <_ZN13Configuration22createSectionAddressesEv+0x23e>
    10a2:	86 01       	movw	r16, r12

        uint16_t memory_usage = 0;

        for (int j=0; j<blocks[i].sections; j++)    {
    10a4:	d6 01       	movw	r26, r12
    10a6:	4c 91       	ld	r20, X
    10a8:	44 23       	and	r20, r20
    10aa:	09 f4       	brne	.+2      	; 0x10ae <_ZN13Configuration22createSectionAddressesEv+0x22c>
    10ac:	74 cf       	rjmp	.-280    	; 0xf96 <_ZN13Configuration22createSectionAddressesEv+0x114>
    10ae:	f6 01       	movw	r30, r12
    10b0:	31 96       	adiw	r30, 0x01	; 1
    10b2:	85 2d       	mov	r24, r5
    10b4:	94 2d       	mov	r25, r4
    10b6:	9c 82       	std	Y+4, r9	; 0x04
    10b8:	8b 82       	std	Y+3, r8	; 0x03
    10ba:	de 82       	std	Y+6, r13	; 0x06
    10bc:	cd 82       	std	Y+5, r12	; 0x05
    10be:	14 cf       	rjmp	.-472    	; 0xee8 <_ZN13Configuration22createSectionAddressesEv+0x66>

        }

    }

}
    10c0:	26 96       	adiw	r28, 0x06	; 6
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	f8 94       	cli
    10c6:	de bf       	out	0x3e, r29	; 62
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	cd bf       	out	0x3d, r28	; 61
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	1f 91       	pop	r17
    10d2:	0f 91       	pop	r16
    10d4:	ff 90       	pop	r15
    10d6:	ef 90       	pop	r14
    10d8:	df 90       	pop	r13
    10da:	cf 90       	pop	r12
    10dc:	bf 90       	pop	r11
    10de:	af 90       	pop	r10
    10e0:	9f 90       	pop	r9
    10e2:	8f 90       	pop	r8
    10e4:	7f 90       	pop	r7
    10e6:	6f 90       	pop	r6
    10e8:	5f 90       	pop	r5
    10ea:	4f 90       	pop	r4
    10ec:	3f 90       	pop	r3
    10ee:	2f 90       	pop	r2
    10f0:	08 95       	ret

000010f2 <_ZN13Configuration19initProgramSettingsEb>:
    initPadCalibration(partialReset);
    initMIDIsettings(partialReset);

}

void Configuration::initProgramSettings(bool partialReset) {
    10f2:	2f 92       	push	r2
    10f4:	3f 92       	push	r3
    10f6:	4f 92       	push	r4
    10f8:	5f 92       	push	r5
    10fa:	6f 92       	push	r6
    10fc:	7f 92       	push	r7
    10fe:	8f 92       	push	r8
    1100:	9f 92       	push	r9
    1102:	af 92       	push	r10
    1104:	bf 92       	push	r11
    1106:	cf 92       	push	r12
    1108:	df 92       	push	r13
    110a:	ef 92       	push	r14
    110c:	ff 92       	push	r15
    110e:	0f 93       	push	r16
    1110:	1f 93       	push	r17
    1112:	cf 93       	push	r28
    1114:	df 93       	push	r29
    1116:	00 d0       	rcall	.+0      	; 0x1118 <_ZN13Configuration19initProgramSettingsEb+0x26>
    1118:	00 d0       	rcall	.+0      	; 0x111a <_ZN13Configuration19initProgramSettingsEb+0x28>
    111a:	00 d0       	rcall	.+0      	; 0x111c <_ZN13Configuration19initProgramSettingsEb+0x2a>
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62

    if (partialReset && blocks[CONF_BLOCK_PROGRAM].preserveOnPartialReset) return;
    1120:	66 23       	and	r22, r22
    1122:	31 f0       	breq	.+12     	; 0x1130 <_ZN13Configuration19initProgramSettingsEb+0x3e>
    1124:	fc 01       	movw	r30, r24
    1126:	ed 55       	subi	r30, 0x5D	; 93
    1128:	fd 4f       	sbci	r31, 0xFD	; 253
    112a:	20 81       	ld	r18, Z
    112c:	21 11       	cpse	r18, r1
    112e:	c6 c0       	rjmp	.+396    	; 0x12bc <_ZN13Configuration19initProgramSettingsEb+0x1ca>
    1130:	9c 83       	std	Y+4, r25	; 0x04
    1132:	8b 83       	std	Y+3, r24	; 0x03
        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;

    };
    inline uint16_t getBlockAddress(uint8_t blockID)   {

        return blocks[blockID].blockStartAddress+START_OFFSET;
    1134:	fc 01       	movw	r30, r24
    1136:	e1 59       	subi	r30, 0x91	; 145
    1138:	fd 4f       	sbci	r31, 0xFD	; 253
    113a:	40 80       	ld	r4, Z
    113c:	51 80       	ldd	r5, Z+1	; 0x01
    113e:	85 e0       	ldi	r24, 0x05	; 5
    1140:	48 0e       	add	r4, r24
    1142:	51 1c       	adc	r5, r1

    uint16_t blockStartAddress = getBlockAddress(CONF_BLOCK_PROGRAM);

    uint16_t parameterAddress = blocks[CONF_BLOCK_PROGRAM].sectionAddress[programLastActiveProgramSection] + blockStartAddress;
    1144:	eb 81       	ldd	r30, Y+3	; 0x03
    1146:	fc 81       	ldd	r31, Y+4	; 0x04
    1148:	ef 58       	subi	r30, 0x8F	; 143
    114a:	fd 4f       	sbci	r31, 0xFD	; 253
    114c:	80 81       	ld	r24, Z
    114e:	91 81       	ldd	r25, Z+1	; 0x01

    //init default active program
    eeprom_update_byte((uint8_t*)parameterAddress, DEFAULT_ACTIVE_PROGRAM);
    1150:	60 e0       	ldi	r22, 0x00	; 0
    1152:	84 0d       	add	r24, r4
    1154:	95 1d       	adc	r25, r5
    1156:	0e 94 21 83 	call	0x10642	; 0x10642 <eeprom_update_byte>

    parameterAddress = blocks[CONF_BLOCK_PROGRAM].sectionAddress[programLastActiveScaleSection] + blockStartAddress;
    115a:	eb 81       	ldd	r30, Y+3	; 0x03
    115c:	fc 81       	ldd	r31, Y+4	; 0x04
    115e:	ed 58       	subi	r30, 0x8D	; 141
    1160:	fd 4f       	sbci	r31, 0xFD	; 253
    1162:	e0 80       	ld	r14, Z
    1164:	f1 80       	ldd	r15, Z+1	; 0x01
    1166:	e4 0c       	add	r14, r4
    1168:	f5 1c       	adc	r15, r5
    116a:	87 01       	movw	r16, r14
    116c:	06 5f       	subi	r16, 0xF6	; 246
    116e:	1f 4f       	sbci	r17, 0xFF	; 255

    //init default active scales for programs
    for (int i=0; i<NUMBER_OF_PROGRAMS; i++)
        eeprom_update_byte((uint8_t*)parameterAddress+i, DEFAULT_ACTIVE_SCALE);
    1170:	60 e0       	ldi	r22, 0x00	; 0
    1172:	c7 01       	movw	r24, r14
    1174:	0e 94 21 83 	call	0x10642	; 0x10642 <eeprom_update_byte>
    1178:	9f ef       	ldi	r25, 0xFF	; 255
    117a:	e9 1a       	sub	r14, r25
    117c:	f9 0a       	sbc	r15, r25
    eeprom_update_byte((uint8_t*)parameterAddress, DEFAULT_ACTIVE_PROGRAM);

    parameterAddress = blocks[CONF_BLOCK_PROGRAM].sectionAddress[programLastActiveScaleSection] + blockStartAddress;

    //init default active scales for programs
    for (int i=0; i<NUMBER_OF_PROGRAMS; i++)
    117e:	e0 16       	cp	r14, r16
    1180:	f1 06       	cpc	r15, r17
    1182:	b1 f7       	brne	.-20     	; 0x1170 <_ZN13Configuration19initProgramSettingsEb+0x7e>
    1184:	e1 2c       	mov	r14, r1
    1186:	f1 2c       	mov	r15, r1
        eeprom_update_byte((uint8_t*)parameterAddress+i, DEFAULT_ACTIVE_SCALE);

    //init global settings for all programs
    for (int i=0; i<NUMBER_OF_PROGRAMS; i++)    {

        parameterAddress = blockStartAddress + blocks[CONF_BLOCK_PROGRAM].sectionAddress[programGlobalSettingsSection] + (i*GLOBAL_PROGRAM_SETTINGS);
    1188:	cb 80       	ldd	r12, Y+3	; 0x03
    118a:	dc 80       	ldd	r13, Y+4	; 0x04
    118c:	ab e8       	ldi	r26, 0x8B	; 139
    118e:	ca 1a       	sub	r12, r26
    1190:	ad ef       	ldi	r26, 0xFD	; 253
    1192:	da 0a       	sbc	r13, r26
    1194:	0f 2e       	mov	r0, r31
    1196:	f2 e9       	ldi	r31, 0x92	; 146
    1198:	8f 2e       	mov	r8, r31
    119a:	f1 e0       	ldi	r31, 0x01	; 1
    119c:	9f 2e       	mov	r9, r31
    119e:	f0 2d       	mov	r31, r0
    11a0:	05 ea       	ldi	r16, 0xA5	; 165
    11a2:	11 e0       	ldi	r17, 0x01	; 1
    11a4:	54 01       	movw	r10, r8
    11a6:	a0 94       	com	r10
    11a8:	b0 94       	com	r11
    11aa:	f6 01       	movw	r30, r12
    11ac:	20 80       	ld	r2, Z
    11ae:	31 80       	ldd	r3, Z+1	; 0x01
    11b0:	24 0c       	add	r2, r4
    11b2:	35 1c       	adc	r3, r5
    11b4:	2e 0c       	add	r2, r14
    11b6:	3f 1c       	adc	r3, r15
    11b8:	34 01       	movw	r6, r8
    11ba:	2a 0c       	add	r2, r10
    11bc:	3b 1c       	adc	r3, r11

        for (int j=0; j<GLOBAL_PROGRAM_SETTINGS; j++)
            eeprom_update_byte((uint8_t*)parameterAddress+j, defaultGlobalProgramSettingArray[j]);
    11be:	d3 01       	movw	r26, r6
    11c0:	6d 91       	ld	r22, X+
    11c2:	3d 01       	movw	r6, r26
    11c4:	c1 01       	movw	r24, r2
    11c6:	8a 0f       	add	r24, r26
    11c8:	9b 1f       	adc	r25, r27
    11ca:	0e 94 21 83 	call	0x10642	; 0x10642 <eeprom_update_byte>
    //init global settings for all programs
    for (int i=0; i<NUMBER_OF_PROGRAMS; i++)    {

        parameterAddress = blockStartAddress + blocks[CONF_BLOCK_PROGRAM].sectionAddress[programGlobalSettingsSection] + (i*GLOBAL_PROGRAM_SETTINGS);

        for (int j=0; j<GLOBAL_PROGRAM_SETTINGS; j++)
    11ce:	60 16       	cp	r6, r16
    11d0:	71 06       	cpc	r7, r17
    11d2:	a9 f7       	brne	.-22     	; 0x11be <_ZN13Configuration19initProgramSettingsEb+0xcc>
    11d4:	b3 e1       	ldi	r27, 0x13	; 19
    11d6:	eb 0e       	add	r14, r27
    11d8:	f1 1c       	adc	r15, r1
    //init default active scales for programs
    for (int i=0; i<NUMBER_OF_PROGRAMS; i++)
        eeprom_update_byte((uint8_t*)parameterAddress+i, DEFAULT_ACTIVE_SCALE);

    //init global settings for all programs
    for (int i=0; i<NUMBER_OF_PROGRAMS; i++)    {
    11da:	ee eb       	ldi	r30, 0xBE	; 190
    11dc:	ee 16       	cp	r14, r30
    11de:	f1 04       	cpc	r15, r1
    11e0:	21 f7       	brne	.-56     	; 0x11aa <_ZN13Configuration19initProgramSettingsEb+0xb8>
    11e2:	61 2c       	mov	r6, r1
    11e4:	71 2c       	mov	r7, r1
    }

    //init local settings for all programs
    for (int i=0; i<NUMBER_OF_PROGRAMS; i++)    {

        parameterAddress = blockStartAddress + blocks[CONF_BLOCK_PROGRAM].sectionAddress[programLocalSettingsSection] + ((LOCAL_PROGRAM_SETTINGS*MAX_PADS)*i);
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ea:	89 58       	subi	r24, 0x89	; 137
    11ec:	9d 4f       	sbci	r25, 0xFD	; 253
    11ee:	9a 83       	std	Y+2, r25	; 0x02
    11f0:	89 83       	std	Y+1, r24	; 0x01
    11f2:	85 e8       	ldi	r24, 0x85	; 133
    11f4:	91 e0       	ldi	r25, 0x01	; 1
    11f6:	02 e9       	ldi	r16, 0x92	; 146
    11f8:	11 e0       	ldi	r17, 0x01	; 1
    11fa:	5c 01       	movw	r10, r24
    11fc:	a0 94       	com	r10
    11fe:	b0 94       	com	r11
    1200:	28 2e       	mov	r2, r24
    1202:	39 2e       	mov	r3, r25
    1204:	a9 81       	ldd	r26, Y+1	; 0x01
    1206:	ba 81       	ldd	r27, Y+2	; 0x02
    1208:	ed 90       	ld	r14, X+
    120a:	fc 90       	ld	r15, X
    120c:	e4 0c       	add	r14, r4
    120e:	f5 1c       	adc	r15, r5
    1210:	e6 0c       	add	r14, r6
    1212:	f7 1c       	adc	r15, r7
    1214:	67 01       	movw	r12, r14
    1216:	b5 e7       	ldi	r27, 0x75	; 117
    1218:	cb 0e       	add	r12, r27
    121a:	d1 1c       	adc	r13, r1
    121c:	12 c0       	rjmp	.+36     	; 0x1242 <_ZN13Configuration19initProgramSettingsEb+0x150>

        for (int j=0; j<MAX_PADS; j++)    {

            for (int k=0; k<LOCAL_PROGRAM_SETTINGS; k++)    {

                eeprom_update_byte((uint8_t*)parameterAddress+k+(LOCAL_PROGRAM_SETTINGS*j), defaultLocalProgramSettingArray[k]);
    121e:	f4 01       	movw	r30, r8
    1220:	61 91       	ld	r22, Z+
    1222:	4f 01       	movw	r8, r30
    1224:	8d 81       	ldd	r24, Y+5	; 0x05
    1226:	9e 81       	ldd	r25, Y+6	; 0x06
    1228:	8e 0f       	add	r24, r30
    122a:	9f 1f       	adc	r25, r31
    122c:	0e 94 21 83 	call	0x10642	; 0x10642 <eeprom_update_byte>

        parameterAddress = blockStartAddress + blocks[CONF_BLOCK_PROGRAM].sectionAddress[programLocalSettingsSection] + ((LOCAL_PROGRAM_SETTINGS*MAX_PADS)*i);

        for (int j=0; j<MAX_PADS; j++)    {

            for (int k=0; k<LOCAL_PROGRAM_SETTINGS; k++)    {
    1230:	80 16       	cp	r8, r16
    1232:	91 06       	cpc	r9, r17
    1234:	a1 f7       	brne	.-24     	; 0x121e <_ZN13Configuration19initProgramSettingsEb+0x12c>
    1236:	fd e0       	ldi	r31, 0x0D	; 13
    1238:	ef 0e       	add	r14, r31
    123a:	f1 1c       	adc	r15, r1
    //init local settings for all programs
    for (int i=0; i<NUMBER_OF_PROGRAMS; i++)    {

        parameterAddress = blockStartAddress + blocks[CONF_BLOCK_PROGRAM].sectionAddress[programLocalSettingsSection] + ((LOCAL_PROGRAM_SETTINGS*MAX_PADS)*i);

        for (int j=0; j<MAX_PADS; j++)    {
    123c:	ec 14       	cp	r14, r12
    123e:	fd 04       	cpc	r15, r13
    1240:	41 f0       	breq	.+16     	; 0x1252 <_ZN13Configuration19initProgramSettingsEb+0x160>
    1242:	82 2c       	mov	r8, r2
    1244:	93 2c       	mov	r9, r3
    1246:	c5 01       	movw	r24, r10
    1248:	8e 0d       	add	r24, r14
    124a:	9f 1d       	adc	r25, r15
    124c:	9e 83       	std	Y+6, r25	; 0x06
    124e:	8d 83       	std	Y+5, r24	; 0x05
    1250:	e6 cf       	rjmp	.-52     	; 0x121e <_ZN13Configuration19initProgramSettingsEb+0x12c>
    1252:	95 e7       	ldi	r25, 0x75	; 117
    1254:	69 0e       	add	r6, r25
    1256:	71 1c       	adc	r7, r1
            eeprom_update_byte((uint8_t*)parameterAddress+j, defaultGlobalProgramSettingArray[j]);

    }

    //init local settings for all programs
    for (int i=0; i<NUMBER_OF_PROGRAMS; i++)    {
    1258:	a2 e9       	ldi	r26, 0x92	; 146
    125a:	6a 16       	cp	r6, r26
    125c:	a4 e0       	ldi	r26, 0x04	; 4
    125e:	7a 06       	cpc	r7, r26
    1260:	89 f6       	brne	.-94     	; 0x1204 <_ZN13Configuration19initProgramSettingsEb+0x112>
    1262:	e1 2c       	mov	r14, r1
    1264:	f1 2c       	mov	r15, r1
    }

    //init predefined scale settings
    for (int i=0; i<NUMBER_OF_PROGRAMS; i++) {

        parameterAddress = blocks[CONF_BLOCK_PROGRAM].sectionAddress[programScalePredefinedSection] + ((NUMBER_OF_PREDEFINED_SCALES*PREDEFINED_SCALE_PARAMETERS)*i) + blockStartAddress;
    1266:	cb 80       	ldd	r12, Y+3	; 0x03
    1268:	dc 80       	ldd	r13, Y+4	; 0x04
    126a:	b7 e8       	ldi	r27, 0x87	; 135
    126c:	cb 1a       	sub	r12, r27
    126e:	bd ef       	ldi	r27, 0xFD	; 253
    1270:	db 0a       	sbc	r13, r27
    1272:	f6 01       	movw	r30, r12
    1274:	a0 80       	ld	r10, Z
    1276:	b1 80       	ldd	r11, Z+1	; 0x01
    1278:	a4 0c       	add	r10, r4
    127a:	b5 1c       	adc	r11, r5
    127c:	ae 0c       	add	r10, r14
    127e:	bf 1c       	adc	r11, r15
    1280:	85 01       	movw	r16, r10
    1282:	0b 5e       	subi	r16, 0xEB	; 235
    1284:	1f 4f       	sbci	r17, 0xFF	; 255

        for (int j=0; j<NUMBER_OF_PREDEFINED_SCALES; j++)  {

            for (int k=0; k<PREDEFINED_SCALE_PARAMETERS; k++)   {

                eeprom_update_byte((uint8_t*)parameterAddress+k+(PREDEFINED_SCALE_PARAMETERS*j), defaultPredefinedScaleParametersArray[k]);
    1286:	64 e0       	ldi	r22, 0x04	; 4
    1288:	c5 01       	movw	r24, r10
    128a:	0e 94 21 83 	call	0x10642	; 0x10642 <eeprom_update_byte>
    128e:	60 e0       	ldi	r22, 0x00	; 0
    1290:	c5 01       	movw	r24, r10
    1292:	01 96       	adiw	r24, 0x01	; 1
    1294:	0e 94 21 83 	call	0x10642	; 0x10642 <eeprom_update_byte>
    1298:	60 e0       	ldi	r22, 0x00	; 0
    129a:	c5 01       	movw	r24, r10
    129c:	02 96       	adiw	r24, 0x02	; 2
    129e:	0e 94 21 83 	call	0x10642	; 0x10642 <eeprom_update_byte>
    12a2:	f3 e0       	ldi	r31, 0x03	; 3
    12a4:	af 0e       	add	r10, r31
    12a6:	b1 1c       	adc	r11, r1
    //init predefined scale settings
    for (int i=0; i<NUMBER_OF_PROGRAMS; i++) {

        parameterAddress = blocks[CONF_BLOCK_PROGRAM].sectionAddress[programScalePredefinedSection] + ((NUMBER_OF_PREDEFINED_SCALES*PREDEFINED_SCALE_PARAMETERS)*i) + blockStartAddress;

        for (int j=0; j<NUMBER_OF_PREDEFINED_SCALES; j++)  {
    12a8:	a0 16       	cp	r10, r16
    12aa:	b1 06       	cpc	r11, r17
    12ac:	61 f7       	brne	.-40     	; 0x1286 <_ZN13Configuration19initProgramSettingsEb+0x194>
    12ae:	85 e1       	ldi	r24, 0x15	; 21
    12b0:	e8 0e       	add	r14, r24
    12b2:	f1 1c       	adc	r15, r1
        }

    }

    //init predefined scale settings
    for (int i=0; i<NUMBER_OF_PROGRAMS; i++) {
    12b4:	92 ed       	ldi	r25, 0xD2	; 210
    12b6:	e9 16       	cp	r14, r25
    12b8:	f1 04       	cpc	r15, r1
    12ba:	d9 f6       	brne	.-74     	; 0x1272 <_ZN13Configuration19initProgramSettingsEb+0x180>

        }

    }

}
    12bc:	26 96       	adiw	r28, 0x06	; 6
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	f8 94       	cli
    12c2:	de bf       	out	0x3e, r29	; 62
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	cd bf       	out	0x3d, r28	; 61
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	1f 91       	pop	r17
    12ce:	0f 91       	pop	r16
    12d0:	ff 90       	pop	r15
    12d2:	ef 90       	pop	r14
    12d4:	df 90       	pop	r13
    12d6:	cf 90       	pop	r12
    12d8:	bf 90       	pop	r11
    12da:	af 90       	pop	r10
    12dc:	9f 90       	pop	r9
    12de:	8f 90       	pop	r8
    12e0:	7f 90       	pop	r7
    12e2:	6f 90       	pop	r6
    12e4:	5f 90       	pop	r5
    12e6:	4f 90       	pop	r4
    12e8:	3f 90       	pop	r3
    12ea:	2f 90       	pop	r2
    12ec:	08 95       	ret

000012ee <_ZN13Configuration14initUserScalesEb>:

void Configuration::initUserScales(bool partialReset)   {
    12ee:	2f 92       	push	r2
    12f0:	3f 92       	push	r3
    12f2:	4f 92       	push	r4
    12f4:	5f 92       	push	r5
    12f6:	6f 92       	push	r6
    12f8:	7f 92       	push	r7
    12fa:	8f 92       	push	r8
    12fc:	9f 92       	push	r9
    12fe:	af 92       	push	r10
    1300:	bf 92       	push	r11
    1302:	cf 92       	push	r12
    1304:	df 92       	push	r13
    1306:	ef 92       	push	r14
    1308:	ff 92       	push	r15
    130a:	0f 93       	push	r16
    130c:	1f 93       	push	r17
    130e:	cf 93       	push	r28
    1310:	df 93       	push	r29

    if (partialReset && blocks[CONF_BLOCK_USER_SCALE].preserveOnPartialReset) return;
    1312:	66 23       	and	r22, r22
    1314:	31 f0       	breq	.+12     	; 0x1322 <_ZN13Configuration14initUserScalesEb+0x34>
    1316:	fc 01       	movw	r30, r24
    1318:	e7 52       	subi	r30, 0x27	; 39
    131a:	fd 4f       	sbci	r31, 0xFD	; 253
    131c:	20 81       	ld	r18, Z
    131e:	21 11       	cpse	r18, r1
    1320:	47 c0       	rjmp	.+142    	; 0x13b0 <_ZN13Configuration14initUserScalesEb+0xc2>
    1322:	fc 01       	movw	r30, r24
    1324:	eb 55       	subi	r30, 0x5B	; 91
    1326:	fd 4f       	sbci	r31, 0xFD	; 253
    1328:	a0 80       	ld	r10, Z
    132a:	b1 80       	ldd	r11, Z+1	; 0x01
    132c:	25 e0       	ldi	r18, 0x05	; 5
    132e:	a2 0e       	add	r10, r18
    1330:	b1 1c       	adc	r11, r1
    1332:	c1 2c       	mov	r12, r1
    1334:	d1 2c       	mov	r13, r1
    uint16_t blockStartAddress = getBlockAddress(CONF_BLOCK_USER_SCALE);
    uint16_t parameterAddress;

    for (int i=0; i<NUMBER_OF_USER_SCALES; i++) {

        parameterAddress = blockStartAddress + blocks[CONF_BLOCK_USER_SCALE].sectionAddress[padNotesSection] + ((MAX_PADS*NOTES_PER_PAD)*i);
    1336:	4c 01       	movw	r8, r24
    1338:	e9 e5       	ldi	r30, 0x59	; 89
    133a:	8e 1a       	sub	r8, r30
    133c:	ed ef       	ldi	r30, 0xFD	; 253
    133e:	9e 0a       	sbc	r9, r30
            for (int k=0; k<NOTES_PER_PAD; k++) {

                //set first note to default note
                //set all other notes to blank

                if (!k) eeprom_update_byte((uint8_t*)parameterAddress+k+(NOTES_PER_PAD*j), DEFAULT_NOTE);
    1340:	44 24       	eor	r4, r4
    1342:	43 94       	inc	r4
    1344:	51 2c       	mov	r5, r1
    uint16_t blockStartAddress = getBlockAddress(CONF_BLOCK_USER_SCALE);
    uint16_t parameterAddress;

    for (int i=0; i<NUMBER_OF_USER_SCALES; i++) {

        parameterAddress = blockStartAddress + blocks[CONF_BLOCK_USER_SCALE].sectionAddress[padNotesSection] + ((MAX_PADS*NOTES_PER_PAD)*i);
    1346:	f4 01       	movw	r30, r8
    1348:	00 81       	ld	r16, Z
    134a:	11 81       	ldd	r17, Z+1	; 0x01
    134c:	0a 0d       	add	r16, r10
    134e:	1b 1d       	adc	r17, r11
    1350:	0c 0d       	add	r16, r12
    1352:	1d 1d       	adc	r17, r13
    1354:	78 01       	movw	r14, r16
    1356:	ff e3       	ldi	r31, 0x3F	; 63
    1358:	ef 0e       	add	r14, r31
    135a:	f1 1c       	adc	r15, r1
    135c:	1b c0       	rjmp	.+54     	; 0x1394 <_ZN13Configuration14initUserScalesEb+0xa6>
    135e:	2f ef       	ldi	r18, 0xFF	; 255
    1360:	62 1a       	sub	r6, r18
    1362:	72 0a       	sbc	r7, r18
    1364:	21 96       	adiw	r28, 0x01	; 1
            for (int k=0; k<NOTES_PER_PAD; k++) {

                //set first note to default note
                //set all other notes to blank

                if (!k) eeprom_update_byte((uint8_t*)parameterAddress+k+(NOTES_PER_PAD*j), DEFAULT_NOTE);
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	68 16       	cp	r6, r24
    136a:	71 04       	cpc	r7, r1
    136c:	31 f4       	brne	.+12     	; 0x137a <_ZN13Configuration14initUserScalesEb+0x8c>
    136e:	60 e3       	ldi	r22, 0x30	; 48
    1370:	82 2d       	mov	r24, r2
    1372:	93 2d       	mov	r25, r3
    1374:	0e 94 21 83 	call	0x10642	; 0x10642 <eeprom_update_byte>
    1378:	f2 cf       	rjmp	.-28     	; 0x135e <_ZN13Configuration14initUserScalesEb+0x70>
                else    eeprom_update_byte((uint8_t*)parameterAddress+k+(NOTES_PER_PAD*j), BLANK_NOTE);
    137a:	60 e8       	ldi	r22, 0x80	; 128
    137c:	ce 01       	movw	r24, r28
    137e:	0e 94 21 83 	call	0x10642	; 0x10642 <eeprom_update_byte>

        parameterAddress = blockStartAddress + blocks[CONF_BLOCK_USER_SCALE].sectionAddress[padNotesSection] + ((MAX_PADS*NOTES_PER_PAD)*i);

        for (int j=0; j<MAX_PADS; j++)    {

            for (int k=0; k<NOTES_PER_PAD; k++) {
    1382:	e7 e0       	ldi	r30, 0x07	; 7
    1384:	6e 16       	cp	r6, r30
    1386:	71 04       	cpc	r7, r1
    1388:	54 f3       	brlt	.-44     	; 0x135e <_ZN13Configuration14initUserScalesEb+0x70>
    138a:	09 5f       	subi	r16, 0xF9	; 249
    138c:	1f 4f       	sbci	r17, 0xFF	; 255

    for (int i=0; i<NUMBER_OF_USER_SCALES; i++) {

        parameterAddress = blockStartAddress + blocks[CONF_BLOCK_USER_SCALE].sectionAddress[padNotesSection] + ((MAX_PADS*NOTES_PER_PAD)*i);

        for (int j=0; j<MAX_PADS; j++)    {
    138e:	0e 15       	cp	r16, r14
    1390:	1f 05       	cpc	r17, r15
    1392:	31 f0       	breq	.+12     	; 0x13a0 <_ZN13Configuration14initUserScalesEb+0xb2>
            for (int k=0; k<NOTES_PER_PAD; k++) {

                //set first note to default note
                //set all other notes to blank

                if (!k) eeprom_update_byte((uint8_t*)parameterAddress+k+(NOTES_PER_PAD*j), DEFAULT_NOTE);
    1394:	20 2e       	mov	r2, r16
    1396:	31 2e       	mov	r3, r17
    1398:	e8 01       	movw	r28, r16
    139a:	64 2c       	mov	r6, r4
    139c:	75 2c       	mov	r7, r5
    139e:	e3 cf       	rjmp	.-58     	; 0x1366 <_ZN13Configuration14initUserScalesEb+0x78>
    13a0:	ff e3       	ldi	r31, 0x3F	; 63
    13a2:	cf 0e       	add	r12, r31
    13a4:	d1 1c       	adc	r13, r1
    if (partialReset && blocks[CONF_BLOCK_USER_SCALE].preserveOnPartialReset) return;

    uint16_t blockStartAddress = getBlockAddress(CONF_BLOCK_USER_SCALE);
    uint16_t parameterAddress;

    for (int i=0; i<NUMBER_OF_USER_SCALES; i++) {
    13a6:	26 e7       	ldi	r18, 0x76	; 118
    13a8:	c2 16       	cp	r12, r18
    13aa:	22 e0       	ldi	r18, 0x02	; 2
    13ac:	d2 06       	cpc	r13, r18
    13ae:	59 f6       	brne	.-106    	; 0x1346 <_ZN13Configuration14initUserScalesEb+0x58>

        }

    }

}
    13b0:	df 91       	pop	r29
    13b2:	cf 91       	pop	r28
    13b4:	1f 91       	pop	r17
    13b6:	0f 91       	pop	r16
    13b8:	ff 90       	pop	r15
    13ba:	ef 90       	pop	r14
    13bc:	df 90       	pop	r13
    13be:	cf 90       	pop	r12
    13c0:	bf 90       	pop	r11
    13c2:	af 90       	pop	r10
    13c4:	9f 90       	pop	r9
    13c6:	8f 90       	pop	r8
    13c8:	7f 90       	pop	r7
    13ca:	6f 90       	pop	r6
    13cc:	5f 90       	pop	r5
    13ce:	4f 90       	pop	r4
    13d0:	3f 90       	pop	r3
    13d2:	2f 90       	pop	r2
    13d4:	08 95       	ret

000013d6 <_ZN13Configuration18initPadCalibrationEb>:

void Configuration::initPadCalibration(bool partialReset)   {
    13d6:	cf 92       	push	r12
    13d8:	df 92       	push	r13
    13da:	ef 92       	push	r14
    13dc:	ff 92       	push	r15
    13de:	0f 93       	push	r16
    13e0:	1f 93       	push	r17
    13e2:	cf 93       	push	r28
    13e4:	df 93       	push	r29

    if (partialReset && blocks[CONF_BLOCK_PAD_CALIBRATION].preserveOnPartialReset) return;
    13e6:	66 23       	and	r22, r22
    13e8:	31 f0       	breq	.+12     	; 0x13f6 <_ZN13Configuration18initPadCalibrationEb+0x20>
    13ea:	fc 01       	movw	r30, r24
    13ec:	e1 5f       	subi	r30, 0xF1	; 241
    13ee:	fc 4f       	sbci	r31, 0xFC	; 252
    13f0:	20 81       	ld	r18, Z
    13f2:	21 11       	cpse	r18, r1
    13f4:	98 c0       	rjmp	.+304    	; 0x1526 <_ZN13Configuration18initPadCalibrationEb+0x150>
    13f6:	7c 01       	movw	r14, r24
    13f8:	fc 01       	movw	r30, r24
    13fa:	e5 52       	subi	r30, 0x25	; 37
    13fc:	fd 4f       	sbci	r31, 0xFD	; 253
    13fe:	c0 81       	ld	r28, Z
    1400:	d1 81       	ldd	r29, Z+1	; 0x01
    1402:	25 96       	adiw	r28, 0x05	; 5

    uint16_t blockStartAddress = getBlockAddress(CONF_BLOCK_PAD_CALIBRATION);
    uint16_t parameterAddress;

    //set padCalibrationStatus to false by default
    parameterAddress = blockStartAddress+blocks[CONF_BLOCK_PAD_CALIBRATION].sectionAddress[padCalibrationStatus];
    1404:	32 96       	adiw	r30, 0x02	; 2
    1406:	80 81       	ld	r24, Z
    1408:	91 81       	ldd	r25, Z+1	; 0x01
    eeprom_update_byte((uint8_t*)parameterAddress, 0);
    140a:	60 e0       	ldi	r22, 0x00	; 0
    140c:	8c 0f       	add	r24, r28
    140e:	9d 1f       	adc	r25, r29
    1410:	0e 94 21 83 	call	0x10642	; 0x10642 <eeprom_update_byte>
    1414:	00 e0       	ldi	r16, 0x00	; 0
    1416:	10 e0       	ldi	r17, 0x00	; 0

    //init lower pressure limits
    for (int i=0; i<MAX_PADS; i++)    {

        parameterAddress = blockStartAddress+blocks[CONF_BLOCK_PAD_CALIBRATION].sectionAddress[padCalibrationPressureLowerSection] + i*2;
    1418:	67 01       	movw	r12, r14
    141a:	81 e2       	ldi	r24, 0x21	; 33
    141c:	c8 1a       	sub	r12, r24
    141e:	8d ef       	ldi	r24, 0xFD	; 253
    1420:	d8 0a       	sbc	r13, r24
    1422:	f6 01       	movw	r30, r12
    1424:	80 81       	ld	r24, Z
    1426:	91 81       	ldd	r25, Z+1	; 0x01
    1428:	8c 0f       	add	r24, r28
    142a:	9d 1f       	adc	r25, r29
        eeprom_update_word((uint16_t*)parameterAddress, DEFAULT_PAD_PRESSURE_LIMIT_LOWER);
    142c:	64 e1       	ldi	r22, 0x14	; 20
    142e:	70 e0       	ldi	r23, 0x00	; 0
    1430:	80 0f       	add	r24, r16
    1432:	91 1f       	adc	r25, r17
    1434:	0e 94 33 83 	call	0x10666	; 0x10666 <eeprom_update_word>
    1438:	0e 5f       	subi	r16, 0xFE	; 254
    143a:	1f 4f       	sbci	r17, 0xFF	; 255
    //set padCalibrationStatus to false by default
    parameterAddress = blockStartAddress+blocks[CONF_BLOCK_PAD_CALIBRATION].sectionAddress[padCalibrationStatus];
    eeprom_update_byte((uint8_t*)parameterAddress, 0);

    //init lower pressure limits
    for (int i=0; i<MAX_PADS; i++)    {
    143c:	02 31       	cpi	r16, 0x12	; 18
    143e:	11 05       	cpc	r17, r1
    1440:	81 f7       	brne	.-32     	; 0x1422 <_ZN13Configuration18initPadCalibrationEb+0x4c>
    1442:	00 e0       	ldi	r16, 0x00	; 0
    1444:	10 e0       	ldi	r17, 0x00	; 0
    }

    //init upper pressure limits
    for (int i=0; i<MAX_PADS; i++)    {

        parameterAddress = blockStartAddress+blocks[CONF_BLOCK_PAD_CALIBRATION].sectionAddress[padCalibrationPressureUpperSection] + i*2;
    1446:	67 01       	movw	r12, r14
    1448:	ff e1       	ldi	r31, 0x1F	; 31
    144a:	cf 1a       	sub	r12, r31
    144c:	fd ef       	ldi	r31, 0xFD	; 253
    144e:	df 0a       	sbc	r13, r31
    1450:	f6 01       	movw	r30, r12
    1452:	80 81       	ld	r24, Z
    1454:	91 81       	ldd	r25, Z+1	; 0x01
    1456:	8c 0f       	add	r24, r28
    1458:	9d 1f       	adc	r25, r29
        eeprom_update_word((uint16_t*)parameterAddress, DEFAULT_PAD_PRESSURE_LIMIT_UPPER);
    145a:	6e e5       	ldi	r22, 0x5E	; 94
    145c:	71 e0       	ldi	r23, 0x01	; 1
    145e:	80 0f       	add	r24, r16
    1460:	91 1f       	adc	r25, r17
    1462:	0e 94 33 83 	call	0x10666	; 0x10666 <eeprom_update_word>
    1466:	0e 5f       	subi	r16, 0xFE	; 254
    1468:	1f 4f       	sbci	r17, 0xFF	; 255
        eeprom_update_word((uint16_t*)parameterAddress, DEFAULT_PAD_PRESSURE_LIMIT_LOWER);

    }

    //init upper pressure limits
    for (int i=0; i<MAX_PADS; i++)    {
    146a:	02 31       	cpi	r16, 0x12	; 18
    146c:	11 05       	cpc	r17, r1
    146e:	81 f7       	brne	.-32     	; 0x1450 <_ZN13Configuration18initPadCalibrationEb+0x7a>
    1470:	00 e0       	ldi	r16, 0x00	; 0
    1472:	10 e0       	ldi	r17, 0x00	; 0
    }

    //init lower x limits
    for (int i=0; i<MAX_PADS; i++)    {

        parameterAddress = blockStartAddress+blocks[CONF_BLOCK_PAD_CALIBRATION].sectionAddress[padCalibrationXlowerSection] + i*2;
    1474:	67 01       	movw	r12, r14
    1476:	fd e1       	ldi	r31, 0x1D	; 29
    1478:	cf 1a       	sub	r12, r31
    147a:	fd ef       	ldi	r31, 0xFD	; 253
    147c:	df 0a       	sbc	r13, r31
    147e:	f6 01       	movw	r30, r12
    1480:	80 81       	ld	r24, Z
    1482:	91 81       	ldd	r25, Z+1	; 0x01
    1484:	8c 0f       	add	r24, r28
    1486:	9d 1f       	adc	r25, r29
        eeprom_update_word((uint16_t*)parameterAddress, DEFAULT_PAD_X_LIMIT_LOWER);
    1488:	6e e5       	ldi	r22, 0x5E	; 94
    148a:	71 e0       	ldi	r23, 0x01	; 1
    148c:	80 0f       	add	r24, r16
    148e:	91 1f       	adc	r25, r17
    1490:	0e 94 33 83 	call	0x10666	; 0x10666 <eeprom_update_word>
    1494:	0e 5f       	subi	r16, 0xFE	; 254
    1496:	1f 4f       	sbci	r17, 0xFF	; 255
        eeprom_update_word((uint16_t*)parameterAddress, DEFAULT_PAD_PRESSURE_LIMIT_UPPER);

    }

    //init lower x limits
    for (int i=0; i<MAX_PADS; i++)    {
    1498:	02 31       	cpi	r16, 0x12	; 18
    149a:	11 05       	cpc	r17, r1
    149c:	81 f7       	brne	.-32     	; 0x147e <_ZN13Configuration18initPadCalibrationEb+0xa8>
    149e:	00 e0       	ldi	r16, 0x00	; 0
    14a0:	10 e0       	ldi	r17, 0x00	; 0
    }

    //init upper x limits
    for (int i=0; i<MAX_PADS; i++)    {

        parameterAddress = blockStartAddress+blocks[CONF_BLOCK_PAD_CALIBRATION].sectionAddress[padCalibrationXupperSection] + i*2;
    14a2:	67 01       	movw	r12, r14
    14a4:	fb e1       	ldi	r31, 0x1B	; 27
    14a6:	cf 1a       	sub	r12, r31
    14a8:	fd ef       	ldi	r31, 0xFD	; 253
    14aa:	df 0a       	sbc	r13, r31
    14ac:	f6 01       	movw	r30, r12
    14ae:	80 81       	ld	r24, Z
    14b0:	91 81       	ldd	r25, Z+1	; 0x01
    14b2:	8c 0f       	add	r24, r28
    14b4:	9d 1f       	adc	r25, r29
        eeprom_update_word((uint16_t*)parameterAddress, DEFAULT_PAD_X_LIMIT_UPPER);
    14b6:	6a e8       	ldi	r22, 0x8A	; 138
    14b8:	72 e0       	ldi	r23, 0x02	; 2
    14ba:	80 0f       	add	r24, r16
    14bc:	91 1f       	adc	r25, r17
    14be:	0e 94 33 83 	call	0x10666	; 0x10666 <eeprom_update_word>
    14c2:	0e 5f       	subi	r16, 0xFE	; 254
    14c4:	1f 4f       	sbci	r17, 0xFF	; 255
        eeprom_update_word((uint16_t*)parameterAddress, DEFAULT_PAD_X_LIMIT_LOWER);

    }

    //init upper x limits
    for (int i=0; i<MAX_PADS; i++)    {
    14c6:	02 31       	cpi	r16, 0x12	; 18
    14c8:	11 05       	cpc	r17, r1
    14ca:	81 f7       	brne	.-32     	; 0x14ac <_ZN13Configuration18initPadCalibrationEb+0xd6>
    14cc:	00 e0       	ldi	r16, 0x00	; 0
    14ce:	10 e0       	ldi	r17, 0x00	; 0
    }

    //init lower y limits
    for (int i=0; i<MAX_PADS; i++)    {

        parameterAddress = blockStartAddress+blocks[CONF_BLOCK_PAD_CALIBRATION].sectionAddress[padCalibrationYlowerSection] + i*2;
    14d0:	67 01       	movw	r12, r14
    14d2:	f9 e1       	ldi	r31, 0x19	; 25
    14d4:	cf 1a       	sub	r12, r31
    14d6:	fd ef       	ldi	r31, 0xFD	; 253
    14d8:	df 0a       	sbc	r13, r31
    14da:	f6 01       	movw	r30, r12
    14dc:	80 81       	ld	r24, Z
    14de:	91 81       	ldd	r25, Z+1	; 0x01
    14e0:	8c 0f       	add	r24, r28
    14e2:	9d 1f       	adc	r25, r29
        eeprom_update_word((uint16_t*)parameterAddress, DEFAULT_PAD_Y_LIMIT_LOWER);
    14e4:	6e e5       	ldi	r22, 0x5E	; 94
    14e6:	71 e0       	ldi	r23, 0x01	; 1
    14e8:	80 0f       	add	r24, r16
    14ea:	91 1f       	adc	r25, r17
    14ec:	0e 94 33 83 	call	0x10666	; 0x10666 <eeprom_update_word>
    14f0:	0e 5f       	subi	r16, 0xFE	; 254
    14f2:	1f 4f       	sbci	r17, 0xFF	; 255
        eeprom_update_word((uint16_t*)parameterAddress, DEFAULT_PAD_X_LIMIT_UPPER);

    }

    //init lower y limits
    for (int i=0; i<MAX_PADS; i++)    {
    14f4:	02 31       	cpi	r16, 0x12	; 18
    14f6:	11 05       	cpc	r17, r1
    14f8:	81 f7       	brne	.-32     	; 0x14da <_ZN13Configuration18initPadCalibrationEb+0x104>
    14fa:	00 e0       	ldi	r16, 0x00	; 0
    14fc:	10 e0       	ldi	r17, 0x00	; 0
    }

    //init upper y limits
    for (int i=0; i<MAX_PADS; i++)    {

        parameterAddress = blockStartAddress+blocks[CONF_BLOCK_PAD_CALIBRATION].sectionAddress[padCalibrationYupperSection] + i*2;
    14fe:	f7 e1       	ldi	r31, 0x17	; 23
    1500:	ef 1a       	sub	r14, r31
    1502:	fd ef       	ldi	r31, 0xFD	; 253
    1504:	ff 0a       	sbc	r15, r31
    1506:	f7 01       	movw	r30, r14
    1508:	80 81       	ld	r24, Z
    150a:	91 81       	ldd	r25, Z+1	; 0x01
    150c:	8c 0f       	add	r24, r28
    150e:	9d 1f       	adc	r25, r29
        eeprom_update_word((uint16_t*)parameterAddress, DEFAULT_PAD_Y_LIMIT_UPPER);
    1510:	6a e8       	ldi	r22, 0x8A	; 138
    1512:	72 e0       	ldi	r23, 0x02	; 2
    1514:	80 0f       	add	r24, r16
    1516:	91 1f       	adc	r25, r17
    1518:	0e 94 33 83 	call	0x10666	; 0x10666 <eeprom_update_word>
    151c:	0e 5f       	subi	r16, 0xFE	; 254
    151e:	1f 4f       	sbci	r17, 0xFF	; 255
        eeprom_update_word((uint16_t*)parameterAddress, DEFAULT_PAD_Y_LIMIT_LOWER);

    }

    //init upper y limits
    for (int i=0; i<MAX_PADS; i++)    {
    1520:	02 31       	cpi	r16, 0x12	; 18
    1522:	11 05       	cpc	r17, r1
    1524:	81 f7       	brne	.-32     	; 0x1506 <_ZN13Configuration18initPadCalibrationEb+0x130>
        parameterAddress = blockStartAddress+blocks[CONF_BLOCK_PAD_CALIBRATION].sectionAddress[padCalibrationYupperSection] + i*2;
        eeprom_update_word((uint16_t*)parameterAddress, DEFAULT_PAD_Y_LIMIT_UPPER);

    }

}
    1526:	df 91       	pop	r29
    1528:	cf 91       	pop	r28
    152a:	1f 91       	pop	r17
    152c:	0f 91       	pop	r16
    152e:	ff 90       	pop	r15
    1530:	ef 90       	pop	r14
    1532:	df 90       	pop	r13
    1534:	cf 90       	pop	r12
    1536:	08 95       	ret

00001538 <_ZN13Configuration16initMIDIsettingsEb>:

void Configuration::initMIDIsettings(bool partialReset) {
    1538:	cf 93       	push	r28
    153a:	df 93       	push	r29

    if (partialReset && blocks[CONF_BLOCK_MIDI].preserveOnPartialReset) return;
    153c:	66 23       	and	r22, r22
    153e:	31 f0       	breq	.+12     	; 0x154c <_ZN13Configuration16initMIDIsettingsEb+0x14>
    1540:	fc 01       	movw	r30, r24
    1542:	eb 5b       	subi	r30, 0xBB	; 187
    1544:	fc 4f       	sbci	r31, 0xFC	; 252
    1546:	20 81       	ld	r18, Z
    1548:	21 11       	cpse	r18, r1
    154a:	14 c0       	rjmp	.+40     	; 0x1574 <_ZN13Configuration16initMIDIsettingsEb+0x3c>
    154c:	fc 01       	movw	r30, r24
    154e:	ef 5e       	subi	r30, 0xEF	; 239
    1550:	fc 4f       	sbci	r31, 0xFC	; 252
    1552:	c0 81       	ld	r28, Z
    1554:	d1 81       	ldd	r29, Z+1	; 0x01

    uint16_t blockStartAddress = getBlockAddress(CONF_BLOCK_MIDI);
    uint16_t parameterAddress = blockStartAddress;

    for (int i=0; i<MIDI_SETTINGS; i++)
        eeprom_update_byte((uint8_t*)parameterAddress+i, defaultMIDIsettingArray[i]);
    1556:	60 e0       	ldi	r22, 0x00	; 0
    1558:	ce 01       	movw	r24, r28
    155a:	05 96       	adiw	r24, 0x05	; 5
    155c:	0e 94 21 83 	call	0x10642	; 0x10642 <eeprom_update_byte>
    1560:	60 e0       	ldi	r22, 0x00	; 0
    1562:	ce 01       	movw	r24, r28
    1564:	06 96       	adiw	r24, 0x06	; 6
    1566:	0e 94 21 83 	call	0x10642	; 0x10642 <eeprom_update_byte>
    156a:	60 e0       	ldi	r22, 0x00	; 0
    156c:	ce 01       	movw	r24, r28
    156e:	07 96       	adiw	r24, 0x07	; 7
    1570:	0e 94 21 83 	call	0x10642	; 0x10642 <eeprom_update_byte>

}
    1574:	df 91       	pop	r29
    1576:	cf 91       	pop	r28
    1578:	08 95       	ret

0000157a <_ZN13Configuration12initSettingsEb>:

    }

}

void Configuration::initSettings(bool partialReset) {
    157a:	1f 93       	push	r17
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	ec 01       	movw	r28, r24
    1582:	16 2f       	mov	r17, r22

    //we need to init each block and section with data
    //program area
    initProgramSettings(partialReset);
    1584:	b6 dd       	rcall	.-1172   	; 0x10f2 <_ZN13Configuration19initProgramSettingsEb>
    initUserScales(partialReset);
    1586:	61 2f       	mov	r22, r17
    1588:	ce 01       	movw	r24, r28
    158a:	b1 de       	rcall	.-670    	; 0x12ee <_ZN13Configuration14initUserScalesEb>
    initPadCalibration(partialReset);
    158c:	61 2f       	mov	r22, r17
    158e:	ce 01       	movw	r24, r28
    1590:	22 df       	rcall	.-444    	; 0x13d6 <_ZN13Configuration18initPadCalibrationEb>
    initMIDIsettings(partialReset);
    1592:	61 2f       	mov	r22, r17
    1594:	ce 01       	movw	r24, r28
    1596:	d0 df       	rcall	.-96     	; 0x1538 <_ZN13Configuration16initMIDIsettingsEb>

}
    1598:	df 91       	pop	r29
    159a:	cf 91       	pop	r28
    159c:	1f 91       	pop	r17
    159e:	08 95       	ret

000015a0 <_ZN13Configuration12factoryResetE18factoryResetType_t>:
#include "../midi/MIDI_parameters.h"
#include "../version/Firmware.h"
#include "../BitManipulation.h"
#include "../interface/buttons/Buttons.h"

void Configuration::factoryReset(factoryResetType_t type)   {
    15a0:	1f 93       	push	r17
    15a2:	cf 93       	push	r28
    15a4:	df 93       	push	r29
    15a6:	ec 01       	movw	r28, r24
    15a8:	16 2f       	mov	r17, r22

    #ifdef MODULE_LCD
        strcpy_P(stringBuffer, restoringDefaults_string);
    15aa:	6f ed       	ldi	r22, 0xDF	; 223
    15ac:	72 e0       	ldi	r23, 0x02	; 2
    15ae:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
        lcd_clrscr();
    15b2:	e1 d3       	rcall	.+1986   	; 0x1d76 <_Z10lcd_clrscrv>
        lcd_gotoxy(0, 0);
    15b4:	60 e0       	ldi	r22, 0x00	; 0
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	cc d3       	rcall	.+1944   	; 0x1d52 <_Z10lcd_gotoxyhh>
        lcd_puts(stringBuffer);
    15ba:	ce 01       	movw	r24, r28
    15bc:	fc d3       	rcall	.+2040   	; 0x1db6 <_Z8lcd_putsPKc>
        lcd_gotoxy(0, 1);
    15be:	61 e0       	ldi	r22, 0x01	; 1
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	c7 d3       	rcall	.+1934   	; 0x1d52 <_Z10lcd_gotoxyhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15c4:	2f ef       	ldi	r18, 0xFF	; 255
    15c6:	87 ea       	ldi	r24, 0xA7	; 167
    15c8:	91 e6       	ldi	r25, 0x61	; 97
    15ca:	21 50       	subi	r18, 0x01	; 1
    15cc:	80 40       	sbci	r24, 0x00	; 0
    15ce:	90 40       	sbci	r25, 0x00	; 0
    15d0:	e1 f7       	brne	.-8      	; 0x15ca <_ZN13Configuration12factoryResetE18factoryResetType_t+0x2a>
    15d2:	00 c0       	rjmp	.+0      	; 0x15d4 <_ZN13Configuration12factoryResetE18factoryResetType_t+0x34>
    15d4:	00 00       	nop
        _delay_ms(2000);
        strcpy_P(stringBuffer, pleaseWait_string);
    15d6:	60 ed       	ldi	r22, 0xD0	; 208
    15d8:	72 e0       	ldi	r23, 0x02	; 2
    15da:	ce 01       	movw	r24, r28
    15dc:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
        lcd_puts(stringBuffer);
    15e0:	ce 01       	movw	r24, r28
    15e2:	e9 d3       	rcall	.+2002   	; 0x1db6 <_Z8lcd_putsPKc>
    15e4:	2f ef       	ldi	r18, 0xFF	; 255
    15e6:	87 ea       	ldi	r24, 0xA7	; 167
    15e8:	91 e6       	ldi	r25, 0x61	; 97
    15ea:	21 50       	subi	r18, 0x01	; 1
    15ec:	80 40       	sbci	r24, 0x00	; 0
    15ee:	90 40       	sbci	r25, 0x00	; 0
    15f0:	e1 f7       	brne	.-8      	; 0x15ea <_ZN13Configuration12factoryResetE18factoryResetType_t+0x4a>
    15f2:	00 c0       	rjmp	.+0      	; 0x15f4 <_ZN13Configuration12factoryResetE18factoryResetType_t+0x54>
    15f4:	00 00       	nop
        _delay_ms(2000);
    #endif

    if (type == factoryReset_wipeRestore)
    15f6:	11 11       	cpse	r17, r1
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <_ZN13Configuration12factoryResetE18factoryResetType_t+0x5e>
        clearEEPROM();
    15fa:	ce 01       	movw	r24, r28
    15fc:	32 dc       	rcall	.-1948   	; 0xe62 <_ZN13Configuration11clearEEPROMEv>

    initSettings(type == factoryReset_partial);
    15fe:	61 e0       	ldi	r22, 0x01	; 1
    1600:	12 30       	cpi	r17, 0x02	; 2
    1602:	09 f0       	breq	.+2      	; 0x1606 <_ZN13Configuration12factoryResetE18factoryResetType_t+0x66>
    1604:	60 e0       	ldi	r22, 0x00	; 0
    1606:	ce 01       	movw	r24, r28
    1608:	b8 df       	rcall	.-144    	; 0x157a <_ZN13Configuration12initSettingsEb>

    writeSignature();
    160a:	ce 01       	movw	r24, r28
    160c:	f0 db       	rcall	.-2080   	; 0xdee <_ZN13Configuration14writeSignatureEv>

    #ifdef MODULE_LCD
        lcd_gotoxy(0,2);
    160e:	62 e0       	ldi	r22, 0x02	; 2
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	9f d3       	rcall	.+1854   	; 0x1d52 <_Z10lcd_gotoxyhh>
        strcpy_P(stringBuffer, complete_string);
    1614:	66 ec       	ldi	r22, 0xC6	; 198
    1616:	72 e0       	ldi	r23, 0x02	; 2
    1618:	ce 01       	movw	r24, r28
    161a:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
        lcd_puts(stringBuffer);
    161e:	ce 01       	movw	r24, r28
    1620:	ca d3       	rcall	.+1940   	; 0x1db6 <_Z8lcd_putsPKc>
    1622:	2f ef       	ldi	r18, 0xFF	; 255
    1624:	87 ea       	ldi	r24, 0xA7	; 167
    1626:	91 e6       	ldi	r25, 0x61	; 97
    1628:	21 50       	subi	r18, 0x01	; 1
    162a:	80 40       	sbci	r24, 0x00	; 0
    162c:	90 40       	sbci	r25, 0x00	; 0
    162e:	e1 f7       	brne	.-8      	; 0x1628 <_ZN13Configuration12factoryResetE18factoryResetType_t+0x88>
    1630:	00 c0       	rjmp	.+0      	; 0x1632 <_ZN13Configuration12factoryResetE18factoryResetType_t+0x92>
    1632:	00 00       	nop
        _delay_ms(2000);
    #endif

}
    1634:	df 91       	pop	r29
    1636:	cf 91       	pop	r28
    1638:	1f 91       	pop	r17
    163a:	08 95       	ret

0000163c <_ZN13Configuration10checkResetEv>:

    checkReset();

}

void Configuration::checkReset()    {
    163c:	ef 92       	push	r14
    163e:	ff 92       	push	r15
    1640:	0f 93       	push	r16
    1642:	1f 93       	push	r17
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
    1648:	7c 01       	movw	r14, r24
    bool factory_reset = false;
    uint8_t unique_id_invert = invertByte(EEPROM_UNIQUE_ID);
    uint8_t checkByte;

    //first check if all bytes up to START_OFFSET address match unique id
    for (int i=0; i<START_OFFSET; i++)  {
    164a:	c0 e0       	ldi	r28, 0x00	; 0
    164c:	d0 e0       	ldi	r29, 0x00	; 0

        (i%2) ? checkByte = unique_id_invert : checkByte = EEPROM_UNIQUE_ID;
    164e:	0d ec       	ldi	r16, 0xCD	; 205
    1650:	c0 fd       	sbrc	r28, 0
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <_ZN13Configuration10checkResetEv+0x1c>
    1654:	12 e3       	ldi	r17, 0x32	; 50
    1656:	01 c0       	rjmp	.+2      	; 0x165a <_ZN13Configuration10checkResetEv+0x1e>
    1658:	10 2f       	mov	r17, r16

        if (eeprom_read_byte((uint8_t*)i) != checkByte)  {
    165a:	ce 01       	movw	r24, r28
    165c:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    1660:	81 13       	cpse	r24, r17
    1662:	05 c0       	rjmp	.+10     	; 0x166e <_ZN13Configuration10checkResetEv+0x32>
    bool factory_reset = false;
    uint8_t unique_id_invert = invertByte(EEPROM_UNIQUE_ID);
    uint8_t checkByte;

    //first check if all bytes up to START_OFFSET address match unique id
    for (int i=0; i<START_OFFSET; i++)  {
    1664:	21 96       	adiw	r28, 0x01	; 1
    1666:	c5 30       	cpi	r28, 0x05	; 5
    1668:	d1 05       	cpc	r29, r1
    166a:	91 f7       	brne	.-28     	; 0x1650 <_ZN13Configuration10checkResetEv+0x14>
    166c:	18 c0       	rjmp	.+48     	; 0x169e <_ZN13Configuration10checkResetEv+0x62>
    166e:	c0 e0       	ldi	r28, 0x00	; 0
    1670:	d0 e0       	ldi	r29, 0x00	; 0
    //else clear eeprom and apply config
    if (factory_reset)  {

        for (int i=0; i<START_OFFSET-1; i++)  {

            if (eeprom_read_byte((uint8_t*)i) != invertByte(eeprom_read_byte((uint8_t*)i+1)))    {
    1672:	ce 01       	movw	r24, r28
    1674:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    1678:	18 2f       	mov	r17, r24
    167a:	ce 01       	movw	r24, r28
    167c:	01 96       	adiw	r24, 0x01	; 1
    167e:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    1682:	80 95       	com	r24
    1684:	18 17       	cp	r17, r24
    1686:	21 f0       	breq	.+8      	; 0x1690 <_ZN13Configuration10checkResetEv+0x54>

                factoryReset(factoryReset_wipeRestore);
    1688:	60 e0       	ldi	r22, 0x00	; 0
    168a:	c7 01       	movw	r24, r14
    168c:	89 df       	rcall	.-238    	; 0x15a0 <_ZN13Configuration12factoryResetE18factoryResetType_t>
                return;
    168e:	07 c0       	rjmp	.+14     	; 0x169e <_ZN13Configuration10checkResetEv+0x62>
    //check if all bytes up to START_OFFSET are same
    //if they're the same, eeprom has been cleared before, only restore configuration
    //else clear eeprom and apply config
    if (factory_reset)  {

        for (int i=0; i<START_OFFSET-1; i++)  {
    1690:	21 96       	adiw	r28, 0x01	; 1
    1692:	c4 30       	cpi	r28, 0x04	; 4
    1694:	d1 05       	cpc	r29, r1
    1696:	69 f7       	brne	.-38     	; 0x1672 <_ZN13Configuration10checkResetEv+0x36>

            }

        }

        factoryReset(factoryReset_restore);
    1698:	61 e0       	ldi	r22, 0x01	; 1
    169a:	c7 01       	movw	r24, r14
    169c:	81 df       	rcall	.-254    	; 0x15a0 <_ZN13Configuration12factoryResetE18factoryResetType_t>

    }

}
    169e:	df 91       	pop	r29
    16a0:	cf 91       	pop	r28
    16a2:	1f 91       	pop	r17
    16a4:	0f 91       	pop	r16
    16a6:	ff 90       	pop	r15
    16a8:	ef 90       	pop	r14
    16aa:	08 95       	ret

000016ac <_ZN13Configuration4initEv>:
    eeprom_update_buffer_tail = 0;
    #endif

}

void Configuration::init() {
    16ac:	cf 93       	push	r28
    16ae:	df 93       	push	r29
    16b0:	ec 01       	movw	r28, r24

    createMemoryLayout();
    16b2:	64 d1       	rcall	.+712    	; 0x197c <_ZN13Configuration18createMemoryLayoutEv>
    createSectionAddresses();
    16b4:	ce 01       	movw	r24, r28
    16b6:	e5 db       	rcall	.-2102   	; 0xe82 <_ZN13Configuration22createSectionAddressesEv>

    checkReset();
    16b8:	ce 01       	movw	r24, r28
    16ba:	c0 df       	rcall	.-128    	; 0x163c <_ZN13Configuration10checkResetEv>

}
    16bc:	df 91       	pop	r29
    16be:	cf 91       	pop	r28
    16c0:	08 95       	ret

000016c2 <_ZN13Configuration6updateEv>:
    eeprom_update_bufer_address[index] = eepromAddress;
    eeprom_update_buffer_head = index;

}

bool Configuration::update()    {
    16c2:	1f 93       	push	r17
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29

    //write queued data to eeprom

    if (eeprom_update_buffer_head == eeprom_update_buffer_tail)   {
    16c8:	fc 01       	movw	r30, r24
    16ca:	ee 53       	subi	r30, 0x3E	; 62
    16cc:	fb 4f       	sbci	r31, 0xFB	; 251
    16ce:	10 81       	ld	r17, Z
    16d0:	31 97       	sbiw	r30, 0x01	; 1
    16d2:	20 81       	ld	r18, Z
    16d4:	21 17       	cp	r18, r17
    16d6:	b1 f1       	breq	.+108    	; 0x1744 <_ZN13Configuration6updateEv+0x82>
        return false;

    }

    //there is something in buffer
    uint8_t index = eeprom_update_buffer_tail + 1;
    16d8:	1f 5f       	subi	r17, 0xFF	; 255
    if (index >= EEPROM_UPDATE_BUFFER_SIZE) index = 0;
    16da:	10 34       	cpi	r17, 0x40	; 64
    16dc:	08 f0       	brcs	.+2      	; 0x16e0 <_ZN13Configuration6updateEv+0x1e>
    16de:	10 e0       	ldi	r17, 0x00	; 0
    16e0:	ec 01       	movw	r28, r24
    //write
    switch(eeprom_update_bufer_param_type[index])   {
    16e2:	81 2f       	mov	r24, r17
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	fe 01       	movw	r30, r28
    16e8:	e8 0f       	add	r30, r24
    16ea:	f9 1f       	adc	r31, r25
    16ec:	ef 57       	subi	r30, 0x7F	; 127
    16ee:	fc 4f       	sbci	r31, 0xFC	; 252
    16f0:	20 81       	ld	r18, Z
    16f2:	22 30       	cpi	r18, 0x02	; 2
    16f4:	18 f0       	brcs	.+6      	; 0x16fc <_ZN13Configuration6updateEv+0x3a>
    16f6:	22 30       	cpi	r18, 0x02	; 2
    16f8:	89 f0       	breq	.+34     	; 0x171c <_ZN13Configuration6updateEv+0x5a>
    16fa:	1f c0       	rjmp	.+62     	; 0x173a <_ZN13Configuration6updateEv+0x78>

        case BIT_PARAMETER:
        case BYTE_PARAMETER:
        eeprom_update_byte((uint8_t*)eeprom_update_bufer_address[index], eeprom_update_bufer_value[index]);
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	8c 0f       	add	r24, r28
    1702:	9d 1f       	adc	r25, r29
    1704:	dc 01       	movw	r26, r24
    1706:	af 53       	subi	r26, 0x3F	; 63
    1708:	bc 4f       	sbci	r27, 0xFC	; 252
    170a:	fc 01       	movw	r30, r24
    170c:	ef 5b       	subi	r30, 0xBF	; 191
    170e:	fb 4f       	sbci	r31, 0xFB	; 251
    1710:	6c 91       	ld	r22, X
    1712:	80 81       	ld	r24, Z
    1714:	91 81       	ldd	r25, Z+1	; 0x01
    1716:	0e 94 21 83 	call	0x10642	; 0x10642 <eeprom_update_byte>
        break;
    171a:	0f c0       	rjmp	.+30     	; 0x173a <_ZN13Configuration6updateEv+0x78>

        case WORD_PARAMETER:
        eeprom_update_word((uint16_t*)eeprom_update_bufer_address[index], eeprom_update_bufer_value[index]);
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	8c 0f       	add	r24, r28
    1722:	9d 1f       	adc	r25, r29
    1724:	fc 01       	movw	r30, r24
    1726:	ef 53       	subi	r30, 0x3F	; 63
    1728:	fc 4f       	sbci	r31, 0xFC	; 252
    172a:	60 81       	ld	r22, Z
    172c:	71 81       	ldd	r23, Z+1	; 0x01
    172e:	e0 58       	subi	r30, 0x80	; 128
    1730:	ff 4f       	sbci	r31, 0xFF	; 255
    1732:	80 81       	ld	r24, Z
    1734:	91 81       	ldd	r25, Z+1	; 0x01
    1736:	0e 94 33 83 	call	0x10666	; 0x10666 <eeprom_update_word>
        break;

    }

    eeprom_update_buffer_tail = index;
    173a:	ce 53       	subi	r28, 0x3E	; 62
    173c:	db 4f       	sbci	r29, 0xFB	; 251
    173e:	18 83       	st	Y, r17
    return true;
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	01 c0       	rjmp	.+2      	; 0x1746 <_ZN13Configuration6updateEv+0x84>
    //write queued data to eeprom

    if (eeprom_update_buffer_head == eeprom_update_buffer_tail)   {

        //buffer is empty
        return false;
    1744:	80 e0       	ldi	r24, 0x00	; 0
    }

    eeprom_update_buffer_tail = index;
    return true;

}
    1746:	df 91       	pop	r29
    1748:	cf 91       	pop	r28
    174a:	1f 91       	pop	r17
    174c:	08 95       	ret

0000174e <_ZN13Configuration9queueDataEjjh>:
    }   return 0;

}

#ifdef ENABLE_ASYNC_UPDATE
void Configuration::queueData(uint16_t eepromAddress, uint16_t data, uint8_t parameterType)    {
    174e:	cf 92       	push	r12
    1750:	df 92       	push	r13
    1752:	ef 92       	push	r14
    1754:	ff 92       	push	r15
    1756:	0f 93       	push	r16
    1758:	1f 93       	push	r17
    175a:	cf 93       	push	r28
    175c:	df 93       	push	r29
    175e:	ec 01       	movw	r28, r24
    1760:	8b 01       	movw	r16, r22
    1762:	7a 01       	movw	r14, r20
    1764:	c2 2e       	mov	r12, r18

    uint8_t index = eeprom_update_buffer_head + 1;
    1766:	fc 01       	movw	r30, r24
    1768:	ef 53       	subi	r30, 0x3F	; 63
    176a:	fb 4f       	sbci	r31, 0xFB	; 251
    176c:	d0 80       	ld	r13, Z
    176e:	d3 94       	inc	r13
    if (index >= EEPROM_UPDATE_BUFFER_SIZE) index = 0;
    1770:	8f e3       	ldi	r24, 0x3F	; 63
    1772:	8d 15       	cp	r24, r13
    1774:	08 f4       	brcc	.+2      	; 0x1778 <_ZN13Configuration9queueDataEjjh+0x2a>
    1776:	d1 2c       	mov	r13, r1
    //if buffer is full, wait until there is some space
    if (eeprom_update_buffer_tail == index)  {
    1778:	fe 01       	movw	r30, r28
    177a:	ee 53       	subi	r30, 0x3E	; 62
    177c:	fb 4f       	sbci	r31, 0xFB	; 251
    177e:	80 81       	ld	r24, Z
    1780:	8d 11       	cpse	r24, r13
    1782:	04 c0       	rjmp	.+8      	; 0x178c <_ZN13Configuration9queueDataEjjh+0x3e>

        #if MODE_SERIAL > 0
        printf("Oops, buffer full. Waiting...\n");
        #endif

        while (!update());
    1784:	ce 01       	movw	r24, r28
    1786:	9d df       	rcall	.-198    	; 0x16c2 <_ZN13Configuration6updateEv>
    1788:	88 23       	and	r24, r24
    178a:	e1 f3       	breq	.-8      	; 0x1784 <_ZN13Configuration9queueDataEjjh+0x36>

    }

    eeprom_update_bufer_param_type[index] = parameterType;
    178c:	8d 2d       	mov	r24, r13
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	fe 01       	movw	r30, r28
    1792:	e8 0f       	add	r30, r24
    1794:	f9 1f       	adc	r31, r25
    1796:	ef 57       	subi	r30, 0x7F	; 127
    1798:	fc 4f       	sbci	r31, 0xFC	; 252
    179a:	c0 82       	st	Z, r12
    eeprom_update_bufer_value[index] = data;
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	8c 0f       	add	r24, r28
    17a2:	9d 1f       	adc	r25, r29
    17a4:	fc 01       	movw	r30, r24
    17a6:	ef 53       	subi	r30, 0x3F	; 63
    17a8:	fc 4f       	sbci	r31, 0xFC	; 252
    17aa:	f1 82       	std	Z+1, r15	; 0x01
    17ac:	e0 82       	st	Z, r14
    eeprom_update_bufer_address[index] = eepromAddress;
    17ae:	e0 58       	subi	r30, 0x80	; 128
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	11 83       	std	Z+1, r17	; 0x01
    17b4:	00 83       	st	Z, r16
    eeprom_update_buffer_head = index;
    17b6:	cf 53       	subi	r28, 0x3F	; 63
    17b8:	db 4f       	sbci	r29, 0xFB	; 251
    17ba:	d8 82       	st	Y, r13

}
    17bc:	df 91       	pop	r29
    17be:	cf 91       	pop	r28
    17c0:	1f 91       	pop	r17
    17c2:	0f 91       	pop	r16
    17c4:	ff 90       	pop	r15
    17c6:	ef 90       	pop	r14
    17c8:	df 90       	pop	r13
    17ca:	cf 90       	pop	r12
    17cc:	08 95       	ret

000017ce <_ZN13Configuration14writeParameterEhhiib>:
    for (int i=0; i<MIDI_SETTINGS; i++)
        eeprom_update_byte((uint8_t*)parameterAddress+i, defaultMIDIsettingArray[i]);

}

bool Configuration::writeParameter(uint8_t blockID, uint8_t sectionID, int16_t parameterID, int16_t newValue, bool async)    {
    17ce:	cf 92       	push	r12
    17d0:	df 92       	push	r13
    17d2:	ef 92       	push	r14
    17d4:	ff 92       	push	r15
    17d6:	0f 93       	push	r16
    17d8:	1f 93       	push	r17
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	ec 01       	movw	r28, r24
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    17e0:	50 e0       	ldi	r21, 0x00	; 0
    17e2:	fc 01       	movw	r30, r24
    17e4:	86 e3       	ldi	r24, 0x36	; 54
    17e6:	68 9f       	mul	r22, r24
    17e8:	e0 0d       	add	r30, r0
    17ea:	f1 1d       	adc	r31, r1
    17ec:	11 24       	eor	r1, r1
    17ee:	e1 59       	subi	r30, 0x91	; 145
    17f0:	fd 4f       	sbci	r31, 0xFD	; 253
    17f2:	a0 81       	ld	r26, Z
    17f4:	b1 81       	ldd	r27, Z+1	; 0x01
    17f6:	15 96       	adiw	r26, 0x05	; 5
    17f8:	c6 2e       	mov	r12, r22
    17fa:	d1 2c       	mov	r13, r1
    17fc:	fa 01       	movw	r30, r20
    17fe:	8b e1       	ldi	r24, 0x1B	; 27
    1800:	68 9f       	mul	r22, r24
    1802:	e0 0d       	add	r30, r0
    1804:	f1 1d       	adc	r31, r1
    1806:	11 24       	eor	r1, r1
    1808:	ee 0f       	add	r30, r30
    180a:	ff 1f       	adc	r31, r31
    180c:	ec 0f       	add	r30, r28
    180e:	fd 1f       	adc	r31, r29
    1810:	ef 58       	subi	r30, 0x8F	; 143
    1812:	fd 4f       	sbci	r31, 0xFD	; 253
    1814:	60 81       	ld	r22, Z
    1816:	71 81       	ldd	r23, Z+1	; 0x01
    1818:	a6 0f       	add	r26, r22
    181a:	b7 1f       	adc	r27, r23

    uint16_t startAddress = getSectionAddress(blockID, sectionID);

    if (startAddress > EEPROM_SIZE) {
    181c:	a1 30       	cpi	r26, 0x01	; 1
    181e:	80 e1       	ldi	r24, 0x10	; 16
    1820:	b8 07       	cpc	r27, r24
    1822:	08 f0       	brcs	.+2      	; 0x1826 <_ZN13Configuration14writeParameterEhhiib+0x58>
    1824:	9a c0       	rjmp	.+308    	; 0x195a <_ZN13Configuration14writeParameterEhhiib+0x18c>
        return blocks[blockID].blockStartAddress+START_OFFSET;

    };
    inline uint8_t getParameterType(uint8_t blockID, uint8_t sectionID) {

        return blocks[blockID].sectionParameterType[sectionID];
    1826:	86 e3       	ldi	r24, 0x36	; 54
    1828:	8c 9d       	mul	r24, r12
    182a:	f0 01       	movw	r30, r0
    182c:	8d 9d       	mul	r24, r13
    182e:	f0 0d       	add	r31, r0
    1830:	11 24       	eor	r1, r1
    1832:	ec 0f       	add	r30, r28
    1834:	fd 1f       	adc	r31, r29
    1836:	4e 0f       	add	r20, r30
    1838:	5f 1f       	adc	r21, r31
    183a:	fa 01       	movw	r30, r20
    183c:	e7 56       	subi	r30, 0x67	; 103
    183e:	fd 4f       	sbci	r31, 0xFD	; 253

    uint8_t arrayIndex;
    uint8_t arrayValue;
    uint8_t parameterIndex;

    switch(parameterType)   {
    1840:	80 81       	ld	r24, Z
    1842:	81 30       	cpi	r24, 0x01	; 1
    1844:	09 f4       	brne	.+2      	; 0x1848 <_ZN13Configuration14writeParameterEhhiib+0x7a>
    1846:	50 c0       	rjmp	.+160    	; 0x18e8 <_ZN13Configuration14writeParameterEhhiib+0x11a>
    1848:	20 f0       	brcs	.+8      	; 0x1852 <_ZN13Configuration14writeParameterEhhiib+0x84>
    184a:	82 30       	cpi	r24, 0x02	; 2
    184c:	09 f4       	brne	.+2      	; 0x1850 <_ZN13Configuration14writeParameterEhhiib+0x82>
    184e:	68 c0       	rjmp	.+208    	; 0x1920 <_ZN13Configuration14writeParameterEhhiib+0x152>
    1850:	86 c0       	rjmp	.+268    	; 0x195e <_ZN13Configuration14writeParameterEhhiib+0x190>

        case BIT_PARAMETER:
        arrayIndex = parameterID/8;
    1852:	c9 01       	movw	r24, r18
    1854:	33 23       	and	r19, r19
    1856:	0c f4       	brge	.+2      	; 0x185a <_ZN13Configuration14writeParameterEhhiib+0x8c>
    1858:	07 96       	adiw	r24, 0x07	; 7
    185a:	95 95       	asr	r25
    185c:	87 95       	ror	r24
    185e:	95 95       	asr	r25
    1860:	87 95       	ror	r24
    1862:	95 95       	asr	r25
    1864:	87 95       	ror	r24
        parameterIndex = parameterID - 8*arrayIndex;
    1866:	98 2f       	mov	r25, r24
    1868:	99 0f       	add	r25, r25
    186a:	99 0f       	add	r25, r25
    186c:	99 0f       	add	r25, r25
    186e:	f2 2e       	mov	r15, r18
    1870:	f9 1a       	sub	r15, r25
        arrayValue = eeprom_read_byte((uint8_t*)startAddress+arrayIndex);
    1872:	6d 01       	movw	r12, r26
    1874:	c8 0e       	add	r12, r24
    1876:	d1 1c       	adc	r13, r1
    1878:	c6 01       	movw	r24, r12
    187a:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
        bitWrite(arrayValue, parameterIndex, newValue);
    187e:	01 2b       	or	r16, r17
    1880:	71 f0       	breq	.+28     	; 0x189e <_ZN13Configuration14writeParameterEhhiib+0xd0>
    1882:	41 e0       	ldi	r20, 0x01	; 1
    1884:	50 e0       	ldi	r21, 0x00	; 0
    1886:	60 e0       	ldi	r22, 0x00	; 0
    1888:	70 e0       	ldi	r23, 0x00	; 0
    188a:	04 c0       	rjmp	.+8      	; 0x1894 <_ZN13Configuration14writeParameterEhhiib+0xc6>
    188c:	44 0f       	add	r20, r20
    188e:	55 1f       	adc	r21, r21
    1890:	66 1f       	adc	r22, r22
    1892:	77 1f       	adc	r23, r23
    1894:	fa 94       	dec	r15
    1896:	d2 f7       	brpl	.-12     	; 0x188c <_ZN13Configuration14writeParameterEhhiib+0xbe>
    1898:	18 2f       	mov	r17, r24
    189a:	14 2b       	or	r17, r20
    189c:	0e c0       	rjmp	.+28     	; 0x18ba <_ZN13Configuration14writeParameterEhhiib+0xec>
    189e:	41 e0       	ldi	r20, 0x01	; 1
    18a0:	50 e0       	ldi	r21, 0x00	; 0
    18a2:	60 e0       	ldi	r22, 0x00	; 0
    18a4:	70 e0       	ldi	r23, 0x00	; 0
    18a6:	04 c0       	rjmp	.+8      	; 0x18b0 <_ZN13Configuration14writeParameterEhhiib+0xe2>
    18a8:	44 0f       	add	r20, r20
    18aa:	55 1f       	adc	r21, r21
    18ac:	66 1f       	adc	r22, r22
    18ae:	77 1f       	adc	r23, r23
    18b0:	fa 94       	dec	r15
    18b2:	d2 f7       	brpl	.-12     	; 0x18a8 <_ZN13Configuration14writeParameterEhhiib+0xda>
    18b4:	40 95       	com	r20
    18b6:	18 2f       	mov	r17, r24
    18b8:	14 23       	and	r17, r20
        #ifdef ENABLE_ASYNC_UPDATE
        if (async)  {
    18ba:	ee 20       	and	r14, r14
    18bc:	41 f0       	breq	.+16     	; 0x18ce <_ZN13Configuration14writeParameterEhhiib+0x100>

            queueData(startAddress+arrayIndex, arrayValue, BIT_PARAMETER);
    18be:	41 2f       	mov	r20, r17
    18c0:	50 e0       	ldi	r21, 0x00	; 0
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	b6 01       	movw	r22, r12
    18c6:	ce 01       	movw	r24, r28
    18c8:	42 df       	rcall	.-380    	; 0x174e <_ZN13Configuration9queueDataEjjh>
            return true;
    18ca:	21 e0       	ldi	r18, 0x01	; 1
    18cc:	49 c0       	rjmp	.+146    	; 0x1960 <_ZN13Configuration14writeParameterEhhiib+0x192>

        } else {

            eeprom_update_byte((uint8_t*)startAddress+arrayIndex, arrayValue);
    18ce:	61 2f       	mov	r22, r17
    18d0:	c6 01       	movw	r24, r12
    18d2:	0e 94 21 83 	call	0x10642	; 0x10642 <eeprom_update_byte>
            return (arrayValue == eeprom_read_byte((uint8_t*)startAddress+arrayIndex));
    18d6:	c6 01       	movw	r24, r12
    18d8:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    18dc:	21 e0       	ldi	r18, 0x01	; 1
    18de:	81 17       	cp	r24, r17
    18e0:	09 f4       	brne	.+2      	; 0x18e4 <_ZN13Configuration14writeParameterEhhiib+0x116>
    18e2:	3e c0       	rjmp	.+124    	; 0x1960 <_ZN13Configuration14writeParameterEhhiib+0x192>
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	3c c0       	rjmp	.+120    	; 0x1960 <_ZN13Configuration14writeParameterEhhiib+0x192>
        #endif
        break;

        case BYTE_PARAMETER:
        #ifdef ENABLE_ASYNC_UPDATE
        if (async)  {
    18e8:	ee 20       	and	r14, r14
    18ea:	49 f0       	breq	.+18     	; 0x18fe <_ZN13Configuration14writeParameterEhhiib+0x130>

            queueData(startAddress+parameterID, newValue, BYTE_PARAMETER);
    18ec:	bd 01       	movw	r22, r26
    18ee:	62 0f       	add	r22, r18
    18f0:	73 1f       	adc	r23, r19
    18f2:	21 e0       	ldi	r18, 0x01	; 1
    18f4:	a8 01       	movw	r20, r16
    18f6:	ce 01       	movw	r24, r28
    18f8:	2a df       	rcall	.-428    	; 0x174e <_ZN13Configuration9queueDataEjjh>
            return true;
    18fa:	21 e0       	ldi	r18, 0x01	; 1
    18fc:	31 c0       	rjmp	.+98     	; 0x1960 <_ZN13Configuration14writeParameterEhhiib+0x192>

        }   else {

            eeprom_update_byte((uint8_t*)startAddress+parameterID, newValue);
    18fe:	ed 01       	movw	r28, r26
    1900:	c2 0f       	add	r28, r18
    1902:	d3 1f       	adc	r29, r19
    1904:	60 2f       	mov	r22, r16
    1906:	ce 01       	movw	r24, r28
    1908:	0e 94 21 83 	call	0x10642	; 0x10642 <eeprom_update_byte>
            return (newValue == eeprom_read_byte((uint8_t*)startAddress+parameterID));
    190c:	ce 01       	movw	r24, r28
    190e:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	21 e0       	ldi	r18, 0x01	; 1
    1916:	80 17       	cp	r24, r16
    1918:	91 07       	cpc	r25, r17
    191a:	11 f1       	breq	.+68     	; 0x1960 <_ZN13Configuration14writeParameterEhhiib+0x192>
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	20 c0       	rjmp	.+64     	; 0x1960 <_ZN13Configuration14writeParameterEhhiib+0x192>
        #endif
        break;

        case WORD_PARAMETER:
        #ifdef ENABLE_ASYNC_UPDATE
        if (async)  {
    1920:	ee 20       	and	r14, r14
    1922:	49 f0       	breq	.+18     	; 0x1936 <_ZN13Configuration14writeParameterEhhiib+0x168>

            queueData(startAddress+parameterID, newValue, WORD_PARAMETER);
    1924:	bd 01       	movw	r22, r26
    1926:	62 0f       	add	r22, r18
    1928:	73 1f       	adc	r23, r19
    192a:	22 e0       	ldi	r18, 0x02	; 2
    192c:	a8 01       	movw	r20, r16
    192e:	ce 01       	movw	r24, r28
    1930:	0e df       	rcall	.-484    	; 0x174e <_ZN13Configuration9queueDataEjjh>
            return true;
    1932:	21 e0       	ldi	r18, 0x01	; 1
    1934:	15 c0       	rjmp	.+42     	; 0x1960 <_ZN13Configuration14writeParameterEhhiib+0x192>

        }   else {

            eeprom_update_word((uint16_t*)startAddress+parameterID, newValue);
    1936:	22 0f       	add	r18, r18
    1938:	33 1f       	adc	r19, r19
    193a:	ed 01       	movw	r28, r26
    193c:	c2 0f       	add	r28, r18
    193e:	d3 1f       	adc	r29, r19
    1940:	b8 01       	movw	r22, r16
    1942:	ce 01       	movw	r24, r28
    1944:	0e 94 33 83 	call	0x10666	; 0x10666 <eeprom_update_word>
            return (newValue == (int16_t)eeprom_read_word((uint16_t*)startAddress+parameterID));
    1948:	ce 01       	movw	r24, r28
    194a:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    194e:	21 e0       	ldi	r18, 0x01	; 1
    1950:	80 17       	cp	r24, r16
    1952:	91 07       	cpc	r25, r17
    1954:	29 f0       	breq	.+10     	; 0x1960 <_ZN13Configuration14writeParameterEhhiib+0x192>
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	03 c0       	rjmp	.+6      	; 0x1960 <_ZN13Configuration14writeParameterEhhiib+0x192>
    if (startAddress > EEPROM_SIZE) {

        #if MODE_SERIAL > 0
            printf("Requested address out of EEPROM memory range\n");
        #endif
        return 0;
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	01 c0       	rjmp	.+2      	; 0x1960 <_ZN13Configuration14writeParameterEhhiib+0x192>
        eeprom_update_word((uint16_t*)startAddress+parameterID, newValue);
        return (newValue == (int16_t)eeprom_read_word((uint16_t*)startAddress+parameterID));
        #endif
        break;

    }   return 0;
    195e:	20 e0       	ldi	r18, 0x00	; 0

}
    1960:	82 2f       	mov	r24, r18
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	1f 91       	pop	r17
    1968:	0f 91       	pop	r16
    196a:	ff 90       	pop	r15
    196c:	ef 90       	pop	r14
    196e:	df 90       	pop	r13
    1970:	cf 90       	pop	r12
    1972:	08 95       	ret

00001974 <_GLOBAL__sub_I__ZN13Configuration12factoryResetE18factoryResetType_t>:
    return true;

}
#endif

Configuration configuration;
    1974:	8c e0       	ldi	r24, 0x0C	; 12
    1976:	92 e0       	ldi	r25, 0x02	; 2
    1978:	50 ca       	rjmp	.-2912   	; 0xe1a <_ZN13ConfigurationC1Ev>
    197a:	08 95       	ret

0000197c <_ZN13Configuration18createMemoryLayoutEv>:
void Configuration::createMemoryLayout() {

    //create memory layout

    {
        blocks[CONF_BLOCK_PROGRAM].sections = PROGRAM_SECTIONS;
    197c:	fc 01       	movw	r30, r24
    197e:	e2 59       	subi	r30, 0x92	; 146
    1980:	fd 4f       	sbci	r31, 0xFD	; 253
    1982:	25 e0       	ldi	r18, 0x05	; 5
    1984:	20 83       	st	Z, r18

        blocks[CONF_BLOCK_PROGRAM].preserveOnPartialReset = false;
    1986:	f5 96       	adiw	r30, 0x35	; 53
    1988:	10 82       	st	Z, r1

        blocks[CONF_BLOCK_PROGRAM].sectionParameters[programLastActiveProgramSection] = 1;
    198a:	7e 97       	sbiw	r30, 0x1e	; 30
    198c:	61 e0       	ldi	r22, 0x01	; 1
    198e:	70 e0       	ldi	r23, 0x00	; 0
    1990:	71 83       	std	Z+1, r23	; 0x01
    1992:	60 83       	st	Z, r22
        blocks[CONF_BLOCK_PROGRAM].sectionParameterType[programLastActiveProgramSection] = BYTE_PARAMETER;
    1994:	74 96       	adiw	r30, 0x14	; 20
    1996:	21 e0       	ldi	r18, 0x01	; 1
    1998:	20 83       	st	Z, r18

        blocks[CONF_BLOCK_PROGRAM].sectionParameters[programLastActiveScaleSection] = NUMBER_OF_PROGRAMS;
    199a:	72 97       	sbiw	r30, 0x12	; 18
    199c:	4a e0       	ldi	r20, 0x0A	; 10
    199e:	50 e0       	ldi	r21, 0x00	; 0
    19a0:	51 83       	std	Z+1, r21	; 0x01
    19a2:	40 83       	st	Z, r20
        blocks[CONF_BLOCK_PROGRAM].sectionParameterType[programLastActiveScaleSection] = BYTE_PARAMETER;
    19a4:	73 96       	adiw	r30, 0x13	; 19
    19a6:	20 83       	st	Z, r18

        blocks[CONF_BLOCK_PROGRAM].sectionParameters[programGlobalSettingsSection] = GLOBAL_PROGRAM_SETTINGS*NUMBER_OF_PROGRAMS;
    19a8:	71 97       	sbiw	r30, 0x11	; 17
    19aa:	4e eb       	ldi	r20, 0xBE	; 190
    19ac:	50 e0       	ldi	r21, 0x00	; 0
    19ae:	51 83       	std	Z+1, r21	; 0x01
    19b0:	40 83       	st	Z, r20
        blocks[CONF_BLOCK_PROGRAM].sectionParameterType[programGlobalSettingsSection] = BYTE_PARAMETER;
    19b2:	72 96       	adiw	r30, 0x12	; 18
    19b4:	20 83       	st	Z, r18

        blocks[CONF_BLOCK_PROGRAM].sectionParameters[programLocalSettingsSection] = LOCAL_PROGRAM_SETTINGS*MAX_PADS*NUMBER_OF_PROGRAMS;
    19b6:	70 97       	sbiw	r30, 0x10	; 16
    19b8:	42 e9       	ldi	r20, 0x92	; 146
    19ba:	54 e0       	ldi	r21, 0x04	; 4
    19bc:	51 83       	std	Z+1, r21	; 0x01
    19be:	40 83       	st	Z, r20
        blocks[CONF_BLOCK_PROGRAM].sectionParameterType[programLocalSettingsSection] = BYTE_PARAMETER;
    19c0:	71 96       	adiw	r30, 0x11	; 17
    19c2:	20 83       	st	Z, r18

        blocks[CONF_BLOCK_PROGRAM].sectionParameters[programScalePredefinedSection] = PREDEFINED_SCALE_PARAMETERS*NUMBER_OF_PREDEFINED_SCALES*NUMBER_OF_PROGRAMS;
    19c4:	3f 97       	sbiw	r30, 0x0f	; 15
    19c6:	42 ed       	ldi	r20, 0xD2	; 210
    19c8:	50 e0       	ldi	r21, 0x00	; 0
    19ca:	51 83       	std	Z+1, r21	; 0x01
    19cc:	40 83       	st	Z, r20
        blocks[CONF_BLOCK_PROGRAM].sectionParameterType[programScalePredefinedSection] = BYTE_PARAMETER;
    19ce:	70 96       	adiw	r30, 0x10	; 16
    19d0:	20 83       	st	Z, r18
    }

    {
        blocks[CONF_BLOCK_USER_SCALE].sections = USER_SCALE_SECTIONS;
    19d2:	37 96       	adiw	r30, 0x07	; 7
    19d4:	20 83       	st	Z, r18

        blocks[CONF_BLOCK_USER_SCALE].preserveOnPartialReset = false;
    19d6:	f5 96       	adiw	r30, 0x35	; 53
    19d8:	10 82       	st	Z, r1

        blocks[CONF_BLOCK_USER_SCALE].sectionParameters[padNotesSection] = MAX_PADS*NOTES_PER_PAD*NUMBER_OF_USER_SCALES;
    19da:	7e 97       	sbiw	r30, 0x1e	; 30
    19dc:	46 e7       	ldi	r20, 0x76	; 118
    19de:	52 e0       	ldi	r21, 0x02	; 2
    19e0:	51 83       	std	Z+1, r21	; 0x01
    19e2:	40 83       	st	Z, r20
        blocks[CONF_BLOCK_USER_SCALE].sectionParameterType[padNotesSection] = BYTE_PARAMETER;
    19e4:	74 96       	adiw	r30, 0x14	; 20
    19e6:	20 83       	st	Z, r18
    }

    {
        blocks[CONF_BLOCK_PAD_CALIBRATION].sections = PAD_CALIBRATION_SECTIONS;
    19e8:	3b 96       	adiw	r30, 0x0b	; 11
    19ea:	37 e0       	ldi	r19, 0x07	; 7
    19ec:	30 83       	st	Z, r19

        blocks[CONF_BLOCK_PAD_CALIBRATION].preserveOnPartialReset = true;
    19ee:	f5 96       	adiw	r30, 0x35	; 53
    19f0:	20 83       	st	Z, r18

        blocks[CONF_BLOCK_PAD_CALIBRATION].sectionParameters[padCalibrationStatus] = 1;
    19f2:	7e 97       	sbiw	r30, 0x1e	; 30
    19f4:	71 83       	std	Z+1, r23	; 0x01
    19f6:	60 83       	st	Z, r22
        blocks[CONF_BLOCK_PAD_CALIBRATION].sectionParameterType[padCalibrationStatus] = BYTE_PARAMETER;
    19f8:	74 96       	adiw	r30, 0x14	; 20
    19fa:	20 83       	st	Z, r18

        blocks[CONF_BLOCK_PAD_CALIBRATION].sectionParameters[padCalibrationPressureLowerSection] = MAX_PADS;
    19fc:	72 97       	sbiw	r30, 0x12	; 18
    19fe:	49 e0       	ldi	r20, 0x09	; 9
    1a00:	50 e0       	ldi	r21, 0x00	; 0
    1a02:	51 83       	std	Z+1, r21	; 0x01
    1a04:	40 83       	st	Z, r20
        blocks[CONF_BLOCK_PAD_CALIBRATION].sectionParameterType[padCalibrationPressureLowerSection] = WORD_PARAMETER;
    1a06:	73 96       	adiw	r30, 0x13	; 19
    1a08:	32 e0       	ldi	r19, 0x02	; 2
    1a0a:	30 83       	st	Z, r19

        blocks[CONF_BLOCK_PAD_CALIBRATION].sectionParameters[padCalibrationPressureUpperSection] = MAX_PADS;
    1a0c:	71 97       	sbiw	r30, 0x11	; 17
    1a0e:	51 83       	std	Z+1, r21	; 0x01
    1a10:	40 83       	st	Z, r20
        blocks[CONF_BLOCK_PAD_CALIBRATION].sectionParameterType[padCalibrationPressureUpperSection] = WORD_PARAMETER;
    1a12:	72 96       	adiw	r30, 0x12	; 18
    1a14:	30 83       	st	Z, r19

        blocks[CONF_BLOCK_PAD_CALIBRATION].sectionParameters[padCalibrationXlowerSection] = MAX_PADS;
    1a16:	70 97       	sbiw	r30, 0x10	; 16
    1a18:	51 83       	std	Z+1, r21	; 0x01
    1a1a:	40 83       	st	Z, r20
        blocks[CONF_BLOCK_PAD_CALIBRATION].sectionParameterType[padCalibrationXlowerSection] = WORD_PARAMETER;
    1a1c:	71 96       	adiw	r30, 0x11	; 17
    1a1e:	30 83       	st	Z, r19

        blocks[CONF_BLOCK_PAD_CALIBRATION].sectionParameters[padCalibrationXupperSection] = MAX_PADS;
    1a20:	3f 97       	sbiw	r30, 0x0f	; 15
    1a22:	51 83       	std	Z+1, r21	; 0x01
    1a24:	40 83       	st	Z, r20
        blocks[CONF_BLOCK_PAD_CALIBRATION].sectionParameterType[padCalibrationXupperSection] = WORD_PARAMETER;
    1a26:	70 96       	adiw	r30, 0x10	; 16
    1a28:	30 83       	st	Z, r19

        blocks[CONF_BLOCK_PAD_CALIBRATION].sectionParameters[padCalibrationYlowerSection] = MAX_PADS;
    1a2a:	3e 97       	sbiw	r30, 0x0e	; 14
    1a2c:	51 83       	std	Z+1, r21	; 0x01
    1a2e:	40 83       	st	Z, r20
        blocks[CONF_BLOCK_PAD_CALIBRATION].sectionParameterType[padCalibrationYlowerSection] = WORD_PARAMETER;
    1a30:	3f 96       	adiw	r30, 0x0f	; 15
    1a32:	30 83       	st	Z, r19

        blocks[CONF_BLOCK_PAD_CALIBRATION].sectionParameters[padCalibrationYupperSection] = MAX_PADS;
    1a34:	3d 97       	sbiw	r30, 0x0d	; 13
    1a36:	51 83       	std	Z+1, r21	; 0x01
    1a38:	40 83       	st	Z, r20
        blocks[CONF_BLOCK_PAD_CALIBRATION].sectionParameterType[padCalibrationYupperSection] = WORD_PARAMETER;
    1a3a:	3e 96       	adiw	r30, 0x0e	; 14
    1a3c:	30 83       	st	Z, r19
    }

    {
        blocks[CONF_BLOCK_MIDI].sections = 1;
    1a3e:	35 96       	adiw	r30, 0x05	; 5
    1a40:	20 83       	st	Z, r18

        blocks[CONF_BLOCK_MIDI].preserveOnPartialReset = false;
    1a42:	f5 96       	adiw	r30, 0x35	; 53
    1a44:	10 82       	st	Z, r1

        blocks[CONF_BLOCK_MIDI].sectionParameters[0] = MIDI_SETTINGS;
    1a46:	7e 97       	sbiw	r30, 0x1e	; 30
    1a48:	43 e0       	ldi	r20, 0x03	; 3
    1a4a:	50 e0       	ldi	r21, 0x00	; 0
    1a4c:	51 83       	std	Z+1, r21	; 0x01
    1a4e:	40 83       	st	Z, r20
        blocks[CONF_BLOCK_MIDI].sectionParameterType[0] = BYTE_PARAMETER;
    1a50:	74 96       	adiw	r30, 0x14	; 20
    1a52:	20 83       	st	Z, r18
    }

    {
        blocks[CONF_BLOCK_PRESSURE_SETTINGS].sections = PRESSURE_SETTINGS_SECTIONS;
    1a54:	3b 96       	adiw	r30, 0x0b	; 11
    1a56:	30 83       	st	Z, r19

        blocks[CONF_BLOCK_PRESSURE_SETTINGS].preserveOnPartialReset = false;
    1a58:	f5 96       	adiw	r30, 0x35	; 53
    1a5a:	10 82       	st	Z, r1

        blocks[CONF_BLOCK_PRESSURE_SETTINGS].sectionParameters[pressureSensitivitySection] = 1;
    1a5c:	7e 97       	sbiw	r30, 0x1e	; 30
    1a5e:	71 83       	std	Z+1, r23	; 0x01
    1a60:	60 83       	st	Z, r22
        blocks[CONF_BLOCK_PRESSURE_SETTINGS].sectionParameterType[pressureSensitivitySection] = BYTE_PARAMETER;
    1a62:	74 96       	adiw	r30, 0x14	; 20
    1a64:	20 83       	st	Z, r18

        blocks[CONF_BLOCK_PRESSURE_SETTINGS].sectionParameters[pressureCurveSection] = 1;
    1a66:	72 97       	sbiw	r30, 0x12	; 18
    1a68:	71 83       	std	Z+1, r23	; 0x01
    1a6a:	60 83       	st	Z, r22
        blocks[CONF_BLOCK_PRESSURE_SETTINGS].sectionParameterType[pressureCurveSection] = BYTE_PARAMETER;
    1a6c:	73 96       	adiw	r30, 0x13	; 19
    1a6e:	20 83       	st	Z, r18
    1a70:	08 95       	ret

00001a72 <_Z15setADCprescaler12adcPrescaler>:
}

void disconnectDigitalInADC(uint8_t channel) {

    if (channel < 6)
        DIDR0 |= (1<<channel);
    1a72:	ea e7       	ldi	r30, 0x7A	; 122
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	90 81       	ld	r25, Z
    1a78:	9f 77       	andi	r25, 0x7F	; 127
    1a7a:	90 83       	st	Z, r25
    1a7c:	81 30       	cpi	r24, 0x01	; 1
    1a7e:	61 f0       	breq	.+24     	; 0x1a98 <_Z15setADCprescaler12adcPrescaler+0x26>
    1a80:	28 f0       	brcs	.+10     	; 0x1a8c <_Z15setADCprescaler12adcPrescaler+0x1a>
    1a82:	82 30       	cpi	r24, 0x02	; 2
    1a84:	79 f0       	breq	.+30     	; 0x1aa4 <_Z15setADCprescaler12adcPrescaler+0x32>
    1a86:	83 30       	cpi	r24, 0x03	; 3
    1a88:	99 f0       	breq	.+38     	; 0x1ab0 <_Z15setADCprescaler12adcPrescaler+0x3e>
    1a8a:	08 95       	ret
    1a8c:	ea e7       	ldi	r30, 0x7A	; 122
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	84 60       	ori	r24, 0x04	; 4
    1a94:	80 83       	st	Z, r24
    1a96:	08 95       	ret
    1a98:	ea e7       	ldi	r30, 0x7A	; 122
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	85 60       	ori	r24, 0x05	; 5
    1aa0:	80 83       	st	Z, r24
    1aa2:	08 95       	ret
    1aa4:	ea e7       	ldi	r30, 0x7A	; 122
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	86 60       	ori	r24, 0x06	; 6
    1aac:	80 83       	st	Z, r24
    1aae:	08 95       	ret
    1ab0:	ea e7       	ldi	r30, 0x7A	; 122
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	87 60       	ori	r24, 0x07	; 7
    1ab8:	80 83       	st	Z, r24
    1aba:	08 95       	ret

00001abc <_Z19setVoltageReference7adcVRef>:
    1abc:	81 30       	cpi	r24, 0x01	; 1
    1abe:	69 f0       	breq	.+26     	; 0x1ada <_Z19setVoltageReference7adcVRef+0x1e>
    1ac0:	18 f0       	brcs	.+6      	; 0x1ac8 <_Z19setVoltageReference7adcVRef+0xc>
    1ac2:	82 30       	cpi	r24, 0x02	; 2
    1ac4:	99 f0       	breq	.+38     	; 0x1aec <_Z19setVoltageReference7adcVRef+0x30>
    1ac6:	08 95       	ret
    1ac8:	ec e7       	ldi	r30, 0x7C	; 124
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	8f 7b       	andi	r24, 0xBF	; 191
    1ad0:	80 83       	st	Z, r24
    1ad2:	80 81       	ld	r24, Z
    1ad4:	8f 77       	andi	r24, 0x7F	; 127
    1ad6:	80 83       	st	Z, r24
    1ad8:	08 95       	ret
    1ada:	ec e7       	ldi	r30, 0x7C	; 124
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	80 64       	ori	r24, 0x40	; 64
    1ae2:	80 83       	st	Z, r24
    1ae4:	80 81       	ld	r24, Z
    1ae6:	8f 77       	andi	r24, 0x7F	; 127
    1ae8:	80 83       	st	Z, r24
    1aea:	08 95       	ret
    1aec:	ec e7       	ldi	r30, 0x7C	; 124
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	80 64       	ori	r24, 0x40	; 64
    1af4:	80 83       	st	Z, r24
    1af6:	80 81       	ld	r24, Z
    1af8:	80 68       	ori	r24, 0x80	; 128
    1afa:	80 83       	st	Z, r24
    1afc:	08 95       	ret

00001afe <_Z13setADCchannelh>:
    1afe:	88 30       	cpi	r24, 0x08	; 8
    1b00:	40 f4       	brcc	.+16     	; 0x1b12 <_Z13setADCchannelh+0x14>
    1b02:	ec e7       	ldi	r30, 0x7C	; 124
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	90 81       	ld	r25, Z
    1b08:	8f 70       	andi	r24, 0x0F	; 15
    1b0a:	90 7f       	andi	r25, 0xF0	; 240
    1b0c:	89 2b       	or	r24, r25
    1b0e:	80 83       	st	Z, r24
    1b10:	00 00       	nop
    1b12:	08 95       	ret

00001b14 <_Z11getADCvaluev>:

}

int16_t getADCvalue()   {

    if ((ADCSRA >> ADSC) & 0x01)  {
    1b14:	80 91 7a 00 	lds	r24, 0x007A
    1b18:	86 fd       	sbrc	r24, 6
    1b1a:	13 c0       	rjmp	.+38     	; 0x1b42 <_Z11getADCvaluev+0x2e>
        return -1;

    }   else {

        //no conversion running
        if ((ADCSRA >> ADIE) & 0x01) { return adcValue; }
    1b1c:	80 91 7a 00 	lds	r24, 0x007A
    1b20:	83 ff       	sbrs	r24, 3
    1b22:	05 c0       	rjmp	.+10     	; 0x1b2e <_Z11getADCvaluev+0x1a>
    1b24:	80 91 cf 06 	lds	r24, 0x06CF
    1b28:	90 91 d0 06 	lds	r25, 0x06D0
    1b2c:	08 95       	ret
        else {

            //wait until ADC conversion is complete
            while (ADCSRA & (1<<ADSC));
    1b2e:	ea e7       	ldi	r30, 0x7A	; 122
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	86 fd       	sbrc	r24, 6
    1b36:	fd cf       	rjmp	.-6      	; 0x1b32 <_Z11getADCvaluev+0x1e>
            return ADC;
    1b38:	80 91 78 00 	lds	r24, 0x0078
    1b3c:	90 91 79 00 	lds	r25, 0x0079
    1b40:	08 95       	ret
int16_t getADCvalue()   {

    if ((ADCSRA >> ADSC) & 0x01)  {

        //conversion is still running
        return -1;
    1b42:	8f ef       	ldi	r24, 0xFF	; 255
    1b44:	9f ef       	ldi	r25, 0xFF	; 255

        }

    }

}
    1b46:	08 95       	ret

00001b48 <_Z7initADC12adcPrescalerb7adcVRef>:
#include <avr/cpufunc.h>
#include <avr/interrupt.h>

int16_t adcValue = 0;

void initADC(adcPrescaler prescaler, bool interruptEnabled, adcVRef vRef) {
    1b48:	0f 93       	push	r16
    1b4a:	1f 93       	push	r17
    1b4c:	cf 93       	push	r28
    1b4e:	df 93       	push	r29
    1b50:	08 2f       	mov	r16, r24
    1b52:	16 2f       	mov	r17, r22
    1b54:	84 2f       	mov	r24, r20

    ADMUX = 0x00;
    1b56:	10 92 7c 00 	sts	0x007C, r1
    ADCSRA = 0x0;
    1b5a:	ca e7       	ldi	r28, 0x7A	; 122
    1b5c:	d0 e0       	ldi	r29, 0x00	; 0
    1b5e:	18 82       	st	Y, r1

    //set reference voltage
    setVoltageReference(vRef);
    1b60:	ad df       	rcall	.-166    	; 0x1abc <_Z19setVoltageReference7adcVRef>

    //set prescaler
    setADCprescaler(prescaler);
    1b62:	80 2f       	mov	r24, r16
    1b64:	86 df       	rcall	.-244    	; 0x1a72 <_Z15setADCprescaler12adcPrescaler>

    //enable high-speed mode if available
    #ifdef ADHSM
        ADCSRB |= (1<<ADHSM);
    1b66:	eb e7       	ldi	r30, 0x7B	; 123
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	80 68       	ori	r24, 0x80	; 128
    1b6e:	80 83       	st	Z, r24
    #endif

    setADCchannel(0);
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	c5 df       	rcall	.-118    	; 0x1afe <_Z13setADCchannelh>

    adcEnable();
    1b74:	88 81       	ld	r24, Y
    1b76:	80 68       	ori	r24, 0x80	; 128
    1b78:	88 83       	st	Y, r24

    for (int i=0; i<5; i++)
        getADCvalue(); //few dummy reads to init adc
    1b7a:	cc df       	rcall	.-104    	; 0x1b14 <_Z11getADCvaluev>
    1b7c:	cb df       	rcall	.-106    	; 0x1b14 <_Z11getADCvaluev>
    1b7e:	ca df       	rcall	.-108    	; 0x1b14 <_Z11getADCvaluev>
    1b80:	c9 df       	rcall	.-110    	; 0x1b14 <_Z11getADCvaluev>
    1b82:	c8 df       	rcall	.-112    	; 0x1b14 <_Z11getADCvaluev>

    if (interruptEnabled) adcInterruptEnable();
    1b84:	11 23       	and	r17, r17
    1b86:	29 f0       	breq	.+10     	; 0x1b92 <_Z7initADC12adcPrescalerb7adcVRef+0x4a>
    1b88:	ea e7       	ldi	r30, 0x7A	; 122
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	88 60       	ori	r24, 0x08	; 8
    1b90:	80 83       	st	Z, r24

}
    1b92:	df 91       	pop	r29
    1b94:	cf 91       	pop	r28
    1b96:	1f 91       	pop	r17
    1b98:	0f 91       	pop	r16
    1b9a:	08 95       	ret

00001b9c <__vector_29>:

    }

}

ISR(ADC_vect)   {
    1b9c:	1f 92       	push	r1
    1b9e:	0f 92       	push	r0
    1ba0:	0f b6       	in	r0, 0x3f	; 63
    1ba2:	0f 92       	push	r0
    1ba4:	11 24       	eor	r1, r1
    1ba6:	8f 93       	push	r24
    1ba8:	9f 93       	push	r25

    adcValue = ADC;
    1baa:	80 91 78 00 	lds	r24, 0x0078
    1bae:	90 91 79 00 	lds	r25, 0x0079
    1bb2:	90 93 d0 06 	sts	0x06D0, r25
    1bb6:	80 93 cf 06 	sts	0x06CF, r24

}
    1bba:	9f 91       	pop	r25
    1bbc:	8f 91       	pop	r24
    1bbe:	0f 90       	pop	r0
    1bc0:	0f be       	out	0x3f, r0	; 63
    1bc2:	0f 90       	pop	r0
    1bc4:	1f 90       	pop	r1
    1bc6:	18 95       	reti

00001bc8 <_Z20analogReadInProgressv>:

bool analogReadInProgress() {

    return ((ADCSRA >> ADSC) & 0x01);
    1bc8:	80 91 7a 00 	lds	r24, 0x007A

    1bcc:	86 fb       	bst	r24, 6
    1bce:	88 27       	eor	r24, r24
    1bd0:	80 f9       	bld	r24, 0
    1bd2:	08 95       	ret

00001bd4 <_Z8i2c_initv>:
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
    1bd4:	8c e0       	ldi	r24, 0x0C	; 12
    1bd6:	80 93 b8 00 	sts	0x00B8, r24
    1bda:	08 95       	ret

00001bdc <_Z9i2c_starth>:
    1bdc:	ec eb       	ldi	r30, 0xBC	; 188
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	10 82       	st	Z, r1
    1be2:	94 ea       	ldi	r25, 0xA4	; 164
    1be4:	90 83       	st	Z, r25
    1be6:	90 81       	ld	r25, Z
    1be8:	99 23       	and	r25, r25
    1bea:	ec f7       	brge	.-6      	; 0x1be6 <_Z9i2c_starth+0xa>
    1bec:	90 91 b9 00 	lds	r25, 0x00B9
    1bf0:	98 7f       	andi	r25, 0xF8	; 248
    1bf2:	98 30       	cpi	r25, 0x08	; 8
    1bf4:	a1 f4       	brne	.+40     	; 0x1c1e <_Z9i2c_starth+0x42>
    1bf6:	80 93 bb 00 	sts	0x00BB, r24
    1bfa:	84 e8       	ldi	r24, 0x84	; 132
    1bfc:	80 93 bc 00 	sts	0x00BC, r24
    1c00:	ec eb       	ldi	r30, 0xBC	; 188
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	88 23       	and	r24, r24
    1c08:	ec f7       	brge	.-6      	; 0x1c04 <_Z9i2c_starth+0x28>
    1c0a:	90 91 b9 00 	lds	r25, 0x00B9
    1c0e:	98 7f       	andi	r25, 0xF8	; 248
    1c10:	98 31       	cpi	r25, 0x18	; 24
    1c12:	39 f0       	breq	.+14     	; 0x1c22 <_Z9i2c_starth+0x46>
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	90 34       	cpi	r25, 0x40	; 64
    1c18:	29 f4       	brne	.+10     	; 0x1c24 <_Z9i2c_starth+0x48>
    1c1a:	80 e0       	ldi	r24, 0x00	; 0
    1c1c:	08 95       	ret
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	08 95       	ret
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	08 95       	ret

00001c26 <_Z9i2c_writeh>:
    1c26:	80 93 bb 00 	sts	0x00BB, r24
    1c2a:	84 e8       	ldi	r24, 0x84	; 132
    1c2c:	80 93 bc 00 	sts	0x00BC, r24
    1c30:	ec eb       	ldi	r30, 0xBC	; 188
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	88 23       	and	r24, r24
    1c38:	ec f7       	brge	.-6      	; 0x1c34 <_Z9i2c_writeh+0xe>
    1c3a:	90 91 b9 00 	lds	r25, 0x00B9
    1c3e:	98 7f       	andi	r25, 0xF8	; 248
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	98 32       	cpi	r25, 0x28	; 40
    1c44:	09 f4       	brne	.+2      	; 0x1c48 <_Z9i2c_writeh+0x22>
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	08 95       	ret

00001c4a <_Z13i2c_read_nackv>:
    1c4a:	84 e8       	ldi	r24, 0x84	; 132
    1c4c:	80 93 bc 00 	sts	0x00BC, r24
    1c50:	ec eb       	ldi	r30, 0xBC	; 188
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	88 23       	and	r24, r24
    1c58:	ec f7       	brge	.-6      	; 0x1c54 <_Z13i2c_read_nackv+0xa>
    1c5a:	80 91 bb 00 	lds	r24, 0x00BB
    1c5e:	08 95       	ret

00001c60 <_Z8i2c_stopv>:

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1c60:	84 e9       	ldi	r24, 0x94	; 148
    1c62:	80 93 bc 00 	sts	0x00BC, r24
    1c66:	08 95       	ret

00001c68 <_ZL8toggle_ev>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
    1c68:	5c 9a       	sbi	0x0b, 4	; 11
    1c6a:	85 e0       	ldi	r24, 0x05	; 5
    1c6c:	8a 95       	dec	r24
    1c6e:	f1 f7       	brne	.-4      	; 0x1c6c <_ZL8toggle_ev+0x4>
    1c70:	00 00       	nop
    1c72:	5c 98       	cbi	0x0b, 4	; 11
    1c74:	08 95       	ret

00001c76 <_ZL9lcd_writehh>:
    1c76:	cf 93       	push	r28
    1c78:	c8 2f       	mov	r28, r24
    1c7a:	66 23       	and	r22, r22
    1c7c:	11 f0       	breq	.+4      	; 0x1c82 <_ZL9lcd_writehh+0xc>
    1c7e:	2f 9a       	sbi	0x05, 7	; 5
    1c80:	01 c0       	rjmp	.+2      	; 0x1c84 <_ZL9lcd_writehh+0xe>
    1c82:	2f 98       	cbi	0x05, 7	; 5
    1c84:	5a 98       	cbi	0x0b, 2	; 11
    1c86:	55 9a       	sbi	0x0a, 5	; 10
    1c88:	56 9a       	sbi	0x0a, 6	; 10
    1c8a:	57 9a       	sbi	0x0a, 7	; 10
    1c8c:	68 9a       	sbi	0x0d, 0	; 13
    1c8e:	70 98       	cbi	0x0e, 0	; 14
    1c90:	5f 98       	cbi	0x0b, 7	; 11
    1c92:	5e 98       	cbi	0x0b, 6	; 11
    1c94:	5d 98       	cbi	0x0b, 5	; 11
    1c96:	cc 23       	and	r28, r28
    1c98:	0c f4       	brge	.+2      	; 0x1c9c <_ZL9lcd_writehh+0x26>
    1c9a:	70 9a       	sbi	0x0e, 0	; 14
    1c9c:	c6 fd       	sbrc	r28, 6
    1c9e:	5f 9a       	sbi	0x0b, 7	; 11
    1ca0:	c5 fd       	sbrc	r28, 5
    1ca2:	5e 9a       	sbi	0x0b, 6	; 11
    1ca4:	c4 fd       	sbrc	r28, 4
    1ca6:	5d 9a       	sbi	0x0b, 5	; 11
    1ca8:	df df       	rcall	.-66     	; 0x1c68 <_ZL8toggle_ev>
    1caa:	70 98       	cbi	0x0e, 0	; 14
    1cac:	5f 98       	cbi	0x0b, 7	; 11
    1cae:	5e 98       	cbi	0x0b, 6	; 11
    1cb0:	5d 98       	cbi	0x0b, 5	; 11
    1cb2:	c3 fd       	sbrc	r28, 3
    1cb4:	70 9a       	sbi	0x0e, 0	; 14
    1cb6:	c2 fd       	sbrc	r28, 2
    1cb8:	5f 9a       	sbi	0x0b, 7	; 11
    1cba:	c1 fd       	sbrc	r28, 1
    1cbc:	5e 9a       	sbi	0x0b, 6	; 11
    1cbe:	c0 fd       	sbrc	r28, 0
    1cc0:	5d 9a       	sbi	0x0b, 5	; 11
    1cc2:	d2 df       	rcall	.-92     	; 0x1c68 <_ZL8toggle_ev>
    1cc4:	5d 9a       	sbi	0x0b, 5	; 11
    1cc6:	5e 9a       	sbi	0x0b, 6	; 11
    1cc8:	5f 9a       	sbi	0x0b, 7	; 11
    1cca:	70 9a       	sbi	0x0e, 0	; 14
    1ccc:	cf 91       	pop	r28
    1cce:	08 95       	ret

00001cd0 <_ZL8lcd_readh>:
    1cd0:	88 23       	and	r24, r24
    1cd2:	11 f0       	breq	.+4      	; 0x1cd8 <_ZL8lcd_readh+0x8>
    1cd4:	2f 9a       	sbi	0x05, 7	; 5
    1cd6:	01 c0       	rjmp	.+2      	; 0x1cda <_ZL8lcd_readh+0xa>
    1cd8:	2f 98       	cbi	0x05, 7	; 5
    1cda:	5a 9a       	sbi	0x0b, 2	; 11
    1cdc:	55 98       	cbi	0x0a, 5	; 10
    1cde:	56 98       	cbi	0x0a, 6	; 10
    1ce0:	57 98       	cbi	0x0a, 7	; 10
    1ce2:	68 98       	cbi	0x0d, 0	; 13
    1ce4:	5c 9a       	sbi	0x0b, 4	; 11
    1ce6:	85 e0       	ldi	r24, 0x05	; 5
    1ce8:	8a 95       	dec	r24
    1cea:	f1 f7       	brne	.-4      	; 0x1ce8 <_ZL8lcd_readh+0x18>
    1cec:	00 00       	nop
    1cee:	4d 9b       	sbis	0x09, 5	; 9
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <_ZL8lcd_readh+0x26>
    1cf2:	80 e1       	ldi	r24, 0x10	; 16
    1cf4:	01 c0       	rjmp	.+2      	; 0x1cf8 <_ZL8lcd_readh+0x28>
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	4e 99       	sbic	0x09, 6	; 9
    1cfa:	80 62       	ori	r24, 0x20	; 32
    1cfc:	4f 99       	sbic	0x09, 7	; 9
    1cfe:	80 64       	ori	r24, 0x40	; 64
    1d00:	60 99       	sbic	0x0c, 0	; 12
    1d02:	80 68       	ori	r24, 0x80	; 128
    1d04:	5c 98       	cbi	0x0b, 4	; 11
    1d06:	95 e0       	ldi	r25, 0x05	; 5
    1d08:	9a 95       	dec	r25
    1d0a:	f1 f7       	brne	.-4      	; 0x1d08 <_ZL8lcd_readh+0x38>
    1d0c:	00 00       	nop
    1d0e:	5c 9a       	sbi	0x0b, 4	; 11
    1d10:	95 e0       	ldi	r25, 0x05	; 5
    1d12:	9a 95       	dec	r25
    1d14:	f1 f7       	brne	.-4      	; 0x1d12 <_ZL8lcd_readh+0x42>
    1d16:	00 00       	nop
    1d18:	4d 99       	sbic	0x09, 5	; 9
    1d1a:	81 60       	ori	r24, 0x01	; 1
    1d1c:	4e 99       	sbic	0x09, 6	; 9
    1d1e:	82 60       	ori	r24, 0x02	; 2
    1d20:	4f 99       	sbic	0x09, 7	; 9
    1d22:	84 60       	ori	r24, 0x04	; 4
    1d24:	60 99       	sbic	0x0c, 0	; 12
    1d26:	88 60       	ori	r24, 0x08	; 8
    1d28:	5c 98       	cbi	0x0b, 4	; 11
    1d2a:	08 95       	ret

00001d2c <_ZL12lcd_waitbusyv>:
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	d0 df       	rcall	.-96     	; 0x1cd0 <_ZL8lcd_readh>
    1d30:	88 23       	and	r24, r24
    1d32:	e4 f3       	brlt	.-8      	; 0x1d2c <_ZL12lcd_waitbusyv>
    1d34:	85 e1       	ldi	r24, 0x15	; 21
    1d36:	8a 95       	dec	r24
    1d38:	f1 f7       	brne	.-4      	; 0x1d36 <_ZL12lcd_waitbusyv+0xa>
    1d3a:	00 00       	nop
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
    1d3e:	c8 cf       	rjmp	.-112    	; 0x1cd0 <_ZL8lcd_readh>
    1d40:	08 95       	ret

00001d42 <_Z11lcd_commandh>:
    1d42:	cf 93       	push	r28
    1d44:	c8 2f       	mov	r28, r24
    1d46:	f2 df       	rcall	.-28     	; 0x1d2c <_ZL12lcd_waitbusyv>
    1d48:	60 e0       	ldi	r22, 0x00	; 0
    1d4a:	8c 2f       	mov	r24, r28
    1d4c:	94 df       	rcall	.-216    	; 0x1c76 <_ZL9lcd_writehh>
    1d4e:	cf 91       	pop	r28
    1d50:	08 95       	ret

00001d52 <_Z10lcd_gotoxyhh>:
    1d52:	61 11       	cpse	r22, r1
    1d54:	03 c0       	rjmp	.+6      	; 0x1d5c <_Z10lcd_gotoxyhh+0xa>
    1d56:	80 58       	subi	r24, 0x80	; 128
    1d58:	f4 cf       	rjmp	.-24     	; 0x1d42 <_Z11lcd_commandh>
    1d5a:	08 95       	ret
    1d5c:	61 30       	cpi	r22, 0x01	; 1
    1d5e:	19 f4       	brne	.+6      	; 0x1d66 <_Z10lcd_gotoxyhh+0x14>
    1d60:	80 54       	subi	r24, 0x40	; 64
    1d62:	ef cf       	rjmp	.-34     	; 0x1d42 <_Z11lcd_commandh>
    1d64:	08 95       	ret
    1d66:	62 30       	cpi	r22, 0x02	; 2
    1d68:	19 f4       	brne	.+6      	; 0x1d70 <_Z10lcd_gotoxyhh+0x1e>
    1d6a:	8c 56       	subi	r24, 0x6C	; 108
    1d6c:	ea cf       	rjmp	.-44     	; 0x1d42 <_Z11lcd_commandh>
    1d6e:	08 95       	ret
    1d70:	8c 52       	subi	r24, 0x2C	; 44
    1d72:	e7 cf       	rjmp	.-50     	; 0x1d42 <_Z11lcd_commandh>
    1d74:	08 95       	ret

00001d76 <_Z10lcd_clrscrv>:
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	e4 cf       	rjmp	.-56     	; 0x1d42 <_Z11lcd_commandh>
    1d7a:	08 95       	ret

00001d7c <_Z8lcd_putcc>:
    1d7c:	cf 93       	push	r28
    1d7e:	c8 2f       	mov	r28, r24
    1d80:	d5 df       	rcall	.-86     	; 0x1d2c <_ZL12lcd_waitbusyv>
    1d82:	ca 30       	cpi	r28, 0x0A	; 10
    1d84:	99 f4       	brne	.+38     	; 0x1dac <_Z8lcd_putcc+0x30>
    1d86:	84 31       	cpi	r24, 0x14	; 20
    1d88:	48 f0       	brcs	.+18     	; 0x1d9c <_Z8lcd_putcc+0x20>
    1d8a:	90 ec       	ldi	r25, 0xC0	; 192
    1d8c:	98 0f       	add	r25, r24
    1d8e:	94 31       	cpi	r25, 0x14	; 20
    1d90:	38 f0       	brcs	.+14     	; 0x1da0 <_Z8lcd_putcc+0x24>
    1d92:	84 51       	subi	r24, 0x14	; 20
    1d94:	8c 32       	cpi	r24, 0x2C	; 44
    1d96:	30 f0       	brcs	.+12     	; 0x1da4 <_Z8lcd_putcc+0x28>
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	05 c0       	rjmp	.+10     	; 0x1da6 <_Z8lcd_putcc+0x2a>
    1d9c:	80 e4       	ldi	r24, 0x40	; 64
    1d9e:	03 c0       	rjmp	.+6      	; 0x1da6 <_Z8lcd_putcc+0x2a>
    1da0:	84 e1       	ldi	r24, 0x14	; 20
    1da2:	01 c0       	rjmp	.+2      	; 0x1da6 <_Z8lcd_putcc+0x2a>
    1da4:	84 e5       	ldi	r24, 0x54	; 84
    1da6:	80 58       	subi	r24, 0x80	; 128
    1da8:	cc df       	rcall	.-104    	; 0x1d42 <_Z11lcd_commandh>
    1daa:	03 c0       	rjmp	.+6      	; 0x1db2 <_Z8lcd_putcc+0x36>
    1dac:	61 e0       	ldi	r22, 0x01	; 1
    1dae:	8c 2f       	mov	r24, r28
    1db0:	62 df       	rcall	.-316    	; 0x1c76 <_ZL9lcd_writehh>
    1db2:	cf 91       	pop	r28
    1db4:	08 95       	ret

00001db6 <_Z8lcd_putsPKc>:
    1db6:	cf 93       	push	r28
    1db8:	df 93       	push	r29
    1dba:	ec 01       	movw	r28, r24
    1dbc:	21 96       	adiw	r28, 0x01	; 1
    1dbe:	fc 01       	movw	r30, r24
    1dc0:	80 81       	ld	r24, Z
    1dc2:	88 23       	and	r24, r24
    1dc4:	21 f0       	breq	.+8      	; 0x1dce <_Z8lcd_putsPKc+0x18>
    1dc6:	da df       	rcall	.-76     	; 0x1d7c <_Z8lcd_putcc>
    1dc8:	89 91       	ld	r24, Y+
    1dca:	81 11       	cpse	r24, r1
    1dcc:	fc cf       	rjmp	.-8      	; 0x1dc6 <_Z8lcd_putsPKc+0x10>
    1dce:	df 91       	pop	r29
    1dd0:	cf 91       	pop	r28
    1dd2:	08 95       	ret

00001dd4 <_Z8lcd_inith>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
    1dd4:	cf 93       	push	r28
    1dd6:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
    1dd8:	27 9a       	sbi	0x04, 7	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
    1dda:	52 9a       	sbi	0x0a, 2	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    1ddc:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
    1dde:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
    1de0:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
    1de2:	57 9a       	sbi	0x0a, 7	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    1de4:	68 9a       	sbi	0x0d, 0	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1de6:	8f ef       	ldi	r24, 0xFF	; 255
    1de8:	99 ef       	ldi	r25, 0xF9	; 249
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	f1 f7       	brne	.-4      	; 0x1dea <_Z8lcd_inith+0x16>
    1dee:	00 c0       	rjmp	.+0      	; 0x1df0 <_Z8lcd_inith+0x1c>
    1df0:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
    1df2:	5e 9a       	sbi	0x0b, 6	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
    1df4:	5d 9a       	sbi	0x0b, 5	; 11
    lcd_e_toggle();
    1df6:	38 df       	rcall	.-400    	; 0x1c68 <_ZL8toggle_ev>
    1df8:	8f e1       	ldi	r24, 0x1F	; 31
    1dfa:	9e e4       	ldi	r25, 0x4E	; 78
    1dfc:	01 97       	sbiw	r24, 0x01	; 1
    1dfe:	f1 f7       	brne	.-4      	; 0x1dfc <_Z8lcd_inith+0x28>
    1e00:	00 c0       	rjmp	.+0      	; 0x1e02 <_Z8lcd_inith+0x2e>
    1e02:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
    1e04:	31 df       	rcall	.-414    	; 0x1c68 <_ZL8toggle_ev>
    1e06:	8f ef       	ldi	r24, 0xFF	; 255
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	f1 f7       	brne	.-4      	; 0x1e0a <_Z8lcd_inith+0x36>
    1e0e:	00 c0       	rjmp	.+0      	; 0x1e10 <_Z8lcd_inith+0x3c>
    1e10:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
    1e12:	2a df       	rcall	.-428    	; 0x1c68 <_ZL8toggle_ev>
    1e14:	8f ef       	ldi	r24, 0xFF	; 255
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	f1 f7       	brne	.-4      	; 0x1e18 <_Z8lcd_inith+0x44>
    1e1c:	00 c0       	rjmp	.+0      	; 0x1e1e <_Z8lcd_inith+0x4a>
    1e1e:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
    1e20:	5d 98       	cbi	0x0b, 5	; 11
    lcd_e_toggle();
    1e22:	22 df       	rcall	.-444    	; 0x1c68 <_ZL8toggle_ev>
    1e24:	8f ef       	ldi	r24, 0xFF	; 255
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	01 97       	sbiw	r24, 0x01	; 1
    1e2a:	f1 f7       	brne	.-4      	; 0x1e28 <_Z8lcd_inith+0x54>
    1e2c:	00 c0       	rjmp	.+0      	; 0x1e2e <_Z8lcd_inith+0x5a>
    1e2e:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
    1e30:	88 e2       	ldi	r24, 0x28	; 40
    1e32:	87 df       	rcall	.-242    	; 0x1d42 <_Z11lcd_commandh>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
    1e34:	88 e0       	ldi	r24, 0x08	; 8
    1e36:	85 df       	rcall	.-246    	; 0x1d42 <_Z11lcd_commandh>
    lcd_clrscr();                           /* display clear                */ 
    1e38:	9e df       	rcall	.-196    	; 0x1d76 <_Z10lcd_clrscrv>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
    1e3a:	86 e0       	ldi	r24, 0x06	; 6
    1e3c:	82 df       	rcall	.-252    	; 0x1d42 <_Z11lcd_commandh>
    lcd_command(dispAttr);                  /* display/cursor control       */
    1e3e:	8c 2f       	mov	r24, r28
    1e40:	80 df       	rcall	.-256    	; 0x1d42 <_Z11lcd_commandh>

}/* lcd_init */
    1e42:	cf 91       	pop	r28
    1e44:	08 95       	ret

00001e46 <_ZN6HWmidiC1Ev>:

        }

    }

}
    1e46:	fc 01       	movw	r30, r24
    1e48:	15 82       	std	Z+5, r1	; 0x05
    1e4a:	14 82       	std	Z+4, r1	; 0x04
    1e4c:	15 86       	std	Z+13, r1	; 0x0d
    1e4e:	14 86       	std	Z+12, r1	; 0x0c
    1e50:	13 86       	std	Z+11, r1	; 0x0b
    1e52:	12 86       	std	Z+10, r1	; 0x0a
    1e54:	13 a2       	std	Z+35, r1	; 0x23
    1e56:	11 8a       	std	Z+17, r1	; 0x11
    1e58:	10 8a       	std	Z+16, r1	; 0x10
    1e5a:	12 8a       	std	Z+18, r1	; 0x12
    1e5c:	13 8a       	std	Z+19, r1	; 0x13
    1e5e:	17 aa       	std	Z+55, r1	; 0x37
    1e60:	15 a2       	std	Z+37, r1	; 0x25
    1e62:	14 a2       	std	Z+36, r1	; 0x24
    1e64:	16 a2       	std	Z+38, r1	; 0x26
    1e66:	17 a2       	std	Z+39, r1	; 0x27
    1e68:	11 82       	std	Z+1, r1	; 0x01
    1e6a:	10 82       	st	Z, r1
    1e6c:	12 82       	std	Z+2, r1	; 0x02
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	83 83       	std	Z+3, r24	; 0x03
    1e72:	e9 e0       	ldi	r30, 0x09	; 9
    1e74:	f7 e0       	ldi	r31, 0x07	; 7
    1e76:	80 83       	st	Z, r24
    1e78:	91 e8       	ldi	r25, 0x81	; 129
    1e7a:	91 83       	std	Z+1, r25	; 0x01
    1e7c:	20 e4       	ldi	r18, 0x40	; 64
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	33 83       	std	Z+3, r19	; 0x03
    1e82:	22 83       	std	Z+2, r18	; 0x02
    1e84:	85 83       	std	Z+5, r24	; 0x05
    1e86:	92 e0       	ldi	r25, 0x02	; 2
    1e88:	96 83       	std	Z+6, r25	; 0x06
    1e8a:	30 87       	std	Z+8, r19	; 0x08
    1e8c:	27 83       	std	Z+7, r18	; 0x07
    1e8e:	82 87       	std	Z+10, r24	; 0x0a
    1e90:	08 95       	ret

00001e92 <_ZN6HWmidi4initEbb19midiInterfaceType_t>:
    1e92:	0f 93       	push	r16
    1e94:	22 23       	and	r18, r18
    1e96:	19 f0       	breq	.+6      	; 0x1e9e <_ZN6HWmidi4initEbb19midiInterfaceType_t+0xc>
    1e98:	21 30       	cpi	r18, 0x01	; 1
    1e9a:	69 f0       	breq	.+26     	; 0x1eb6 <_ZN6HWmidi4initEbb19midiInterfaceType_t+0x24>
    1e9c:	10 c0       	rjmp	.+32     	; 0x1ebe <_ZN6HWmidi4initEbb19midiInterfaceType_t+0x2c>
    1e9e:	04 2f       	mov	r16, r20
    1ea0:	26 2f       	mov	r18, r22
    1ea2:	42 e1       	ldi	r20, 0x12	; 18
    1ea4:	5a e7       	ldi	r21, 0x7A	; 122
    1ea6:	60 e0       	ldi	r22, 0x00	; 0
    1ea8:	70 e0       	ldi	r23, 0x00	; 0
    1eaa:	88 eb       	ldi	r24, 0xB8	; 184
    1eac:	97 e0       	ldi	r25, 0x07	; 7
    1eae:	0e 94 39 1a 	call	0x3472	; 0x3472 <_ZN4UART5beginEmbb>
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	05 c0       	rjmp	.+10     	; 0x1ec0 <_ZN6HWmidi4initEbb19midiInterfaceType_t+0x2e>
    1eb6:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <USB_Init>
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	01 c0       	rjmp	.+2      	; 0x1ec0 <_ZN6HWmidi4initEbb19midiInterfaceType_t+0x2e>
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	0f 91       	pop	r16
    1ec2:	08 95       	ret

00001ec4 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t>:
    1ec4:	7f 92       	push	r7
    1ec6:	8f 92       	push	r8
    1ec8:	9f 92       	push	r9
    1eca:	af 92       	push	r10
    1ecc:	bf 92       	push	r11
    1ece:	cf 92       	push	r12
    1ed0:	df 92       	push	r13
    1ed2:	ef 92       	push	r14
    1ed4:	ff 92       	push	r15
    1ed6:	0f 93       	push	r16
    1ed8:	1f 93       	push	r17
    1eda:	cf 93       	push	r28
    1edc:	df 93       	push	r29
    1ede:	00 d0       	rcall	.+0      	; 0x1ee0 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x1c>
    1ee0:	00 d0       	rcall	.+0      	; 0x1ee2 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x1e>
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
    1ee6:	5c 01       	movw	r10, r24
    1ee8:	6b 01       	movw	r12, r22
    1eea:	7a 01       	movw	r14, r20
    1eec:	92 2e       	mov	r9, r18
    1eee:	00 23       	and	r16, r16
    1ef0:	19 f0       	breq	.+6      	; 0x1ef8 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x34>
    1ef2:	01 30       	cpi	r16, 0x01	; 1
    1ef4:	39 f1       	breq	.+78     	; 0x1f44 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x80>
    1ef6:	db c1       	rjmp	.+950    	; 0x22ae <__stack+0x1af>
    1ef8:	21 11       	cpse	r18, r1
    1efa:	cb c1       	rjmp	.+918    	; 0x2292 <__stack+0x193>
    1efc:	60 ef       	ldi	r22, 0xF0	; 240
    1efe:	88 eb       	ldi	r24, 0xB8	; 184
    1f00:	97 e0       	ldi	r25, 0x07	; 7
    1f02:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN4UART5writeEh>
    1f06:	c1 14       	cp	r12, r1
    1f08:	d1 04       	cpc	r13, r1
    1f0a:	81 f0       	breq	.+32     	; 0x1f2c <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x68>
    1f0c:	00 e0       	ldi	r16, 0x00	; 0
    1f0e:	10 e0       	ldi	r17, 0x00	; 0
    1f10:	f7 01       	movw	r30, r14
    1f12:	61 91       	ld	r22, Z+
    1f14:	7f 01       	movw	r14, r30
    1f16:	88 eb       	ldi	r24, 0xB8	; 184
    1f18:	97 e0       	ldi	r25, 0x07	; 7
    1f1a:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN4UART5writeEh>
    1f1e:	0f 5f       	subi	r16, 0xFF	; 255
    1f20:	1f 4f       	sbci	r17, 0xFF	; 255
    1f22:	0c 15       	cp	r16, r12
    1f24:	1d 05       	cpc	r17, r13
    1f26:	a0 f3       	brcs	.-24     	; 0x1f10 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x4c>
    1f28:	91 10       	cpse	r9, r1
    1f2a:	05 c0       	rjmp	.+10     	; 0x1f36 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x72>
    1f2c:	67 ef       	ldi	r22, 0xF7	; 247
    1f2e:	88 eb       	ldi	r24, 0xB8	; 184
    1f30:	97 e0       	ldi	r25, 0x07	; 7
    1f32:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN4UART5writeEh>
    1f36:	f5 01       	movw	r30, r10
    1f38:	82 81       	ldd	r24, Z+2	; 0x02
    1f3a:	88 23       	and	r24, r24
    1f3c:	09 f4       	brne	.+2      	; 0x1f40 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x7c>
    1f3e:	b7 c1       	rjmp	.+878    	; 0x22ae <__stack+0x1af>
    1f40:	15 82       	std	Z+5, r1	; 0x05
    1f42:	b5 c1       	rjmp	.+874    	; 0x22ae <__stack+0x1af>
    1f44:	22 23       	and	r18, r18
    1f46:	29 f0       	breq	.+10     	; 0x1f52 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x8e>
    1f48:	64 30       	cpi	r22, 0x04	; 4
    1f4a:	71 05       	cpc	r23, r1
    1f4c:	08 f0       	brcs	.+2      	; 0x1f50 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x8c>
    1f4e:	26 c1       	rjmp	.+588    	; 0x219c <__stack+0x9d>
    1f50:	53 c1       	rjmp	.+678    	; 0x21f8 <__stack+0xf9>
    1f52:	64 30       	cpi	r22, 0x04	; 4
    1f54:	71 05       	cpc	r23, r1
    1f56:	08 f4       	brcc	.+2      	; 0x1f5a <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x96>
    1f58:	a0 c1       	rjmp	.+832    	; 0x229a <__stack+0x19b>
    1f5a:	91 2c       	mov	r9, r1
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	68 94       	set
    1f60:	aa 24       	eor	r10, r10
    1f62:	a2 f8       	bld	r10, 2
    1f64:	08 ee       	ldi	r16, 0xE8	; 232
    1f66:	10 e0       	ldi	r17, 0x00	; 0
    1f68:	0f 2e       	mov	r0, r31
    1f6a:	f0 ef       	ldi	r31, 0xF0	; 240
    1f6c:	7f 2e       	mov	r7, r31
    1f6e:	f0 2d       	mov	r31, r0
    1f70:	88 24       	eor	r8, r8
    1f72:	83 94       	inc	r8
    1f74:	b1 2c       	mov	r11, r1
    1f76:	88 23       	and	r24, r24
    1f78:	d1 f0       	breq	.+52     	; 0x1fae <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0xea>
    1f7a:	f7 01       	movw	r30, r14
    1f7c:	90 81       	ld	r25, Z
    1f7e:	81 81       	ldd	r24, Z+1	; 0x01
    1f80:	a9 82       	std	Y+1, r10	; 0x01
    1f82:	7a 82       	std	Y+2, r7	; 0x02
    1f84:	9b 83       	std	Y+3, r25	; 0x03
    1f86:	8c 83       	std	Y+4, r24	; 0x04
    1f88:	be 01       	movw	r22, r28
    1f8a:	6f 5f       	subi	r22, 0xFF	; 255
    1f8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f8e:	89 e0       	ldi	r24, 0x09	; 9
    1f90:	97 e0       	ldi	r25, 0x07	; 7
    1f92:	0e 94 ac 1a 	call	0x3558	; 0x3558 <MIDI_Device_SendEventPacket>
    1f96:	89 e0       	ldi	r24, 0x09	; 9
    1f98:	97 e0       	ldi	r25, 0x07	; 7
    1f9a:	0e 94 cf 1a 	call	0x359e	; 0x359e <MIDI_Device_Flush>
    1f9e:	f2 e0       	ldi	r31, 0x02	; 2
    1fa0:	ef 0e       	add	r14, r31
    1fa2:	f1 1c       	adc	r15, r1
    1fa4:	82 e0       	ldi	r24, 0x02	; 2
    1fa6:	c8 1a       	sub	r12, r24
    1fa8:	d1 08       	sbc	r13, r1
    1faa:	98 2c       	mov	r9, r8
    1fac:	1a c0       	rjmp	.+52     	; 0x1fe2 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x11e>
    1fae:	f7 01       	movw	r30, r14
    1fb0:	20 81       	ld	r18, Z
    1fb2:	91 81       	ldd	r25, Z+1	; 0x01
    1fb4:	82 81       	ldd	r24, Z+2	; 0x02
    1fb6:	a9 82       	std	Y+1, r10	; 0x01
    1fb8:	2a 83       	std	Y+2, r18	; 0x02
    1fba:	9b 83       	std	Y+3, r25	; 0x03
    1fbc:	8c 83       	std	Y+4, r24	; 0x04
    1fbe:	40 e0       	ldi	r20, 0x00	; 0
    1fc0:	50 e0       	ldi	r21, 0x00	; 0
    1fc2:	64 e0       	ldi	r22, 0x04	; 4
    1fc4:	70 e0       	ldi	r23, 0x00	; 0
    1fc6:	ce 01       	movw	r24, r28
    1fc8:	01 96       	adiw	r24, 0x01	; 1
    1fca:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <Endpoint_Write_Stream_LE>
    1fce:	f8 01       	movw	r30, r16
    1fd0:	80 81       	ld	r24, Z
    1fd2:	8e 77       	andi	r24, 0x7E	; 126
    1fd4:	80 83       	st	Z, r24
    1fd6:	f3 e0       	ldi	r31, 0x03	; 3
    1fd8:	ef 0e       	add	r14, r31
    1fda:	f1 1c       	adc	r15, r1
    1fdc:	83 e0       	ldi	r24, 0x03	; 3
    1fde:	c8 1a       	sub	r12, r24
    1fe0:	d1 08       	sbc	r13, r1
    1fe2:	8b 2d       	mov	r24, r11
    1fe4:	94 e0       	ldi	r25, 0x04	; 4
    1fe6:	c9 16       	cp	r12, r25
    1fe8:	d1 04       	cpc	r13, r1
    1fea:	28 f6       	brcc	.-118    	; 0x1f76 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0xb2>
    1fec:	f7 01       	movw	r30, r14
    1fee:	93 e0       	ldi	r25, 0x03	; 3
    1ff0:	c9 16       	cp	r12, r25
    1ff2:	d1 04       	cpc	r13, r1
    1ff4:	09 f0       	breq	.+2      	; 0x1ff8 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x134>
    1ff6:	57 c0       	rjmp	.+174    	; 0x20a6 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x1e2>
    1ff8:	99 20       	and	r9, r9
    1ffa:	49 f1       	breq	.+82     	; 0x204e <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x18a>
    1ffc:	20 81       	ld	r18, Z
    1ffe:	91 81       	ldd	r25, Z+1	; 0x01
    2000:	82 81       	ldd	r24, Z+2	; 0x02
    2002:	34 e0       	ldi	r19, 0x04	; 4
    2004:	39 83       	std	Y+1, r19	; 0x01
    2006:	2a 83       	std	Y+2, r18	; 0x02
    2008:	9b 83       	std	Y+3, r25	; 0x03
    200a:	8c 83       	std	Y+4, r24	; 0x04
    200c:	40 e0       	ldi	r20, 0x00	; 0
    200e:	50 e0       	ldi	r21, 0x00	; 0
    2010:	64 e0       	ldi	r22, 0x04	; 4
    2012:	70 e0       	ldi	r23, 0x00	; 0
    2014:	ce 01       	movw	r24, r28
    2016:	01 96       	adiw	r24, 0x01	; 1
    2018:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <Endpoint_Write_Stream_LE>
    201c:	08 ee       	ldi	r16, 0xE8	; 232
    201e:	10 e0       	ldi	r17, 0x00	; 0
    2020:	f8 01       	movw	r30, r16
    2022:	80 81       	ld	r24, Z
    2024:	8e 77       	andi	r24, 0x7E	; 126
    2026:	80 83       	st	Z, r24
    2028:	85 e0       	ldi	r24, 0x05	; 5
    202a:	89 83       	std	Y+1, r24	; 0x01
    202c:	87 ef       	ldi	r24, 0xF7	; 247
    202e:	8a 83       	std	Y+2, r24	; 0x02
    2030:	1b 82       	std	Y+3, r1	; 0x03
    2032:	1c 82       	std	Y+4, r1	; 0x04
    2034:	40 e0       	ldi	r20, 0x00	; 0
    2036:	50 e0       	ldi	r21, 0x00	; 0
    2038:	64 e0       	ldi	r22, 0x04	; 4
    203a:	70 e0       	ldi	r23, 0x00	; 0
    203c:	ce 01       	movw	r24, r28
    203e:	01 96       	adiw	r24, 0x01	; 1
    2040:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <Endpoint_Write_Stream_LE>
    2044:	f8 01       	movw	r30, r16
    2046:	80 81       	ld	r24, Z
    2048:	8e 77       	andi	r24, 0x7E	; 126
    204a:	80 83       	st	Z, r24
    204c:	30 c1       	rjmp	.+608    	; 0x22ae <__stack+0x1af>
    204e:	f7 01       	movw	r30, r14
    2050:	90 81       	ld	r25, Z
    2052:	81 81       	ldd	r24, Z+1	; 0x01
    2054:	24 e0       	ldi	r18, 0x04	; 4
    2056:	29 83       	std	Y+1, r18	; 0x01
    2058:	20 ef       	ldi	r18, 0xF0	; 240
    205a:	2a 83       	std	Y+2, r18	; 0x02
    205c:	9b 83       	std	Y+3, r25	; 0x03
    205e:	8c 83       	std	Y+4, r24	; 0x04
    2060:	40 e0       	ldi	r20, 0x00	; 0
    2062:	50 e0       	ldi	r21, 0x00	; 0
    2064:	64 e0       	ldi	r22, 0x04	; 4
    2066:	70 e0       	ldi	r23, 0x00	; 0
    2068:	ce 01       	movw	r24, r28
    206a:	01 96       	adiw	r24, 0x01	; 1
    206c:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <Endpoint_Write_Stream_LE>
    2070:	08 ee       	ldi	r16, 0xE8	; 232
    2072:	10 e0       	ldi	r17, 0x00	; 0
    2074:	f8 01       	movw	r30, r16
    2076:	80 81       	ld	r24, Z
    2078:	8e 77       	andi	r24, 0x7E	; 126
    207a:	80 83       	st	Z, r24
    207c:	f7 01       	movw	r30, r14
    207e:	82 81       	ldd	r24, Z+2	; 0x02
    2080:	96 e0       	ldi	r25, 0x06	; 6
    2082:	99 83       	std	Y+1, r25	; 0x01
    2084:	8a 83       	std	Y+2, r24	; 0x02
    2086:	87 ef       	ldi	r24, 0xF7	; 247
    2088:	8b 83       	std	Y+3, r24	; 0x03
    208a:	1c 82       	std	Y+4, r1	; 0x04
    208c:	40 e0       	ldi	r20, 0x00	; 0
    208e:	50 e0       	ldi	r21, 0x00	; 0
    2090:	64 e0       	ldi	r22, 0x04	; 4
    2092:	70 e0       	ldi	r23, 0x00	; 0
    2094:	ce 01       	movw	r24, r28
    2096:	01 96       	adiw	r24, 0x01	; 1
    2098:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <Endpoint_Write_Stream_LE>
    209c:	f8 01       	movw	r30, r16
    209e:	80 81       	ld	r24, Z
    20a0:	8e 77       	andi	r24, 0x7E	; 126
    20a2:	80 83       	st	Z, r24
    20a4:	04 c1       	rjmp	.+520    	; 0x22ae <__stack+0x1af>
    20a6:	f2 e0       	ldi	r31, 0x02	; 2
    20a8:	cf 16       	cp	r12, r31
    20aa:	d1 04       	cpc	r13, r1
    20ac:	09 f0       	breq	.+2      	; 0x20b0 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x1ec>
    20ae:	43 c0       	rjmp	.+134    	; 0x2136 <__stack+0x37>
    20b0:	99 20       	and	r9, r9
    20b2:	b9 f0       	breq	.+46     	; 0x20e2 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x21e>
    20b4:	f7 01       	movw	r30, r14
    20b6:	90 81       	ld	r25, Z
    20b8:	81 81       	ldd	r24, Z+1	; 0x01
    20ba:	27 e0       	ldi	r18, 0x07	; 7
    20bc:	29 83       	std	Y+1, r18	; 0x01
    20be:	9a 83       	std	Y+2, r25	; 0x02
    20c0:	8b 83       	std	Y+3, r24	; 0x03
    20c2:	87 ef       	ldi	r24, 0xF7	; 247
    20c4:	8c 83       	std	Y+4, r24	; 0x04
    20c6:	40 e0       	ldi	r20, 0x00	; 0
    20c8:	50 e0       	ldi	r21, 0x00	; 0
    20ca:	64 e0       	ldi	r22, 0x04	; 4
    20cc:	70 e0       	ldi	r23, 0x00	; 0
    20ce:	ce 01       	movw	r24, r28
    20d0:	01 96       	adiw	r24, 0x01	; 1
    20d2:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <Endpoint_Write_Stream_LE>
    20d6:	e8 ee       	ldi	r30, 0xE8	; 232
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	8e 77       	andi	r24, 0x7E	; 126
    20de:	80 83       	st	Z, r24
    20e0:	e6 c0       	rjmp	.+460    	; 0x22ae <__stack+0x1af>
    20e2:	f7 01       	movw	r30, r14
    20e4:	90 81       	ld	r25, Z
    20e6:	81 81       	ldd	r24, Z+1	; 0x01
    20e8:	24 e0       	ldi	r18, 0x04	; 4
    20ea:	29 83       	std	Y+1, r18	; 0x01
    20ec:	20 ef       	ldi	r18, 0xF0	; 240
    20ee:	2a 83       	std	Y+2, r18	; 0x02
    20f0:	9b 83       	std	Y+3, r25	; 0x03
    20f2:	8c 83       	std	Y+4, r24	; 0x04
    20f4:	40 e0       	ldi	r20, 0x00	; 0
    20f6:	50 e0       	ldi	r21, 0x00	; 0
    20f8:	64 e0       	ldi	r22, 0x04	; 4
    20fa:	70 e0       	ldi	r23, 0x00	; 0
    20fc:	ce 01       	movw	r24, r28
    20fe:	01 96       	adiw	r24, 0x01	; 1
    2100:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <Endpoint_Write_Stream_LE>
    2104:	08 ee       	ldi	r16, 0xE8	; 232
    2106:	10 e0       	ldi	r17, 0x00	; 0
    2108:	f8 01       	movw	r30, r16
    210a:	80 81       	ld	r24, Z
    210c:	8e 77       	andi	r24, 0x7E	; 126
    210e:	80 83       	st	Z, r24
    2110:	85 e0       	ldi	r24, 0x05	; 5
    2112:	89 83       	std	Y+1, r24	; 0x01
    2114:	87 ef       	ldi	r24, 0xF7	; 247
    2116:	8a 83       	std	Y+2, r24	; 0x02
    2118:	1b 82       	std	Y+3, r1	; 0x03
    211a:	1c 82       	std	Y+4, r1	; 0x04
    211c:	40 e0       	ldi	r20, 0x00	; 0
    211e:	50 e0       	ldi	r21, 0x00	; 0
    2120:	64 e0       	ldi	r22, 0x04	; 4
    2122:	70 e0       	ldi	r23, 0x00	; 0
    2124:	ce 01       	movw	r24, r28
    2126:	01 96       	adiw	r24, 0x01	; 1
    2128:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <Endpoint_Write_Stream_LE>
    212c:	f8 01       	movw	r30, r16
    212e:	80 81       	ld	r24, Z
    2130:	8e 77       	andi	r24, 0x7E	; 126
    2132:	80 83       	st	Z, r24
    2134:	bc c0       	rjmp	.+376    	; 0x22ae <__stack+0x1af>
    2136:	ca 94       	dec	r12
    2138:	cd 28       	or	r12, r13
    213a:	09 f0       	breq	.+2      	; 0x213e <__stack+0x3f>
    213c:	b8 c0       	rjmp	.+368    	; 0x22ae <__stack+0x1af>
    213e:	99 20       	and	r9, r9
    2140:	b1 f0       	breq	.+44     	; 0x216e <__stack+0x6f>
    2142:	f7 01       	movw	r30, r14
    2144:	80 81       	ld	r24, Z
    2146:	96 e0       	ldi	r25, 0x06	; 6
    2148:	99 83       	std	Y+1, r25	; 0x01
    214a:	8a 83       	std	Y+2, r24	; 0x02
    214c:	87 ef       	ldi	r24, 0xF7	; 247
    214e:	8b 83       	std	Y+3, r24	; 0x03
    2150:	1c 82       	std	Y+4, r1	; 0x04
    2152:	40 e0       	ldi	r20, 0x00	; 0
    2154:	50 e0       	ldi	r21, 0x00	; 0
    2156:	64 e0       	ldi	r22, 0x04	; 4
    2158:	70 e0       	ldi	r23, 0x00	; 0
    215a:	ce 01       	movw	r24, r28
    215c:	01 96       	adiw	r24, 0x01	; 1
    215e:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <Endpoint_Write_Stream_LE>
    2162:	e8 ee       	ldi	r30, 0xE8	; 232
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	8e 77       	andi	r24, 0x7E	; 126
    216a:	80 83       	st	Z, r24
    216c:	a0 c0       	rjmp	.+320    	; 0x22ae <__stack+0x1af>
    216e:	f7 01       	movw	r30, r14
    2170:	80 81       	ld	r24, Z
    2172:	97 e0       	ldi	r25, 0x07	; 7
    2174:	99 83       	std	Y+1, r25	; 0x01
    2176:	90 ef       	ldi	r25, 0xF0	; 240
    2178:	9a 83       	std	Y+2, r25	; 0x02
    217a:	8b 83       	std	Y+3, r24	; 0x03
    217c:	87 ef       	ldi	r24, 0xF7	; 247
    217e:	8c 83       	std	Y+4, r24	; 0x04
    2180:	40 e0       	ldi	r20, 0x00	; 0
    2182:	50 e0       	ldi	r21, 0x00	; 0
    2184:	64 e0       	ldi	r22, 0x04	; 4
    2186:	70 e0       	ldi	r23, 0x00	; 0
    2188:	ce 01       	movw	r24, r28
    218a:	01 96       	adiw	r24, 0x01	; 1
    218c:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <Endpoint_Write_Stream_LE>
    2190:	e8 ee       	ldi	r30, 0xE8	; 232
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	8e 77       	andi	r24, 0x7E	; 126
    2198:	80 83       	st	Z, r24
    219a:	89 c0       	rjmp	.+274    	; 0x22ae <__stack+0x1af>
    219c:	8a 01       	movw	r16, r20
    219e:	0e 5f       	subi	r16, 0xFE	; 254
    21a0:	1f 4f       	sbci	r17, 0xFF	; 255
    21a2:	68 94       	set
    21a4:	99 24       	eor	r9, r9
    21a6:	92 f8       	bld	r9, 2
    21a8:	0f 2e       	mov	r0, r31
    21aa:	f8 ee       	ldi	r31, 0xE8	; 232
    21ac:	af 2e       	mov	r10, r31
    21ae:	b1 2c       	mov	r11, r1
    21b0:	f0 2d       	mov	r31, r0
    21b2:	f7 01       	movw	r30, r14
    21b4:	20 81       	ld	r18, Z
    21b6:	f8 01       	movw	r30, r16
    21b8:	31 97       	sbiw	r30, 0x01	; 1
    21ba:	90 81       	ld	r25, Z
    21bc:	f8 01       	movw	r30, r16
    21be:	80 81       	ld	r24, Z
    21c0:	99 82       	std	Y+1, r9	; 0x01
    21c2:	2a 83       	std	Y+2, r18	; 0x02
    21c4:	9b 83       	std	Y+3, r25	; 0x03
    21c6:	8c 83       	std	Y+4, r24	; 0x04
    21c8:	40 e0       	ldi	r20, 0x00	; 0
    21ca:	50 e0       	ldi	r21, 0x00	; 0
    21cc:	64 e0       	ldi	r22, 0x04	; 4
    21ce:	70 e0       	ldi	r23, 0x00	; 0
    21d0:	ce 01       	movw	r24, r28
    21d2:	01 96       	adiw	r24, 0x01	; 1
    21d4:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <Endpoint_Write_Stream_LE>
    21d8:	f5 01       	movw	r30, r10
    21da:	80 81       	ld	r24, Z
    21dc:	8e 77       	andi	r24, 0x7E	; 126
    21de:	80 83       	st	Z, r24
    21e0:	f3 e0       	ldi	r31, 0x03	; 3
    21e2:	ef 0e       	add	r14, r31
    21e4:	f1 1c       	adc	r15, r1
    21e6:	83 e0       	ldi	r24, 0x03	; 3
    21e8:	c8 1a       	sub	r12, r24
    21ea:	d1 08       	sbc	r13, r1
    21ec:	0d 5f       	subi	r16, 0xFD	; 253
    21ee:	1f 4f       	sbci	r17, 0xFF	; 255
    21f0:	94 e0       	ldi	r25, 0x04	; 4
    21f2:	c9 16       	cp	r12, r25
    21f4:	d1 04       	cpc	r13, r1
    21f6:	e8 f6       	brcc	.-70     	; 0x21b2 <__stack+0xb3>
    21f8:	e3 e0       	ldi	r30, 0x03	; 3
    21fa:	ce 16       	cp	r12, r30
    21fc:	d1 04       	cpc	r13, r1
    21fe:	b9 f4       	brne	.+46     	; 0x222e <__stack+0x12f>
    2200:	f7 01       	movw	r30, r14
    2202:	20 81       	ld	r18, Z
    2204:	91 81       	ldd	r25, Z+1	; 0x01
    2206:	82 81       	ldd	r24, Z+2	; 0x02
    2208:	37 e0       	ldi	r19, 0x07	; 7
    220a:	39 83       	std	Y+1, r19	; 0x01
    220c:	2a 83       	std	Y+2, r18	; 0x02
    220e:	9b 83       	std	Y+3, r25	; 0x03
    2210:	8c 83       	std	Y+4, r24	; 0x04
    2212:	40 e0       	ldi	r20, 0x00	; 0
    2214:	50 e0       	ldi	r21, 0x00	; 0
    2216:	64 e0       	ldi	r22, 0x04	; 4
    2218:	70 e0       	ldi	r23, 0x00	; 0
    221a:	ce 01       	movw	r24, r28
    221c:	01 96       	adiw	r24, 0x01	; 1
    221e:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <Endpoint_Write_Stream_LE>
    2222:	e8 ee       	ldi	r30, 0xE8	; 232
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
    2228:	8e 77       	andi	r24, 0x7E	; 126
    222a:	80 83       	st	Z, r24
    222c:	40 c0       	rjmp	.+128    	; 0x22ae <__stack+0x1af>
    222e:	f2 e0       	ldi	r31, 0x02	; 2
    2230:	cf 16       	cp	r12, r31
    2232:	d1 04       	cpc	r13, r1
    2234:	b1 f4       	brne	.+44     	; 0x2262 <__stack+0x163>
    2236:	f7 01       	movw	r30, r14
    2238:	90 81       	ld	r25, Z
    223a:	81 81       	ldd	r24, Z+1	; 0x01
    223c:	26 e0       	ldi	r18, 0x06	; 6
    223e:	29 83       	std	Y+1, r18	; 0x01
    2240:	9a 83       	std	Y+2, r25	; 0x02
    2242:	8b 83       	std	Y+3, r24	; 0x03
    2244:	1c 82       	std	Y+4, r1	; 0x04
    2246:	40 e0       	ldi	r20, 0x00	; 0
    2248:	50 e0       	ldi	r21, 0x00	; 0
    224a:	64 e0       	ldi	r22, 0x04	; 4
    224c:	70 e0       	ldi	r23, 0x00	; 0
    224e:	ce 01       	movw	r24, r28
    2250:	01 96       	adiw	r24, 0x01	; 1
    2252:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <Endpoint_Write_Stream_LE>
    2256:	e8 ee       	ldi	r30, 0xE8	; 232
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	80 81       	ld	r24, Z
    225c:	8e 77       	andi	r24, 0x7E	; 126
    225e:	80 83       	st	Z, r24
    2260:	26 c0       	rjmp	.+76     	; 0x22ae <__stack+0x1af>
    2262:	ca 94       	dec	r12
    2264:	cd 28       	or	r12, r13
    2266:	19 f5       	brne	.+70     	; 0x22ae <__stack+0x1af>
    2268:	f7 01       	movw	r30, r14
    226a:	80 81       	ld	r24, Z
    226c:	95 e0       	ldi	r25, 0x05	; 5
    226e:	99 83       	std	Y+1, r25	; 0x01
    2270:	8a 83       	std	Y+2, r24	; 0x02
    2272:	1b 82       	std	Y+3, r1	; 0x03
    2274:	1c 82       	std	Y+4, r1	; 0x04
    2276:	40 e0       	ldi	r20, 0x00	; 0
    2278:	50 e0       	ldi	r21, 0x00	; 0
    227a:	64 e0       	ldi	r22, 0x04	; 4
    227c:	70 e0       	ldi	r23, 0x00	; 0
    227e:	ce 01       	movw	r24, r28
    2280:	01 96       	adiw	r24, 0x01	; 1
    2282:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <Endpoint_Write_Stream_LE>
    2286:	e8 ee       	ldi	r30, 0xE8	; 232
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 81       	ld	r24, Z
    228c:	8e 77       	andi	r24, 0x7E	; 126
    228e:	80 83       	st	Z, r24
    2290:	0e c0       	rjmp	.+28     	; 0x22ae <__stack+0x1af>
    2292:	67 2b       	or	r22, r23
    2294:	09 f0       	breq	.+2      	; 0x2298 <__stack+0x199>
    2296:	3a ce       	rjmp	.-908    	; 0x1f0c <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x48>
    2298:	4e ce       	rjmp	.-868    	; 0x1f36 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x72>
    229a:	63 30       	cpi	r22, 0x03	; 3
    229c:	71 05       	cpc	r23, r1
    229e:	09 f4       	brne	.+2      	; 0x22a2 <__stack+0x1a3>
    22a0:	d6 ce       	rjmp	.-596    	; 0x204e <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x18a>
    22a2:	62 30       	cpi	r22, 0x02	; 2
    22a4:	71 05       	cpc	r23, r1
    22a6:	09 f4       	brne	.+2      	; 0x22aa <__stack+0x1ab>
    22a8:	1c cf       	rjmp	.-456    	; 0x20e2 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t+0x21e>
    22aa:	91 2c       	mov	r9, r1
    22ac:	44 cf       	rjmp	.-376    	; 0x2136 <__stack+0x37>
    22ae:	0f 90       	pop	r0
    22b0:	0f 90       	pop	r0
    22b2:	0f 90       	pop	r0
    22b4:	0f 90       	pop	r0
    22b6:	df 91       	pop	r29
    22b8:	cf 91       	pop	r28
    22ba:	1f 91       	pop	r17
    22bc:	0f 91       	pop	r16
    22be:	ff 90       	pop	r15
    22c0:	ef 90       	pop	r14
    22c2:	df 90       	pop	r13
    22c4:	cf 90       	pop	r12
    22c6:	bf 90       	pop	r11
    22c8:	af 90       	pop	r10
    22ca:	9f 90       	pop	r9
    22cc:	8f 90       	pop	r8
    22ce:	7f 90       	pop	r7
    22d0:	08 95       	ret

000022d2 <_ZN6HWmidi12sendRealTimeE17midiMessageType_t19midiInterfaceType_t>:
    22d2:	0f 93       	push	r16
    22d4:	1f 93       	push	r17
    22d6:	cf 93       	push	r28
    22d8:	8c 01       	movw	r16, r24
    22da:	c6 2f       	mov	r28, r22
    22dc:	6d 3f       	cpi	r22, 0xFD	; 253
    22de:	38 f4       	brcc	.+14     	; 0x22ee <_ZN6HWmidi12sendRealTimeE17midiMessageType_t19midiInterfaceType_t+0x1c>
    22e0:	6a 3f       	cpi	r22, 0xFA	; 250
    22e2:	38 f4       	brcc	.+14     	; 0x22f2 <_ZN6HWmidi12sendRealTimeE17midiMessageType_t19midiInterfaceType_t+0x20>
    22e4:	66 3f       	cpi	r22, 0xF6	; 246
    22e6:	29 f0       	breq	.+10     	; 0x22f2 <_ZN6HWmidi12sendRealTimeE17midiMessageType_t19midiInterfaceType_t+0x20>
    22e8:	68 3f       	cpi	r22, 0xF8	; 248
    22ea:	41 f4       	brne	.+16     	; 0x22fc <_ZN6HWmidi12sendRealTimeE17midiMessageType_t19midiInterfaceType_t+0x2a>
    22ec:	02 c0       	rjmp	.+4      	; 0x22f2 <_ZN6HWmidi12sendRealTimeE17midiMessageType_t19midiInterfaceType_t+0x20>
    22ee:	6e 3f       	cpi	r22, 0xFE	; 254
    22f0:	28 f0       	brcs	.+10     	; 0x22fc <_ZN6HWmidi12sendRealTimeE17midiMessageType_t19midiInterfaceType_t+0x2a>
    22f2:	6c 2f       	mov	r22, r28
    22f4:	88 eb       	ldi	r24, 0xB8	; 184
    22f6:	97 e0       	ldi	r25, 0x07	; 7
    22f8:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN4UART5writeEh>
    22fc:	f8 01       	movw	r30, r16
    22fe:	82 81       	ldd	r24, Z+2	; 0x02
    2300:	88 23       	and	r24, r24
    2302:	19 f0       	breq	.+6      	; 0x230a <_ZN6HWmidi12sendRealTimeE17midiMessageType_t19midiInterfaceType_t+0x38>
    2304:	c6 3f       	cpi	r28, 0xF6	; 246
    2306:	09 f4       	brne	.+2      	; 0x230a <_ZN6HWmidi12sendRealTimeE17midiMessageType_t19midiInterfaceType_t+0x38>
    2308:	15 82       	std	Z+5, r1	; 0x05
    230a:	cf 91       	pop	r28
    230c:	1f 91       	pop	r17
    230e:	0f 91       	pop	r16
    2310:	08 95       	ret

00002312 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t>:
    2312:	df 92       	push	r13
    2314:	ef 92       	push	r14
    2316:	ff 92       	push	r15
    2318:	0f 93       	push	r16
    231a:	1f 93       	push	r17
    231c:	cf 93       	push	r28
    231e:	df 93       	push	r29
    2320:	00 d0       	rcall	.+0      	; 0x2322 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x10>
    2322:	00 d0       	rcall	.+0      	; 0x2324 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x12>
    2324:	cd b7       	in	r28, 0x3d	; 61
    2326:	de b7       	in	r29, 0x3e	; 62
    2328:	01 50       	subi	r16, 0x01	; 1
    232a:	00 31       	cpi	r16, 0x10	; 16
    232c:	10 f4       	brcc	.+4      	; 0x2332 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x20>
    232e:	66 23       	and	r22, r22
    2330:	4c f0       	brlt	.+18     	; 0x2344 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x32>
    2332:	fc 01       	movw	r30, r24
    2334:	22 81       	ldd	r18, Z+2	; 0x02
    2336:	22 23       	and	r18, r18
    2338:	09 f4       	brne	.+2      	; 0x233c <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x2a>
    233a:	5d c0       	rjmp	.+186    	; 0x23f6 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xe4>
    233c:	e1 10       	cpse	r14, r1
    233e:	5b c0       	rjmp	.+182    	; 0x23f6 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xe4>
    2340:	15 82       	std	Z+5, r1	; 0x05
    2342:	59 c0       	rjmp	.+178    	; 0x23f6 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xe4>
    2344:	16 2f       	mov	r17, r22
    2346:	fc 01       	movw	r30, r24
    2348:	61 3e       	cpi	r22, 0xE1	; 225
    234a:	08 f0       	brcs	.+2      	; 0x234e <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x3c>
    234c:	50 c0       	rjmp	.+160    	; 0x23ee <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xdc>
    234e:	4f 77       	andi	r20, 0x7F	; 127
    2350:	f4 2e       	mov	r15, r20
    2352:	2f 77       	andi	r18, 0x7F	; 127
    2354:	d2 2e       	mov	r13, r18
    2356:	0f 70       	andi	r16, 0x0F	; 15
    2358:	06 2b       	or	r16, r22
    235a:	22 81       	ldd	r18, Z+2	; 0x02
    235c:	22 23       	and	r18, r18
    235e:	61 f0       	breq	.+24     	; 0x2378 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x66>
    2360:	e1 10       	cpse	r14, r1
    2362:	0a c0       	rjmp	.+20     	; 0x2378 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x66>
    2364:	25 81       	ldd	r18, Z+5	; 0x05
    2366:	20 17       	cp	r18, r16
    2368:	89 f0       	breq	.+34     	; 0x238c <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x7a>
    236a:	05 83       	std	Z+5, r16	; 0x05
    236c:	60 2f       	mov	r22, r16
    236e:	88 eb       	ldi	r24, 0xB8	; 184
    2370:	97 e0       	ldi	r25, 0x07	; 7
    2372:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN4UART5writeEh>
    2376:	0a c0       	rjmp	.+20     	; 0x238c <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x7a>
    2378:	e1 10       	cpse	r14, r1
    237a:	06 c0       	rjmp	.+12     	; 0x2388 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x76>
    237c:	60 2f       	mov	r22, r16
    237e:	88 eb       	ldi	r24, 0xB8	; 184
    2380:	97 e0       	ldi	r25, 0x07	; 7
    2382:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN4UART5writeEh>
    2386:	02 c0       	rjmp	.+4      	; 0x238c <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x7a>
    2388:	e1 10       	cpse	r14, r1
    238a:	08 c0       	rjmp	.+16     	; 0x239c <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x8a>
    238c:	6f 2d       	mov	r22, r15
    238e:	88 eb       	ldi	r24, 0xB8	; 184
    2390:	97 e0       	ldi	r25, 0x07	; 7
    2392:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN4UART5writeEh>
    2396:	10 3c       	cpi	r17, 0xC0	; 192
    2398:	19 f4       	brne	.+6      	; 0x23a0 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0x8e>
    239a:	2d c0       	rjmp	.+90     	; 0x23f6 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xe4>
    239c:	10 3c       	cpi	r17, 0xC0	; 192
    239e:	51 f0       	breq	.+20     	; 0x23b4 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xa2>
    23a0:	10 3d       	cpi	r17, 0xD0	; 208
    23a2:	41 f0       	breq	.+16     	; 0x23b4 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xa2>
    23a4:	e1 10       	cpse	r14, r1
    23a6:	06 c0       	rjmp	.+12     	; 0x23b4 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xa2>
    23a8:	6d 2d       	mov	r22, r13
    23aa:	88 eb       	ldi	r24, 0xB8	; 184
    23ac:	97 e0       	ldi	r25, 0x07	; 7
    23ae:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN4UART5writeEh>
    23b2:	21 c0       	rjmp	.+66     	; 0x23f6 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xe4>
    23b4:	f1 e0       	ldi	r31, 0x01	; 1
    23b6:	ef 12       	cpse	r14, r31
    23b8:	1e c0       	rjmp	.+60     	; 0x23f6 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xe4>
    23ba:	81 2f       	mov	r24, r17
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	95 95       	asr	r25
    23c0:	87 95       	ror	r24
    23c2:	95 95       	asr	r25
    23c4:	87 95       	ror	r24
    23c6:	95 95       	asr	r25
    23c8:	87 95       	ror	r24
    23ca:	95 95       	asr	r25
    23cc:	87 95       	ror	r24
    23ce:	89 83       	std	Y+1, r24	; 0x01
    23d0:	0a 83       	std	Y+2, r16	; 0x02
    23d2:	fb 82       	std	Y+3, r15	; 0x03
    23d4:	dc 82       	std	Y+4, r13	; 0x04
    23d6:	be 01       	movw	r22, r28
    23d8:	6f 5f       	subi	r22, 0xFF	; 255
    23da:	7f 4f       	sbci	r23, 0xFF	; 255
    23dc:	89 e0       	ldi	r24, 0x09	; 9
    23de:	97 e0       	ldi	r25, 0x07	; 7
    23e0:	0e 94 ac 1a 	call	0x3558	; 0x3558 <MIDI_Device_SendEventPacket>
    23e4:	89 e0       	ldi	r24, 0x09	; 9
    23e6:	97 e0       	ldi	r25, 0x07	; 7
    23e8:	0e 94 cf 1a 	call	0x359e	; 0x359e <MIDI_Device_Flush>
    23ec:	04 c0       	rjmp	.+8      	; 0x23f6 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xe4>
    23ee:	66 3f       	cpi	r22, 0xF6	; 246
    23f0:	10 f0       	brcs	.+4      	; 0x23f6 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t+0xe4>
    23f2:	4e 2d       	mov	r20, r14
    23f4:	6e df       	rcall	.-292    	; 0x22d2 <_ZN6HWmidi12sendRealTimeE17midiMessageType_t19midiInterfaceType_t>
    23f6:	0f 90       	pop	r0
    23f8:	0f 90       	pop	r0
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0
    23fe:	df 91       	pop	r29
    2400:	cf 91       	pop	r28
    2402:	1f 91       	pop	r17
    2404:	0f 91       	pop	r16
    2406:	ff 90       	pop	r15
    2408:	ef 90       	pop	r14
    240a:	df 90       	pop	r13
    240c:	08 95       	ret

0000240e <_ZN6HWmidi10sendNoteOnEhhh19midiInterfaceType_t>:
    240e:	ef 92       	push	r14
    2410:	0f 93       	push	r16
    2412:	e0 2e       	mov	r14, r16
    2414:	02 2f       	mov	r16, r18
    2416:	24 2f       	mov	r18, r20
    2418:	46 2f       	mov	r20, r22
    241a:	60 e9       	ldi	r22, 0x90	; 144
    241c:	7a df       	rcall	.-268    	; 0x2312 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t>
    241e:	0f 91       	pop	r16
    2420:	ef 90       	pop	r14
    2422:	08 95       	ret

00002424 <_ZN6HWmidi11sendNoteOffEhhh19midiInterfaceType_t>:
    2424:	ef 92       	push	r14
    2426:	0f 93       	push	r16
    2428:	e0 2e       	mov	r14, r16
    242a:	02 2f       	mov	r16, r18
    242c:	24 2f       	mov	r18, r20
    242e:	46 2f       	mov	r20, r22
    2430:	60 e8       	ldi	r22, 0x80	; 128
    2432:	6f df       	rcall	.-290    	; 0x2312 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t>
    2434:	0f 91       	pop	r16
    2436:	ef 90       	pop	r14
    2438:	08 95       	ret

0000243a <_ZN6HWmidi17sendControlChangeEhhh19midiInterfaceType_t>:
    243a:	ef 92       	push	r14
    243c:	0f 93       	push	r16
    243e:	e0 2e       	mov	r14, r16
    2440:	02 2f       	mov	r16, r18
    2442:	24 2f       	mov	r18, r20
    2444:	46 2f       	mov	r20, r22
    2446:	60 eb       	ldi	r22, 0xB0	; 176
    2448:	64 df       	rcall	.-312    	; 0x2312 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t>
    244a:	0f 91       	pop	r16
    244c:	ef 90       	pop	r14
    244e:	08 95       	ret

00002450 <_ZN6HWmidi16sendPolyPressureEhhh19midiInterfaceType_t>:
    2450:	ef 92       	push	r14
    2452:	0f 93       	push	r16
    2454:	e0 2e       	mov	r14, r16
    2456:	02 2f       	mov	r16, r18
    2458:	24 2f       	mov	r18, r20
    245a:	46 2f       	mov	r20, r22
    245c:	60 ea       	ldi	r22, 0xA0	; 160
    245e:	59 df       	rcall	.-334    	; 0x2312 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t>
    2460:	0f 91       	pop	r16
    2462:	ef 90       	pop	r14
    2464:	08 95       	ret

00002466 <_ZN6HWmidi14sendAfterTouchEhh19midiInterfaceType_t>:
    2466:	ef 92       	push	r14
    2468:	0f 93       	push	r16
    246a:	e2 2e       	mov	r14, r18
    246c:	04 2f       	mov	r16, r20
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	46 2f       	mov	r20, r22
    2472:	60 ed       	ldi	r22, 0xD0	; 208
    2474:	4e df       	rcall	.-356    	; 0x2312 <_ZN6HWmidi4sendE17midiMessageType_thhh19midiInterfaceType_t>
    2476:	0f 91       	pop	r16
    2478:	ef 90       	pop	r14
    247a:	08 95       	ret

0000247c <_ZN6HWmidi19enableRunningStatusEv>:
    247c:	21 e0       	ldi	r18, 0x01	; 1
    247e:	fc 01       	movw	r30, r24
    2480:	22 83       	std	Z+2, r18	; 0x02
    2482:	08 95       	ret

00002484 <_ZN6HWmidi20disableRunningStatusEv>:
    2484:	fc 01       	movw	r30, r24
    2486:	12 82       	std	Z+2, r1	; 0x02
    2488:	08 95       	ret

0000248a <_ZN6HWmidi20runningStatusEnabledEv>:
    248a:	fc 01       	movw	r30, r24
    248c:	82 81       	ldd	r24, Z+2	; 0x02
    248e:	08 95       	ret

00002490 <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t>:
    2490:	44 23       	and	r20, r20
    2492:	19 f0       	breq	.+6      	; 0x249a <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t+0xa>
    2494:	41 30       	cpi	r20, 0x01	; 1
    2496:	81 f0       	breq	.+32     	; 0x24b8 <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t+0x28>
    2498:	1e c0       	rjmp	.+60     	; 0x24d6 <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t+0x46>
    249a:	fc 01       	movw	r30, r24
    249c:	21 89       	ldd	r18, Z+17	; 0x11
    249e:	22 23       	and	r18, r18
    24a0:	e1 f0       	breq	.+56     	; 0x24da <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t+0x4a>
    24a2:	20 58       	subi	r18, 0x80	; 128
    24a4:	21 36       	cpi	r18, 0x61	; 97
    24a6:	d8 f4       	brcc	.+54     	; 0x24de <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t+0x4e>
    24a8:	80 89       	ldd	r24, Z+16	; 0x10
    24aa:	86 17       	cp	r24, r22
    24ac:	d1 f0       	breq	.+52     	; 0x24e2 <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t+0x52>
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	66 23       	and	r22, r22
    24b2:	f1 f0       	breq	.+60     	; 0x24f0 <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t+0x60>
    24b4:	80 e0       	ldi	r24, 0x00	; 0
    24b6:	08 95       	ret
    24b8:	fc 01       	movw	r30, r24
    24ba:	25 a1       	ldd	r18, Z+37	; 0x25
    24bc:	22 23       	and	r18, r18
    24be:	99 f0       	breq	.+38     	; 0x24e6 <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t+0x56>
    24c0:	20 58       	subi	r18, 0x80	; 128
    24c2:	21 36       	cpi	r18, 0x61	; 97
    24c4:	90 f4       	brcc	.+36     	; 0x24ea <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t+0x5a>
    24c6:	84 a1       	ldd	r24, Z+36	; 0x24
    24c8:	86 17       	cp	r24, r22
    24ca:	89 f0       	breq	.+34     	; 0x24ee <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t+0x5e>
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	66 23       	and	r22, r22
    24d0:	79 f0       	breq	.+30     	; 0x24f0 <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t+0x60>
    24d2:	80 e0       	ldi	r24, 0x00	; 0
    24d4:	08 95       	ret
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	08 95       	ret
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	08 95       	ret
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	08 95       	ret
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	08 95       	ret
    24e6:	80 e0       	ldi	r24, 0x00	; 0
    24e8:	08 95       	ret
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	08 95       	ret
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	08 95       	ret

000024f2 <_ZNK6HWmidi7getTypeE19midiInterfaceType_t>:
    24f2:	66 23       	and	r22, r22
    24f4:	19 f0       	breq	.+6      	; 0x24fc <_ZNK6HWmidi7getTypeE19midiInterfaceType_t+0xa>
    24f6:	61 30       	cpi	r22, 0x01	; 1
    24f8:	21 f0       	breq	.+8      	; 0x2502 <_ZNK6HWmidi7getTypeE19midiInterfaceType_t+0x10>
    24fa:	06 c0       	rjmp	.+12     	; 0x2508 <_ZNK6HWmidi7getTypeE19midiInterfaceType_t+0x16>
    24fc:	fc 01       	movw	r30, r24
    24fe:	81 89       	ldd	r24, Z+17	; 0x11
    2500:	08 95       	ret
    2502:	fc 01       	movw	r30, r24
    2504:	85 a1       	ldd	r24, Z+37	; 0x25
    2506:	08 95       	ret
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	08 95       	ret

0000250c <_ZNK6HWmidi8getData1E19midiInterfaceType_t>:
    250c:	66 23       	and	r22, r22
    250e:	19 f0       	breq	.+6      	; 0x2516 <_ZNK6HWmidi8getData1E19midiInterfaceType_t+0xa>
    2510:	61 30       	cpi	r22, 0x01	; 1
    2512:	21 f0       	breq	.+8      	; 0x251c <_ZNK6HWmidi8getData1E19midiInterfaceType_t+0x10>
    2514:	06 c0       	rjmp	.+12     	; 0x2522 <_ZNK6HWmidi8getData1E19midiInterfaceType_t+0x16>
    2516:	fc 01       	movw	r30, r24
    2518:	82 89       	ldd	r24, Z+18	; 0x12
    251a:	08 95       	ret
    251c:	fc 01       	movw	r30, r24
    251e:	86 a1       	ldd	r24, Z+38	; 0x26
    2520:	08 95       	ret
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	08 95       	ret

00002526 <_ZNK6HWmidi8getData2E19midiInterfaceType_t>:
    2526:	66 23       	and	r22, r22
    2528:	19 f0       	breq	.+6      	; 0x2530 <_ZNK6HWmidi8getData2E19midiInterfaceType_t+0xa>
    252a:	61 30       	cpi	r22, 0x01	; 1
    252c:	21 f0       	breq	.+8      	; 0x2536 <_ZNK6HWmidi8getData2E19midiInterfaceType_t+0x10>
    252e:	06 c0       	rjmp	.+12     	; 0x253c <_ZNK6HWmidi8getData2E19midiInterfaceType_t+0x16>
    2530:	fc 01       	movw	r30, r24
    2532:	83 89       	ldd	r24, Z+19	; 0x13
    2534:	08 95       	ret
    2536:	fc 01       	movw	r30, r24
    2538:	87 a1       	ldd	r24, Z+39	; 0x27
    253a:	08 95       	ret
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	08 95       	ret

00002540 <_ZN6HWmidi13getSysExArrayE19midiInterfaceType_t>:
    2540:	66 23       	and	r22, r22
    2542:	19 f0       	breq	.+6      	; 0x254a <_ZN6HWmidi13getSysExArrayE19midiInterfaceType_t+0xa>
    2544:	61 30       	cpi	r22, 0x01	; 1
    2546:	19 f0       	breq	.+6      	; 0x254e <_ZN6HWmidi13getSysExArrayE19midiInterfaceType_t+0xe>
    2548:	04 c0       	rjmp	.+8      	; 0x2552 <_ZN6HWmidi13getSysExArrayE19midiInterfaceType_t+0x12>
    254a:	44 96       	adiw	r24, 0x14	; 20
    254c:	08 95       	ret
    254e:	88 96       	adiw	r24, 0x28	; 40
    2550:	08 95       	ret
    2552:	80 e0       	ldi	r24, 0x00	; 0
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	08 95       	ret

00002558 <_ZN6HWmidi19getSysExArrayLengthE19midiInterfaceType_t>:
    2558:	66 23       	and	r22, r22
    255a:	19 f0       	breq	.+6      	; 0x2562 <_ZN6HWmidi19getSysExArrayLengthE19midiInterfaceType_t+0xa>
    255c:	61 30       	cpi	r22, 0x01	; 1
    255e:	59 f0       	breq	.+22     	; 0x2576 <_ZN6HWmidi19getSysExArrayLengthE19midiInterfaceType_t+0x1e>
    2560:	0e c0       	rjmp	.+28     	; 0x257e <_ZN6HWmidi19getSysExArrayLengthE19midiInterfaceType_t+0x26>
    2562:	fc 01       	movw	r30, r24
    2564:	23 89       	ldd	r18, Z+19	; 0x13
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	32 2f       	mov	r19, r18
    256a:	22 27       	eor	r18, r18
    256c:	82 89       	ldd	r24, Z+18	; 0x12
    256e:	a9 01       	movw	r20, r18
    2570:	48 2b       	or	r20, r24
    2572:	ca 01       	movw	r24, r20
    2574:	06 c0       	rjmp	.+12     	; 0x2582 <_ZN6HWmidi19getSysExArrayLengthE19midiInterfaceType_t+0x2a>
    2576:	fc 01       	movw	r30, r24
    2578:	86 85       	ldd	r24, Z+14	; 0x0e
    257a:	97 85       	ldd	r25, Z+15	; 0x0f
    257c:	08 95       	ret
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	80 31       	cpi	r24, 0x10	; 16
    2584:	91 05       	cpc	r25, r1
    2586:	10 f0       	brcs	.+4      	; 0x258c <_ZN6HWmidi19getSysExArrayLengthE19midiInterfaceType_t+0x34>
    2588:	8f e0       	ldi	r24, 0x0F	; 15
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	08 95       	ret

0000258e <_ZN6HWmidi15setInputChannelEh>:
    258e:	fc 01       	movw	r30, r24
    2590:	66 83       	std	Z+6, r22	; 0x06
    2592:	08 95       	ret

00002594 <_ZN6HWmidi21getTypeFromStatusByteEh>:
    2594:	66 23       	and	r22, r22
    2596:	6c f4       	brge	.+26     	; 0x25b2 <_ZN6HWmidi21getTypeFromStatusByteEh+0x1e>
    2598:	8c e0       	ldi	r24, 0x0C	; 12
    259a:	86 0f       	add	r24, r22
    259c:	82 30       	cpi	r24, 0x02	; 2
    259e:	58 f0       	brcs	.+22     	; 0x25b6 <_ZN6HWmidi21getTypeFromStatusByteEh+0x22>
    25a0:	86 2f       	mov	r24, r22
    25a2:	8b 7f       	andi	r24, 0xFB	; 251
    25a4:	89 3f       	cpi	r24, 0xF9	; 249
    25a6:	49 f0       	breq	.+18     	; 0x25ba <_ZN6HWmidi21getTypeFromStatusByteEh+0x26>
    25a8:	60 3f       	cpi	r22, 0xF0	; 240
    25aa:	48 f4       	brcc	.+18     	; 0x25be <_ZN6HWmidi21getTypeFromStatusByteEh+0x2a>
    25ac:	86 2f       	mov	r24, r22
    25ae:	80 7f       	andi	r24, 0xF0	; 240
    25b0:	08 95       	ret
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	08 95       	ret
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	08 95       	ret
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	08 95       	ret
    25be:	86 2f       	mov	r24, r22
    25c0:	08 95       	ret

000025c2 <_ZN6HWmidi16isChannelMessageE17midiMessageType_t>:
    25c2:	86 2f       	mov	r24, r22
    25c4:	8f 7e       	andi	r24, 0xEF	; 239
    25c6:	80 38       	cpi	r24, 0x80	; 128
    25c8:	59 f0       	breq	.+22     	; 0x25e0 <_ZN6HWmidi16isChannelMessageE17midiMessageType_t+0x1e>
    25ca:	80 3a       	cpi	r24, 0xA0	; 160
    25cc:	59 f0       	breq	.+22     	; 0x25e4 <_ZN6HWmidi16isChannelMessageE17midiMessageType_t+0x22>
    25ce:	60 3d       	cpi	r22, 0xD0	; 208
    25d0:	59 f0       	breq	.+22     	; 0x25e8 <_ZN6HWmidi16isChannelMessageE17midiMessageType_t+0x26>
    25d2:	60 3e       	cpi	r22, 0xE0	; 224
    25d4:	59 f0       	breq	.+22     	; 0x25ec <_ZN6HWmidi16isChannelMessageE17midiMessageType_t+0x2a>
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	60 3c       	cpi	r22, 0xC0	; 192
    25da:	49 f0       	breq	.+18     	; 0x25ee <_ZN6HWmidi16isChannelMessageE17midiMessageType_t+0x2c>
    25dc:	80 e0       	ldi	r24, 0x00	; 0
    25de:	08 95       	ret
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	08 95       	ret
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	08 95       	ret
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	08 95       	ret
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	08 95       	ret

000025f0 <_ZN6HWmidi5parseE19midiInterfaceType_t>:
    25f0:	cf 92       	push	r12
    25f2:	df 92       	push	r13
    25f4:	ef 92       	push	r14
    25f6:	ff 92       	push	r15
    25f8:	0f 93       	push	r16
    25fa:	1f 93       	push	r17
    25fc:	cf 93       	push	r28
    25fe:	df 93       	push	r29
    2600:	00 d0       	rcall	.+0      	; 0x2602 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x12>
    2602:	00 d0       	rcall	.+0      	; 0x2604 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x14>
    2604:	cd b7       	in	r28, 0x3d	; 61
    2606:	de b7       	in	r29, 0x3e	; 62
    2608:	8c 01       	movw	r16, r24
    260a:	61 11       	cpse	r22, r1
    260c:	42 c1       	rjmp	.+644    	; 0x2892 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x2a2>
    260e:	88 eb       	ldi	r24, 0xB8	; 184
    2610:	97 e0       	ldi	r25, 0x07	; 7
    2612:	92 d7       	rcall	.+3876   	; 0x3538 <_ZN4UART9availableEv>
    2614:	89 2b       	or	r24, r25
    2616:	09 f4       	brne	.+2      	; 0x261a <_ZN6HWmidi5parseE19midiInterfaceType_t+0x2a>
    2618:	fc c1       	rjmp	.+1016   	; 0x2a12 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x422>
    261a:	88 eb       	ldi	r24, 0xB8	; 184
    261c:	97 e0       	ldi	r25, 0x07	; 7
    261e:	eb d6       	rcall	.+3542   	; 0x33f6 <_ZN4UART4readEv>
    2620:	f8 2e       	mov	r15, r24
    2622:	28 2f       	mov	r18, r24
    2624:	f8 01       	movw	r30, r16
    2626:	84 85       	ldd	r24, Z+12	; 0x0c
    2628:	95 85       	ldd	r25, Z+13	; 0x0d
    262a:	00 97       	sbiw	r24, 0x00	; 0
    262c:	09 f0       	breq	.+2      	; 0x2630 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x40>
    262e:	87 c0       	rjmp	.+270    	; 0x273e <_ZN6HWmidi5parseE19midiInterfaceType_t+0x14e>
    2630:	f7 82       	std	Z+7, r15	; 0x07
    2632:	e4 80       	ldd	r14, Z+4	; 0x04
    2634:	6e 2d       	mov	r22, r14
    2636:	c8 01       	movw	r24, r16
    2638:	ad df       	rcall	.-166    	; 0x2594 <_ZN6HWmidi21getTypeFromStatusByteEh>
    263a:	68 2f       	mov	r22, r24
    263c:	c8 01       	movw	r24, r16
    263e:	c1 df       	rcall	.-126    	; 0x25c2 <_ZN6HWmidi16isChannelMessageE17midiMessageType_t>
    2640:	88 23       	and	r24, r24
    2642:	49 f0       	breq	.+18     	; 0x2656 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x66>
    2644:	ff 20       	and	r15, r15
    2646:	3c f0       	brlt	.+14     	; 0x2656 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x66>
    2648:	f8 01       	movw	r30, r16
    264a:	e7 82       	std	Z+7, r14	; 0x07
    264c:	f0 86       	std	Z+8, r15	; 0x08
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	95 87       	std	Z+13, r25	; 0x0d
    2654:	84 87       	std	Z+12, r24	; 0x0c
    2656:	f8 01       	movw	r30, r16
    2658:	f7 80       	ldd	r15, Z+7	; 0x07
    265a:	6f 2d       	mov	r22, r15
    265c:	c8 01       	movw	r24, r16
    265e:	9a df       	rcall	.-204    	; 0x2594 <_ZN6HWmidi21getTypeFromStatusByteEh>
    2660:	48 2f       	mov	r20, r24
    2662:	50 e0       	ldi	r21, 0x00	; 0
    2664:	fa 01       	movw	r30, r20
    2666:	e0 58       	subi	r30, 0x80	; 128
    2668:	f1 09       	sbc	r31, r1
    266a:	e0 38       	cpi	r30, 0x80	; 128
    266c:	f1 05       	cpc	r31, r1
    266e:	b0 f5       	brcc	.+108    	; 0x26dc <_ZN6HWmidi5parseE19midiInterfaceType_t+0xec>
    2670:	e4 5b       	subi	r30, 0xB4	; 180
    2672:	ff 4f       	sbci	r31, 0xFF	; 255
    2674:	0c 94 84 82 	jmp	0x10508	; 0x10508 <__tablejump2__>
    2678:	f8 01       	movw	r30, r16
    267a:	81 8b       	std	Z+17, r24	; 0x11
    267c:	10 8a       	std	Z+16, r1	; 0x10
    267e:	12 8a       	std	Z+18, r1	; 0x12
    2680:	13 8a       	std	Z+19, r1	; 0x13
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	83 a3       	std	Z+35, r24	; 0x23
    2686:	15 86       	std	Z+13, r1	; 0x0d
    2688:	14 86       	std	Z+12, r1	; 0x0c
    268a:	13 86       	std	Z+11, r1	; 0x0b
    268c:	12 86       	std	Z+10, r1	; 0x0a
    268e:	db c1       	rjmp	.+950    	; 0x2a46 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x456>
    2690:	22 e0       	ldi	r18, 0x02	; 2
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	f8 01       	movw	r30, r16
    2696:	33 87       	std	Z+11, r19	; 0x0b
    2698:	22 87       	std	Z+10, r18	; 0x0a
    269a:	24 85       	ldd	r18, Z+12	; 0x0c
    269c:	35 85       	ldd	r19, Z+13	; 0x0d
    269e:	21 15       	cp	r18, r1
    26a0:	31 05       	cpc	r19, r1
    26a2:	09 f0       	breq	.+2      	; 0x26a6 <_ZN6HWmidi5parseE19midiInterfaceType_t+0xb6>
    26a4:	c7 c1       	rjmp	.+910    	; 0x2a34 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x444>
    26a6:	3f c0       	rjmp	.+126    	; 0x2726 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x136>
    26a8:	23 e0       	ldi	r18, 0x03	; 3
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	f8 01       	movw	r30, r16
    26ae:	33 87       	std	Z+11, r19	; 0x0b
    26b0:	22 87       	std	Z+10, r18	; 0x0a
    26b2:	24 85       	ldd	r18, Z+12	; 0x0c
    26b4:	35 85       	ldd	r19, Z+13	; 0x0d
    26b6:	22 30       	cpi	r18, 0x02	; 2
    26b8:	31 05       	cpc	r19, r1
    26ba:	08 f0       	brcs	.+2      	; 0x26be <_ZN6HWmidi5parseE19midiInterfaceType_t+0xce>
    26bc:	b2 c1       	rjmp	.+868    	; 0x2a22 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x432>
    26be:	33 c0       	rjmp	.+102    	; 0x2726 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x136>
    26c0:	8f e0       	ldi	r24, 0x0F	; 15
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	f8 01       	movw	r30, r16
    26c6:	93 87       	std	Z+11, r25	; 0x0b
    26c8:	82 87       	std	Z+10, r24	; 0x0a
    26ca:	14 82       	std	Z+4, r1	; 0x04
    26cc:	80 ef       	ldi	r24, 0xF0	; 240
    26ce:	84 8b       	std	Z+20, r24	; 0x14
    26d0:	24 85       	ldd	r18, Z+12	; 0x0c
    26d2:	35 85       	ldd	r19, Z+13	; 0x0d
    26d4:	2e 30       	cpi	r18, 0x0E	; 14
    26d6:	31 05       	cpc	r19, r1
    26d8:	48 f4       	brcc	.+18     	; 0x26ec <_ZN6HWmidi5parseE19midiInterfaceType_t+0xfc>
    26da:	25 c0       	rjmp	.+74     	; 0x2726 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x136>
    26dc:	f8 01       	movw	r30, r16
    26de:	15 86       	std	Z+13, r1	; 0x0d
    26e0:	14 86       	std	Z+12, r1	; 0x0c
    26e2:	13 86       	std	Z+11, r1	; 0x0b
    26e4:	12 86       	std	Z+10, r1	; 0x0a
    26e6:	14 82       	std	Z+4, r1	; 0x04
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	ad c1       	rjmp	.+858    	; 0x2a46 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x456>
    26ec:	80 ef       	ldi	r24, 0xF0	; 240
    26ee:	f8 01       	movw	r30, r16
    26f0:	81 8b       	std	Z+17, r24	; 0x11
    26f2:	8f 2d       	mov	r24, r15
    26f4:	8f 70       	andi	r24, 0x0F	; 15
    26f6:	ff 24       	eor	r15, r15
    26f8:	f3 94       	inc	r15
    26fa:	f8 0e       	add	r15, r24
    26fc:	f0 8a       	std	Z+16, r15	; 0x10
    26fe:	80 85       	ldd	r24, Z+8	; 0x08
    2700:	82 8b       	std	Z+18, r24	; 0x12
    2702:	8f e0       	ldi	r24, 0x0F	; 15
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	03 97       	sbiw	r24, 0x03	; 3
    2708:	21 f4       	brne	.+8      	; 0x2712 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x122>
    270a:	f8 01       	movw	r30, r16
    270c:	81 85       	ldd	r24, Z+9	; 0x09
    270e:	83 8b       	std	Z+19, r24	; 0x13
    2710:	02 c0       	rjmp	.+4      	; 0x2716 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x126>
    2712:	f8 01       	movw	r30, r16
    2714:	13 8a       	std	Z+19, r1	; 0x13
    2716:	f8 01       	movw	r30, r16
    2718:	15 86       	std	Z+13, r1	; 0x0d
    271a:	14 86       	std	Z+12, r1	; 0x0c
    271c:	13 86       	std	Z+11, r1	; 0x0b
    271e:	12 86       	std	Z+10, r1	; 0x0a
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	83 a3       	std	Z+35, r24	; 0x23
    2724:	90 c1       	rjmp	.+800    	; 0x2a46 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x456>
    2726:	2f 5f       	subi	r18, 0xFF	; 255
    2728:	3f 4f       	sbci	r19, 0xFF	; 255
    272a:	f8 01       	movw	r30, r16
    272c:	35 87       	std	Z+13, r19	; 0x0d
    272e:	24 87       	std	Z+12, r18	; 0x0c
    2730:	83 81       	ldd	r24, Z+3	; 0x03
    2732:	81 11       	cpse	r24, r1
    2734:	70 c1       	rjmp	.+736    	; 0x2a16 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x426>
    2736:	60 e0       	ldi	r22, 0x00	; 0
    2738:	c8 01       	movw	r24, r16
    273a:	5a df       	rcall	.-332    	; 0x25f0 <_ZN6HWmidi5parseE19midiInterfaceType_t>
    273c:	84 c1       	rjmp	.+776    	; 0x2a46 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x456>
    273e:	ff 20       	and	r15, r15
    2740:	a4 f5       	brge	.+104    	; 0x27aa <_ZN6HWmidi5parseE19midiInterfaceType_t+0x1ba>
    2742:	2d 3f       	cpi	r18, 0xFD	; 253
    2744:	38 f4       	brcc	.+14     	; 0x2754 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x164>
    2746:	2a 3f       	cpi	r18, 0xFA	; 250
    2748:	38 f4       	brcc	.+14     	; 0x2758 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x168>
    274a:	27 3f       	cpi	r18, 0xF7	; 247
    274c:	69 f0       	breq	.+26     	; 0x2768 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x178>
    274e:	28 3f       	cpi	r18, 0xF8	; 248
    2750:	61 f5       	brne	.+88     	; 0x27aa <_ZN6HWmidi5parseE19midiInterfaceType_t+0x1ba>
    2752:	02 c0       	rjmp	.+4      	; 0x2758 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x168>
    2754:	2e 3f       	cpi	r18, 0xFE	; 254
    2756:	48 f1       	brcs	.+82     	; 0x27aa <_ZN6HWmidi5parseE19midiInterfaceType_t+0x1ba>
    2758:	f8 01       	movw	r30, r16
    275a:	f1 8a       	std	Z+17, r15	; 0x11
    275c:	12 8a       	std	Z+18, r1	; 0x12
    275e:	13 8a       	std	Z+19, r1	; 0x13
    2760:	10 8a       	std	Z+16, r1	; 0x10
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	83 a3       	std	Z+35, r24	; 0x23
    2766:	6f c1       	rjmp	.+734    	; 0x2a46 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x456>
    2768:	f8 01       	movw	r30, r16
    276a:	24 89       	ldd	r18, Z+20	; 0x14
    276c:	20 3f       	cpi	r18, 0xF0	; 240
    276e:	a9 f4       	brne	.+42     	; 0x279a <_ZN6HWmidi5parseE19midiInterfaceType_t+0x1aa>
    2770:	9c 01       	movw	r18, r24
    2772:	2f 5f       	subi	r18, 0xFF	; 255
    2774:	3f 4f       	sbci	r19, 0xFF	; 255
    2776:	e8 0f       	add	r30, r24
    2778:	f9 1f       	adc	r31, r25
    277a:	47 ef       	ldi	r20, 0xF7	; 247
    277c:	44 8b       	std	Z+20, r20	; 0x14
    277e:	80 ef       	ldi	r24, 0xF0	; 240
    2780:	f8 01       	movw	r30, r16
    2782:	81 8b       	std	Z+17, r24	; 0x11
    2784:	22 8b       	std	Z+18, r18	; 0x12
    2786:	33 8b       	std	Z+19, r19	; 0x13
    2788:	10 8a       	std	Z+16, r1	; 0x10
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	83 a3       	std	Z+35, r24	; 0x23
    278e:	15 86       	std	Z+13, r1	; 0x0d
    2790:	14 86       	std	Z+12, r1	; 0x0c
    2792:	13 86       	std	Z+11, r1	; 0x0b
    2794:	12 86       	std	Z+10, r1	; 0x0a
    2796:	14 82       	std	Z+4, r1	; 0x04
    2798:	56 c1       	rjmp	.+684    	; 0x2a46 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x456>
    279a:	f8 01       	movw	r30, r16
    279c:	15 86       	std	Z+13, r1	; 0x0d
    279e:	14 86       	std	Z+12, r1	; 0x0c
    27a0:	13 86       	std	Z+11, r1	; 0x0b
    27a2:	12 86       	std	Z+10, r1	; 0x0a
    27a4:	14 82       	std	Z+4, r1	; 0x04
    27a6:	80 e0       	ldi	r24, 0x00	; 0
    27a8:	4e c1       	rjmp	.+668    	; 0x2a46 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x456>
    27aa:	f8 01       	movw	r30, r16
    27ac:	27 81       	ldd	r18, Z+7	; 0x07
    27ae:	20 3f       	cpi	r18, 0xF0	; 240
    27b0:	21 f4       	brne	.+8      	; 0x27ba <_ZN6HWmidi5parseE19midiInterfaceType_t+0x1ca>
    27b2:	e8 0f       	add	r30, r24
    27b4:	f9 1f       	adc	r31, r25
    27b6:	f4 8a       	std	Z+20, r15	; 0x14
    27b8:	04 c0       	rjmp	.+8      	; 0x27c2 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x1d2>
    27ba:	f8 01       	movw	r30, r16
    27bc:	e8 0f       	add	r30, r24
    27be:	f9 1f       	adc	r31, r25
    27c0:	f7 82       	std	Z+7, r15	; 0x07
    27c2:	f8 01       	movw	r30, r16
    27c4:	c2 84       	ldd	r12, Z+10	; 0x0a
    27c6:	d3 84       	ldd	r13, Z+11	; 0x0b
    27c8:	96 01       	movw	r18, r12
    27ca:	21 50       	subi	r18, 0x01	; 1
    27cc:	31 09       	sbc	r19, r1
    27ce:	82 17       	cp	r24, r18
    27d0:	93 07       	cpc	r25, r19
    27d2:	08 f4       	brcc	.+2      	; 0x27d6 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x1e6>
    27d4:	53 c0       	rjmp	.+166    	; 0x287c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x28c>
    27d6:	e7 80       	ldd	r14, Z+7	; 0x07
    27d8:	f0 ef       	ldi	r31, 0xF0	; 240
    27da:	ef 12       	cpse	r14, r31
    27dc:	08 c0       	rjmp	.+16     	; 0x27ee <_ZN6HWmidi5parseE19midiInterfaceType_t+0x1fe>
    27de:	f8 01       	movw	r30, r16
    27e0:	15 86       	std	Z+13, r1	; 0x0d
    27e2:	14 86       	std	Z+12, r1	; 0x0c
    27e4:	13 86       	std	Z+11, r1	; 0x0b
    27e6:	12 86       	std	Z+10, r1	; 0x0a
    27e8:	14 82       	std	Z+4, r1	; 0x04
    27ea:	80 e0       	ldi	r24, 0x00	; 0
    27ec:	2c c1       	rjmp	.+600    	; 0x2a46 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x456>
    27ee:	6e 2d       	mov	r22, r14
    27f0:	c8 01       	movw	r24, r16
    27f2:	d0 de       	rcall	.-608    	; 0x2594 <_ZN6HWmidi21getTypeFromStatusByteEh>
    27f4:	f8 2e       	mov	r15, r24
    27f6:	f8 01       	movw	r30, r16
    27f8:	81 8b       	std	Z+17, r24	; 0x11
    27fa:	68 2f       	mov	r22, r24
    27fc:	c8 01       	movw	r24, r16
    27fe:	e1 de       	rcall	.-574    	; 0x25c2 <_ZN6HWmidi16isChannelMessageE17midiMessageType_t>
    2800:	88 23       	and	r24, r24
    2802:	31 f0       	breq	.+12     	; 0x2810 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x220>
    2804:	8e 2d       	mov	r24, r14
    2806:	8f 70       	andi	r24, 0x0F	; 15
    2808:	8f 5f       	subi	r24, 0xFF	; 255
    280a:	f8 01       	movw	r30, r16
    280c:	80 8b       	std	Z+16, r24	; 0x10
    280e:	02 c0       	rjmp	.+4      	; 0x2814 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x224>
    2810:	f8 01       	movw	r30, r16
    2812:	10 8a       	std	Z+16, r1	; 0x10
    2814:	f8 01       	movw	r30, r16
    2816:	80 85       	ldd	r24, Z+8	; 0x08
    2818:	82 8b       	std	Z+18, r24	; 0x12
    281a:	f3 e0       	ldi	r31, 0x03	; 3
    281c:	cf 16       	cp	r12, r31
    281e:	d1 04       	cpc	r13, r1
    2820:	21 f4       	brne	.+8      	; 0x282a <_ZN6HWmidi5parseE19midiInterfaceType_t+0x23a>
    2822:	f8 01       	movw	r30, r16
    2824:	81 85       	ldd	r24, Z+9	; 0x09
    2826:	83 8b       	std	Z+19, r24	; 0x13
    2828:	02 c0       	rjmp	.+4      	; 0x282e <_ZN6HWmidi5parseE19midiInterfaceType_t+0x23e>
    282a:	f8 01       	movw	r30, r16
    282c:	13 8a       	std	Z+19, r1	; 0x13
    282e:	f8 01       	movw	r30, r16
    2830:	15 86       	std	Z+13, r1	; 0x0d
    2832:	14 86       	std	Z+12, r1	; 0x0c
    2834:	13 86       	std	Z+11, r1	; 0x0b
    2836:	12 86       	std	Z+10, r1	; 0x0a
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	83 a3       	std	Z+35, r24	; 0x23
    283c:	f0 eb       	ldi	r31, 0xB0	; 176
    283e:	ff 16       	cp	r15, r31
    2840:	a9 f0       	breq	.+42     	; 0x286c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x27c>
    2842:	ff 15       	cp	r31, r15
    2844:	50 f0       	brcs	.+20     	; 0x285a <_ZN6HWmidi5parseE19midiInterfaceType_t+0x26a>
    2846:	80 e9       	ldi	r24, 0x90	; 144
    2848:	f8 16       	cp	r15, r24
    284a:	81 f0       	breq	.+32     	; 0x286c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x27c>
    284c:	e0 ea       	ldi	r30, 0xA0	; 160
    284e:	fe 16       	cp	r15, r30
    2850:	69 f0       	breq	.+26     	; 0x286c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x27c>
    2852:	f0 e8       	ldi	r31, 0x80	; 128
    2854:	ff 12       	cpse	r15, r31
    2856:	0e c0       	rjmp	.+28     	; 0x2874 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x284>
    2858:	09 c0       	rjmp	.+18     	; 0x286c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x27c>
    285a:	80 ed       	ldi	r24, 0xD0	; 208
    285c:	f8 16       	cp	r15, r24
    285e:	31 f0       	breq	.+12     	; 0x286c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x27c>
    2860:	e0 ee       	ldi	r30, 0xE0	; 224
    2862:	fe 16       	cp	r15, r30
    2864:	19 f0       	breq	.+6      	; 0x286c <_ZN6HWmidi5parseE19midiInterfaceType_t+0x27c>
    2866:	f0 ec       	ldi	r31, 0xC0	; 192
    2868:	ff 12       	cpse	r15, r31
    286a:	04 c0       	rjmp	.+8      	; 0x2874 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x284>
    286c:	f8 01       	movw	r30, r16
    286e:	e4 82       	std	Z+4, r14	; 0x04
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	e9 c0       	rjmp	.+466    	; 0x2a46 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x456>
    2874:	f8 01       	movw	r30, r16
    2876:	14 82       	std	Z+4, r1	; 0x04
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	e5 c0       	rjmp	.+458    	; 0x2a46 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x456>
    287c:	01 96       	adiw	r24, 0x01	; 1
    287e:	f8 01       	movw	r30, r16
    2880:	95 87       	std	Z+13, r25	; 0x0d
    2882:	84 87       	std	Z+12, r24	; 0x0c
    2884:	83 81       	ldd	r24, Z+3	; 0x03
    2886:	81 11       	cpse	r24, r1
    2888:	c8 c0       	rjmp	.+400    	; 0x2a1a <_ZN6HWmidi5parseE19midiInterfaceType_t+0x42a>
    288a:	60 e0       	ldi	r22, 0x00	; 0
    288c:	c8 01       	movw	r24, r16
    288e:	b0 de       	rcall	.-672    	; 0x25f0 <_ZN6HWmidi5parseE19midiInterfaceType_t>
    2890:	da c0       	rjmp	.+436    	; 0x2a46 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x456>
    2892:	61 30       	cpi	r22, 0x01	; 1
    2894:	09 f0       	breq	.+2      	; 0x2898 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x2a8>
    2896:	c3 c0       	rjmp	.+390    	; 0x2a1e <_ZN6HWmidi5parseE19midiInterfaceType_t+0x42e>
    2898:	80 91 d0 13 	lds	r24, 0x13D0
    289c:	84 30       	cpi	r24, 0x04	; 4
    289e:	09 f0       	breq	.+2      	; 0x28a2 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x2b2>
    28a0:	b2 c0       	rjmp	.+356    	; 0x2a06 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x416>
    28a2:	82 e0       	ldi	r24, 0x02	; 2
    28a4:	80 93 e9 00 	sts	0x00E9, r24
    28a8:	80 91 e8 00 	lds	r24, 0x00E8
    28ac:	82 ff       	sbrs	r24, 2
    28ae:	ad c0       	rjmp	.+346    	; 0x2a0a <_ZN6HWmidi5parseE19midiInterfaceType_t+0x41a>
    28b0:	40 e0       	ldi	r20, 0x00	; 0
    28b2:	50 e0       	ldi	r21, 0x00	; 0
    28b4:	64 e0       	ldi	r22, 0x04	; 4
    28b6:	70 e0       	ldi	r23, 0x00	; 0
    28b8:	ce 01       	movw	r24, r28
    28ba:	01 96       	adiw	r24, 0x01	; 1
    28bc:	e6 d6       	rcall	.+3532   	; 0x368a <Endpoint_Read_Stream_LE>
    28be:	80 91 f2 00 	lds	r24, 0x00F2
    28c2:	90 91 f3 00 	lds	r25, 0x00F3
    28c6:	89 2b       	or	r24, r25
    28c8:	29 f4       	brne	.+10     	; 0x28d4 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x2e4>
    28ca:	e8 ee       	ldi	r30, 0xE8	; 232
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	80 81       	ld	r24, Z
    28d0:	8b 77       	andi	r24, 0x7B	; 123
    28d2:	80 83       	st	Z, r24
    28d4:	89 81       	ldd	r24, Y+1	; 0x01
    28d6:	82 95       	swap	r24
    28d8:	80 7f       	andi	r24, 0xF0	; 240
    28da:	80 38       	cpi	r24, 0x80	; 128
    28dc:	09 f4       	brne	.+2      	; 0x28e0 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x2f0>
    28de:	48 c0       	rjmp	.+144    	; 0x2970 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x380>
    28e0:	80 f4       	brcc	.+32     	; 0x2902 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x312>
    28e2:	80 35       	cpi	r24, 0x50	; 80
    28e4:	e9 f0       	breq	.+58     	; 0x2920 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x330>
    28e6:	30 f4       	brcc	.+12     	; 0x28f4 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x304>
    28e8:	80 32       	cpi	r24, 0x20	; 32
    28ea:	b1 f1       	breq	.+108    	; 0x2958 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x368>
    28ec:	80 34       	cpi	r24, 0x40	; 64
    28ee:	09 f4       	brne	.+2      	; 0x28f2 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x302>
    28f0:	4c c0       	rjmp	.+152    	; 0x298a <_ZN6HWmidi5parseE19midiInterfaceType_t+0x39a>
    28f2:	8d c0       	rjmp	.+282    	; 0x2a0e <_ZN6HWmidi5parseE19midiInterfaceType_t+0x41e>
    28f4:	80 36       	cpi	r24, 0x60	; 96
    28f6:	09 f4       	brne	.+2      	; 0x28fa <_ZN6HWmidi5parseE19midiInterfaceType_t+0x30a>
    28f8:	5e c0       	rjmp	.+188    	; 0x29b6 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x3c6>
    28fa:	80 37       	cpi	r24, 0x70	; 112
    28fc:	09 f4       	brne	.+2      	; 0x2900 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x310>
    28fe:	6e c0       	rjmp	.+220    	; 0x29dc <_ZN6HWmidi5parseE19midiInterfaceType_t+0x3ec>
    2900:	86 c0       	rjmp	.+268    	; 0x2a0e <_ZN6HWmidi5parseE19midiInterfaceType_t+0x41e>
    2902:	80 3b       	cpi	r24, 0xB0	; 176
    2904:	a9 f1       	breq	.+106    	; 0x2970 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x380>
    2906:	30 f4       	brcc	.+12     	; 0x2914 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x324>
    2908:	80 39       	cpi	r24, 0x90	; 144
    290a:	91 f1       	breq	.+100    	; 0x2970 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x380>
    290c:	80 3a       	cpi	r24, 0xA0	; 160
    290e:	09 f0       	breq	.+2      	; 0x2912 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x322>
    2910:	7e c0       	rjmp	.+252    	; 0x2a0e <_ZN6HWmidi5parseE19midiInterfaceType_t+0x41e>
    2912:	2e c0       	rjmp	.+92     	; 0x2970 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x380>
    2914:	80 3e       	cpi	r24, 0xE0	; 224
    2916:	61 f1       	breq	.+88     	; 0x2970 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x380>
    2918:	82 3f       	cpi	r24, 0xF2	; 242
    291a:	09 f0       	breq	.+2      	; 0x291e <_ZN6HWmidi5parseE19midiInterfaceType_t+0x32e>
    291c:	78 c0       	rjmp	.+240    	; 0x2a0e <_ZN6HWmidi5parseE19midiInterfaceType_t+0x41e>
    291e:	28 c0       	rjmp	.+80     	; 0x2970 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x380>
    2920:	8a 81       	ldd	r24, Y+2	; 0x02
    2922:	87 3f       	cpi	r24, 0xF7	; 247
    2924:	41 f0       	breq	.+16     	; 0x2936 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x346>
    2926:	f8 01       	movw	r30, r16
    2928:	85 a3       	std	Z+37, r24	; 0x25
    292a:	14 a2       	std	Z+36, r1	; 0x24
    292c:	16 a2       	std	Z+38, r1	; 0x26
    292e:	17 a2       	std	Z+39, r1	; 0x27
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	87 ab       	std	Z+55, r24	; 0x37
    2934:	88 c0       	rjmp	.+272    	; 0x2a46 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x456>
    2936:	f8 01       	movw	r30, r16
    2938:	86 85       	ldd	r24, Z+14	; 0x0e
    293a:	97 85       	ldd	r25, Z+15	; 0x0f
    293c:	e8 0f       	add	r30, r24
    293e:	f9 1f       	adc	r31, r25
    2940:	27 ef       	ldi	r18, 0xF7	; 247
    2942:	20 a7       	std	Z+40, r18	; 0x28
    2944:	01 96       	adiw	r24, 0x01	; 1
    2946:	f8 01       	movw	r30, r16
    2948:	97 87       	std	Z+15, r25	; 0x0f
    294a:	86 87       	std	Z+14, r24	; 0x0e
    294c:	80 ef       	ldi	r24, 0xF0	; 240
    294e:	85 a3       	std	Z+37, r24	; 0x25
    2950:	14 a2       	std	Z+36, r1	; 0x24
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	87 ab       	std	Z+55, r24	; 0x37
    2956:	77 c0       	rjmp	.+238    	; 0x2a46 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x456>
    2958:	8a 81       	ldd	r24, Y+2	; 0x02
    295a:	f8 01       	movw	r30, r16
    295c:	85 a3       	std	Z+37, r24	; 0x25
    295e:	8f 70       	andi	r24, 0x0F	; 15
    2960:	8f 5f       	subi	r24, 0xFF	; 255
    2962:	84 a3       	std	Z+36, r24	; 0x24
    2964:	8b 81       	ldd	r24, Y+3	; 0x03
    2966:	86 a3       	std	Z+38, r24	; 0x26
    2968:	17 a2       	std	Z+39, r1	; 0x27
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	87 ab       	std	Z+55, r24	; 0x37
    296e:	6b c0       	rjmp	.+214    	; 0x2a46 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x456>
    2970:	f8 01       	movw	r30, r16
    2972:	85 a3       	std	Z+37, r24	; 0x25
    2974:	8a 81       	ldd	r24, Y+2	; 0x02
    2976:	8f 70       	andi	r24, 0x0F	; 15
    2978:	8f 5f       	subi	r24, 0xFF	; 255
    297a:	84 a3       	std	Z+36, r24	; 0x24
    297c:	8b 81       	ldd	r24, Y+3	; 0x03
    297e:	86 a3       	std	Z+38, r24	; 0x26
    2980:	8c 81       	ldd	r24, Y+4	; 0x04
    2982:	87 a3       	std	Z+39, r24	; 0x27
    2984:	81 e0       	ldi	r24, 0x01	; 1
    2986:	87 ab       	std	Z+55, r24	; 0x37
    2988:	5e c0       	rjmp	.+188    	; 0x2a46 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x456>
    298a:	2a 81       	ldd	r18, Y+2	; 0x02
    298c:	20 3f       	cpi	r18, 0xF0	; 240
    298e:	19 f4       	brne	.+6      	; 0x2996 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x3a6>
    2990:	f8 01       	movw	r30, r16
    2992:	17 86       	std	Z+15, r1	; 0x0f
    2994:	16 86       	std	Z+14, r1	; 0x0e
    2996:	f8 01       	movw	r30, r16
    2998:	86 85       	ldd	r24, Z+14	; 0x0e
    299a:	97 85       	ldd	r25, Z+15	; 0x0f
    299c:	e8 0f       	add	r30, r24
    299e:	f9 1f       	adc	r31, r25
    29a0:	20 a7       	std	Z+40, r18	; 0x28
    29a2:	2b 81       	ldd	r18, Y+3	; 0x03
    29a4:	21 a7       	std	Z+41, r18	; 0x29
    29a6:	2c 81       	ldd	r18, Y+4	; 0x04
    29a8:	22 a7       	std	Z+42, r18	; 0x2a
    29aa:	03 96       	adiw	r24, 0x03	; 3
    29ac:	f8 01       	movw	r30, r16
    29ae:	97 87       	std	Z+15, r25	; 0x0f
    29b0:	86 87       	std	Z+14, r24	; 0x0e
    29b2:	80 e0       	ldi	r24, 0x00	; 0
    29b4:	48 c0       	rjmp	.+144    	; 0x2a46 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x456>
    29b6:	f8 01       	movw	r30, r16
    29b8:	86 85       	ldd	r24, Z+14	; 0x0e
    29ba:	97 85       	ldd	r25, Z+15	; 0x0f
    29bc:	e8 0f       	add	r30, r24
    29be:	f9 1f       	adc	r31, r25
    29c0:	2a 81       	ldd	r18, Y+2	; 0x02
    29c2:	20 a7       	std	Z+40, r18	; 0x28
    29c4:	2b 81       	ldd	r18, Y+3	; 0x03
    29c6:	21 a7       	std	Z+41, r18	; 0x29
    29c8:	02 96       	adiw	r24, 0x02	; 2
    29ca:	f8 01       	movw	r30, r16
    29cc:	97 87       	std	Z+15, r25	; 0x0f
    29ce:	86 87       	std	Z+14, r24	; 0x0e
    29d0:	80 ef       	ldi	r24, 0xF0	; 240
    29d2:	85 a3       	std	Z+37, r24	; 0x25
    29d4:	14 a2       	std	Z+36, r1	; 0x24
    29d6:	81 e0       	ldi	r24, 0x01	; 1
    29d8:	87 ab       	std	Z+55, r24	; 0x37
    29da:	35 c0       	rjmp	.+106    	; 0x2a46 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x456>
    29dc:	f8 01       	movw	r30, r16
    29de:	86 85       	ldd	r24, Z+14	; 0x0e
    29e0:	97 85       	ldd	r25, Z+15	; 0x0f
    29e2:	e8 0f       	add	r30, r24
    29e4:	f9 1f       	adc	r31, r25
    29e6:	2a 81       	ldd	r18, Y+2	; 0x02
    29e8:	20 a7       	std	Z+40, r18	; 0x28
    29ea:	2b 81       	ldd	r18, Y+3	; 0x03
    29ec:	21 a7       	std	Z+41, r18	; 0x29
    29ee:	2c 81       	ldd	r18, Y+4	; 0x04
    29f0:	22 a7       	std	Z+42, r18	; 0x2a
    29f2:	03 96       	adiw	r24, 0x03	; 3
    29f4:	f8 01       	movw	r30, r16
    29f6:	97 87       	std	Z+15, r25	; 0x0f
    29f8:	86 87       	std	Z+14, r24	; 0x0e
    29fa:	80 ef       	ldi	r24, 0xF0	; 240
    29fc:	85 a3       	std	Z+37, r24	; 0x25
    29fe:	14 a2       	std	Z+36, r1	; 0x24
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	87 ab       	std	Z+55, r24	; 0x37
    2a04:	20 c0       	rjmp	.+64     	; 0x2a46 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x456>
    2a06:	80 e0       	ldi	r24, 0x00	; 0
    2a08:	1e c0       	rjmp	.+60     	; 0x2a46 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x456>
    2a0a:	80 e0       	ldi	r24, 0x00	; 0
    2a0c:	1c c0       	rjmp	.+56     	; 0x2a46 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x456>
    2a0e:	80 e0       	ldi	r24, 0x00	; 0
    2a10:	1a c0       	rjmp	.+52     	; 0x2a46 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x456>
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    2a14:	18 c0       	rjmp	.+48     	; 0x2a46 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x456>
    2a16:	80 e0       	ldi	r24, 0x00	; 0
    2a18:	16 c0       	rjmp	.+44     	; 0x2a46 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x456>
    2a1a:	80 e0       	ldi	r24, 0x00	; 0
    2a1c:	14 c0       	rjmp	.+40     	; 0x2a46 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x456>
    2a1e:	80 e0       	ldi	r24, 0x00	; 0
    2a20:	12 c0       	rjmp	.+36     	; 0x2a46 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x456>
    2a22:	f8 01       	movw	r30, r16
    2a24:	81 8b       	std	Z+17, r24	; 0x11
    2a26:	8f 2d       	mov	r24, r15
    2a28:	8f 70       	andi	r24, 0x0F	; 15
    2a2a:	8f 5f       	subi	r24, 0xFF	; 255
    2a2c:	80 8b       	std	Z+16, r24	; 0x10
    2a2e:	80 85       	ldd	r24, Z+8	; 0x08
    2a30:	82 8b       	std	Z+18, r24	; 0x12
    2a32:	6b ce       	rjmp	.-810    	; 0x270a <_ZN6HWmidi5parseE19midiInterfaceType_t+0x11a>
    2a34:	f8 01       	movw	r30, r16
    2a36:	81 8b       	std	Z+17, r24	; 0x11
    2a38:	8f 2d       	mov	r24, r15
    2a3a:	8f 70       	andi	r24, 0x0F	; 15
    2a3c:	8f 5f       	subi	r24, 0xFF	; 255
    2a3e:	80 8b       	std	Z+16, r24	; 0x10
    2a40:	80 85       	ldd	r24, Z+8	; 0x08
    2a42:	82 8b       	std	Z+18, r24	; 0x12
    2a44:	66 ce       	rjmp	.-820    	; 0x2712 <_ZN6HWmidi5parseE19midiInterfaceType_t+0x122>
    2a46:	0f 90       	pop	r0
    2a48:	0f 90       	pop	r0
    2a4a:	0f 90       	pop	r0
    2a4c:	0f 90       	pop	r0
    2a4e:	df 91       	pop	r29
    2a50:	cf 91       	pop	r28
    2a52:	1f 91       	pop	r17
    2a54:	0f 91       	pop	r16
    2a56:	ff 90       	pop	r15
    2a58:	ef 90       	pop	r14
    2a5a:	df 90       	pop	r13
    2a5c:	cf 90       	pop	r12
    2a5e:	08 95       	ret

00002a60 <_ZN6HWmidi4readEh19midiInterfaceType_t>:
    2a60:	0f 93       	push	r16
    2a62:	1f 93       	push	r17
    2a64:	cf 93       	push	r28
    2a66:	df 93       	push	r29
    2a68:	61 31       	cpi	r22, 0x11	; 17
    2a6a:	60 f4       	brcc	.+24     	; 0x2a84 <_ZN6HWmidi4readEh19midiInterfaceType_t+0x24>
    2a6c:	d4 2f       	mov	r29, r20
    2a6e:	c6 2f       	mov	r28, r22
    2a70:	8c 01       	movw	r16, r24
    2a72:	64 2f       	mov	r22, r20
    2a74:	bd dd       	rcall	.-1158   	; 0x25f0 <_ZN6HWmidi5parseE19midiInterfaceType_t>
    2a76:	88 23       	and	r24, r24
    2a78:	31 f0       	breq	.+12     	; 0x2a86 <_ZN6HWmidi4readEh19midiInterfaceType_t+0x26>
    2a7a:	4d 2f       	mov	r20, r29
    2a7c:	6c 2f       	mov	r22, r28
    2a7e:	c8 01       	movw	r24, r16
    2a80:	07 dd       	rcall	.-1522   	; 0x2490 <_ZN6HWmidi11inputFilterEh19midiInterfaceType_t>
    2a82:	01 c0       	rjmp	.+2      	; 0x2a86 <_ZN6HWmidi4readEh19midiInterfaceType_t+0x26>
    2a84:	80 e0       	ldi	r24, 0x00	; 0
    2a86:	df 91       	pop	r29
    2a88:	cf 91       	pop	r28
    2a8a:	1f 91       	pop	r17
    2a8c:	0f 91       	pop	r16
    2a8e:	08 95       	ret

00002a90 <_ZN6HWmidi4readE19midiInterfaceType_t>:
    2a90:	46 2f       	mov	r20, r22
    2a92:	fc 01       	movw	r30, r24
    2a94:	66 81       	ldd	r22, Z+6	; 0x06
    2a96:	e4 cf       	rjmp	.-56     	; 0x2a60 <_ZN6HWmidi4readEh19midiInterfaceType_t>
    2a98:	08 95       	ret

00002a9a <EVENT_USB_Device_ConfigurationChanged>:
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoint_BytesToEPSizeMask(Size)));
    2a9a:	42 e3       	ldi	r20, 0x32	; 50
    2a9c:	61 e8       	ldi	r22, 0x81	; 129
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	4f d7       	rcall	.+3742   	; 0x3940 <Endpoint_ConfigureEndpoint_Prv>
    2aa2:	42 e3       	ldi	r20, 0x32	; 50
    2aa4:	60 e8       	ldi	r22, 0x80	; 128
    2aa6:	82 e0       	ldi	r24, 0x02	; 2
    2aa8:	4b c7       	rjmp	.+3734   	; 0x3940 <Endpoint_ConfigureEndpoint_Prv>
    2aaa:	08 95       	ret

00002aac <_GLOBAL__sub_I_MIDI_Interface>:
    ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_IN_EPADDR, EP_TYPE_BULK, MIDI_STREAM_EPSIZE, 1);
    ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_OUT_EPADDR, EP_TYPE_BULK, MIDI_STREAM_EPSIZE, 1);

}

HWmidi hwMIDI;
    2aac:	81 ed       	ldi	r24, 0xD1	; 209
    2aae:	96 e0       	ldi	r25, 0x06	; 6
    2ab0:	ca c9       	rjmp	.-3180   	; 0x1e46 <_ZN6HWmidiC1Ev>
    2ab2:	08 95       	ret

00002ab4 <_Z15ledStateToValue10ledState_t>:

    ledState[ledNumber] = value;

}

TimerObject::TimerObject()  {
    2ab4:	82 30       	cpi	r24, 0x02	; 2
    2ab6:	31 f0       	breq	.+12     	; 0x2ac4 <_Z15ledStateToValue10ledState_t+0x10>
    2ab8:	83 30       	cpi	r24, 0x03	; 3
    2aba:	31 f0       	breq	.+12     	; 0x2ac8 <_Z15ledStateToValue10ledState_t+0x14>
    2abc:	81 30       	cpi	r24, 0x01	; 1
    2abe:	31 f4       	brne	.+12     	; 0x2acc <_Z15ledStateToValue10ledState_t+0x18>
    2ac0:	8e e6       	ldi	r24, 0x6E	; 110
    2ac2:	08 95       	ret
    2ac4:	8f ef       	ldi	r24, 0xFF	; 255
    2ac6:	08 95       	ret
    2ac8:	8f ef       	ldi	r24, 0xFF	; 255
    2aca:	08 95       	ret
    2acc:	80 e0       	ldi	r24, 0x00	; 0
    2ace:	08 95       	ret

00002ad0 <__vector_21>:
    2ad0:	1f 92       	push	r1
    2ad2:	0f 92       	push	r0
    2ad4:	0f b6       	in	r0, 0x3f	; 63
    2ad6:	0f 92       	push	r0
    2ad8:	11 24       	eor	r1, r1
    2ada:	0b b6       	in	r0, 0x3b	; 59
    2adc:	0f 92       	push	r0
    2ade:	8f 92       	push	r8
    2ae0:	9f 92       	push	r9
    2ae2:	af 92       	push	r10
    2ae4:	bf 92       	push	r11
    2ae6:	cf 92       	push	r12
    2ae8:	df 92       	push	r13
    2aea:	ef 92       	push	r14
    2aec:	ff 92       	push	r15
    2aee:	0f 93       	push	r16
    2af0:	1f 93       	push	r17
    2af2:	2f 93       	push	r18
    2af4:	3f 93       	push	r19
    2af6:	4f 93       	push	r20
    2af8:	5f 93       	push	r21
    2afa:	6f 93       	push	r22
    2afc:	7f 93       	push	r23
    2afe:	8f 93       	push	r24
    2b00:	9f 93       	push	r25
    2b02:	af 93       	push	r26
    2b04:	bf 93       	push	r27
    2b06:	cf 93       	push	r28
    2b08:	df 93       	push	r29
    2b0a:	ef 93       	push	r30
    2b0c:	ff 93       	push	r31
    2b0e:	80 91 17 07 	lds	r24, 0x0717
    2b12:	82 30       	cpi	r24, 0x02	; 2
    2b14:	09 f0       	breq	.+2      	; 0x2b18 <__vector_21+0x48>
    2b16:	ad c0       	rjmp	.+346    	; 0x2c72 <__vector_21+0x1a2>
    2b18:	10 92 17 07 	sts	0x0717, r1
    2b1c:	e0 eb       	ldi	r30, 0xB0	; 176
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	80 81       	ld	r24, Z
    2b22:	8f 77       	andi	r24, 0x7F	; 127
    2b24:	80 83       	st	Z, r24
    2b26:	e0 e8       	ldi	r30, 0x80	; 128
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	80 81       	ld	r24, Z
    2b2c:	8f 77       	andi	r24, 0x7F	; 127
    2b2e:	80 83       	st	Z, r24
    2b30:	80 81       	ld	r24, Z
    2b32:	8f 7d       	andi	r24, 0xDF	; 223
    2b34:	80 83       	st	Z, r24
    2b36:	2e 98       	cbi	0x05, 6	; 5
    2b38:	2e 98       	cbi	0x05, 6	; 5
    2b3a:	2e 98       	cbi	0x05, 6	; 5
    2b3c:	80 91 b7 07 	lds	r24, 0x07B7
    2b40:	88 30       	cpi	r24, 0x08	; 8
    2b42:	11 f4       	brne	.+4      	; 0x2b48 <__vector_21+0x78>
    2b44:	10 92 b7 07 	sts	0x07B7, r1
    2b48:	80 91 b7 07 	lds	r24, 0x07B7
    2b4c:	80 ff       	sbrs	r24, 0
    2b4e:	02 c0       	rjmp	.+4      	; 0x2b54 <__vector_21+0x84>
    2b50:	29 9a       	sbi	0x05, 1	; 5
    2b52:	01 c0       	rjmp	.+2      	; 0x2b56 <__vector_21+0x86>
    2b54:	29 98       	cbi	0x05, 1	; 5
    2b56:	81 ff       	sbrs	r24, 1
    2b58:	02 c0       	rjmp	.+4      	; 0x2b5e <__vector_21+0x8e>
    2b5a:	2a 9a       	sbi	0x05, 2	; 5
    2b5c:	01 c0       	rjmp	.+2      	; 0x2b60 <__vector_21+0x90>
    2b5e:	2a 98       	cbi	0x05, 2	; 5
    2b60:	82 ff       	sbrs	r24, 2
    2b62:	02 c0       	rjmp	.+4      	; 0x2b68 <__vector_21+0x98>
    2b64:	2b 9a       	sbi	0x05, 3	; 5
    2b66:	da c0       	rjmp	.+436    	; 0x2d1c <__vector_21+0x24c>
    2b68:	2b 98       	cbi	0x05, 3	; 5
    2b6a:	d8 c0       	rjmp	.+432    	; 0x2d1c <__vector_21+0x24c>
    2b6c:	80 91 b7 07 	lds	r24, 0x07B7
    2b70:	82 0f       	add	r24, r18
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	fc 01       	movw	r30, r24
    2b76:	e1 56       	subi	r30, 0x61	; 97
    2b78:	f8 4f       	sbci	r31, 0xF8	; 248
    2b7a:	40 81       	ld	r20, Z
    2b7c:	fc 01       	movw	r30, r24
    2b7e:	ee 0f       	add	r30, r30
    2b80:	ff 1f       	adc	r31, r31
    2b82:	e1 59       	subi	r30, 0x91	; 145
    2b84:	f8 4f       	sbci	r31, 0xF8	; 248
    2b86:	01 90       	ld	r0, Z+
    2b88:	f0 81       	ld	r31, Z
    2b8a:	e0 2d       	mov	r30, r0
    2b8c:	5e 2f       	mov	r21, r30
    2b8e:	ee 23       	and	r30, r30
    2b90:	e1 f0       	breq	.+56     	; 0x2bca <__vector_21+0xfa>
    2b92:	31 30       	cpi	r19, 0x01	; 1
    2b94:	59 f0       	breq	.+22     	; 0x2bac <__vector_21+0xdc>
    2b96:	18 f0       	brcs	.+6      	; 0x2b9e <__vector_21+0xce>
    2b98:	32 30       	cpi	r19, 0x02	; 2
    2b9a:	81 f0       	breq	.+32     	; 0x2bbc <__vector_21+0xec>
    2b9c:	16 c0       	rjmp	.+44     	; 0x2bca <__vector_21+0xfa>
    2b9e:	e8 01       	movw	r28, r16
    2ba0:	e8 83       	st	Y, r30
    2ba2:	e4 01       	movw	r28, r8
    2ba4:	e8 81       	ld	r30, Y
    2ba6:	e0 68       	ori	r30, 0x80	; 128
    2ba8:	e8 83       	st	Y, r30
    2baa:	0f c0       	rjmp	.+30     	; 0x2bca <__vector_21+0xfa>
    2bac:	ff 27       	eor	r31, r31
    2bae:	e7 01       	movw	r28, r14
    2bb0:	f9 83       	std	Y+1, r31	; 0x01
    2bb2:	e8 83       	st	Y, r30
    2bb4:	ec 91       	ld	r30, X
    2bb6:	e0 68       	ori	r30, 0x80	; 128
    2bb8:	ec 93       	st	X, r30
    2bba:	07 c0       	rjmp	.+14     	; 0x2bca <__vector_21+0xfa>
    2bbc:	ff 27       	eor	r31, r31
    2bbe:	eb 01       	movw	r28, r22
    2bc0:	f9 83       	std	Y+1, r31	; 0x01
    2bc2:	e8 83       	st	Y, r30
    2bc4:	ec 91       	ld	r30, X
    2bc6:	e0 62       	ori	r30, 0x20	; 32
    2bc8:	ec 93       	st	X, r30
    2bca:	45 17       	cp	r20, r21
    2bcc:	09 f4       	brne	.+2      	; 0x2bd0 <__vector_21+0x100>
    2bce:	47 c0       	rjmp	.+142    	; 0x2c5e <__vector_21+0x18e>
    2bd0:	ec 2d       	mov	r30, r12
    2bd2:	fd 2d       	mov	r31, r13
    2bd4:	54 17       	cp	r21, r20
    2bd6:	10 f0       	brcs	.+4      	; 0x2bdc <__vector_21+0x10c>
    2bd8:	eb 2d       	mov	r30, r11
    2bda:	fa 2d       	mov	r31, r10
    2bdc:	31 97       	sbiw	r30, 0x01	; 1
    2bde:	01 f5       	brne	.+64     	; 0x2c20 <__vector_21+0x150>
    2be0:	50 91 28 01 	lds	r21, 0x0128
    2be4:	fc 01       	movw	r30, r24
    2be6:	ee 0f       	add	r30, r30
    2be8:	ff 1f       	adc	r31, r31
    2bea:	e1 59       	subi	r30, 0x91	; 145
    2bec:	f8 4f       	sbci	r31, 0xF8	; 248
    2bee:	01 90       	ld	r0, Z+
    2bf0:	f0 81       	ld	r31, Z
    2bf2:	e0 2d       	mov	r30, r0
    2bf4:	e5 0f       	add	r30, r21
    2bf6:	f1 1d       	adc	r31, r1
    2bf8:	50 e0       	ldi	r21, 0x00	; 0
    2bfa:	4e 17       	cp	r20, r30
    2bfc:	5f 07       	cpc	r21, r31
    2bfe:	44 f0       	brlt	.+16     	; 0x2c10 <__vector_21+0x140>
    2c00:	88 0f       	add	r24, r24
    2c02:	99 1f       	adc	r25, r25
    2c04:	81 59       	subi	r24, 0x91	; 145
    2c06:	98 4f       	sbci	r25, 0xF8	; 248
    2c08:	ec 01       	movw	r28, r24
    2c0a:	f9 83       	std	Y+1, r31	; 0x01
    2c0c:	e8 83       	st	Y, r30
    2c0e:	27 c0       	rjmp	.+78     	; 0x2c5e <__vector_21+0x18e>
    2c10:	88 0f       	add	r24, r24
    2c12:	99 1f       	adc	r25, r25
    2c14:	fc 01       	movw	r30, r24
    2c16:	e1 59       	subi	r30, 0x91	; 145
    2c18:	f8 4f       	sbci	r31, 0xF8	; 248
    2c1a:	51 83       	std	Z+1, r21	; 0x01
    2c1c:	40 83       	st	Z, r20
    2c1e:	1f c0       	rjmp	.+62     	; 0x2c5e <__vector_21+0x18e>
    2c20:	50 91 28 01 	lds	r21, 0x0128
    2c24:	fc 01       	movw	r30, r24
    2c26:	ee 0f       	add	r30, r30
    2c28:	ff 1f       	adc	r31, r31
    2c2a:	e1 59       	subi	r30, 0x91	; 145
    2c2c:	f8 4f       	sbci	r31, 0xF8	; 248
    2c2e:	01 90       	ld	r0, Z+
    2c30:	f0 81       	ld	r31, Z
    2c32:	e0 2d       	mov	r30, r0
    2c34:	e5 1b       	sub	r30, r21
    2c36:	f1 09       	sbc	r31, r1
    2c38:	50 e0       	ldi	r21, 0x00	; 0
    2c3a:	e4 17       	cp	r30, r20
    2c3c:	f5 07       	cpc	r31, r21
    2c3e:	44 f0       	brlt	.+16     	; 0x2c50 <__vector_21+0x180>
    2c40:	88 0f       	add	r24, r24
    2c42:	99 1f       	adc	r25, r25
    2c44:	81 59       	subi	r24, 0x91	; 145
    2c46:	98 4f       	sbci	r25, 0xF8	; 248
    2c48:	ec 01       	movw	r28, r24
    2c4a:	f9 83       	std	Y+1, r31	; 0x01
    2c4c:	e8 83       	st	Y, r30
    2c4e:	07 c0       	rjmp	.+14     	; 0x2c5e <__vector_21+0x18e>
    2c50:	88 0f       	add	r24, r24
    2c52:	99 1f       	adc	r25, r25
    2c54:	fc 01       	movw	r30, r24
    2c56:	e1 59       	subi	r30, 0x91	; 145
    2c58:	f8 4f       	sbci	r31, 0xF8	; 248
    2c5a:	51 83       	std	Z+1, r21	; 0x01
    2c5c:	40 83       	st	Z, r20
    2c5e:	28 5f       	subi	r18, 0xF8	; 248
    2c60:	3f 5f       	subi	r19, 0xFF	; 255
    2c62:	28 31       	cpi	r18, 0x18	; 24
    2c64:	09 f0       	breq	.+2      	; 0x2c68 <__vector_21+0x198>
    2c66:	82 cf       	rjmp	.-252    	; 0x2b6c <__vector_21+0x9c>
    2c68:	80 91 b7 07 	lds	r24, 0x07B7
    2c6c:	8f 5f       	subi	r24, 0xFF	; 255
    2c6e:	80 93 b7 07 	sts	0x07B7, r24
    2c72:	80 91 17 07 	lds	r24, 0x0717
    2c76:	8f 5f       	subi	r24, 0xFF	; 255
    2c78:	80 93 17 07 	sts	0x0717, r24
    2c7c:	10 91 16 07 	lds	r17, 0x0716
    2c80:	11 23       	and	r17, r17
    2c82:	09 f4       	brne	.+2      	; 0x2c86 <__vector_21+0x1b6>
    2c84:	46 c0       	rjmp	.+140    	; 0x2d12 <__vector_21+0x242>
    2c86:	80 91 19 07 	lds	r24, 0x0719
    2c8a:	90 91 1a 07 	lds	r25, 0x071A
    2c8e:	a0 91 1b 07 	lds	r26, 0x071B
    2c92:	b0 91 1c 07 	lds	r27, 0x071C
    2c96:	01 96       	adiw	r24, 0x01	; 1
    2c98:	a1 1d       	adc	r26, r1
    2c9a:	b1 1d       	adc	r27, r1
    2c9c:	80 93 19 07 	sts	0x0719, r24
    2ca0:	90 93 1a 07 	sts	0x071A, r25
    2ca4:	a0 93 1b 07 	sts	0x071B, r26
    2ca8:	b0 93 1c 07 	sts	0x071C, r27
    2cac:	c0 90 6b 07 	lds	r12, 0x076B
    2cb0:	d0 90 6c 07 	lds	r13, 0x076C
    2cb4:	e0 90 6d 07 	lds	r14, 0x076D
    2cb8:	f0 90 6e 07 	lds	r15, 0x076E
    2cbc:	eb e3       	ldi	r30, 0x3B	; 59
    2cbe:	f7 e0       	ldi	r31, 0x07	; 7
    2cc0:	af e9       	ldi	r26, 0x9F	; 159
    2cc2:	b7 e0       	ldi	r27, 0x07	; 7
    2cc4:	80 e0       	ldi	r24, 0x00	; 0
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	0f ef       	ldi	r16, 0xFF	; 255
    2cca:	b7 01       	movw	r22, r14
    2ccc:	a6 01       	movw	r20, r12
    2cce:	08 2e       	mov	r0, r24
    2cd0:	04 c0       	rjmp	.+8      	; 0x2cda <__vector_21+0x20a>
    2cd2:	76 95       	lsr	r23
    2cd4:	67 95       	ror	r22
    2cd6:	57 95       	ror	r21
    2cd8:	47 95       	ror	r20
    2cda:	0a 94       	dec	r0
    2cdc:	d2 f7       	brpl	.-12     	; 0x2cd2 <__vector_21+0x202>
    2cde:	40 ff       	sbrs	r20, 0
    2ce0:	12 c0       	rjmp	.+36     	; 0x2d06 <__vector_21+0x236>
    2ce2:	ef 01       	movw	r28, r30
    2ce4:	20 81       	ld	r18, Z
    2ce6:	31 81       	ldd	r19, Z+1	; 0x01
    2ce8:	2f 5f       	subi	r18, 0xFF	; 255
    2cea:	3f 4f       	sbci	r19, 0xFF	; 255
    2cec:	31 83       	std	Z+1, r19	; 0x01
    2cee:	20 83       	st	Z, r18
    2cf0:	2a 3f       	cpi	r18, 0xFA	; 250
    2cf2:	31 05       	cpc	r19, r1
    2cf4:	41 f4       	brne	.+16     	; 0x2d06 <__vector_21+0x236>
    2cf6:	2c 91       	ld	r18, X
    2cf8:	2f 3f       	cpi	r18, 0xFF	; 255
    2cfa:	11 f4       	brne	.+4      	; 0x2d00 <__vector_21+0x230>
    2cfc:	1c 92       	st	X, r1
    2cfe:	01 c0       	rjmp	.+2      	; 0x2d02 <__vector_21+0x232>
    2d00:	0c 93       	st	X, r16
    2d02:	19 82       	std	Y+1, r1	; 0x01
    2d04:	18 82       	st	Y, r1
    2d06:	01 96       	adiw	r24, 0x01	; 1
    2d08:	32 96       	adiw	r30, 0x02	; 2
    2d0a:	11 96       	adiw	r26, 0x01	; 1
    2d0c:	88 31       	cpi	r24, 0x18	; 24
    2d0e:	91 05       	cpc	r25, r1
    2d10:	e1 f6       	brne	.-72     	; 0x2cca <__vector_21+0x1fa>
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	81 27       	eor	r24, r17
    2d16:	80 93 16 07 	sts	0x0716, r24
    2d1a:	18 c0       	rjmp	.+48     	; 0x2d4c <__vector_21+0x27c>
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	20 e0       	ldi	r18, 0x00	; 0
    2d20:	0f 2e       	mov	r0, r31
    2d22:	f8 e8       	ldi	r31, 0x88	; 136
    2d24:	ef 2e       	mov	r14, r31
    2d26:	f1 2c       	mov	r15, r1
    2d28:	f0 2d       	mov	r31, r0
    2d2a:	a0 e8       	ldi	r26, 0x80	; 128
    2d2c:	b0 e0       	ldi	r27, 0x00	; 0
    2d2e:	03 eb       	ldi	r16, 0xB3	; 179
    2d30:	10 e0       	ldi	r17, 0x00	; 0
    2d32:	0f 2e       	mov	r0, r31
    2d34:	f0 eb       	ldi	r31, 0xB0	; 176
    2d36:	8f 2e       	mov	r8, r31
    2d38:	91 2c       	mov	r9, r1
    2d3a:	f0 2d       	mov	r31, r0
    2d3c:	6a e8       	ldi	r22, 0x8A	; 138
    2d3e:	70 e0       	ldi	r23, 0x00	; 0
    2d40:	cc 24       	eor	r12, r12
    2d42:	c3 94       	inc	r12
    2d44:	d1 2c       	mov	r13, r1
    2d46:	b1 2c       	mov	r11, r1
    2d48:	a1 2c       	mov	r10, r1
    2d4a:	10 cf       	rjmp	.-480    	; 0x2b6c <__vector_21+0x9c>
    2d4c:	ff 91       	pop	r31
    2d4e:	ef 91       	pop	r30
    2d50:	df 91       	pop	r29
    2d52:	cf 91       	pop	r28
    2d54:	bf 91       	pop	r27
    2d56:	af 91       	pop	r26
    2d58:	9f 91       	pop	r25
    2d5a:	8f 91       	pop	r24
    2d5c:	7f 91       	pop	r23
    2d5e:	6f 91       	pop	r22
    2d60:	5f 91       	pop	r21
    2d62:	4f 91       	pop	r20
    2d64:	3f 91       	pop	r19
    2d66:	2f 91       	pop	r18
    2d68:	1f 91       	pop	r17
    2d6a:	0f 91       	pop	r16
    2d6c:	ff 90       	pop	r15
    2d6e:	ef 90       	pop	r14
    2d70:	df 90       	pop	r13
    2d72:	cf 90       	pop	r12
    2d74:	bf 90       	pop	r11
    2d76:	af 90       	pop	r10
    2d78:	9f 90       	pop	r9
    2d7a:	8f 90       	pop	r8
    2d7c:	0f 90       	pop	r0
    2d7e:	0b be       	out	0x3b, r0	; 59
    2d80:	0f 90       	pop	r0
    2d82:	0f be       	out	0x3f, r0	; 63
    2d84:	0f 90       	pop	r0
    2d86:	1f 90       	pop	r1
    2d88:	18 95       	reti

00002d8a <__vector_32>:
    2d8a:	1f 92       	push	r1
    2d8c:	0f 92       	push	r0
    2d8e:	0f b6       	in	r0, 0x3f	; 63
    2d90:	0f 92       	push	r0
    2d92:	11 24       	eor	r1, r1
    2d94:	0b b6       	in	r0, 0x3b	; 59
    2d96:	0f 92       	push	r0
    2d98:	2f 93       	push	r18
    2d9a:	3f 93       	push	r19
    2d9c:	4f 93       	push	r20
    2d9e:	5f 93       	push	r21
    2da0:	6f 93       	push	r22
    2da2:	7f 93       	push	r23
    2da4:	8f 93       	push	r24
    2da6:	9f 93       	push	r25
    2da8:	af 93       	push	r26
    2daa:	cf 93       	push	r28
    2dac:	df 93       	push	r29
    2dae:	ef 93       	push	r30
    2db0:	ff 93       	push	r31
    2db2:	a0 91 15 07 	lds	r26, 0x0715
    2db6:	4a 2f       	mov	r20, r26
    2db8:	50 e0       	ldi	r21, 0x00	; 0
    2dba:	fa 01       	movw	r30, r20
    2dbc:	ee 0f       	add	r30, r30
    2dbe:	ff 1f       	adc	r31, r31
    2dc0:	ef 01       	movw	r28, r30
    2dc2:	cc 5e       	subi	r28, 0xEC	; 236
    2dc4:	de 4f       	sbci	r29, 0xFE	; 254
    2dc6:	09 90       	ld	r0, Y+
    2dc8:	d8 81       	ld	r29, Y
    2dca:	c0 2d       	mov	r28, r0
    2dcc:	88 81       	ld	r24, Y
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	ea 01       	movw	r28, r20
    2dd2:	c1 55       	subi	r28, 0x51	; 81
    2dd4:	de 4f       	sbci	r29, 0xFE	; 254
    2dd6:	08 80       	ld	r0, Y
    2dd8:	02 c0       	rjmp	.+4      	; 0x2dde <__vector_32+0x54>
    2dda:	95 95       	asr	r25
    2ddc:	87 95       	ror	r24
    2dde:	0a 94       	dec	r0
    2de0:	e2 f7       	brpl	.-8      	; 0x2dda <__vector_32+0x50>
    2de2:	98 2f       	mov	r25, r24
    2de4:	91 70       	andi	r25, 0x01	; 1
    2de6:	ef 01       	movw	r28, r30
    2de8:	c0 50       	subi	r28, 0x00	; 0
    2dea:	df 4f       	sbci	r29, 0xFF	; 255
    2dec:	09 90       	ld	r0, Y+
    2dee:	d8 81       	ld	r29, Y
    2df0:	c0 2d       	mov	r28, r0
    2df2:	68 81       	ld	r22, Y
    2df4:	e3 5e       	subi	r30, 0xE3	; 227
    2df6:	f8 4f       	sbci	r31, 0xF8	; 248
    2df8:	20 81       	ld	r18, Z
    2dfa:	31 81       	ldd	r19, Z+1	; 0x01
    2dfc:	70 e0       	ldi	r23, 0x00	; 0
    2dfe:	ea 01       	movw	r28, r20
    2e00:	cb 55       	subi	r28, 0x5B	; 91
    2e02:	de 4f       	sbci	r29, 0xFE	; 254
    2e04:	08 80       	ld	r0, Y
    2e06:	02 c0       	rjmp	.+4      	; 0x2e0c <__vector_32+0x82>
    2e08:	75 95       	asr	r23
    2e0a:	67 95       	ror	r22
    2e0c:	0a 94       	dec	r0
    2e0e:	e2 f7       	brpl	.-8      	; 0x2e08 <__vector_32+0x7e>
    2e10:	61 70       	andi	r22, 0x01	; 1
    2e12:	82 2f       	mov	r24, r18
    2e14:	88 0f       	add	r24, r24
    2e16:	88 0f       	add	r24, r24
    2e18:	8f 70       	andi	r24, 0x0F	; 15
    2e1a:	68 2b       	or	r22, r24
    2e1c:	89 2f       	mov	r24, r25
    2e1e:	88 0f       	add	r24, r24
    2e20:	86 2b       	or	r24, r22
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	20 7f       	andi	r18, 0xF0	; 240
    2e26:	28 2b       	or	r18, r24
    2e28:	39 2b       	or	r19, r25
    2e2a:	31 83       	std	Z+1, r19	; 0x01
    2e2c:	20 83       	st	Z, r18
    2e2e:	fc 01       	movw	r30, r24
    2e30:	e7 54       	subi	r30, 0x47	; 71
    2e32:	fe 4f       	sbci	r31, 0xFE	; 254
    2e34:	80 81       	ld	r24, Z
    2e36:	88 23       	and	r24, r24
    2e38:	09 f4       	brne	.+2      	; 0x2e3c <__vector_32+0xb2>
    2e3a:	50 c0       	rjmp	.+160    	; 0x2edc <__vector_32+0x152>
    2e3c:	91 e0       	ldi	r25, 0x01	; 1
    2e3e:	18 16       	cp	r1, r24
    2e40:	0c f0       	brlt	.+2      	; 0x2e44 <__vector_32+0xba>
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	b9 01       	movw	r22, r18
    2e46:	72 95       	swap	r23
    2e48:	62 95       	swap	r22
    2e4a:	6f 70       	andi	r22, 0x0F	; 15
    2e4c:	67 27       	eor	r22, r23
    2e4e:	7f 70       	andi	r23, 0x0F	; 15
    2e50:	67 27       	eor	r22, r23
    2e52:	6f 70       	andi	r22, 0x0F	; 15
    2e54:	86 0f       	add	r24, r22
    2e56:	e0 e1       	ldi	r30, 0x10	; 16
    2e58:	8e 02       	muls	r24, r30
    2e5a:	b0 01       	movw	r22, r0
    2e5c:	11 24       	eor	r1, r1
    2e5e:	2f 70       	andi	r18, 0x0F	; 15
    2e60:	26 2b       	or	r18, r22
    2e62:	37 2b       	or	r19, r23
    2e64:	fa 01       	movw	r30, r20
    2e66:	ee 0f       	add	r30, r30
    2e68:	ff 1f       	adc	r31, r31
    2e6a:	e3 5e       	subi	r30, 0xE3	; 227
    2e6c:	f8 4f       	sbci	r31, 0xF8	; 248
    2e6e:	31 83       	std	Z+1, r19	; 0x01
    2e70:	20 83       	st	Z, r18
    2e72:	63 2f       	mov	r22, r19
    2e74:	66 1f       	adc	r22, r22
    2e76:	66 27       	eor	r22, r22
    2e78:	66 1f       	adc	r22, r22
    2e7a:	99 23       	and	r25, r25
    2e7c:	49 f0       	breq	.+18     	; 0x2e90 <__vector_32+0x106>
    2e7e:	fa 01       	movw	r30, r20
    2e80:	ee 0f       	add	r30, r30
    2e82:	ff 1f       	adc	r31, r31
    2e84:	e3 5e       	subi	r30, 0xE3	; 227
    2e86:	f8 4f       	sbci	r31, 0xF8	; 248
    2e88:	30 68       	ori	r19, 0x80	; 128
    2e8a:	31 83       	std	Z+1, r19	; 0x01
    2e8c:	20 83       	st	Z, r18
    2e8e:	08 c0       	rjmp	.+16     	; 0x2ea0 <__vector_32+0x116>
    2e90:	fa 01       	movw	r30, r20
    2e92:	ee 0f       	add	r30, r30
    2e94:	ff 1f       	adc	r31, r31
    2e96:	e3 5e       	subi	r30, 0xE3	; 227
    2e98:	f8 4f       	sbci	r31, 0xF8	; 248
    2e9a:	3f 77       	andi	r19, 0x7F	; 127
    2e9c:	31 83       	std	Z+1, r19	; 0x01
    2e9e:	20 83       	st	Z, r18
    2ea0:	96 13       	cpse	r25, r22
    2ea2:	1c c0       	rjmp	.+56     	; 0x2edc <__vector_32+0x152>
    2ea4:	83 70       	andi	r24, 0x03	; 3
    2ea6:	d1 f4       	brne	.+52     	; 0x2edc <__vector_32+0x152>
    2ea8:	fa 01       	movw	r30, r20
    2eaa:	ee 0f       	add	r30, r30
    2eac:	ff 1f       	adc	r31, r31
    2eae:	e3 5e       	subi	r30, 0xE3	; 227
    2eb0:	f8 4f       	sbci	r31, 0xF8	; 248
    2eb2:	20 81       	ld	r18, Z
    2eb4:	31 81       	ldd	r19, Z+1	; 0x01
    2eb6:	2f 70       	andi	r18, 0x0F	; 15
    2eb8:	20 68       	ori	r18, 0x80	; 128
    2eba:	31 83       	std	Z+1, r19	; 0x01
    2ebc:	20 83       	st	Z, r18
    2ebe:	99 23       	and	r25, r25
    2ec0:	39 f0       	breq	.+14     	; 0x2ed0 <__vector_32+0x146>
    2ec2:	fa 01       	movw	r30, r20
    2ec4:	ef 5c       	subi	r30, 0xCF	; 207
    2ec6:	f8 4f       	sbci	r31, 0xF8	; 248
    2ec8:	80 81       	ld	r24, Z
    2eca:	8f 5f       	subi	r24, 0xFF	; 255
    2ecc:	80 83       	st	Z, r24
    2ece:	06 c0       	rjmp	.+12     	; 0x2edc <__vector_32+0x152>
    2ed0:	fa 01       	movw	r30, r20
    2ed2:	ef 5c       	subi	r30, 0xCF	; 207
    2ed4:	f8 4f       	sbci	r31, 0xF8	; 248
    2ed6:	80 81       	ld	r24, Z
    2ed8:	81 50       	subi	r24, 0x01	; 1
    2eda:	80 83       	st	Z, r24
    2edc:	af 5f       	subi	r26, 0xFF	; 255
    2ede:	aa 30       	cpi	r26, 0x0A	; 10
    2ee0:	19 f0       	breq	.+6      	; 0x2ee8 <__vector_32+0x15e>
    2ee2:	a0 93 15 07 	sts	0x0715, r26
    2ee6:	02 c0       	rjmp	.+4      	; 0x2eec <__vector_32+0x162>
    2ee8:	10 92 15 07 	sts	0x0715, r1
    2eec:	ff 91       	pop	r31
    2eee:	ef 91       	pop	r30
    2ef0:	df 91       	pop	r29
    2ef2:	cf 91       	pop	r28
    2ef4:	af 91       	pop	r26
    2ef6:	9f 91       	pop	r25
    2ef8:	8f 91       	pop	r24
    2efa:	7f 91       	pop	r23
    2efc:	6f 91       	pop	r22
    2efe:	5f 91       	pop	r21
    2f00:	4f 91       	pop	r20
    2f02:	3f 91       	pop	r19
    2f04:	2f 91       	pop	r18
    2f06:	0f 90       	pop	r0
    2f08:	0b be       	out	0x3b, r0	; 59
    2f0a:	0f 90       	pop	r0
    2f0c:	0f be       	out	0x3f, r0	; 63
    2f0e:	0f 90       	pop	r0
    2f10:	1f 90       	pop	r1
    2f12:	18 95       	reti

00002f14 <_ZN11TimerObject11getLEDstateEh>:
    2f14:	26 2f       	mov	r18, r22
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	80 91 6b 07 	lds	r24, 0x076B
    2f1c:	90 91 6c 07 	lds	r25, 0x076C
    2f20:	a0 91 6d 07 	lds	r26, 0x076D
    2f24:	b0 91 6e 07 	lds	r27, 0x076E
    2f28:	04 c0       	rjmp	.+8      	; 0x2f32 <_ZN11TimerObject11getLEDstateEh+0x1e>
    2f2a:	b6 95       	lsr	r27
    2f2c:	a7 95       	ror	r26
    2f2e:	97 95       	ror	r25
    2f30:	87 95       	ror	r24
    2f32:	6a 95       	dec	r22
    2f34:	d2 f7       	brpl	.-12     	; 0x2f2a <_ZN11TimerObject11getLEDstateEh+0x16>
    2f36:	80 fd       	sbrc	r24, 0
    2f38:	0d c0       	rjmp	.+26     	; 0x2f54 <_ZN11TimerObject11getLEDstateEh+0x40>
    2f3a:	f9 01       	movw	r30, r18
    2f3c:	e1 56       	subi	r30, 0x61	; 97
    2f3e:	f8 4f       	sbci	r31, 0xF8	; 248
    2f40:	80 81       	ld	r24, Z
    2f42:	8e 36       	cpi	r24, 0x6E	; 110
    2f44:	19 f0       	breq	.+6      	; 0x2f4c <_ZN11TimerObject11getLEDstateEh+0x38>
    2f46:	8f 3f       	cpi	r24, 0xFF	; 255
    2f48:	39 f0       	breq	.+14     	; 0x2f58 <_ZN11TimerObject11getLEDstateEh+0x44>
    2f4a:	02 c0       	rjmp	.+4      	; 0x2f50 <_ZN11TimerObject11getLEDstateEh+0x3c>
    2f4c:	81 e0       	ldi	r24, 0x01	; 1
    2f4e:	08 95       	ret
    2f50:	80 e0       	ldi	r24, 0x00	; 0
    2f52:	08 95       	ret
    2f54:	83 e0       	ldi	r24, 0x03	; 3
    2f56:	08 95       	ret
    2f58:	82 e0       	ldi	r24, 0x02	; 2
    2f5a:	08 95       	ret

00002f5c <_ZN11TimerObject11setLEDstateEh10ledState_t>:
    2f5c:	cf 92       	push	r12
    2f5e:	df 92       	push	r13
    2f60:	ef 92       	push	r14
    2f62:	ff 92       	push	r15
    2f64:	cf 93       	push	r28
    2f66:	df 93       	push	r29
    2f68:	c6 2f       	mov	r28, r22
    2f6a:	d4 2f       	mov	r29, r20
    2f6c:	84 2f       	mov	r24, r20
    2f6e:	a2 dd       	rcall	.-1212   	; 0x2ab4 <_Z15ledStateToValue10ledState_t>
    2f70:	d3 30       	cpi	r29, 0x03	; 3
    2f72:	71 f5       	brne	.+92     	; 0x2fd0 <_ZN11TimerObject11setLEDstateEh10ledState_t+0x74>
    2f74:	ec 2f       	mov	r30, r28
    2f76:	f0 e0       	ldi	r31, 0x00	; 0
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	a0 e0       	ldi	r26, 0x00	; 0
    2f7e:	b0 e0       	ldi	r27, 0x00	; 0
    2f80:	0c 2e       	mov	r0, r28
    2f82:	04 c0       	rjmp	.+8      	; 0x2f8c <_ZN11TimerObject11setLEDstateEh10ledState_t+0x30>
    2f84:	88 0f       	add	r24, r24
    2f86:	99 1f       	adc	r25, r25
    2f88:	aa 1f       	adc	r26, r26
    2f8a:	bb 1f       	adc	r27, r27
    2f8c:	0a 94       	dec	r0
    2f8e:	d2 f7       	brpl	.-12     	; 0x2f84 <_ZN11TimerObject11setLEDstateEh10ledState_t+0x28>
    2f90:	40 91 6b 07 	lds	r20, 0x076B
    2f94:	50 91 6c 07 	lds	r21, 0x076C
    2f98:	60 91 6d 07 	lds	r22, 0x076D
    2f9c:	70 91 6e 07 	lds	r23, 0x076E
    2fa0:	84 2b       	or	r24, r20
    2fa2:	95 2b       	or	r25, r21
    2fa4:	a6 2b       	or	r26, r22
    2fa6:	b7 2b       	or	r27, r23
    2fa8:	80 93 6b 07 	sts	0x076B, r24
    2fac:	90 93 6c 07 	sts	0x076C, r25
    2fb0:	a0 93 6d 07 	sts	0x076D, r26
    2fb4:	b0 93 6e 07 	sts	0x076E, r27
    2fb8:	e1 56       	subi	r30, 0x61	; 97
    2fba:	f8 4f       	sbci	r31, 0xF8	; 248
    2fbc:	90 81       	ld	r25, Z
    2fbe:	9f 3f       	cpi	r25, 0xFF	; 255
    2fc0:	09 f4       	brne	.+2      	; 0x2fc4 <_ZN11TimerObject11setLEDstateEh10ledState_t+0x68>
    2fc2:	40 c0       	rjmp	.+128    	; 0x3044 <_ZN11TimerObject11setLEDstateEh10ledState_t+0xe8>
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	9e 36       	cpi	r25, 0x6E	; 110
    2fc8:	09 f4       	brne	.+2      	; 0x2fcc <_ZN11TimerObject11setLEDstateEh10ledState_t+0x70>
    2fca:	80 e0       	ldi	r24, 0x00	; 0
    2fcc:	81 95       	neg	r24
    2fce:	3b c0       	rjmp	.+118    	; 0x3046 <_ZN11TimerObject11setLEDstateEh10ledState_t+0xea>
    2fd0:	40 91 6b 07 	lds	r20, 0x076B
    2fd4:	50 91 6c 07 	lds	r21, 0x076C
    2fd8:	60 91 6d 07 	lds	r22, 0x076D
    2fdc:	70 91 6e 07 	lds	r23, 0x076E
    2fe0:	2c 2f       	mov	r18, r28
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	6a 01       	movw	r12, r20
    2fe6:	7b 01       	movw	r14, r22
    2fe8:	0c 2e       	mov	r0, r28
    2fea:	04 c0       	rjmp	.+8      	; 0x2ff4 <_ZN11TimerObject11setLEDstateEh10ledState_t+0x98>
    2fec:	f6 94       	lsr	r15
    2fee:	e7 94       	ror	r14
    2ff0:	d7 94       	ror	r13
    2ff2:	c7 94       	ror	r12
    2ff4:	0a 94       	dec	r0
    2ff6:	d2 f7       	brpl	.-12     	; 0x2fec <_ZN11TimerObject11setLEDstateEh10ledState_t+0x90>
    2ff8:	c0 fe       	sbrs	r12, 0
    2ffa:	25 c0       	rjmp	.+74     	; 0x3046 <_ZN11TimerObject11setLEDstateEh10ledState_t+0xea>
    2ffc:	c1 2c       	mov	r12, r1
    2ffe:	d1 2c       	mov	r13, r1
    3000:	76 01       	movw	r14, r12
    3002:	c3 94       	inc	r12
    3004:	0c 2e       	mov	r0, r28
    3006:	04 c0       	rjmp	.+8      	; 0x3010 <_ZN11TimerObject11setLEDstateEh10ledState_t+0xb4>
    3008:	cc 0c       	add	r12, r12
    300a:	dd 1c       	adc	r13, r13
    300c:	ee 1c       	adc	r14, r14
    300e:	ff 1c       	adc	r15, r15
    3010:	0a 94       	dec	r0
    3012:	d2 f7       	brpl	.-12     	; 0x3008 <_ZN11TimerObject11setLEDstateEh10ledState_t+0xac>
    3014:	c0 94       	com	r12
    3016:	d0 94       	com	r13
    3018:	e0 94       	com	r14
    301a:	f0 94       	com	r15
    301c:	4c 21       	and	r20, r12
    301e:	5d 21       	and	r21, r13
    3020:	6e 21       	and	r22, r14
    3022:	7f 21       	and	r23, r15
    3024:	40 93 6b 07 	sts	0x076B, r20
    3028:	50 93 6c 07 	sts	0x076C, r21
    302c:	60 93 6d 07 	sts	0x076D, r22
    3030:	70 93 6e 07 	sts	0x076E, r23
    3034:	22 0f       	add	r18, r18
    3036:	33 1f       	adc	r19, r19
    3038:	f9 01       	movw	r30, r18
    303a:	e5 5c       	subi	r30, 0xC5	; 197
    303c:	f8 4f       	sbci	r31, 0xF8	; 248
    303e:	11 82       	std	Z+1, r1	; 0x01
    3040:	10 82       	st	Z, r1
    3042:	01 c0       	rjmp	.+2      	; 0x3046 <_ZN11TimerObject11setLEDstateEh10ledState_t+0xea>
    3044:	80 e0       	ldi	r24, 0x00	; 0
    3046:	ec 2f       	mov	r30, r28
    3048:	f0 e0       	ldi	r31, 0x00	; 0
    304a:	e1 56       	subi	r30, 0x61	; 97
    304c:	f8 4f       	sbci	r31, 0xF8	; 248
    304e:	80 83       	st	Z, r24
    3050:	df 91       	pop	r29
    3052:	cf 91       	pop	r28
    3054:	ff 90       	pop	r15
    3056:	ef 90       	pop	r14
    3058:	df 90       	pop	r13
    305a:	cf 90       	pop	r12
    305c:	08 95       	ret

0000305e <_ZN11TimerObject4initEv>:

    //default constructor

}

void TimerObject::init() {
    305e:	4f 92       	push	r4
    3060:	5f 92       	push	r5
    3062:	6f 92       	push	r6
    3064:	7f 92       	push	r7
    3066:	8f 92       	push	r8
    3068:	9f 92       	push	r9
    306a:	af 92       	push	r10
    306c:	bf 92       	push	r11
    306e:	cf 92       	push	r12
    3070:	df 92       	push	r13
    3072:	ef 92       	push	r14
    3074:	ff 92       	push	r15
    3076:	0f 93       	push	r16
    3078:	1f 93       	push	r17
    307a:	cf 93       	push	r28
    307c:	df 93       	push	r29
    307e:	cd b7       	in	r28, 0x3d	; 61
    3080:	de b7       	in	r29, 0x3e	; 62
    3082:	c0 55       	subi	r28, 0x50	; 80
    3084:	d1 09       	sbc	r29, r1
    3086:	0f b6       	in	r0, 0x3f	; 63
    3088:	f8 94       	cli
    308a:	de bf       	out	0x3e, r29	; 62
    308c:	0f be       	out	0x3f, r0	; 63
    308e:	cd bf       	out	0x3d, r28	; 61

    //clear timer3 info
    TCCR3A = 0;
    3090:	10 92 90 00 	sts	0x0090, r1
    TCCR3B = 0;
    3094:	e1 e9       	ldi	r30, 0x91	; 145
    3096:	f0 e0       	ldi	r31, 0x00	; 0
    3098:	10 82       	st	Z, r1
    TCNT3  = 0;
    309a:	10 92 95 00 	sts	0x0095, r1
    309e:	10 92 94 00 	sts	0x0094, r1
    TIMSK3 = 0;
    30a2:	0f 2e       	mov	r0, r31
    30a4:	f1 e7       	ldi	r31, 0x71	; 113
    30a6:	ef 2e       	mov	r14, r31
    30a8:	f1 2c       	mov	r15, r1
    30aa:	f0 2d       	mov	r31, r0
    30ac:	d7 01       	movw	r26, r14
    30ae:	1c 92       	st	X, r1
    OCR3A = 0;
    30b0:	28 e9       	ldi	r18, 0x98	; 152
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	d9 01       	movw	r26, r18
    30b6:	11 96       	adiw	r26, 0x01	; 1
    30b8:	1c 92       	st	X, r1
    30ba:	1e 92       	st	-X, r1
    OCR3B = 0;
    30bc:	10 92 9b 00 	sts	0x009B, r1
    30c0:	10 92 9a 00 	sts	0x009A, r1
    OCR3C = 0;
    30c4:	10 92 9d 00 	sts	0x009D, r1
    30c8:	10 92 9c 00 	sts	0x009C, r1

    //turn on CTC mode
    TCCR3B |= (1 << WGM32);
    30cc:	80 81       	ld	r24, Z
    30ce:	88 60       	ori	r24, 0x08	; 8
    30d0:	80 83       	st	Z, r24

    //set prescaler to 256
    TCCR3B |= (1 << CS32);
    30d2:	80 81       	ld	r24, Z
    30d4:	84 60       	ori	r24, 0x04	; 4
    30d6:	80 83       	st	Z, r24

    //configure timer1/2 for LED matrix PWM
    TCCR1A = 0;
    30d8:	60 e8       	ldi	r22, 0x80	; 128
    30da:	70 e0       	ldi	r23, 0x00	; 0
    30dc:	fb 01       	movw	r30, r22
    30de:	10 82       	st	Z, r1
    TCCR1B = 0;
    30e0:	81 e8       	ldi	r24, 0x81	; 129
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	dc 01       	movw	r26, r24
    30e6:	1c 92       	st	X, r1
    TCCR1C = 0;
    30e8:	10 92 82 00 	sts	0x0082, r1
    TIMSK1 = 0;
    30ec:	10 92 6f 00 	sts	0x006F, r1
    TCNT1 = 0;
    30f0:	10 92 85 00 	sts	0x0085, r1
    30f4:	10 92 84 00 	sts	0x0084, r1
    OCR1A = 0;
    30f8:	10 92 89 00 	sts	0x0089, r1
    30fc:	10 92 88 00 	sts	0x0088, r1
    OCR1B = 0;
    3100:	10 92 8b 00 	sts	0x008B, r1
    3104:	10 92 8a 00 	sts	0x008A, r1
    OCR1C = 0;
    3108:	10 92 8d 00 	sts	0x008D, r1
    310c:	10 92 8c 00 	sts	0x008C, r1

    TCCR2A = 0;
    3110:	40 eb       	ldi	r20, 0xB0	; 176
    3112:	50 e0       	ldi	r21, 0x00	; 0
    3114:	fa 01       	movw	r30, r20
    3116:	10 82       	st	Z, r1
    TCCR2B = 0;
    3118:	e1 eb       	ldi	r30, 0xB1	; 177
    311a:	f0 e0       	ldi	r31, 0x00	; 0
    311c:	10 82       	st	Z, r1
    TIMSK2 = 0;
    311e:	10 92 70 00 	sts	0x0070, r1
    TCNT2 = 0;
    3122:	10 92 b2 00 	sts	0x00B2, r1
    OCR2A = 0;
    3126:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = 0;
    312a:	10 92 b4 00 	sts	0x00B4, r1

    //phase correct PWM, top 0xFF
    TCCR1A |= (1<<WGM10);
    312e:	db 01       	movw	r26, r22
    3130:	1c 91       	ld	r17, X
    3132:	11 60       	ori	r17, 0x01	; 1
    3134:	1c 93       	st	X, r17
    TCCR2A |= (1<<WGM20);
    3136:	da 01       	movw	r26, r20
    3138:	6c 91       	ld	r22, X
    313a:	61 60       	ori	r22, 0x01	; 1
    313c:	6c 93       	st	X, r22

    //prescaler 1
    TCCR1B |= (1<<CS10);
    313e:	dc 01       	movw	r26, r24
    3140:	4c 91       	ld	r20, X
    3142:	41 60       	ori	r20, 0x01	; 1
    3144:	4c 93       	st	X, r20
    TCCR2B |= (1<<CS20);
    3146:	80 81       	ld	r24, Z
    3148:	81 60       	ori	r24, 0x01	; 1
    314a:	80 83       	st	Z, r24

    //configure timer0
    //used for delay/millis/leds
    TCCR0A = 0;
    314c:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0;
    314e:	15 bc       	out	0x25, r1	; 37
    TCNT0 = 0;
    3150:	16 bc       	out	0x26, r1	; 38
    TIMSK0 = 0;
    3152:	ee e6       	ldi	r30, 0x6E	; 110
    3154:	f0 e0       	ldi	r31, 0x00	; 0
    3156:	10 82       	st	Z, r1
    OCR0A = 0;
    3158:	17 bc       	out	0x27, r1	; 39
    OCR0B = 0;
    315a:	18 bc       	out	0x28, r1	; 40

    //turn on CTC mode
    TCCR0A |= (1 << WGM01);
    315c:	84 b5       	in	r24, 0x24	; 36
    315e:	82 60       	ori	r24, 0x02	; 2
    3160:	84 bd       	out	0x24, r24	; 36

    //set prescaler to 64
    TCCR0B |= (1 << CS00) | (1 << CS01);
    3162:	85 b5       	in	r24, 0x25	; 37
    3164:	83 60       	ori	r24, 0x03	; 3
    3166:	85 bd       	out	0x25, r24	; 37

    //set compare match register to desired timer count
    OCR0A = 124; //500uS
    3168:	8c e7       	ldi	r24, 0x7C	; 124
    316a:	87 bd       	out	0x27, r24	; 39

    OCR3A = 10;
    316c:	8a e0       	ldi	r24, 0x0A	; 10
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	d9 01       	movw	r26, r18
    3172:	11 96       	adiw	r26, 0x01	; 1
    3174:	9c 93       	st	X, r25
    3176:	8e 93       	st	-X, r24

    //enable CTC interrupt for timer0
    TIMSK0 |= (1 << OCIE0A);
    3178:	80 81       	ld	r24, Z
    317a:	82 60       	ori	r24, 0x02	; 2
    317c:	80 83       	st	Z, r24

    TIMSK3 |= (1<<OCIE3A);
    317e:	f7 01       	movw	r30, r14
    3180:	80 81       	ld	r24, Z
    3182:	82 60       	ori	r24, 0x02	; 2
    3184:	80 83       	st	Z, r24
            &ENCODER_PAIR_06_PIN_0_PORT,
            &ENCODER_PAIR_07_PIN_0_PORT,
            &ENCODER_PAIR_08_PIN_0_PORT,
            &ENCODER_PAIR_09_PIN_0_PORT

        };
    3186:	84 e1       	ldi	r24, 0x14	; 20
    3188:	ef e2       	ldi	r30, 0x2F	; 47
    318a:	f1 e0       	ldi	r31, 0x01	; 1
    318c:	de 01       	movw	r26, r28
    318e:	dd 96       	adiw	r26, 0x3d	; 61
    3190:	01 90       	ld	r0, Z+
    3192:	0d 92       	st	X+, r0
    3194:	8a 95       	dec	r24
    3196:	e1 f7       	brne	.-8      	; 0x3190 <_ZN11TimerObject4initEv+0x132>
            &ENCODER_PAIR_06_PIN_1_PORT,
            &ENCODER_PAIR_07_PIN_1_PORT,
            &ENCODER_PAIR_08_PIN_1_PORT,
            &ENCODER_PAIR_09_PIN_1_PORT

        };
    3198:	84 e1       	ldi	r24, 0x14	; 20
    319a:	e3 e4       	ldi	r30, 0x43	; 67
    319c:	f1 e0       	ldi	r31, 0x01	; 1
    319e:	de 01       	movw	r26, r28
    31a0:	99 96       	adiw	r26, 0x29	; 41
    31a2:	01 90       	ld	r0, Z+
    31a4:	0d 92       	st	X+, r0
    31a6:	8a 95       	dec	r24
    31a8:	e1 f7       	brne	.-8      	; 0x31a2 <_ZN11TimerObject4initEv+0x144>
            &ENCODER_PAIR_06_PIN_0_DDR,
            &ENCODER_PAIR_07_PIN_0_DDR,
            &ENCODER_PAIR_08_PIN_0_DDR,
            &ENCODER_PAIR_09_PIN_0_DDR

        };
    31aa:	84 e1       	ldi	r24, 0x14	; 20
    31ac:	e7 e5       	ldi	r30, 0x57	; 87
    31ae:	f1 e0       	ldi	r31, 0x01	; 1
    31b0:	de 01       	movw	r26, r28
    31b2:	55 96       	adiw	r26, 0x15	; 21
    31b4:	01 90       	ld	r0, Z+
    31b6:	0d 92       	st	X+, r0
    31b8:	8a 95       	dec	r24
    31ba:	e1 f7       	brne	.-8      	; 0x31b4 <_ZN11TimerObject4initEv+0x156>
            &ENCODER_PAIR_06_PIN_1_DDR,
            &ENCODER_PAIR_07_PIN_1_DDR,
            &ENCODER_PAIR_08_PIN_1_DDR,
            &ENCODER_PAIR_09_PIN_1_DDR

        };
    31bc:	84 e1       	ldi	r24, 0x14	; 20
    31be:	eb e6       	ldi	r30, 0x6B	; 107
    31c0:	f1 e0       	ldi	r31, 0x01	; 1
    31c2:	de 01       	movw	r26, r28
    31c4:	11 96       	adiw	r26, 0x01	; 1
    31c6:	01 90       	ld	r0, Z+
    31c8:	0d 92       	st	X+, r0
    31ca:	8a 95       	dec	r24
    31cc:	e1 f7       	brne	.-8      	; 0x31c6 <_ZN11TimerObject4initEv+0x168>
    31ce:	6e 01       	movw	r12, r28
    31d0:	f5 e1       	ldi	r31, 0x15	; 21
    31d2:	cf 0e       	add	r12, r31
    31d4:	d1 1c       	adc	r13, r1
    31d6:	0f 2e       	mov	r0, r31
    31d8:	ff ea       	ldi	r31, 0xAF	; 175
    31da:	ef 2e       	mov	r14, r31
    31dc:	f1 e0       	ldi	r31, 0x01	; 1
    31de:	ff 2e       	mov	r15, r31
    31e0:	f0 2d       	mov	r31, r0
    31e2:	ce 01       	movw	r24, r28
    31e4:	01 96       	adiw	r24, 0x01	; 1
    31e6:	5c 01       	movw	r10, r24
    31e8:	05 ea       	ldi	r16, 0xA5	; 165
    31ea:	11 e0       	ldi	r17, 0x01	; 1
    31ec:	be 01       	movw	r22, r28
    31ee:	63 5c       	subi	r22, 0xC3	; 195
    31f0:	7f 4f       	sbci	r23, 0xFF	; 255
    31f2:	2e 01       	movw	r4, r28
    31f4:	99 e2       	ldi	r25, 0x29	; 41
    31f6:	49 0e       	add	r4, r25
    31f8:	51 1c       	adc	r5, r1
    31fa:	ed e1       	ldi	r30, 0x1D	; 29
    31fc:	f7 e0       	ldi	r31, 0x07	; 7


        for (int i=0; i<NUMBER_OF_ENCODERS; i++)    {
    31fe:	20 e0       	ldi	r18, 0x00	; 0
    3200:	30 e0       	ldi	r19, 0x00	; 0

            setInputMacro(*(encoderDDR1Array[i]), encoderPinIndex1Array[i]);
    3202:	41 e0       	ldi	r20, 0x01	; 1
    3204:	50 e0       	ldi	r21, 0x00	; 0
    3206:	d6 01       	movw	r26, r12
    3208:	8d 91       	ld	r24, X+
    320a:	9d 91       	ld	r25, X+
    320c:	6d 01       	movw	r12, r26
    320e:	dc 01       	movw	r26, r24
    3210:	7c 90       	ld	r7, X
    3212:	d7 01       	movw	r26, r14
    3214:	4a 01       	movw	r8, r20
    3216:	0d 90       	ld	r0, X+
    3218:	02 c0       	rjmp	.+4      	; 0x321e <_ZN11TimerObject4initEv+0x1c0>
    321a:	88 0c       	add	r8, r8
    321c:	99 1c       	adc	r9, r9
    321e:	0a 94       	dec	r0
    3220:	e2 f7       	brpl	.-8      	; 0x321a <_ZN11TimerObject4initEv+0x1bc>
    3222:	7d 01       	movw	r14, r26
    3224:	98 2c       	mov	r9, r8
    3226:	90 94       	com	r9
    3228:	97 20       	and	r9, r7
    322a:	dc 01       	movw	r26, r24
    322c:	9c 92       	st	X, r9
            setInputMacro(*(encoderDDR2Array[i]), encoderPinIndex2Array[i]);
    322e:	d5 01       	movw	r26, r10
    3230:	8d 91       	ld	r24, X+
    3232:	9d 91       	ld	r25, X+
    3234:	5d 01       	movw	r10, r26
    3236:	dc 01       	movw	r26, r24
    3238:	9c 90       	ld	r9, X
    323a:	d8 01       	movw	r26, r16
    323c:	3a 01       	movw	r6, r20
    323e:	0d 90       	ld	r0, X+
    3240:	02 c0       	rjmp	.+4      	; 0x3246 <_ZN11TimerObject4initEv+0x1e8>
    3242:	66 0c       	add	r6, r6
    3244:	77 1c       	adc	r7, r7
    3246:	0a 94       	dec	r0
    3248:	e2 f7       	brpl	.-8      	; 0x3242 <_ZN11TimerObject4initEv+0x1e4>
    324a:	8d 01       	movw	r16, r26
    324c:	76 2c       	mov	r7, r6
    324e:	70 94       	com	r7
    3250:	97 20       	and	r9, r7
    3252:	dc 01       	movw	r26, r24
    3254:	9c 92       	st	X, r9

            setHighMacro(*(encoderPort1Array[i]), encoderPinIndex1Array[i]);
    3256:	db 01       	movw	r26, r22
    3258:	8d 91       	ld	r24, X+
    325a:	9d 91       	ld	r25, X+
    325c:	bd 01       	movw	r22, r26
    325e:	dc 01       	movw	r26, r24
    3260:	9c 90       	ld	r9, X
    3262:	89 28       	or	r8, r9
    3264:	8c 92       	st	X, r8
            setHighMacro(*(encoderPort2Array[i]), encoderPinIndex2Array[i]);
    3266:	d2 01       	movw	r26, r4
    3268:	8d 91       	ld	r24, X+
    326a:	9d 91       	ld	r25, X+
    326c:	2d 01       	movw	r4, r26
    326e:	dc 01       	movw	r26, r24
    3270:	9c 90       	ld	r9, X
    3272:	69 28       	or	r6, r9
    3274:	6c 92       	st	X, r6

            encoderData[i] |= ((uint16_t)0 << 8);
            encoderData[i] |= ((uint16_t)ENCODER_DEFAULT_PULSE_COUNT_STATE << 4);   //set number of pulses to 8
    3276:	80 81       	ld	r24, Z
    3278:	91 81       	ldd	r25, Z+1	; 0x01
    327a:	80 68       	ori	r24, 0x80	; 128
    327c:	81 93       	st	Z+, r24
    327e:	91 93       	st	Z+, r25
            &ENCODER_PAIR_09_PIN_1_DDR

        };


        for (int i=0; i<NUMBER_OF_ENCODERS; i++)    {
    3280:	2f 5f       	subi	r18, 0xFF	; 255
    3282:	3f 4f       	sbci	r19, 0xFF	; 255
    3284:	2a 30       	cpi	r18, 0x0A	; 10
    3286:	31 05       	cpc	r19, r1
    3288:	09 f0       	breq	.+2      	; 0x328c <_ZN11TimerObject4initEv+0x22e>
    328a:	bd cf       	rjmp	.-134    	; 0x3206 <_ZN11TimerObject4initEv+0x1a8>
            encoderData[i] |= ((uint16_t)ENCODER_DEFAULT_PULSE_COUNT_STATE << 4);   //set number of pulses to 8

        }
    #endif

};
    328c:	c0 5b       	subi	r28, 0xB0	; 176
    328e:	df 4f       	sbci	r29, 0xFF	; 255
    3290:	0f b6       	in	r0, 0x3f	; 63
    3292:	f8 94       	cli
    3294:	de bf       	out	0x3e, r29	; 62
    3296:	0f be       	out	0x3f, r0	; 63
    3298:	cd bf       	out	0x3d, r28	; 61
    329a:	df 91       	pop	r29
    329c:	cf 91       	pop	r28
    329e:	1f 91       	pop	r17
    32a0:	0f 91       	pop	r16
    32a2:	ff 90       	pop	r15
    32a4:	ef 90       	pop	r14
    32a6:	df 90       	pop	r13
    32a8:	cf 90       	pop	r12
    32aa:	bf 90       	pop	r11
    32ac:	af 90       	pop	r10
    32ae:	9f 90       	pop	r9
    32b0:	8f 90       	pop	r8
    32b2:	7f 90       	pop	r7
    32b4:	6f 90       	pop	r6
    32b6:	5f 90       	pop	r5
    32b8:	4f 90       	pop	r4
    32ba:	08 95       	ret

000032bc <_ZN11TimerObject15getEncoderStateEh>:

int8_t TimerObject::getEncoderState(uint8_t encoderNumber)  {

    int8_t returnValue;
    returnValue = encoderMoving[encoderNumber];
    32bc:	e6 2f       	mov	r30, r22
    32be:	f0 e0       	ldi	r31, 0x00	; 0
    32c0:	ef 5c       	subi	r30, 0xCF	; 207
    32c2:	f8 4f       	sbci	r31, 0xF8	; 248
    32c4:	80 81       	ld	r24, Z
    encoderMoving[encoderNumber] = 0;
    32c6:	10 82       	st	Z, r1
    return returnValue;

}
    32c8:	08 95       	ret

000032ca <_ZN11TimerObject11setPWMstepsEh>:

void TimerObject::setPWMsteps(uint8_t steps)    {

    pwmSteps = steps;
    32ca:	60 93 28 01 	sts	0x0128, r22
    32ce:	08 95       	ret

000032d0 <_Z11rTimeMillisv>:
uint32_t rTimeMillis()    {

    uint32_t _rTime_mS;

    //save interrupt flag
    uint8_t interruptFlag = SREG;
    32d0:	2f b7       	in	r18, 0x3f	; 63

    //disable interrupts
    cli();
    32d2:	f8 94       	cli

    _rTime_mS = rTime_ms;
    32d4:	60 91 19 07 	lds	r22, 0x0719
    32d8:	70 91 1a 07 	lds	r23, 0x071A
    32dc:	80 91 1b 07 	lds	r24, 0x071B
    32e0:	90 91 1c 07 	lds	r25, 0x071C

    //restore interruptFlag
    SREG = interruptFlag;
    32e4:	2f bf       	out	0x3f, r18	; 63

    return _rTime_mS;

}
    32e6:	08 95       	ret

000032e8 <_Z4waitm>:

void wait(uint32_t delayTime)    {
    32e8:	ab 01       	movw	r20, r22
    32ea:	bc 01       	movw	r22, r24

    for (uint32_t i=0; i<delayTime; i++)
    32ec:	41 15       	cp	r20, r1
    32ee:	51 05       	cpc	r21, r1
    32f0:	61 05       	cpc	r22, r1
    32f2:	71 05       	cpc	r23, r1
    32f4:	89 f0       	breq	.+34     	; 0x3318 <_Z4waitm+0x30>
    32f6:	80 e0       	ldi	r24, 0x00	; 0
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	dc 01       	movw	r26, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    32fc:	ef e9       	ldi	r30, 0x9F	; 159
    32fe:	ff e0       	ldi	r31, 0x0F	; 15
    3300:	31 97       	sbiw	r30, 0x01	; 1
    3302:	f1 f7       	brne	.-4      	; 0x3300 <_Z4waitm+0x18>
    3304:	00 c0       	rjmp	.+0      	; 0x3306 <_Z4waitm+0x1e>
    3306:	00 00       	nop
    3308:	01 96       	adiw	r24, 0x01	; 1
    330a:	a1 1d       	adc	r26, r1
    330c:	b1 1d       	adc	r27, r1
    330e:	84 17       	cp	r24, r20
    3310:	95 07       	cpc	r25, r21
    3312:	a6 07       	cpc	r26, r22
    3314:	b7 07       	cpc	r27, r23
    3316:	91 f7       	brne	.-28     	; 0x32fc <_Z4waitm+0x14>
    3318:	08 95       	ret

0000331a <__vector_25>:

    transmitting = 0;

}

UART::UART()  {
    331a:	1f 92       	push	r1
    331c:	0f 92       	push	r0
    331e:	0f b6       	in	r0, 0x3f	; 63
    3320:	0f 92       	push	r0
    3322:	11 24       	eor	r1, r1
    3324:	0b b6       	in	r0, 0x3b	; 59
    3326:	0f 92       	push	r0
    3328:	2f 93       	push	r18
    332a:	8f 93       	push	r24
    332c:	9f 93       	push	r25
    332e:	ef 93       	push	r30
    3330:	ff 93       	push	r31
    3332:	20 91 ce 00 	lds	r18, 0x00CE
    3336:	80 91 bf 07 	lds	r24, 0x07BF
    333a:	8f 5f       	subi	r24, 0xFF	; 255
    333c:	80 34       	cpi	r24, 0x40	; 64
    333e:	08 f0       	brcs	.+2      	; 0x3342 <__vector_25+0x28>
    3340:	80 e0       	ldi	r24, 0x00	; 0
    3342:	90 91 be 07 	lds	r25, 0x07BE
    3346:	89 17       	cp	r24, r25
    3348:	39 f0       	breq	.+14     	; 0x3358 <__vector_25+0x3e>
    334a:	e8 2f       	mov	r30, r24
    334c:	f0 e0       	ldi	r31, 0x00	; 0
    334e:	e0 54       	subi	r30, 0x40	; 64
    3350:	f8 4f       	sbci	r31, 0xF8	; 248
    3352:	20 83       	st	Z, r18
    3354:	80 93 bf 07 	sts	0x07BF, r24
    3358:	ff 91       	pop	r31
    335a:	ef 91       	pop	r30
    335c:	9f 91       	pop	r25
    335e:	8f 91       	pop	r24
    3360:	2f 91       	pop	r18
    3362:	0f 90       	pop	r0
    3364:	0b be       	out	0x3b, r0	; 59
    3366:	0f 90       	pop	r0
    3368:	0f be       	out	0x3f, r0	; 63
    336a:	0f 90       	pop	r0
    336c:	1f 90       	pop	r1
    336e:	18 95       	reti

00003370 <__vector_26>:
    3370:	1f 92       	push	r1
    3372:	0f 92       	push	r0
    3374:	0f b6       	in	r0, 0x3f	; 63
    3376:	0f 92       	push	r0
    3378:	11 24       	eor	r1, r1
    337a:	0b b6       	in	r0, 0x3b	; 59
    337c:	0f 92       	push	r0
    337e:	8f 93       	push	r24
    3380:	9f 93       	push	r25
    3382:	ef 93       	push	r30
    3384:	ff 93       	push	r31
    3386:	90 91 bd 07 	lds	r25, 0x07BD
    338a:	80 91 bc 07 	lds	r24, 0x07BC
    338e:	98 13       	cpse	r25, r24
    3390:	0c c0       	rjmp	.+24     	; 0x33aa <__vector_26+0x3a>
    3392:	80 91 ba 07 	lds	r24, 0x07BA
    3396:	81 11       	cpse	r24, r1
    3398:	04 c0       	rjmp	.+8      	; 0x33a2 <__vector_26+0x32>
    339a:	88 e4       	ldi	r24, 0x48	; 72
    339c:	80 93 c9 00 	sts	0x00C9, r24
    33a0:	13 c0       	rjmp	.+38     	; 0x33c8 <__vector_26+0x58>
    33a2:	88 ed       	ldi	r24, 0xD8	; 216
    33a4:	80 93 c9 00 	sts	0x00C9, r24
    33a8:	0f c0       	rjmp	.+30     	; 0x33c8 <__vector_26+0x58>
    33aa:	80 91 bc 07 	lds	r24, 0x07BC
    33ae:	8f 5f       	subi	r24, 0xFF	; 255
    33b0:	80 34       	cpi	r24, 0x40	; 64
    33b2:	08 f0       	brcs	.+2      	; 0x33b6 <__vector_26+0x46>
    33b4:	80 e0       	ldi	r24, 0x00	; 0
    33b6:	e8 2f       	mov	r30, r24
    33b8:	f0 e0       	ldi	r31, 0x00	; 0
    33ba:	e0 50       	subi	r30, 0x00	; 0
    33bc:	f8 4f       	sbci	r31, 0xF8	; 248
    33be:	90 81       	ld	r25, Z
    33c0:	90 93 ce 00 	sts	0x00CE, r25
    33c4:	80 93 bc 07 	sts	0x07BC, r24
    33c8:	ff 91       	pop	r31
    33ca:	ef 91       	pop	r30
    33cc:	9f 91       	pop	r25
    33ce:	8f 91       	pop	r24
    33d0:	0f 90       	pop	r0
    33d2:	0b be       	out	0x3b, r0	; 59
    33d4:	0f 90       	pop	r0
    33d6:	0f be       	out	0x3f, r0	; 63
    33d8:	0f 90       	pop	r0
    33da:	1f 90       	pop	r1
    33dc:	18 95       	reti

000033de <__vector_27>:
    33de:	1f 92       	push	r1
    33e0:	0f 92       	push	r0
    33e2:	0f b6       	in	r0, 0x3f	; 63
    33e4:	0f 92       	push	r0
    33e6:	11 24       	eor	r1, r1
    33e8:	10 92 bb 07 	sts	0x07BB, r1
    33ec:	0f 90       	pop	r0
    33ee:	0f be       	out	0x3f, r0	; 63
    33f0:	0f 90       	pop	r0
    33f2:	1f 90       	pop	r1
    33f4:	18 95       	reti

000033f6 <_ZN4UART4readEv>:

int8_t UART::read(void)   {

    uint8_t data, i;

    if (rx_buffer_head == rx_buffer_tail) return -1;
    33f6:	90 91 bf 07 	lds	r25, 0x07BF
    33fa:	80 91 be 07 	lds	r24, 0x07BE
    33fe:	98 17       	cp	r25, r24
    3400:	71 f0       	breq	.+28     	; 0x341e <_ZN4UART4readEv+0x28>
    i = rx_buffer_tail + 1;
    3402:	90 91 be 07 	lds	r25, 0x07BE
    3406:	9f 5f       	subi	r25, 0xFF	; 255
    if (i >= SERIAL_BUFFER_SIZE) i = 0;
    3408:	90 34       	cpi	r25, 0x40	; 64
    340a:	08 f0       	brcs	.+2      	; 0x340e <_ZN4UART4readEv+0x18>
    340c:	90 e0       	ldi	r25, 0x00	; 0
    data = rx_buffer[i];
    340e:	e9 2f       	mov	r30, r25
    3410:	f0 e0       	ldi	r31, 0x00	; 0
    3412:	e0 54       	subi	r30, 0x40	; 64
    3414:	f8 4f       	sbci	r31, 0xF8	; 248
    3416:	80 81       	ld	r24, Z
    rx_buffer_tail = i;
    3418:	90 93 be 07 	sts	0x07BE, r25
    return data;
    341c:	08 95       	ret

int8_t UART::read(void)   {

    uint8_t data, i;

    if (rx_buffer_head == rx_buffer_tail) return -1;
    341e:	8f ef       	ldi	r24, 0xFF	; 255
    if (i >= SERIAL_BUFFER_SIZE) i = 0;
    data = rx_buffer[i];
    rx_buffer_tail = i;
    return data;

}
    3420:	08 95       	ret

00003422 <_ZN4UART5writeEh>:

void UART::write(uint8_t data)  {

    if (!txEnabled) return;
    3422:	80 91 b9 07 	lds	r24, 0x07B9
    3426:	88 23       	and	r24, r24
    3428:	19 f1       	breq	.+70     	; 0x3470 <_ZN4UART5writeEh+0x4e>

    uint8_t i;

    if (!(UCSR1B & (1<<TXEN1))) return;
    342a:	80 91 c9 00 	lds	r24, 0x00C9
    342e:	83 ff       	sbrs	r24, 3
    3430:	1f c0       	rjmp	.+62     	; 0x3470 <_ZN4UART5writeEh+0x4e>

    i = tx_buffer_head + 1;
    3432:	90 91 bd 07 	lds	r25, 0x07BD
    3436:	9f 5f       	subi	r25, 0xFF	; 255

    if (i >= SERIAL_BUFFER_SIZE) i = 0;
    3438:	90 34       	cpi	r25, 0x40	; 64
    343a:	08 f0       	brcs	.+2      	; 0x343e <_ZN4UART5writeEh+0x1c>
    343c:	90 e0       	ldi	r25, 0x00	; 0

    while (tx_buffer_tail == i); // wait until space in buffer
    343e:	80 91 bc 07 	lds	r24, 0x07BC
    3442:	98 17       	cp	r25, r24
    3444:	e1 f3       	breq	.-8      	; 0x343e <_ZN4UART5writeEh+0x1c>

    tx_buffer[i] = data;
    3446:	e9 2f       	mov	r30, r25
    3448:	f0 e0       	ldi	r31, 0x00	; 0
    344a:	e0 50       	subi	r30, 0x00	; 0
    344c:	f8 4f       	sbci	r31, 0xF8	; 248
    344e:	60 83       	st	Z, r22
    transmitting = 1;
    3450:	81 e0       	ldi	r24, 0x01	; 1
    3452:	80 93 bb 07 	sts	0x07BB, r24

    tx_buffer_head = i;
    3456:	90 93 bd 07 	sts	0x07BD, r25

    if (!rxEnabled)
    345a:	80 91 ba 07 	lds	r24, 0x07BA
    345e:	81 11       	cpse	r24, r1
    3460:	04 c0       	rjmp	.+8      	; 0x346a <_ZN4UART5writeEh+0x48>
        UCSR1B = (1<<TXCIE1) | (1<<TXEN1) | (1<<UDRIE1);
    3462:	88 e6       	ldi	r24, 0x68	; 104
    3464:	80 93 c9 00 	sts	0x00C9, r24
    3468:	08 95       	ret
    else UCSR1B = (1<<RXEN1) | (1<<TXCIE1) | (1<<TXEN1) | (1<<RXCIE1) | (1<<UDRIE1);
    346a:	88 ef       	ldi	r24, 0xF8	; 248
    346c:	80 93 c9 00 	sts	0x00C9, r24
    3470:	08 95       	ret

00003472 <_ZN4UART5beginEmbb>:

}

void UART::begin(uint32_t baudRate, bool enableRX, bool enableTX)   {
    3472:	cf 92       	push	r12
    3474:	df 92       	push	r13
    3476:	ef 92       	push	r14
    3478:	ff 92       	push	r15
    347a:	0f 93       	push	r16
    347c:	cf 93       	push	r28
    347e:	6a 01       	movw	r12, r20
    3480:	7b 01       	movw	r14, r22
    3482:	c2 2f       	mov	r28, r18

    rxEnabled = enableRX;
    3484:	20 93 ba 07 	sts	0x07BA, r18
    txEnabled = enableTX;
    3488:	00 93 b9 07 	sts	0x07B9, r16

    int16_t baud_count = ((F_CPU / 8) + (baudRate / 2)) / baudRate;
    348c:	db 01       	movw	r26, r22
    348e:	ca 01       	movw	r24, r20
    3490:	b6 95       	lsr	r27
    3492:	a7 95       	ror	r26
    3494:	97 95       	ror	r25
    3496:	87 95       	ror	r24
    3498:	bc 01       	movw	r22, r24
    349a:	cd 01       	movw	r24, r26
    349c:	60 58       	subi	r22, 0x80	; 128
    349e:	7b 47       	sbci	r23, 0x7B	; 123
    34a0:	81 4e       	sbci	r24, 0xE1	; 225
    34a2:	9f 4f       	sbci	r25, 0xFF	; 255
    34a4:	a7 01       	movw	r20, r14
    34a6:	96 01       	movw	r18, r12
    34a8:	0e 94 46 82 	call	0x1048c	; 0x1048c <__udivmodsi4>

    if ((baud_count & 1) && baud_count <= 4096) {
    34ac:	c9 01       	movw	r24, r18
    34ae:	81 70       	andi	r24, 0x01	; 1
    34b0:	99 27       	eor	r25, r25
    34b2:	89 2b       	or	r24, r25
    34b4:	71 f0       	breq	.+28     	; 0x34d2 <_ZN4UART5beginEmbb+0x60>
    34b6:	21 30       	cpi	r18, 0x01	; 1
    34b8:	80 e1       	ldi	r24, 0x10	; 16
    34ba:	38 07       	cpc	r19, r24
    34bc:	54 f4       	brge	.+20     	; 0x34d2 <_ZN4UART5beginEmbb+0x60>

        UCSR1A = (1<<U2X1); //double speed uart
    34be:	82 e0       	ldi	r24, 0x02	; 2
    34c0:	80 93 c8 00 	sts	0x00C8, r24
        UBRR1 = baud_count - 1;
    34c4:	21 50       	subi	r18, 0x01	; 1
    34c6:	31 09       	sbc	r19, r1
    34c8:	30 93 cd 00 	sts	0x00CD, r19
    34cc:	20 93 cc 00 	sts	0x00CC, r18
    34d0:	0a c0       	rjmp	.+20     	; 0x34e6 <_ZN4UART5beginEmbb+0x74>

    }   else {

        UCSR1A = 0;
    34d2:	10 92 c8 00 	sts	0x00C8, r1
        UBRR1 = (baud_count >> 1) - 1;
    34d6:	35 95       	asr	r19
    34d8:	27 95       	ror	r18
    34da:	21 50       	subi	r18, 0x01	; 1
    34dc:	31 09       	sbc	r19, r1
    34de:	30 93 cd 00 	sts	0x00CD, r19
    34e2:	20 93 cc 00 	sts	0x00CC, r18

    }

    if (!(UCSR1B & (1<<TXEN1))) {
    34e6:	80 91 c9 00 	lds	r24, 0x00C9
    34ea:	83 fd       	sbrc	r24, 3
    34ec:	1e c0       	rjmp	.+60     	; 0x352a <_ZN4UART5beginEmbb+0xb8>

        rx_buffer_head = 0;
    34ee:	10 92 bf 07 	sts	0x07BF, r1
        rx_buffer_tail = 0;
    34f2:	10 92 be 07 	sts	0x07BE, r1
        tx_buffer_head = 0;
    34f6:	10 92 bd 07 	sts	0x07BD, r1
        tx_buffer_tail = 0;
    34fa:	10 92 bc 07 	sts	0x07BC, r1

        transmitting = 0;
    34fe:	10 92 bb 07 	sts	0x07BB, r1

        UCSR1C = (1<<UCSZ11) | (1<<UCSZ10); //8 bit, no parity, 1 stop bit
    3502:	86 e0       	ldi	r24, 0x06	; 6
    3504:	80 93 ca 00 	sts	0x00CA, r24

        if (enableRX && enableTX)   //enable both rx and tx
    3508:	cc 23       	and	r28, r28
    350a:	51 f0       	breq	.+20     	; 0x3520 <_ZN4UART5beginEmbb+0xae>
    350c:	00 23       	and	r16, r16
    350e:	21 f0       	breq	.+8      	; 0x3518 <_ZN4UART5beginEmbb+0xa6>
            UCSR1B = (1<<RXEN1) | (1<<TXCIE1) | (1<<TXEN1) | (1<<RXCIE1);
    3510:	88 ed       	ldi	r24, 0xD8	; 216
    3512:	80 93 c9 00 	sts	0x00C9, r24
    3516:	09 c0       	rjmp	.+18     	; 0x352a <_ZN4UART5beginEmbb+0xb8>
        else if (enableRX && !enableTX) //enable only receive
            UCSR1B = (1<<RXEN1) | (1<<RXCIE1);
    3518:	80 e9       	ldi	r24, 0x90	; 144
    351a:	80 93 c9 00 	sts	0x00C9, r24
    351e:	05 c0       	rjmp	.+10     	; 0x352a <_ZN4UART5beginEmbb+0xb8>
        else if (enableTX & !enableRX)  //enable only transmit
    3520:	00 23       	and	r16, r16
    3522:	19 f0       	breq	.+6      	; 0x352a <_ZN4UART5beginEmbb+0xb8>
            UCSR1B = (1<<TXCIE1) | (1<<TXEN1);
    3524:	88 e4       	ldi	r24, 0x48	; 72
    3526:	80 93 c9 00 	sts	0x00C9, r24

    }

}
    352a:	cf 91       	pop	r28
    352c:	0f 91       	pop	r16
    352e:	ff 90       	pop	r15
    3530:	ef 90       	pop	r14
    3532:	df 90       	pop	r13
    3534:	cf 90       	pop	r12
    3536:	08 95       	ret

00003538 <_ZN4UART9availableEv>:

    //return available number of bytes in incoming buffer

    uint8_t head, tail;

    head = rx_buffer_head;
    3538:	80 91 bf 07 	lds	r24, 0x07BF
    tail = rx_buffer_tail;
    353c:	20 91 be 07 	lds	r18, 0x07BE

    if (head >= tail) return head - tail;
    3540:	82 17       	cp	r24, r18
    3542:	20 f0       	brcs	.+8      	; 0x354c <_ZN4UART9availableEv+0x14>
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	82 1b       	sub	r24, r18
    3548:	91 09       	sbc	r25, r1
    354a:	08 95       	ret
    return SERIAL_BUFFER_SIZE + head - tail;
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	80 5c       	subi	r24, 0xC0	; 192
    3550:	9f 4f       	sbci	r25, 0xFF	; 255
    3552:	82 1b       	sub	r24, r18
    3554:	91 09       	sbc	r25, r1

}
    3556:	08 95       	ret

00003558 <MIDI_Device_SendEventPacket>:
	#endif
}

uint8_t MIDI_Device_SendEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    const MIDI_EventPacket_t* const Event)
{
    3558:	ac 01       	movw	r20, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    355a:	90 91 d0 13 	lds	r25, 0x13D0
    355e:	94 30       	cpi	r25, 0x04	; 4
    3560:	d1 f4       	brne	.+52     	; 0x3596 <MIDI_Device_SendEventPacket+0x3e>
    3562:	9b 01       	movw	r18, r22
    3564:	fa 01       	movw	r30, r20
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3566:	81 81       	ldd	r24, Z+1	; 0x01
    3568:	8f 70       	andi	r24, 0x0F	; 15
    356a:	80 93 e9 00 	sts	0x00E9, r24

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpoint.Address);

	if ((ErrorCode = Endpoint_Write_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL)) != ENDPOINT_RWSTREAM_NoError)
    356e:	40 e0       	ldi	r20, 0x00	; 0
    3570:	50 e0       	ldi	r21, 0x00	; 0
    3572:	64 e0       	ldi	r22, 0x04	; 4
    3574:	70 e0       	ldi	r23, 0x00	; 0
    3576:	c9 01       	movw	r24, r18
    3578:	2c d0       	rcall	.+88     	; 0x35d2 <Endpoint_Write_Stream_LE>
    357a:	81 11       	cpse	r24, r1
    357c:	0f c0       	rjmp	.+30     	; 0x359c <MIDI_Device_SendEventPacket+0x44>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    357e:	90 91 e8 00 	lds	r25, 0x00E8
	  return ErrorCode;

	if (!(Endpoint_IsReadWriteAllowed()))
    3582:	89 2f       	mov	r24, r25
    3584:	80 72       	andi	r24, 0x20	; 32
    3586:	95 fd       	sbrc	r25, 5
    3588:	08 c0       	rjmp	.+16     	; 0x359a <MIDI_Device_SendEventPacket+0x42>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    358a:	e8 ee       	ldi	r30, 0xE8	; 232
    358c:	f0 e0       	ldi	r31, 0x00	; 0
    358e:	90 81       	ld	r25, Z
    3590:	9e 77       	andi	r25, 0x7E	; 126
    3592:	90 83       	st	Z, r25
    3594:	08 95       	ret

uint8_t MIDI_Device_SendEventPacket(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo,
                                    const MIDI_EventPacket_t* const Event)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    3596:	82 e0       	ldi	r24, 0x02	; 2
    3598:	08 95       	ret
	  return ErrorCode;

	if (!(Endpoint_IsReadWriteAllowed()))
	  Endpoint_ClearIN();

	return ENDPOINT_RWSTREAM_NoError;
    359a:	80 e0       	ldi	r24, 0x00	; 0
}
    359c:	08 95       	ret

0000359e <MIDI_Device_Flush>:

uint8_t MIDI_Device_Flush(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
    359e:	fc 01       	movw	r30, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    35a0:	90 91 d0 13 	lds	r25, 0x13D0
    35a4:	94 30       	cpi	r25, 0x04	; 4
    35a6:	89 f4       	brne	.+34     	; 0x35ca <MIDI_Device_Flush+0x2c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    35a8:	81 81       	ldd	r24, Z+1	; 0x01
    35aa:	8f 70       	andi	r24, 0x0F	; 15
    35ac:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    35b0:	80 91 f2 00 	lds	r24, 0x00F2
    35b4:	90 91 f3 00 	lds	r25, 0x00F3

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(MIDIInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_BytesInEndpoint())
    35b8:	89 2b       	or	r24, r25
    35ba:	49 f0       	breq	.+18     	; 0x35ce <MIDI_Device_Flush+0x30>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    35bc:	e8 ee       	ldi	r30, 0xE8	; 232
    35be:	f0 e0       	ldi	r31, 0x00	; 0
    35c0:	80 81       	ld	r24, Z
    35c2:	8e 77       	andi	r24, 0x7E	; 126
    35c4:	80 83       	st	Z, r24
	{
		Endpoint_ClearIN();

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    35c6:	46 c2       	rjmp	.+1164   	; 0x3a54 <Endpoint_WaitUntilReady>
    35c8:	08 95       	ret
}

uint8_t MIDI_Device_Flush(USB_ClassInfo_MIDI_Device_t* const MIDIInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    35ca:	82 e0       	ldi	r24, 0x02	; 2
    35cc:	08 95       	ret

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	return ENDPOINT_READYWAIT_NoError;
    35ce:	80 e0       	ldi	r24, 0x00	; 0
}
    35d0:	08 95       	ret

000035d2 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    35d2:	8f 92       	push	r8
    35d4:	9f 92       	push	r9
    35d6:	af 92       	push	r10
    35d8:	bf 92       	push	r11
    35da:	cf 92       	push	r12
    35dc:	df 92       	push	r13
    35de:	ef 92       	push	r14
    35e0:	ff 92       	push	r15
    35e2:	0f 93       	push	r16
    35e4:	1f 93       	push	r17
    35e6:	cf 93       	push	r28
    35e8:	df 93       	push	r29
    35ea:	8c 01       	movw	r16, r24
    35ec:	eb 01       	movw	r28, r22
    35ee:	6a 01       	movw	r12, r20
    35f0:	31 d2       	rcall	.+1122   	; 0x3a54 <Endpoint_WaitUntilReady>
    35f2:	81 11       	cpse	r24, r1
    35f4:	3d c0       	rjmp	.+122    	; 0x3670 <Endpoint_Write_Stream_LE+0x9e>
    35f6:	c1 14       	cp	r12, r1
    35f8:	d1 04       	cpc	r13, r1
    35fa:	39 f0       	breq	.+14     	; 0x360a <Endpoint_Write_Stream_LE+0x38>
    35fc:	f6 01       	movw	r30, r12
    35fe:	80 81       	ld	r24, Z
    3600:	91 81       	ldd	r25, Z+1	; 0x01
    3602:	c8 1b       	sub	r28, r24
    3604:	d9 0b       	sbc	r29, r25
    3606:	08 0f       	add	r16, r24
    3608:	19 1f       	adc	r17, r25
    360a:	20 97       	sbiw	r28, 0x00	; 0
    360c:	81 f1       	breq	.+96     	; 0x366e <Endpoint_Write_Stream_LE+0x9c>
    360e:	e1 2c       	mov	r14, r1
    3610:	f1 2c       	mov	r15, r1
    3612:	0f 2e       	mov	r0, r31
    3614:	f8 ee       	ldi	r31, 0xE8	; 232
    3616:	8f 2e       	mov	r8, r31
    3618:	91 2c       	mov	r9, r1
    361a:	f0 2d       	mov	r31, r0
    361c:	0f 2e       	mov	r0, r31
    361e:	f1 ef       	ldi	r31, 0xF1	; 241
    3620:	af 2e       	mov	r10, r31
    3622:	b1 2c       	mov	r11, r1
    3624:	f0 2d       	mov	r31, r0
    3626:	f4 01       	movw	r30, r8
    3628:	80 81       	ld	r24, Z
    362a:	85 fd       	sbrc	r24, 5
    362c:	13 c0       	rjmp	.+38     	; 0x3654 <Endpoint_Write_Stream_LE+0x82>
    362e:	80 81       	ld	r24, Z
    3630:	8e 77       	andi	r24, 0x7E	; 126
    3632:	80 83       	st	Z, r24
    3634:	c1 14       	cp	r12, r1
    3636:	d1 04       	cpc	r13, r1
    3638:	49 f0       	breq	.+18     	; 0x364c <Endpoint_Write_Stream_LE+0x7a>
    363a:	f6 01       	movw	r30, r12
    363c:	80 81       	ld	r24, Z
    363e:	91 81       	ldd	r25, Z+1	; 0x01
    3640:	e8 0e       	add	r14, r24
    3642:	f9 1e       	adc	r15, r25
    3644:	f1 82       	std	Z+1, r15	; 0x01
    3646:	e0 82       	st	Z, r14
    3648:	85 e0       	ldi	r24, 0x05	; 5
    364a:	12 c0       	rjmp	.+36     	; 0x3670 <Endpoint_Write_Stream_LE+0x9e>
    364c:	03 d2       	rcall	.+1030   	; 0x3a54 <Endpoint_WaitUntilReady>
    364e:	88 23       	and	r24, r24
    3650:	51 f0       	breq	.+20     	; 0x3666 <Endpoint_Write_Stream_LE+0x94>
    3652:	0e c0       	rjmp	.+28     	; 0x3670 <Endpoint_Write_Stream_LE+0x9e>
    3654:	f8 01       	movw	r30, r16
    3656:	81 91       	ld	r24, Z+
    3658:	8f 01       	movw	r16, r30
    365a:	f5 01       	movw	r30, r10
    365c:	80 83       	st	Z, r24
    365e:	21 97       	sbiw	r28, 0x01	; 1
    3660:	ff ef       	ldi	r31, 0xFF	; 255
    3662:	ef 1a       	sub	r14, r31
    3664:	ff 0a       	sbc	r15, r31
    3666:	20 97       	sbiw	r28, 0x00	; 0
    3668:	f1 f6       	brne	.-68     	; 0x3626 <Endpoint_Write_Stream_LE+0x54>
    366a:	80 e0       	ldi	r24, 0x00	; 0
    366c:	01 c0       	rjmp	.+2      	; 0x3670 <Endpoint_Write_Stream_LE+0x9e>
    366e:	80 e0       	ldi	r24, 0x00	; 0
    3670:	df 91       	pop	r29
    3672:	cf 91       	pop	r28
    3674:	1f 91       	pop	r17
    3676:	0f 91       	pop	r16
    3678:	ff 90       	pop	r15
    367a:	ef 90       	pop	r14
    367c:	df 90       	pop	r13
    367e:	cf 90       	pop	r12
    3680:	bf 90       	pop	r11
    3682:	af 90       	pop	r10
    3684:	9f 90       	pop	r9
    3686:	8f 90       	pop	r8
    3688:	08 95       	ret

0000368a <Endpoint_Read_Stream_LE>:
    368a:	8f 92       	push	r8
    368c:	9f 92       	push	r9
    368e:	af 92       	push	r10
    3690:	bf 92       	push	r11
    3692:	cf 92       	push	r12
    3694:	df 92       	push	r13
    3696:	ef 92       	push	r14
    3698:	ff 92       	push	r15
    369a:	0f 93       	push	r16
    369c:	1f 93       	push	r17
    369e:	cf 93       	push	r28
    36a0:	df 93       	push	r29
    36a2:	8c 01       	movw	r16, r24
    36a4:	eb 01       	movw	r28, r22
    36a6:	6a 01       	movw	r12, r20
    36a8:	d5 d1       	rcall	.+938    	; 0x3a54 <Endpoint_WaitUntilReady>
    36aa:	81 11       	cpse	r24, r1
    36ac:	3d c0       	rjmp	.+122    	; 0x3728 <Endpoint_Read_Stream_LE+0x9e>
    36ae:	c1 14       	cp	r12, r1
    36b0:	d1 04       	cpc	r13, r1
    36b2:	39 f0       	breq	.+14     	; 0x36c2 <Endpoint_Read_Stream_LE+0x38>
    36b4:	f6 01       	movw	r30, r12
    36b6:	80 81       	ld	r24, Z
    36b8:	91 81       	ldd	r25, Z+1	; 0x01
    36ba:	c8 1b       	sub	r28, r24
    36bc:	d9 0b       	sbc	r29, r25
    36be:	08 0f       	add	r16, r24
    36c0:	19 1f       	adc	r17, r25
    36c2:	20 97       	sbiw	r28, 0x00	; 0
    36c4:	81 f1       	breq	.+96     	; 0x3726 <Endpoint_Read_Stream_LE+0x9c>
    36c6:	e1 2c       	mov	r14, r1
    36c8:	f1 2c       	mov	r15, r1
    36ca:	0f 2e       	mov	r0, r31
    36cc:	f8 ee       	ldi	r31, 0xE8	; 232
    36ce:	8f 2e       	mov	r8, r31
    36d0:	91 2c       	mov	r9, r1
    36d2:	f0 2d       	mov	r31, r0
    36d4:	0f 2e       	mov	r0, r31
    36d6:	f1 ef       	ldi	r31, 0xF1	; 241
    36d8:	af 2e       	mov	r10, r31
    36da:	b1 2c       	mov	r11, r1
    36dc:	f0 2d       	mov	r31, r0
    36de:	f4 01       	movw	r30, r8
    36e0:	80 81       	ld	r24, Z
    36e2:	85 fd       	sbrc	r24, 5
    36e4:	13 c0       	rjmp	.+38     	; 0x370c <Endpoint_Read_Stream_LE+0x82>
    36e6:	80 81       	ld	r24, Z
    36e8:	8b 77       	andi	r24, 0x7B	; 123
    36ea:	80 83       	st	Z, r24
    36ec:	c1 14       	cp	r12, r1
    36ee:	d1 04       	cpc	r13, r1
    36f0:	49 f0       	breq	.+18     	; 0x3704 <Endpoint_Read_Stream_LE+0x7a>
    36f2:	f6 01       	movw	r30, r12
    36f4:	80 81       	ld	r24, Z
    36f6:	91 81       	ldd	r25, Z+1	; 0x01
    36f8:	e8 0e       	add	r14, r24
    36fa:	f9 1e       	adc	r15, r25
    36fc:	f1 82       	std	Z+1, r15	; 0x01
    36fe:	e0 82       	st	Z, r14
    3700:	85 e0       	ldi	r24, 0x05	; 5
    3702:	12 c0       	rjmp	.+36     	; 0x3728 <Endpoint_Read_Stream_LE+0x9e>
    3704:	a7 d1       	rcall	.+846    	; 0x3a54 <Endpoint_WaitUntilReady>
    3706:	88 23       	and	r24, r24
    3708:	51 f0       	breq	.+20     	; 0x371e <Endpoint_Read_Stream_LE+0x94>
    370a:	0e c0       	rjmp	.+28     	; 0x3728 <Endpoint_Read_Stream_LE+0x9e>
    370c:	f5 01       	movw	r30, r10
    370e:	80 81       	ld	r24, Z
    3710:	f8 01       	movw	r30, r16
    3712:	81 93       	st	Z+, r24
    3714:	8f 01       	movw	r16, r30
    3716:	21 97       	sbiw	r28, 0x01	; 1
    3718:	ff ef       	ldi	r31, 0xFF	; 255
    371a:	ef 1a       	sub	r14, r31
    371c:	ff 0a       	sbc	r15, r31
    371e:	20 97       	sbiw	r28, 0x00	; 0
    3720:	f1 f6       	brne	.-68     	; 0x36de <Endpoint_Read_Stream_LE+0x54>
    3722:	80 e0       	ldi	r24, 0x00	; 0
    3724:	01 c0       	rjmp	.+2      	; 0x3728 <Endpoint_Read_Stream_LE+0x9e>
    3726:	80 e0       	ldi	r24, 0x00	; 0
    3728:	df 91       	pop	r29
    372a:	cf 91       	pop	r28
    372c:	1f 91       	pop	r17
    372e:	0f 91       	pop	r16
    3730:	ff 90       	pop	r15
    3732:	ef 90       	pop	r14
    3734:	df 90       	pop	r13
    3736:	cf 90       	pop	r12
    3738:	bf 90       	pop	r11
    373a:	af 90       	pop	r10
    373c:	9f 90       	pop	r9
    373e:	8f 90       	pop	r8
    3740:	08 95       	ret

00003742 <Endpoint_Write_Control_Stream_LE>:
    3742:	ef 92       	push	r14
    3744:	ff 92       	push	r15
    3746:	0f 93       	push	r16
    3748:	1f 93       	push	r17
    374a:	cf 93       	push	r28
    374c:	df 93       	push	r29
    374e:	20 91 d7 13 	lds	r18, 0x13D7
    3752:	30 91 d8 13 	lds	r19, 0x13D8
    3756:	26 17       	cp	r18, r22
    3758:	37 07       	cpc	r19, r23
    375a:	58 f0       	brcs	.+22     	; 0x3772 <Endpoint_Write_Control_Stream_LE+0x30>
    375c:	61 15       	cp	r22, r1
    375e:	71 05       	cpc	r23, r1
    3760:	39 f4       	brne	.+14     	; 0x3770 <Endpoint_Write_Control_Stream_LE+0x2e>
    3762:	e8 ee       	ldi	r30, 0xE8	; 232
    3764:	f0 e0       	ldi	r31, 0x00	; 0
    3766:	20 81       	ld	r18, Z
    3768:	2e 77       	andi	r18, 0x7E	; 126
    376a:	20 83       	st	Z, r18
    376c:	9b 01       	movw	r18, r22
    376e:	01 c0       	rjmp	.+2      	; 0x3772 <Endpoint_Write_Control_Stream_LE+0x30>
    3770:	9b 01       	movw	r18, r22
    3772:	a8 2f       	mov	r26, r24
    3774:	b9 2f       	mov	r27, r25
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	e8 ee       	ldi	r30, 0xE8	; 232
    377a:	f0 e0       	ldi	r31, 0x00	; 0
    377c:	62 ef       	ldi	r22, 0xF2	; 242
    377e:	70 e0       	ldi	r23, 0x00	; 0
    3780:	0f 2e       	mov	r0, r31
    3782:	f1 ef       	ldi	r31, 0xF1	; 241
    3784:	ef 2e       	mov	r14, r31
    3786:	f1 2c       	mov	r15, r1
    3788:	f0 2d       	mov	r31, r0
    378a:	11 e0       	ldi	r17, 0x01	; 1
    378c:	00 e0       	ldi	r16, 0x00	; 0
    378e:	2f c0       	rjmp	.+94     	; 0x37ee <Endpoint_Write_Control_Stream_LE+0xac>
    3790:	80 91 d0 13 	lds	r24, 0x13D0
    3794:	88 23       	and	r24, r24
    3796:	09 f4       	brne	.+2      	; 0x379a <Endpoint_Write_Control_Stream_LE+0x58>
    3798:	41 c0       	rjmp	.+130    	; 0x381c <Endpoint_Write_Control_Stream_LE+0xda>
    379a:	85 30       	cpi	r24, 0x05	; 5
    379c:	09 f4       	brne	.+2      	; 0x37a0 <Endpoint_Write_Control_Stream_LE+0x5e>
    379e:	40 c0       	rjmp	.+128    	; 0x3820 <Endpoint_Write_Control_Stream_LE+0xde>
    37a0:	80 81       	ld	r24, Z
    37a2:	83 fd       	sbrc	r24, 3
    37a4:	3f c0       	rjmp	.+126    	; 0x3824 <Endpoint_Write_Control_Stream_LE+0xe2>
    37a6:	80 81       	ld	r24, Z
    37a8:	82 fd       	sbrc	r24, 2
    37aa:	31 c0       	rjmp	.+98     	; 0x380e <Endpoint_Write_Control_Stream_LE+0xcc>
    37ac:	80 81       	ld	r24, Z
    37ae:	80 ff       	sbrs	r24, 0
    37b0:	1e c0       	rjmp	.+60     	; 0x37ee <Endpoint_Write_Control_Stream_LE+0xac>
    37b2:	eb 01       	movw	r28, r22
    37b4:	48 81       	ld	r20, Y
    37b6:	59 81       	ldd	r21, Y+1	; 0x01
    37b8:	21 15       	cp	r18, r1
    37ba:	31 05       	cpc	r19, r1
    37bc:	81 f0       	breq	.+32     	; 0x37de <Endpoint_Write_Control_Stream_LE+0x9c>
    37be:	48 30       	cpi	r20, 0x08	; 8
    37c0:	51 05       	cpc	r21, r1
    37c2:	68 f4       	brcc	.+26     	; 0x37de <Endpoint_Write_Control_Stream_LE+0x9c>
    37c4:	8d 91       	ld	r24, X+
    37c6:	e7 01       	movw	r28, r14
    37c8:	88 83       	st	Y, r24
    37ca:	21 50       	subi	r18, 0x01	; 1
    37cc:	31 09       	sbc	r19, r1
    37ce:	4f 5f       	subi	r20, 0xFF	; 255
    37d0:	5f 4f       	sbci	r21, 0xFF	; 255
    37d2:	21 15       	cp	r18, r1
    37d4:	31 05       	cpc	r19, r1
    37d6:	19 f0       	breq	.+6      	; 0x37de <Endpoint_Write_Control_Stream_LE+0x9c>
    37d8:	48 30       	cpi	r20, 0x08	; 8
    37da:	51 05       	cpc	r21, r1
    37dc:	99 f7       	brne	.-26     	; 0x37c4 <Endpoint_Write_Control_Stream_LE+0x82>
    37de:	91 2f       	mov	r25, r17
    37e0:	48 30       	cpi	r20, 0x08	; 8
    37e2:	51 05       	cpc	r21, r1
    37e4:	09 f0       	breq	.+2      	; 0x37e8 <Endpoint_Write_Control_Stream_LE+0xa6>
    37e6:	90 2f       	mov	r25, r16
    37e8:	80 81       	ld	r24, Z
    37ea:	8e 77       	andi	r24, 0x7E	; 126
    37ec:	80 83       	st	Z, r24
    37ee:	21 15       	cp	r18, r1
    37f0:	31 05       	cpc	r19, r1
    37f2:	71 f6       	brne	.-100    	; 0x3790 <Endpoint_Write_Control_Stream_LE+0x4e>
    37f4:	91 11       	cpse	r25, r1
    37f6:	cc cf       	rjmp	.-104    	; 0x3790 <Endpoint_Write_Control_Stream_LE+0x4e>
    37f8:	0a c0       	rjmp	.+20     	; 0x380e <Endpoint_Write_Control_Stream_LE+0xcc>
    37fa:	80 91 d0 13 	lds	r24, 0x13D0
    37fe:	88 23       	and	r24, r24
    3800:	99 f0       	breq	.+38     	; 0x3828 <Endpoint_Write_Control_Stream_LE+0xe6>
    3802:	85 30       	cpi	r24, 0x05	; 5
    3804:	99 f0       	breq	.+38     	; 0x382c <Endpoint_Write_Control_Stream_LE+0xea>
    3806:	80 81       	ld	r24, Z
    3808:	83 ff       	sbrs	r24, 3
    380a:	03 c0       	rjmp	.+6      	; 0x3812 <Endpoint_Write_Control_Stream_LE+0xd0>
    380c:	11 c0       	rjmp	.+34     	; 0x3830 <Endpoint_Write_Control_Stream_LE+0xee>
    380e:	e8 ee       	ldi	r30, 0xE8	; 232
    3810:	f0 e0       	ldi	r31, 0x00	; 0
    3812:	80 81       	ld	r24, Z
    3814:	82 ff       	sbrs	r24, 2
    3816:	f1 cf       	rjmp	.-30     	; 0x37fa <Endpoint_Write_Control_Stream_LE+0xb8>
    3818:	80 e0       	ldi	r24, 0x00	; 0
    381a:	0b c0       	rjmp	.+22     	; 0x3832 <Endpoint_Write_Control_Stream_LE+0xf0>
    381c:	82 e0       	ldi	r24, 0x02	; 2
    381e:	09 c0       	rjmp	.+18     	; 0x3832 <Endpoint_Write_Control_Stream_LE+0xf0>
    3820:	83 e0       	ldi	r24, 0x03	; 3
    3822:	07 c0       	rjmp	.+14     	; 0x3832 <Endpoint_Write_Control_Stream_LE+0xf0>
    3824:	81 e0       	ldi	r24, 0x01	; 1
    3826:	05 c0       	rjmp	.+10     	; 0x3832 <Endpoint_Write_Control_Stream_LE+0xf0>
    3828:	82 e0       	ldi	r24, 0x02	; 2
    382a:	03 c0       	rjmp	.+6      	; 0x3832 <Endpoint_Write_Control_Stream_LE+0xf0>
    382c:	83 e0       	ldi	r24, 0x03	; 3
    382e:	01 c0       	rjmp	.+2      	; 0x3832 <Endpoint_Write_Control_Stream_LE+0xf0>
    3830:	81 e0       	ldi	r24, 0x01	; 1
    3832:	df 91       	pop	r29
    3834:	cf 91       	pop	r28
    3836:	1f 91       	pop	r17
    3838:	0f 91       	pop	r16
    383a:	ff 90       	pop	r15
    383c:	ef 90       	pop	r14
    383e:	08 95       	ret

00003840 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    3840:	ef 92       	push	r14
    3842:	ff 92       	push	r15
    3844:	0f 93       	push	r16
    3846:	1f 93       	push	r17
    3848:	cf 93       	push	r28
    384a:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    384c:	20 91 d7 13 	lds	r18, 0x13D7
    3850:	30 91 d8 13 	lds	r19, 0x13D8
    3854:	26 17       	cp	r18, r22
    3856:	37 07       	cpc	r19, r23
    3858:	58 f0       	brcs	.+22     	; 0x3870 <Endpoint_Write_Control_PStream_LE+0x30>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    385a:	61 15       	cp	r22, r1
    385c:	71 05       	cpc	r23, r1
    385e:	39 f4       	brne	.+14     	; 0x386e <Endpoint_Write_Control_PStream_LE+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3860:	e8 ee       	ldi	r30, 0xE8	; 232
    3862:	f0 e0       	ldi	r31, 0x00	; 0
    3864:	20 81       	ld	r18, Z
    3866:	2e 77       	andi	r18, 0x7E	; 126
    3868:	20 83       	st	Z, r18
    386a:	9b 01       	movw	r18, r22
    386c:	01 c0       	rjmp	.+2      	; 0x3870 <Endpoint_Write_Control_PStream_LE+0x30>
    386e:	9b 01       	movw	r18, r22
    3870:	e8 2f       	mov	r30, r24
    3872:	f9 2f       	mov	r31, r25
    3874:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3876:	a8 ee       	ldi	r26, 0xE8	; 232
    3878:	b0 e0       	ldi	r27, 0x00	; 0
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    387a:	62 ef       	ldi	r22, 0xF2	; 242
    387c:	70 e0       	ldi	r23, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    387e:	0f 2e       	mov	r0, r31
    3880:	f1 ef       	ldi	r31, 0xF1	; 241
    3882:	ef 2e       	mov	r14, r31
    3884:	f1 2c       	mov	r15, r1
    3886:	f0 2d       	mov	r31, r0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    3888:	11 e0       	ldi	r17, 0x01	; 1
    388a:	00 e0       	ldi	r16, 0x00	; 0
    388c:	30 c0       	rjmp	.+96     	; 0x38ee <Endpoint_Write_Control_PStream_LE+0xae>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    388e:	80 91 d0 13 	lds	r24, 0x13D0

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3892:	88 23       	and	r24, r24
    3894:	09 f4       	brne	.+2      	; 0x3898 <Endpoint_Write_Control_PStream_LE+0x58>
    3896:	42 c0       	rjmp	.+132    	; 0x391c <Endpoint_Write_Control_PStream_LE+0xdc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3898:	85 30       	cpi	r24, 0x05	; 5
    389a:	09 f4       	brne	.+2      	; 0x389e <Endpoint_Write_Control_PStream_LE+0x5e>
    389c:	41 c0       	rjmp	.+130    	; 0x3920 <Endpoint_Write_Control_PStream_LE+0xe0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    389e:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    38a0:	83 fd       	sbrc	r24, 3
    38a2:	40 c0       	rjmp	.+128    	; 0x3924 <Endpoint_Write_Control_PStream_LE+0xe4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    38a4:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    38a6:	82 fd       	sbrc	r24, 2
    38a8:	32 c0       	rjmp	.+100    	; 0x390e <Endpoint_Write_Control_PStream_LE+0xce>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    38aa:	8c 91       	ld	r24, X
		  break;

		if (Endpoint_IsINReady())
    38ac:	80 ff       	sbrs	r24, 0
    38ae:	1f c0       	rjmp	.+62     	; 0x38ee <Endpoint_Write_Control_PStream_LE+0xae>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    38b0:	eb 01       	movw	r28, r22
    38b2:	48 81       	ld	r20, Y
    38b4:	59 81       	ldd	r21, Y+1	; 0x01
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    38b6:	21 15       	cp	r18, r1
    38b8:	31 05       	cpc	r19, r1
    38ba:	89 f0       	breq	.+34     	; 0x38de <Endpoint_Write_Control_PStream_LE+0x9e>
    38bc:	48 30       	cpi	r20, 0x08	; 8
    38be:	51 05       	cpc	r21, r1
    38c0:	70 f4       	brcc	.+28     	; 0x38de <Endpoint_Write_Control_PStream_LE+0x9e>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    38c2:	84 91       	lpm	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    38c4:	e7 01       	movw	r28, r14
    38c6:	88 83       	st	Y, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    38c8:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    38ca:	21 50       	subi	r18, 0x01	; 1
    38cc:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
    38ce:	4f 5f       	subi	r20, 0xFF	; 255
    38d0:	5f 4f       	sbci	r21, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    38d2:	21 15       	cp	r18, r1
    38d4:	31 05       	cpc	r19, r1
    38d6:	19 f0       	breq	.+6      	; 0x38de <Endpoint_Write_Control_PStream_LE+0x9e>
    38d8:	48 30       	cpi	r20, 0x08	; 8
    38da:	51 05       	cpc	r21, r1
    38dc:	91 f7       	brne	.-28     	; 0x38c2 <Endpoint_Write_Control_PStream_LE+0x82>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    38de:	91 2f       	mov	r25, r17
    38e0:	48 30       	cpi	r20, 0x08	; 8
    38e2:	51 05       	cpc	r21, r1
    38e4:	09 f0       	breq	.+2      	; 0x38e8 <Endpoint_Write_Control_PStream_LE+0xa8>
    38e6:	90 2f       	mov	r25, r16
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    38e8:	8c 91       	ld	r24, X
    38ea:	8e 77       	andi	r24, 0x7E	; 126
    38ec:	8c 93       	st	X, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    38ee:	21 15       	cp	r18, r1
    38f0:	31 05       	cpc	r19, r1
    38f2:	69 f6       	brne	.-102    	; 0x388e <Endpoint_Write_Control_PStream_LE+0x4e>
    38f4:	91 11       	cpse	r25, r1
    38f6:	cb cf       	rjmp	.-106    	; 0x388e <Endpoint_Write_Control_PStream_LE+0x4e>
    38f8:	0a c0       	rjmp	.+20     	; 0x390e <Endpoint_Write_Control_PStream_LE+0xce>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    38fa:	80 91 d0 13 	lds	r24, 0x13D0

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    38fe:	88 23       	and	r24, r24
    3900:	99 f0       	breq	.+38     	; 0x3928 <Endpoint_Write_Control_PStream_LE+0xe8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3902:	85 30       	cpi	r24, 0x05	; 5
    3904:	99 f0       	breq	.+38     	; 0x392c <Endpoint_Write_Control_PStream_LE+0xec>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3906:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    3908:	83 ff       	sbrs	r24, 3
    390a:	03 c0       	rjmp	.+6      	; 0x3912 <Endpoint_Write_Control_PStream_LE+0xd2>
    390c:	11 c0       	rjmp	.+34     	; 0x3930 <Endpoint_Write_Control_PStream_LE+0xf0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    390e:	e8 ee       	ldi	r30, 0xE8	; 232
    3910:	f0 e0       	ldi	r31, 0x00	; 0
    3912:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    3914:	82 ff       	sbrs	r24, 2
    3916:	f1 cf       	rjmp	.-30     	; 0x38fa <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    3918:	80 e0       	ldi	r24, 0x00	; 0
    391a:	0b c0       	rjmp	.+22     	; 0x3932 <Endpoint_Write_Control_PStream_LE+0xf2>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    391c:	82 e0       	ldi	r24, 0x02	; 2
    391e:	09 c0       	rjmp	.+18     	; 0x3932 <Endpoint_Write_Control_PStream_LE+0xf2>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    3920:	83 e0       	ldi	r24, 0x03	; 3
    3922:	07 c0       	rjmp	.+14     	; 0x3932 <Endpoint_Write_Control_PStream_LE+0xf2>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    3924:	81 e0       	ldi	r24, 0x01	; 1
    3926:	05 c0       	rjmp	.+10     	; 0x3932 <Endpoint_Write_Control_PStream_LE+0xf2>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    3928:	82 e0       	ldi	r24, 0x02	; 2
    392a:	03 c0       	rjmp	.+6      	; 0x3932 <Endpoint_Write_Control_PStream_LE+0xf2>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    392c:	83 e0       	ldi	r24, 0x03	; 3
    392e:	01 c0       	rjmp	.+2      	; 0x3932 <Endpoint_Write_Control_PStream_LE+0xf2>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    3930:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    3932:	df 91       	pop	r29
    3934:	cf 91       	pop	r28
    3936:	1f 91       	pop	r17
    3938:	0f 91       	pop	r16
    393a:	ff 90       	pop	r15
    393c:	ef 90       	pop	r14
    393e:	08 95       	ret

00003940 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    3940:	8f 92       	push	r8
    3942:	9f 92       	push	r9
    3944:	bf 92       	push	r11
    3946:	cf 92       	push	r12
    3948:	df 92       	push	r13
    394a:	ef 92       	push	r14
    394c:	ff 92       	push	r15
    394e:	0f 93       	push	r16
    3950:	1f 93       	push	r17
    3952:	cf 93       	push	r28
    3954:	df 93       	push	r29
    3956:	87 30       	cpi	r24, 0x07	; 7
    3958:	70 f1       	brcs	.+92     	; 0x39b6 <Endpoint_ConfigureEndpoint_Prv+0x76>
    395a:	26 c0       	rjmp	.+76     	; 0x39a8 <Endpoint_ConfigureEndpoint_Prv+0x68>
    395c:	29 2f       	mov	r18, r25
    395e:	2f 70       	andi	r18, 0x0F	; 15
    3960:	e7 01       	movw	r28, r14
    3962:	28 83       	st	Y, r18
    3964:	89 17       	cp	r24, r25
    3966:	31 f0       	breq	.+12     	; 0x3974 <Endpoint_ConfigureEndpoint_Prv+0x34>
    3968:	e8 01       	movw	r28, r16
    396a:	78 81       	ld	r23, Y
    396c:	20 81       	ld	r18, Z
    396e:	e4 01       	movw	r28, r8
    3970:	58 81       	ld	r21, Y
    3972:	03 c0       	rjmp	.+6      	; 0x397a <Endpoint_ConfigureEndpoint_Prv+0x3a>
    3974:	24 2f       	mov	r18, r20
    3976:	76 2f       	mov	r23, r22
    3978:	5b 2d       	mov	r21, r11
    397a:	21 ff       	sbrs	r18, 1
    397c:	12 c0       	rjmp	.+36     	; 0x39a2 <Endpoint_ConfigureEndpoint_Prv+0x62>
    397e:	3c 91       	ld	r19, X
    3980:	3e 7f       	andi	r19, 0xFE	; 254
    3982:	3c 93       	st	X, r19
    3984:	30 81       	ld	r19, Z
    3986:	3d 7f       	andi	r19, 0xFD	; 253
    3988:	30 83       	st	Z, r19
    398a:	3c 91       	ld	r19, X
    398c:	31 60       	ori	r19, 0x01	; 1
    398e:	3c 93       	st	X, r19
    3990:	e8 01       	movw	r28, r16
    3992:	78 83       	st	Y, r23
    3994:	20 83       	st	Z, r18
    3996:	e4 01       	movw	r28, r8
    3998:	58 83       	st	Y, r21
    399a:	e6 01       	movw	r28, r12
    399c:	28 81       	ld	r18, Y
    399e:	22 23       	and	r18, r18
    39a0:	44 f4       	brge	.+16     	; 0x39b2 <Endpoint_ConfigureEndpoint_Prv+0x72>
    39a2:	9f 5f       	subi	r25, 0xFF	; 255
    39a4:	97 30       	cpi	r25, 0x07	; 7
    39a6:	d1 f6       	brne	.-76     	; 0x395c <Endpoint_ConfigureEndpoint_Prv+0x1c>
    39a8:	8f 70       	andi	r24, 0x0F	; 15
    39aa:	80 93 e9 00 	sts	0x00E9, r24
    39ae:	81 e0       	ldi	r24, 0x01	; 1
    39b0:	21 c0       	rjmp	.+66     	; 0x39f4 <Endpoint_ConfigureEndpoint_Prv+0xb4>
    39b2:	80 e0       	ldi	r24, 0x00	; 0
    39b4:	1f c0       	rjmp	.+62     	; 0x39f4 <Endpoint_ConfigureEndpoint_Prv+0xb4>
    39b6:	98 2f       	mov	r25, r24
    39b8:	9f 70       	andi	r25, 0x0F	; 15
    39ba:	90 93 e9 00 	sts	0x00E9, r25
    39be:	98 2f       	mov	r25, r24
    39c0:	24 2f       	mov	r18, r20
    39c2:	76 2f       	mov	r23, r22
    39c4:	50 e0       	ldi	r21, 0x00	; 0
    39c6:	ab ee       	ldi	r26, 0xEB	; 235
    39c8:	b0 e0       	ldi	r27, 0x00	; 0
    39ca:	ed ee       	ldi	r30, 0xED	; 237
    39cc:	f0 e0       	ldi	r31, 0x00	; 0
    39ce:	0c ee       	ldi	r16, 0xEC	; 236
    39d0:	10 e0       	ldi	r17, 0x00	; 0
    39d2:	0f 2e       	mov	r0, r31
    39d4:	f0 ef       	ldi	r31, 0xF0	; 240
    39d6:	8f 2e       	mov	r8, r31
    39d8:	91 2c       	mov	r9, r1
    39da:	f0 2d       	mov	r31, r0
    39dc:	0f 2e       	mov	r0, r31
    39de:	fe ee       	ldi	r31, 0xEE	; 238
    39e0:	cf 2e       	mov	r12, r31
    39e2:	d1 2c       	mov	r13, r1
    39e4:	f0 2d       	mov	r31, r0
    39e6:	0f 2e       	mov	r0, r31
    39e8:	f9 ee       	ldi	r31, 0xE9	; 233
    39ea:	ef 2e       	mov	r14, r31
    39ec:	f1 2c       	mov	r15, r1
    39ee:	f0 2d       	mov	r31, r0
    39f0:	b1 2c       	mov	r11, r1
    39f2:	c3 cf       	rjmp	.-122    	; 0x397a <Endpoint_ConfigureEndpoint_Prv+0x3a>
    39f4:	df 91       	pop	r29
    39f6:	cf 91       	pop	r28
    39f8:	1f 91       	pop	r17
    39fa:	0f 91       	pop	r16
    39fc:	ff 90       	pop	r15
    39fe:	ef 90       	pop	r14
    3a00:	df 90       	pop	r13
    3a02:	cf 90       	pop	r12
    3a04:	bf 90       	pop	r11
    3a06:	9f 90       	pop	r9
    3a08:	8f 90       	pop	r8
    3a0a:	08 95       	ret

00003a0c <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    3a0c:	80 91 d1 13 	lds	r24, 0x13D1
    3a10:	88 23       	and	r24, r24
    3a12:	44 f0       	brlt	.+16     	; 0x3a24 <Endpoint_ClearStatusStage+0x18>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3a14:	e8 ee       	ldi	r30, 0xE8	; 232
    3a16:	f0 e0       	ldi	r31, 0x00	; 0
    3a18:	14 c0       	rjmp	.+40     	; 0x3a42 <Endpoint_ClearStatusStage+0x36>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    3a1a:	80 91 d0 13 	lds	r24, 0x13D0
    3a1e:	81 11       	cpse	r24, r1
    3a20:	03 c0       	rjmp	.+6      	; 0x3a28 <Endpoint_ClearStatusStage+0x1c>
    3a22:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3a24:	e8 ee       	ldi	r30, 0xE8	; 232
    3a26:	f0 e0       	ldi	r31, 0x00	; 0
    3a28:	80 81       	ld	r24, Z

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    3a2a:	82 ff       	sbrs	r24, 2
    3a2c:	f6 cf       	rjmp	.-20     	; 0x3a1a <Endpoint_ClearStatusStage+0xe>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3a2e:	e8 ee       	ldi	r30, 0xE8	; 232
    3a30:	f0 e0       	ldi	r31, 0x00	; 0
    3a32:	80 81       	ld	r24, Z
    3a34:	8b 77       	andi	r24, 0x7B	; 123
    3a36:	80 83       	st	Z, r24
    3a38:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    3a3a:	80 91 d0 13 	lds	r24, 0x13D0
    3a3e:	88 23       	and	r24, r24
    3a40:	41 f0       	breq	.+16     	; 0x3a52 <Endpoint_ClearStatusStage+0x46>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3a42:	80 81       	ld	r24, Z

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    3a44:	80 ff       	sbrs	r24, 0
    3a46:	f9 cf       	rjmp	.-14     	; 0x3a3a <Endpoint_ClearStatusStage+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3a48:	e8 ee       	ldi	r30, 0xE8	; 232
    3a4a:	f0 e0       	ldi	r31, 0x00	; 0
    3a4c:	80 81       	ld	r24, Z
    3a4e:	8e 77       	andi	r24, 0x7E	; 126
    3a50:	80 83       	st	Z, r24
    3a52:	08 95       	ret

00003a54 <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
    3a54:	0f 93       	push	r16
    3a56:	1f 93       	push	r17
    3a58:	cf 93       	push	r28
    3a5a:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    3a5c:	20 91 e4 00 	lds	r18, 0x00E4
    3a60:	30 91 e5 00 	lds	r19, 0x00E5
    3a64:	65 e6       	ldi	r22, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    3a66:	ac ee       	ldi	r26, 0xEC	; 236
    3a68:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3a6a:	e8 ee       	ldi	r30, 0xE8	; 232
    3a6c:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    3a6e:	0b ee       	ldi	r16, 0xEB	; 235
    3a70:	10 e0       	ldi	r17, 0x00	; 0
    3a72:	44 ee       	ldi	r20, 0xE4	; 228
    3a74:	50 e0       	ldi	r21, 0x00	; 0
    3a76:	01 c0       	rjmp	.+2      	; 0x3a7a <Endpoint_WaitUntilReady+0x26>
    3a78:	9c 01       	movw	r18, r24
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    3a7a:	9c 91       	ld	r25, X
    3a7c:	89 2f       	mov	r24, r25
    3a7e:	81 70       	andi	r24, 0x01	; 1
    3a80:	90 fd       	sbrc	r25, 0
    3a82:	1d c0       	rjmp	.+58     	; 0x3abe <Endpoint_WaitUntilReady+0x6a>
    3a84:	20 c0       	rjmp	.+64     	; 0x3ac6 <Endpoint_WaitUntilReady+0x72>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3a86:	80 91 d0 13 	lds	r24, 0x13D0

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3a8a:	88 23       	and	r24, r24
    3a8c:	81 f0       	breq	.+32     	; 0x3aae <Endpoint_WaitUntilReady+0x5a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3a8e:	85 30       	cpi	r24, 0x05	; 5
    3a90:	81 f0       	breq	.+32     	; 0x3ab2 <Endpoint_WaitUntilReady+0x5e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    3a92:	e8 01       	movw	r28, r16
    3a94:	88 81       	ld	r24, Y
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    3a96:	85 fd       	sbrc	r24, 5
    3a98:	0e c0       	rjmp	.+28     	; 0x3ab6 <Endpoint_WaitUntilReady+0x62>
    3a9a:	ea 01       	movw	r28, r20
    3a9c:	88 81       	ld	r24, Y
    3a9e:	99 81       	ldd	r25, Y+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    3aa0:	28 17       	cp	r18, r24
    3aa2:	39 07       	cpc	r19, r25
    3aa4:	51 f3       	breq	.-44     	; 0x3a7a <Endpoint_WaitUntilReady+0x26>
    3aa6:	61 50       	subi	r22, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    3aa8:	39 f7       	brne	.-50     	; 0x3a78 <Endpoint_WaitUntilReady+0x24>
			  return ENDPOINT_READYWAIT_Timeout;
    3aaa:	84 e0       	ldi	r24, 0x04	; 4
    3aac:	0f c0       	rjmp	.+30     	; 0x3acc <Endpoint_WaitUntilReady+0x78>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    3aae:	82 e0       	ldi	r24, 0x02	; 2
    3ab0:	0d c0       	rjmp	.+26     	; 0x3acc <Endpoint_WaitUntilReady+0x78>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    3ab2:	83 e0       	ldi	r24, 0x03	; 3
    3ab4:	0b c0       	rjmp	.+22     	; 0x3acc <Endpoint_WaitUntilReady+0x78>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    3ab6:	81 e0       	ldi	r24, 0x01	; 1
    3ab8:	09 c0       	rjmp	.+18     	; 0x3acc <Endpoint_WaitUntilReady+0x78>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    3aba:	80 e0       	ldi	r24, 0x00	; 0
    3abc:	07 c0       	rjmp	.+14     	; 0x3acc <Endpoint_WaitUntilReady+0x78>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3abe:	80 81       	ld	r24, Z

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    3ac0:	80 ff       	sbrs	r24, 0
    3ac2:	e1 cf       	rjmp	.-62     	; 0x3a86 <Endpoint_WaitUntilReady+0x32>
    3ac4:	fa cf       	rjmp	.-12     	; 0x3aba <Endpoint_WaitUntilReady+0x66>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3ac6:	90 81       	ld	r25, Z
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    3ac8:	92 ff       	sbrs	r25, 2
    3aca:	dd cf       	rjmp	.-70     	; 0x3a86 <Endpoint_WaitUntilReady+0x32>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    3acc:	df 91       	pop	r29
    3ace:	cf 91       	pop	r28
    3ad0:	1f 91       	pop	r17
    3ad2:	0f 91       	pop	r16
    3ad4:	08 95       	ret

00003ad6 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    3ad6:	0f 93       	push	r16
    3ad8:	1f 93       	push	r17
    3ada:	cf 93       	push	r28
    3adc:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    3ade:	4f d0       	rcall	.+158    	; 0x3b7e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    3ae0:	56 d0       	rcall	.+172    	; 0x3b8e <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    3ae2:	c8 ed       	ldi	r28, 0xD8	; 216
    3ae4:	d0 e0       	ldi	r29, 0x00	; 0
    3ae6:	88 81       	ld	r24, Y
    3ae8:	8f 77       	andi	r24, 0x7F	; 127
    3aea:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    3aec:	88 81       	ld	r24, Y
    3aee:	80 68       	ori	r24, 0x80	; 128
    3af0:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    3af2:	88 81       	ld	r24, Y
    3af4:	8f 7d       	andi	r24, 0xDF	; 223
    3af6:	88 83       	st	Y, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    3af8:	e7 ed       	ldi	r30, 0xD7	; 215
    3afa:	f0 e0       	ldi	r31, 0x00	; 0
    3afc:	80 81       	ld	r24, Z
    3afe:	80 68       	ori	r24, 0x80	; 128
    3b00:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    3b02:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    3b04:	10 92 d0 13 	sts	0x13D0, r1
	USB_Device_ConfigurationNumber  = 0;
    3b08:	10 92 cc 13 	sts	0x13CC, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    3b0c:	10 92 ce 13 	sts	0x13CE, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    3b10:	10 92 cd 13 	sts	0x13CD, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    3b14:	00 ee       	ldi	r16, 0xE0	; 224
    3b16:	10 e0       	ldi	r17, 0x00	; 0
    3b18:	f8 01       	movw	r30, r16
    3b1a:	80 81       	ld	r24, Z
    3b1c:	8b 7f       	andi	r24, 0xFB	; 251
    3b1e:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    3b20:	88 81       	ld	r24, Y
    3b22:	81 60       	ori	r24, 0x01	; 1
    3b24:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    3b26:	42 e0       	ldi	r20, 0x02	; 2
    3b28:	60 e0       	ldi	r22, 0x00	; 0
    3b2a:	80 e0       	ldi	r24, 0x00	; 0
    3b2c:	09 df       	rcall	.-494    	; 0x3940 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    3b2e:	e1 ee       	ldi	r30, 0xE1	; 225
    3b30:	f0 e0       	ldi	r31, 0x00	; 0
    3b32:	80 81       	ld	r24, Z
    3b34:	8e 7f       	andi	r24, 0xFE	; 254
    3b36:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    3b38:	e2 ee       	ldi	r30, 0xE2	; 226
    3b3a:	f0 e0       	ldi	r31, 0x00	; 0
    3b3c:	80 81       	ld	r24, Z
    3b3e:	81 60       	ori	r24, 0x01	; 1
    3b40:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    3b42:	80 81       	ld	r24, Z
    3b44:	88 60       	ori	r24, 0x08	; 8
    3b46:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    3b48:	f8 01       	movw	r30, r16
    3b4a:	80 81       	ld	r24, Z
    3b4c:	8e 7f       	andi	r24, 0xFE	; 254
    3b4e:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    3b50:	88 81       	ld	r24, Y
    3b52:	80 61       	ori	r24, 0x10	; 16
    3b54:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    3b56:	df 91       	pop	r29
    3b58:	cf 91       	pop	r28
    3b5a:	1f 91       	pop	r17
    3b5c:	0f 91       	pop	r16
    3b5e:	08 95       	ret

00003b60 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    3b60:	e8 ed       	ldi	r30, 0xD8	; 216
    3b62:	f0 e0       	ldi	r31, 0x00	; 0
    3b64:	80 81       	ld	r24, Z
    3b66:	8f 7e       	andi	r24, 0xEF	; 239
    3b68:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    3b6a:	e7 ed       	ldi	r30, 0xD7	; 215
    3b6c:	f0 e0       	ldi	r31, 0x00	; 0
    3b6e:	80 81       	ld	r24, Z
    3b70:	81 60       	ori	r24, 0x01	; 1
    3b72:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    3b74:	81 e0       	ldi	r24, 0x01	; 1
    3b76:	80 93 cf 13 	sts	0x13CF, r24

	USB_ResetInterface();
    3b7a:	ad cf       	rjmp	.-166    	; 0x3ad6 <USB_ResetInterface>
    3b7c:	08 95       	ret

00003b7e <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    3b7e:	e8 ed       	ldi	r30, 0xD8	; 216
    3b80:	f0 e0       	ldi	r31, 0x00	; 0
    3b82:	80 81       	ld	r24, Z
    3b84:	8c 7f       	andi	r24, 0xFC	; 252
    3b86:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    3b88:	10 92 e2 00 	sts	0x00E2, r1
    3b8c:	08 95       	ret

00003b8e <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    3b8e:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    3b92:	10 92 e1 00 	sts	0x00E1, r1
    3b96:	08 95       	ret

00003b98 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    3b98:	1f 92       	push	r1
    3b9a:	0f 92       	push	r0
    3b9c:	0f b6       	in	r0, 0x3f	; 63
    3b9e:	0f 92       	push	r0
    3ba0:	11 24       	eor	r1, r1
    3ba2:	0b b6       	in	r0, 0x3b	; 59
    3ba4:	0f 92       	push	r0
    3ba6:	2f 93       	push	r18
    3ba8:	3f 93       	push	r19
    3baa:	4f 93       	push	r20
    3bac:	5f 93       	push	r21
    3bae:	6f 93       	push	r22
    3bb0:	7f 93       	push	r23
    3bb2:	8f 93       	push	r24
    3bb4:	9f 93       	push	r25
    3bb6:	af 93       	push	r26
    3bb8:	bf 93       	push	r27
    3bba:	ef 93       	push	r30
    3bbc:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    3bbe:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    3bc2:	82 ff       	sbrs	r24, 2
    3bc4:	0a c0       	rjmp	.+20     	; 0x3bda <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    3bc6:	80 91 e2 00 	lds	r24, 0x00E2
    3bca:	82 ff       	sbrs	r24, 2
    3bcc:	06 c0       	rjmp	.+12     	; 0x3bda <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    3bce:	e1 ee       	ldi	r30, 0xE1	; 225
    3bd0:	f0 e0       	ldi	r31, 0x00	; 0
    3bd2:	80 81       	ld	r24, Z
    3bd4:	8b 7f       	andi	r24, 0xFB	; 251
    3bd6:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    3bd8:	61 d2       	rcall	.+1218   	; 0x409c <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    3bda:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    3bde:	80 ff       	sbrs	r24, 0
    3be0:	1d c0       	rjmp	.+58     	; 0x3c1c <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    3be2:	80 91 d8 00 	lds	r24, 0x00D8
    3be6:	80 ff       	sbrs	r24, 0
    3be8:	19 c0       	rjmp	.+50     	; 0x3c1c <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    3bea:	ea ed       	ldi	r30, 0xDA	; 218
    3bec:	f0 e0       	ldi	r31, 0x00	; 0
    3bee:	80 81       	ld	r24, Z
    3bf0:	8e 7f       	andi	r24, 0xFE	; 254
    3bf2:	80 83       	st	Z, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    3bf4:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    3bf8:	80 ff       	sbrs	r24, 0
    3bfa:	0c c0       	rjmp	.+24     	; 0x3c14 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    3bfc:	84 e1       	ldi	r24, 0x14	; 20
    3bfe:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    3c00:	86 e1       	ldi	r24, 0x16	; 22
    3c02:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    3c04:	09 b4       	in	r0, 0x29	; 41
    3c06:	00 fe       	sbrs	r0, 0
    3c08:	fd cf       	rjmp	.-6      	; 0x3c04 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    3c0a:	81 e0       	ldi	r24, 0x01	; 1
    3c0c:	80 93 d0 13 	sts	0x13D0, r24
			EVENT_USB_Device_Connect();
    3c10:	45 d2       	rcall	.+1162   	; 0x409c <USB_Event_Stub>
    3c12:	04 c0       	rjmp	.+8      	; 0x3c1c <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    3c14:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    3c16:	10 92 d0 13 	sts	0x13D0, r1
			EVENT_USB_Device_Disconnect();
    3c1a:	40 d2       	rcall	.+1152   	; 0x409c <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    3c1c:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    3c20:	80 ff       	sbrs	r24, 0
    3c22:	16 c0       	rjmp	.+44     	; 0x3c50 <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    3c24:	80 91 e2 00 	lds	r24, 0x00E2
    3c28:	80 ff       	sbrs	r24, 0
    3c2a:	12 c0       	rjmp	.+36     	; 0x3c50 <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    3c2c:	e2 ee       	ldi	r30, 0xE2	; 226
    3c2e:	f0 e0       	ldi	r31, 0x00	; 0
    3c30:	80 81       	ld	r24, Z
    3c32:	8e 7f       	andi	r24, 0xFE	; 254
    3c34:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    3c36:	80 81       	ld	r24, Z
    3c38:	80 61       	ori	r24, 0x10	; 16
    3c3a:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    3c3c:	e8 ed       	ldi	r30, 0xD8	; 216
    3c3e:	f0 e0       	ldi	r31, 0x00	; 0
    3c40:	80 81       	ld	r24, Z
    3c42:	80 62       	ori	r24, 0x20	; 32
    3c44:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    3c46:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    3c48:	85 e0       	ldi	r24, 0x05	; 5
    3c4a:	80 93 d0 13 	sts	0x13D0, r24
		EVENT_USB_Device_Suspend();
    3c4e:	26 d2       	rcall	.+1100   	; 0x409c <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    3c50:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    3c54:	84 ff       	sbrs	r24, 4
    3c56:	2f c0       	rjmp	.+94     	; 0x3cb6 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    3c58:	80 91 e2 00 	lds	r24, 0x00E2
    3c5c:	84 ff       	sbrs	r24, 4
    3c5e:	2b c0       	rjmp	.+86     	; 0x3cb6 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    3c60:	84 e1       	ldi	r24, 0x14	; 20
    3c62:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    3c64:	86 e1       	ldi	r24, 0x16	; 22
    3c66:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    3c68:	09 b4       	in	r0, 0x29	; 41
    3c6a:	00 fe       	sbrs	r0, 0
    3c6c:	fd cf       	rjmp	.-6      	; 0x3c68 <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    3c6e:	e8 ed       	ldi	r30, 0xD8	; 216
    3c70:	f0 e0       	ldi	r31, 0x00	; 0
    3c72:	80 81       	ld	r24, Z
    3c74:	8f 7d       	andi	r24, 0xDF	; 223
    3c76:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    3c78:	e1 ee       	ldi	r30, 0xE1	; 225
    3c7a:	f0 e0       	ldi	r31, 0x00	; 0
    3c7c:	80 81       	ld	r24, Z
    3c7e:	8f 7e       	andi	r24, 0xEF	; 239
    3c80:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    3c82:	e2 ee       	ldi	r30, 0xE2	; 226
    3c84:	f0 e0       	ldi	r31, 0x00	; 0
    3c86:	80 81       	ld	r24, Z
    3c88:	8f 7e       	andi	r24, 0xEF	; 239
    3c8a:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    3c8c:	80 81       	ld	r24, Z
    3c8e:	81 60       	ori	r24, 0x01	; 1
    3c90:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    3c92:	80 91 cc 13 	lds	r24, 0x13CC
    3c96:	88 23       	and	r24, r24
    3c98:	21 f0       	breq	.+8      	; 0x3ca2 <__vector_10+0x10a>
		  USB_DeviceState = DEVICE_STATE_Configured;
    3c9a:	84 e0       	ldi	r24, 0x04	; 4
    3c9c:	80 93 d0 13 	sts	0x13D0, r24
    3ca0:	09 c0       	rjmp	.+18     	; 0x3cb4 <__vector_10+0x11c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    3ca2:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    3ca6:	88 23       	and	r24, r24
    3ca8:	14 f0       	brlt	.+4      	; 0x3cae <__vector_10+0x116>
    3caa:	81 e0       	ldi	r24, 0x01	; 1
    3cac:	01 c0       	rjmp	.+2      	; 0x3cb0 <__vector_10+0x118>
    3cae:	83 e0       	ldi	r24, 0x03	; 3
    3cb0:	80 93 d0 13 	sts	0x13D0, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    3cb4:	f3 d1       	rcall	.+998    	; 0x409c <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    3cb6:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    3cba:	83 ff       	sbrs	r24, 3
    3cbc:	23 c0       	rjmp	.+70     	; 0x3d04 <__vector_10+0x16c>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    3cbe:	80 91 e2 00 	lds	r24, 0x00E2
    3cc2:	83 ff       	sbrs	r24, 3
    3cc4:	1f c0       	rjmp	.+62     	; 0x3d04 <__vector_10+0x16c>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    3cc6:	e1 ee       	ldi	r30, 0xE1	; 225
    3cc8:	f0 e0       	ldi	r31, 0x00	; 0
    3cca:	80 81       	ld	r24, Z
    3ccc:	87 7f       	andi	r24, 0xF7	; 247
    3cce:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    3cd0:	82 e0       	ldi	r24, 0x02	; 2
    3cd2:	80 93 d0 13 	sts	0x13D0, r24
		USB_Device_ConfigurationNumber = 0;
    3cd6:	10 92 cc 13 	sts	0x13CC, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    3cda:	80 81       	ld	r24, Z
    3cdc:	8e 7f       	andi	r24, 0xFE	; 254
    3cde:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    3ce0:	e2 ee       	ldi	r30, 0xE2	; 226
    3ce2:	f0 e0       	ldi	r31, 0x00	; 0
    3ce4:	80 81       	ld	r24, Z
    3ce6:	8e 7f       	andi	r24, 0xFE	; 254
    3ce8:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    3cea:	80 81       	ld	r24, Z
    3cec:	80 61       	ori	r24, 0x10	; 16
    3cee:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    3cf0:	42 e0       	ldi	r20, 0x02	; 2
    3cf2:	60 e0       	ldi	r22, 0x00	; 0
    3cf4:	80 e0       	ldi	r24, 0x00	; 0
    3cf6:	24 de       	rcall	.-952    	; 0x3940 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    3cf8:	e0 ef       	ldi	r30, 0xF0	; 240
    3cfa:	f0 e0       	ldi	r31, 0x00	; 0
    3cfc:	80 81       	ld	r24, Z
    3cfe:	88 60       	ori	r24, 0x08	; 8
    3d00:	80 83       	st	Z, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    3d02:	cc d1       	rcall	.+920    	; 0x409c <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    3d04:	ff 91       	pop	r31
    3d06:	ef 91       	pop	r30
    3d08:	bf 91       	pop	r27
    3d0a:	af 91       	pop	r26
    3d0c:	9f 91       	pop	r25
    3d0e:	8f 91       	pop	r24
    3d10:	7f 91       	pop	r23
    3d12:	6f 91       	pop	r22
    3d14:	5f 91       	pop	r21
    3d16:	4f 91       	pop	r20
    3d18:	3f 91       	pop	r19
    3d1a:	2f 91       	pop	r18
    3d1c:	0f 90       	pop	r0
    3d1e:	0b be       	out	0x3b, r0	; 59
    3d20:	0f 90       	pop	r0
    3d22:	0f be       	out	0x3f, r0	; 63
    3d24:	0f 90       	pop	r0
    3d26:	1f 90       	pop	r1
    3d28:	18 95       	reti

00003d2a <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    3d2a:	1f 92       	push	r1
    3d2c:	0f 92       	push	r0
    3d2e:	0f b6       	in	r0, 0x3f	; 63
    3d30:	0f 92       	push	r0
    3d32:	11 24       	eor	r1, r1
    3d34:	0b b6       	in	r0, 0x3b	; 59
    3d36:	0f 92       	push	r0
    3d38:	ef 92       	push	r14
    3d3a:	ff 92       	push	r15
    3d3c:	0f 93       	push	r16
    3d3e:	1f 93       	push	r17
    3d40:	2f 93       	push	r18
    3d42:	3f 93       	push	r19
    3d44:	4f 93       	push	r20
    3d46:	5f 93       	push	r21
    3d48:	6f 93       	push	r22
    3d4a:	7f 93       	push	r23
    3d4c:	8f 93       	push	r24
    3d4e:	9f 93       	push	r25
    3d50:	af 93       	push	r26
    3d52:	bf 93       	push	r27
    3d54:	cf 93       	push	r28
    3d56:	df 93       	push	r29
    3d58:	ef 93       	push	r30
    3d5a:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    3d5c:	c0 91 e9 00 	lds	r28, 0x00E9
    3d60:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    3d62:	80 91 ec 00 	lds	r24, 0x00EC
    3d66:	d8 2f       	mov	r29, r24
    3d68:	d1 70       	andi	r29, 0x01	; 1
    3d6a:	80 fd       	sbrc	r24, 0
    3d6c:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3d6e:	0f 2e       	mov	r0, r31
    3d70:	f9 ee       	ldi	r31, 0xE9	; 233
    3d72:	ef 2e       	mov	r14, r31
    3d74:	f1 2c       	mov	r15, r1
    3d76:	f0 2d       	mov	r31, r0
    3d78:	f7 01       	movw	r30, r14
    3d7a:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    3d7c:	00 ef       	ldi	r16, 0xF0	; 240
    3d7e:	10 e0       	ldi	r17, 0x00	; 0
    3d80:	f8 01       	movw	r30, r16
    3d82:	80 81       	ld	r24, Z
    3d84:	87 7f       	andi	r24, 0xF7	; 247
    3d86:	80 83       	st	Z, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    3d88:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    3d8a:	23 d0       	rcall	.+70     	; 0x3dd2 <USB_Device_ProcessControlRequest>
    3d8c:	f7 01       	movw	r30, r14
    3d8e:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    3d90:	f8 01       	movw	r30, r16
    3d92:	80 81       	ld	r24, Z
    3d94:	88 60       	ori	r24, 0x08	; 8
    3d96:	80 83       	st	Z, r24
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    3d98:	cd 2b       	or	r28, r29
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3d9a:	cf 70       	andi	r28, 0x0F	; 15
    3d9c:	f7 01       	movw	r30, r14
    3d9e:	c0 83       	st	Z, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    3da0:	ff 91       	pop	r31
    3da2:	ef 91       	pop	r30
    3da4:	df 91       	pop	r29
    3da6:	cf 91       	pop	r28
    3da8:	bf 91       	pop	r27
    3daa:	af 91       	pop	r26
    3dac:	9f 91       	pop	r25
    3dae:	8f 91       	pop	r24
    3db0:	7f 91       	pop	r23
    3db2:	6f 91       	pop	r22
    3db4:	5f 91       	pop	r21
    3db6:	4f 91       	pop	r20
    3db8:	3f 91       	pop	r19
    3dba:	2f 91       	pop	r18
    3dbc:	1f 91       	pop	r17
    3dbe:	0f 91       	pop	r16
    3dc0:	ff 90       	pop	r15
    3dc2:	ef 90       	pop	r14
    3dc4:	0f 90       	pop	r0
    3dc6:	0b be       	out	0x3b, r0	; 59
    3dc8:	0f 90       	pop	r0
    3dca:	0f be       	out	0x3f, r0	; 63
    3dcc:	0f 90       	pop	r0
    3dce:	1f 90       	pop	r1
    3dd0:	18 95       	reti

00003dd2 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    3dd2:	0f 93       	push	r16
    3dd4:	1f 93       	push	r17
    3dd6:	cf 93       	push	r28
    3dd8:	df 93       	push	r29
    3dda:	cd b7       	in	r28, 0x3d	; 61
    3ddc:	de b7       	in	r29, 0x3e	; 62
    3dde:	aa 97       	sbiw	r28, 0x2a	; 42
    3de0:	0f b6       	in	r0, 0x3f	; 63
    3de2:	f8 94       	cli
    3de4:	de bf       	out	0x3e, r29	; 62
    3de6:	0f be       	out	0x3f, r0	; 63
    3de8:	cd bf       	out	0x3d, r28	; 61
    3dea:	e1 ed       	ldi	r30, 0xD1	; 209
    3dec:	f3 e1       	ldi	r31, 0x13	; 19
    3dee:	29 ed       	ldi	r18, 0xD9	; 217
    3df0:	33 e1       	ldi	r19, 0x13	; 19
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    3df2:	a1 ef       	ldi	r26, 0xF1	; 241
    3df4:	b0 e0       	ldi	r27, 0x00	; 0
    3df6:	8c 91       	ld	r24, X
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    3df8:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    3dfa:	e2 17       	cp	r30, r18
    3dfc:	f3 07       	cpc	r31, r19
    3dfe:	d9 f7       	brne	.-10     	; 0x3df6 <USB_Device_ProcessControlRequest+0x24>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    3e00:	4d d1       	rcall	.+666    	; 0x409c <USB_Event_Stub>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    3e02:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    3e06:	83 ff       	sbrs	r24, 3
    3e08:	24 c1       	rjmp	.+584    	; 0x4052 <USB_Device_ProcessControlRequest+0x280>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    3e0a:	e1 ed       	ldi	r30, 0xD1	; 209
    3e0c:	f3 e1       	ldi	r31, 0x13	; 19
    3e0e:	20 81       	ld	r18, Z

		switch (USB_ControlRequest.bRequest)
    3e10:	31 81       	ldd	r19, Z+1	; 0x01
    3e12:	83 2f       	mov	r24, r19
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	8a 30       	cpi	r24, 0x0A	; 10
    3e18:	91 05       	cpc	r25, r1
    3e1a:	08 f0       	brcs	.+2      	; 0x3e1e <USB_Device_ProcessControlRequest+0x4c>
    3e1c:	1a c1       	rjmp	.+564    	; 0x4052 <USB_Device_ProcessControlRequest+0x280>
    3e1e:	fc 01       	movw	r30, r24
    3e20:	e4 53       	subi	r30, 0x34	; 52
    3e22:	ff 4f       	sbci	r31, 0xFF	; 255
    3e24:	0c 94 84 82 	jmp	0x10508	; 0x10508 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3e28:	20 38       	cpi	r18, 0x80	; 128
    3e2a:	21 f0       	breq	.+8      	; 0x3e34 <USB_Device_ProcessControlRequest+0x62>
    3e2c:	22 38       	cpi	r18, 0x82	; 130
    3e2e:	09 f0       	breq	.+2      	; 0x3e32 <USB_Device_ProcessControlRequest+0x60>
    3e30:	10 c1       	rjmp	.+544    	; 0x4052 <USB_Device_ProcessControlRequest+0x280>
    3e32:	08 c0       	rjmp	.+16     	; 0x3e44 <USB_Device_ProcessControlRequest+0x72>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    3e34:	80 91 cd 13 	lds	r24, 0x13CD
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    3e38:	90 91 ce 13 	lds	r25, 0x13CE
    3e3c:	99 23       	and	r25, r25
    3e3e:	71 f0       	breq	.+28     	; 0x3e5c <USB_Device_ProcessControlRequest+0x8a>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    3e40:	82 60       	ori	r24, 0x02	; 2
    3e42:	0c c0       	rjmp	.+24     	; 0x3e5c <USB_Device_ProcessControlRequest+0x8a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3e44:	80 91 d5 13 	lds	r24, 0x13D5
    3e48:	8f 70       	andi	r24, 0x0F	; 15
    3e4a:	e9 ee       	ldi	r30, 0xE9	; 233
    3e4c:	f0 e0       	ldi	r31, 0x00	; 0
    3e4e:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    3e50:	80 91 eb 00 	lds	r24, 0x00EB
    3e54:	85 fb       	bst	r24, 5
    3e56:	88 27       	eor	r24, r24
    3e58:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3e5a:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3e5c:	e8 ee       	ldi	r30, 0xE8	; 232
    3e5e:	f0 e0       	ldi	r31, 0x00	; 0
    3e60:	90 81       	ld	r25, Z
    3e62:	97 7f       	andi	r25, 0xF7	; 247
    3e64:	90 83       	st	Z, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    3e66:	a1 ef       	ldi	r26, 0xF1	; 241
    3e68:	b0 e0       	ldi	r27, 0x00	; 0
    3e6a:	8c 93       	st	X, r24
				UEDATX = (Data >> 8);
    3e6c:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    3e6e:	80 81       	ld	r24, Z
    3e70:	8e 77       	andi	r24, 0x7E	; 126
    3e72:	80 83       	st	Z, r24
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    3e74:	cb dd       	rcall	.-1130   	; 0x3a0c <Endpoint_ClearStatusStage>
    3e76:	ed c0       	rjmp	.+474    	; 0x4052 <USB_Device_ProcessControlRequest+0x280>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3e78:	22 23       	and	r18, r18
    3e7a:	09 f4       	brne	.+2      	; 0x3e7e <USB_Device_ProcessControlRequest+0xac>
    3e7c:	f9 c0       	rjmp	.+498    	; 0x4070 <USB_Device_ProcessControlRequest+0x29e>
    3e7e:	22 30       	cpi	r18, 0x02	; 2
    3e80:	09 f0       	breq	.+2      	; 0x3e84 <USB_Device_ProcessControlRequest+0xb2>
    3e82:	e7 c0       	rjmp	.+462    	; 0x4052 <USB_Device_ProcessControlRequest+0x280>
    3e84:	fa c0       	rjmp	.+500    	; 0x407a <USB_Device_ProcessControlRequest+0x2a8>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    3e86:	81 e0       	ldi	r24, 0x01	; 1
    3e88:	33 30       	cpi	r19, 0x03	; 3
    3e8a:	09 f0       	breq	.+2      	; 0x3e8e <USB_Device_ProcessControlRequest+0xbc>
    3e8c:	80 e0       	ldi	r24, 0x00	; 0
    3e8e:	80 93 ce 13 	sts	0x13CE, r24
    3e92:	29 c0       	rjmp	.+82     	; 0x3ee6 <USB_Device_ProcessControlRequest+0x114>
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    3e94:	80 91 d5 13 	lds	r24, 0x13D5
    3e98:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    3e9a:	09 f4       	brne	.+2      	; 0x3e9e <USB_Device_ProcessControlRequest+0xcc>
    3e9c:	da c0       	rjmp	.+436    	; 0x4052 <USB_Device_ProcessControlRequest+0x280>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3e9e:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    3ea2:	90 91 eb 00 	lds	r25, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    3ea6:	90 ff       	sbrs	r25, 0
    3ea8:	1e c0       	rjmp	.+60     	; 0x3ee6 <USB_Device_ProcessControlRequest+0x114>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    3eaa:	90 91 d2 13 	lds	r25, 0x13D2
    3eae:	93 30       	cpi	r25, 0x03	; 3
    3eb0:	31 f4       	brne	.+12     	; 0x3ebe <USB_Device_ProcessControlRequest+0xec>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    3eb2:	eb ee       	ldi	r30, 0xEB	; 235
    3eb4:	f0 e0       	ldi	r31, 0x00	; 0
    3eb6:	80 81       	ld	r24, Z
    3eb8:	80 62       	ori	r24, 0x20	; 32
    3eba:	80 83       	st	Z, r24
    3ebc:	14 c0       	rjmp	.+40     	; 0x3ee6 <USB_Device_ProcessControlRequest+0x114>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    3ebe:	eb ee       	ldi	r30, 0xEB	; 235
    3ec0:	f0 e0       	ldi	r31, 0x00	; 0
    3ec2:	90 81       	ld	r25, Z
    3ec4:	90 61       	ori	r25, 0x10	; 16
    3ec6:	90 83       	st	Z, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    3ec8:	21 e0       	ldi	r18, 0x01	; 1
    3eca:	30 e0       	ldi	r19, 0x00	; 0
    3ecc:	a9 01       	movw	r20, r18
    3ece:	02 c0       	rjmp	.+4      	; 0x3ed4 <USB_Device_ProcessControlRequest+0x102>
    3ed0:	44 0f       	add	r20, r20
    3ed2:	55 1f       	adc	r21, r21
    3ed4:	8a 95       	dec	r24
    3ed6:	e2 f7       	brpl	.-8      	; 0x3ed0 <USB_Device_ProcessControlRequest+0xfe>
    3ed8:	aa ee       	ldi	r26, 0xEA	; 234
    3eda:	b0 e0       	ldi	r27, 0x00	; 0
    3edc:	4c 93       	st	X, r20
				UERST = 0;
    3ede:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    3ee0:	80 81       	ld	r24, Z
    3ee2:	88 60       	ori	r24, 0x08	; 8
    3ee4:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3ee6:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3eea:	e8 ee       	ldi	r30, 0xE8	; 232
    3eec:	f0 e0       	ldi	r31, 0x00	; 0
    3eee:	80 81       	ld	r24, Z
    3ef0:	87 7f       	andi	r24, 0xF7	; 247
    3ef2:	80 83       	st	Z, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    3ef4:	8b dd       	rcall	.-1258   	; 0x3a0c <Endpoint_ClearStatusStage>
    3ef6:	ad c0       	rjmp	.+346    	; 0x4052 <USB_Device_ProcessControlRequest+0x280>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    3ef8:	21 11       	cpse	r18, r1
    3efa:	ab c0       	rjmp	.+342    	; 0x4052 <USB_Device_ProcessControlRequest+0x280>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    3efc:	10 91 d3 13 	lds	r17, 0x13D3
    3f00:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    3f02:	e3 ee       	ldi	r30, 0xE3	; 227
    3f04:	f0 e0       	ldi	r31, 0x00	; 0
    3f06:	80 81       	ld	r24, Z
    3f08:	80 78       	andi	r24, 0x80	; 128
    3f0a:	81 2b       	or	r24, r17
    3f0c:	80 83       	st	Z, r24
    3f0e:	e8 ee       	ldi	r30, 0xE8	; 232
    3f10:	f0 e0       	ldi	r31, 0x00	; 0
    3f12:	80 81       	ld	r24, Z
    3f14:	87 7f       	andi	r24, 0xF7	; 247
    3f16:	80 83       	st	Z, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    3f18:	79 dd       	rcall	.-1294   	; 0x3a0c <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3f1a:	e8 ee       	ldi	r30, 0xE8	; 232
    3f1c:	f0 e0       	ldi	r31, 0x00	; 0
    3f1e:	80 81       	ld	r24, Z

	while (!(Endpoint_IsINReady()));
    3f20:	80 ff       	sbrs	r24, 0
    3f22:	fd cf       	rjmp	.-6      	; 0x3f1e <USB_Device_ProcessControlRequest+0x14c>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    3f24:	e3 ee       	ldi	r30, 0xE3	; 227
    3f26:	f0 e0       	ldi	r31, 0x00	; 0
    3f28:	80 81       	ld	r24, Z
    3f2a:	80 68       	ori	r24, 0x80	; 128
    3f2c:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    3f2e:	11 11       	cpse	r17, r1
    3f30:	02 c0       	rjmp	.+4      	; 0x3f36 <USB_Device_ProcessControlRequest+0x164>
    3f32:	82 e0       	ldi	r24, 0x02	; 2
    3f34:	01 c0       	rjmp	.+2      	; 0x3f38 <USB_Device_ProcessControlRequest+0x166>
    3f36:	83 e0       	ldi	r24, 0x03	; 3
    3f38:	80 93 d0 13 	sts	0x13D0, r24
    3f3c:	8a c0       	rjmp	.+276    	; 0x4052 <USB_Device_ProcessControlRequest+0x280>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3f3e:	20 58       	subi	r18, 0x80	; 128
    3f40:	22 30       	cpi	r18, 0x02	; 2
    3f42:	08 f0       	brcs	.+2      	; 0x3f46 <USB_Device_ProcessControlRequest+0x174>
    3f44:	86 c0       	rjmp	.+268    	; 0x4052 <USB_Device_ProcessControlRequest+0x280>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    3f46:	80 91 d3 13 	lds	r24, 0x13D3
    3f4a:	90 91 d4 13 	lds	r25, 0x13D4
    3f4e:	8c 3d       	cpi	r24, 0xDC	; 220
    3f50:	53 e0       	ldi	r21, 0x03	; 3
    3f52:	95 07       	cpc	r25, r21
    3f54:	99 f5       	brne	.+102    	; 0x3fbc <USB_Device_ProcessControlRequest+0x1ea>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    3f56:	83 e0       	ldi	r24, 0x03	; 3
    3f58:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    3f5a:	8a e2       	ldi	r24, 0x2A	; 42
    3f5c:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    3f5e:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    3f60:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    3f62:	de 01       	movw	r26, r28
    3f64:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    3f66:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    3f68:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    3f6a:	41 e2       	ldi	r20, 0x21	; 33
    3f6c:	e3 2f       	mov	r30, r19
    3f6e:	f0 e0       	ldi	r31, 0x00	; 0
    3f70:	40 93 57 00 	sts	0x0057, r20
    3f74:	84 91       	lpm	r24, Z

					if (SerialCharNum & 0x01)
    3f76:	20 ff       	sbrs	r18, 0
    3f78:	03 c0       	rjmp	.+6      	; 0x3f80 <USB_Device_ProcessControlRequest+0x1ae>
					{
						SerialByte >>= 4;
    3f7a:	82 95       	swap	r24
    3f7c:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    3f7e:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    3f80:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    3f82:	8a 30       	cpi	r24, 0x0A	; 10
    3f84:	18 f0       	brcs	.+6      	; 0x3f8c <USB_Device_ProcessControlRequest+0x1ba>
    3f86:	90 e0       	ldi	r25, 0x00	; 0
    3f88:	c7 96       	adiw	r24, 0x37	; 55
    3f8a:	02 c0       	rjmp	.+4      	; 0x3f90 <USB_Device_ProcessControlRequest+0x1be>
    3f8c:	90 e0       	ldi	r25, 0x00	; 0
    3f8e:	c0 96       	adiw	r24, 0x30	; 48
    3f90:	8d 93       	st	X+, r24
    3f92:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    3f94:	2f 5f       	subi	r18, 0xFF	; 255
    3f96:	24 31       	cpi	r18, 0x14	; 20
    3f98:	49 f7       	brne	.-46     	; 0x3f6c <USB_Device_ProcessControlRequest+0x19a>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    3f9a:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3f9c:	08 ee       	ldi	r16, 0xE8	; 232
    3f9e:	10 e0       	ldi	r17, 0x00	; 0
    3fa0:	f8 01       	movw	r30, r16
    3fa2:	80 81       	ld	r24, Z
    3fa4:	87 7f       	andi	r24, 0xF7	; 247
    3fa6:	80 83       	st	Z, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    3fa8:	6a e2       	ldi	r22, 0x2A	; 42
    3faa:	70 e0       	ldi	r23, 0x00	; 0
    3fac:	ce 01       	movw	r24, r28
    3fae:	01 96       	adiw	r24, 0x01	; 1
    3fb0:	c8 db       	rcall	.-2160   	; 0x3742 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3fb2:	f8 01       	movw	r30, r16
    3fb4:	80 81       	ld	r24, Z
    3fb6:	8b 77       	andi	r24, 0x7B	; 123
    3fb8:	80 83       	st	Z, r24
    3fba:	4b c0       	rjmp	.+150    	; 0x4052 <USB_Device_ProcessControlRequest+0x280>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    3fbc:	ae 01       	movw	r20, r28
    3fbe:	4f 5f       	subi	r20, 0xFF	; 255
    3fc0:	5f 4f       	sbci	r21, 0xFF	; 255
    3fc2:	60 91 d5 13 	lds	r22, 0x13D5
    3fc6:	6b d0       	rcall	.+214    	; 0x409e <CALLBACK_USB_GetDescriptor>
    3fc8:	bc 01       	movw	r22, r24
    3fca:	89 2b       	or	r24, r25
    3fcc:	09 f4       	brne	.+2      	; 0x3fd0 <USB_Device_ProcessControlRequest+0x1fe>
    3fce:	41 c0       	rjmp	.+130    	; 0x4052 <USB_Device_ProcessControlRequest+0x280>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3fd0:	08 ee       	ldi	r16, 0xE8	; 232
    3fd2:	10 e0       	ldi	r17, 0x00	; 0
    3fd4:	f8 01       	movw	r30, r16
    3fd6:	90 81       	ld	r25, Z
    3fd8:	97 7f       	andi	r25, 0xF7	; 247
    3fda:	90 83       	st	Z, r25
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    3fdc:	89 81       	ldd	r24, Y+1	; 0x01
    3fde:	9a 81       	ldd	r25, Y+2	; 0x02
    3fe0:	2f dc       	rcall	.-1954   	; 0x3840 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3fe2:	f8 01       	movw	r30, r16
    3fe4:	80 81       	ld	r24, Z
    3fe6:	8b 77       	andi	r24, 0x7B	; 123
    3fe8:	80 83       	st	Z, r24
    3fea:	33 c0       	rjmp	.+102    	; 0x4052 <USB_Device_ProcessControlRequest+0x280>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    3fec:	20 38       	cpi	r18, 0x80	; 128
    3fee:	89 f5       	brne	.+98     	; 0x4052 <USB_Device_ProcessControlRequest+0x280>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    3ff0:	e8 ee       	ldi	r30, 0xE8	; 232
    3ff2:	f0 e0       	ldi	r31, 0x00	; 0
    3ff4:	80 81       	ld	r24, Z
    3ff6:	87 7f       	andi	r24, 0xF7	; 247
    3ff8:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    3ffa:	80 91 cc 13 	lds	r24, 0x13CC
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    3ffe:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4002:	80 81       	ld	r24, Z
    4004:	8e 77       	andi	r24, 0x7E	; 126
    4006:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    4008:	01 dd       	rcall	.-1534   	; 0x3a0c <Endpoint_ClearStatusStage>
    400a:	23 c0       	rjmp	.+70     	; 0x4052 <USB_Device_ProcessControlRequest+0x280>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    400c:	21 11       	cpse	r18, r1
    400e:	21 c0       	rjmp	.+66     	; 0x4052 <USB_Device_ProcessControlRequest+0x280>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    4010:	80 91 d3 13 	lds	r24, 0x13D3
    4014:	82 30       	cpi	r24, 0x02	; 2
    4016:	e8 f4       	brcc	.+58     	; 0x4052 <USB_Device_ProcessControlRequest+0x280>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    4018:	e8 ee       	ldi	r30, 0xE8	; 232
    401a:	f0 e0       	ldi	r31, 0x00	; 0
    401c:	80 81       	ld	r24, Z
    401e:	87 7f       	andi	r24, 0xF7	; 247
    4020:	80 83       	st	Z, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    4022:	80 91 d3 13 	lds	r24, 0x13D3
    4026:	80 93 cc 13 	sts	0x13CC, r24

	Endpoint_ClearStatusStage();
    402a:	f0 dc       	rcall	.-1568   	; 0x3a0c <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    402c:	80 91 cc 13 	lds	r24, 0x13CC
    4030:	88 23       	and	r24, r24
    4032:	21 f0       	breq	.+8      	; 0x403c <USB_Device_ProcessControlRequest+0x26a>
	  USB_DeviceState = DEVICE_STATE_Configured;
    4034:	84 e0       	ldi	r24, 0x04	; 4
    4036:	80 93 d0 13 	sts	0x13D0, r24
    403a:	09 c0       	rjmp	.+18     	; 0x404e <USB_Device_ProcessControlRequest+0x27c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    403c:	80 91 e3 00 	lds	r24, 0x00E3
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    4040:	88 23       	and	r24, r24
    4042:	14 f0       	brlt	.+4      	; 0x4048 <USB_Device_ProcessControlRequest+0x276>
    4044:	81 e0       	ldi	r24, 0x01	; 1
    4046:	01 c0       	rjmp	.+2      	; 0x404a <USB_Device_ProcessControlRequest+0x278>
    4048:	84 e0       	ldi	r24, 0x04	; 4
    404a:	80 93 d0 13 	sts	0x13D0, r24

	EVENT_USB_Device_ConfigurationChanged();
    404e:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    4052:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    4056:	83 ff       	sbrs	r24, 3
    4058:	16 c0       	rjmp	.+44     	; 0x4086 <USB_Device_ProcessControlRequest+0x2b4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    405a:	e8 ee       	ldi	r30, 0xE8	; 232
    405c:	f0 e0       	ldi	r31, 0x00	; 0
    405e:	80 81       	ld	r24, Z
    4060:	87 7f       	andi	r24, 0xF7	; 247
    4062:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    4064:	eb ee       	ldi	r30, 0xEB	; 235
    4066:	f0 e0       	ldi	r31, 0x00	; 0
    4068:	80 81       	ld	r24, Z
    406a:	80 62       	ori	r24, 0x20	; 32
    406c:	80 83       	st	Z, r24
    406e:	0b c0       	rjmp	.+22     	; 0x4086 <USB_Device_ProcessControlRequest+0x2b4>
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    4070:	80 91 d3 13 	lds	r24, 0x13D3
    4074:	81 30       	cpi	r24, 0x01	; 1
    4076:	69 f7       	brne	.-38     	; 0x4052 <USB_Device_ProcessControlRequest+0x280>
    4078:	06 cf       	rjmp	.-500    	; 0x3e86 <USB_Device_ProcessControlRequest+0xb4>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    407a:	80 91 d3 13 	lds	r24, 0x13D3
    407e:	88 23       	and	r24, r24
    4080:	09 f4       	brne	.+2      	; 0x4084 <USB_Device_ProcessControlRequest+0x2b2>
    4082:	08 cf       	rjmp	.-496    	; 0x3e94 <USB_Device_ProcessControlRequest+0xc2>
    4084:	30 cf       	rjmp	.-416    	; 0x3ee6 <USB_Device_ProcessControlRequest+0x114>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    4086:	aa 96       	adiw	r28, 0x2a	; 42
    4088:	0f b6       	in	r0, 0x3f	; 63
    408a:	f8 94       	cli
    408c:	de bf       	out	0x3e, r29	; 62
    408e:	0f be       	out	0x3f, r0	; 63
    4090:	cd bf       	out	0x3d, r28	; 61
    4092:	df 91       	pop	r29
    4094:	cf 91       	pop	r28
    4096:	1f 91       	pop	r17
    4098:	0f 91       	pop	r16
    409a:	08 95       	ret

0000409c <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    409c:	08 95       	ret

0000409e <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
    409e:	29 2f       	mov	r18, r25
    40a0:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    40a2:	22 30       	cpi	r18, 0x02	; 2
    40a4:	31 05       	cpc	r19, r1
    40a6:	59 f0       	breq	.+22     	; 0x40be <CALLBACK_USB_GetDescriptor+0x20>
    40a8:	23 30       	cpi	r18, 0x03	; 3
    40aa:	31 05       	cpc	r19, r1
    40ac:	69 f0       	breq	.+26     	; 0x40c8 <CALLBACK_USB_GetDescriptor+0x2a>
    40ae:	21 30       	cpi	r18, 0x01	; 1
    40b0:	31 05       	cpc	r19, r1
    40b2:	29 f5       	brne	.+74     	; 0x40fe <CALLBACK_USB_GetDescriptor+0x60>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    40b4:	82 e1       	ldi	r24, 0x12	; 18
    40b6:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    40b8:	22 e8       	ldi	r18, 0x82	; 130
    40ba:	33 e0       	ldi	r19, 0x03	; 3
    40bc:	29 c0       	rjmp	.+82     	; 0x4110 <CALLBACK_USB_GetDescriptor+0x72>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    40be:	85 e6       	ldi	r24, 0x65	; 101
    40c0:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    40c2:	2d e1       	ldi	r18, 0x1D	; 29
    40c4:	33 e0       	ldi	r19, 0x03	; 3
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    40c6:	24 c0       	rjmp	.+72     	; 0x4110 <CALLBACK_USB_GetDescriptor+0x72>
    40c8:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
    40ca:	81 30       	cpi	r24, 0x01	; 1
    40cc:	91 05       	cpc	r25, r1
    40ce:	59 f0       	breq	.+22     	; 0x40e6 <CALLBACK_USB_GetDescriptor+0x48>
    40d0:	82 30       	cpi	r24, 0x02	; 2
    40d2:	91 05       	cpc	r25, r1
    40d4:	71 f0       	breq	.+28     	; 0x40f2 <CALLBACK_USB_GetDescriptor+0x54>
    40d6:	89 2b       	or	r24, r25
    40d8:	b9 f4       	brne	.+46     	; 0x4108 <CALLBACK_USB_GetDescriptor+0x6a>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    40da:	e9 e1       	ldi	r30, 0x19	; 25
    40dc:	f3 e0       	ldi	r31, 0x03	; 3
    40de:	84 91       	lpm	r24, Z
    40e0:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
    40e2:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
    40e4:	15 c0       	rjmp	.+42     	; 0x4110 <CALLBACK_USB_GetDescriptor+0x72>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    40e6:	e1 e0       	ldi	r30, 0x01	; 1
    40e8:	f3 e0       	ldi	r31, 0x03	; 3
    40ea:	84 91       	lpm	r24, Z
    40ec:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
    40ee:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
    40f0:	0f c0       	rjmp	.+30     	; 0x4110 <CALLBACK_USB_GetDescriptor+0x72>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    40f2:	e3 ef       	ldi	r30, 0xF3	; 243
    40f4:	f2 e0       	ldi	r31, 0x02	; 2
    40f6:	84 91       	lpm	r24, Z
    40f8:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
    40fa:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
    40fc:	09 c0       	rjmp	.+18     	; 0x4110 <CALLBACK_USB_GetDescriptor+0x72>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    40fe:	80 e0       	ldi	r24, 0x00	; 0
    4100:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    4102:	20 e0       	ldi	r18, 0x00	; 0
    4104:	30 e0       	ldi	r19, 0x00	; 0
    4106:	04 c0       	rjmp	.+8      	; 0x4110 <CALLBACK_USB_GetDescriptor+0x72>
	uint16_t    Size    = NO_DESCRIPTOR;
    4108:	80 e0       	ldi	r24, 0x00	; 0
    410a:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    410c:	20 e0       	ldi	r18, 0x00	; 0
    410e:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
    4110:	fa 01       	movw	r30, r20
    4112:	31 83       	std	Z+1, r19	; 0x01
    4114:	20 83       	st	Z, r18
	return Size;
}
    4116:	08 95       	ret

00004118 <_Z16startUpAnimationv>:
#include "Init.h"
#include "../version/Firmware.h"

void startUpAnimation() {
    4118:	af 92       	push	r10
    411a:	bf 92       	push	r11
    411c:	df 92       	push	r13
    411e:	ef 92       	push	r14
    4120:	ff 92       	push	r15
    4122:	0f 93       	push	r16
    4124:	1f 93       	push	r17
    4126:	cf 93       	push	r28
    4128:	df 93       	push	r29
    412a:	cd b7       	in	r28, 0x3d	; 61
    412c:	de b7       	in	r29, 0x3e	; 62
    412e:	68 97       	sbiw	r28, 0x18	; 24
    4130:	0f b6       	in	r0, 0x3f	; 63
    4132:	f8 94       	cli
    4134:	de bf       	out	0x3e, r29	; 62
    4136:	0f be       	out	0x3f, r0	; 63
    4138:	cd bf       	out	0x3d, r28	; 61

    //slow down fading for effect
    #ifdef MODULE_LEDS
    leds.setFadeSpeed(1);
    413a:	61 e0       	ldi	r22, 0x01	; 1
    413c:	80 ed       	ldi	r24, 0xD0	; 208
    413e:	9e e0       	ldi	r25, 0x0E	; 14
    4140:	0e 94 79 46 	call	0x8cf2	; 0x8cf2 <_ZN4LEDs12setFadeSpeedEh>
    4144:	ce 01       	movw	r24, r28
    4146:	01 96       	adiw	r24, 0x01	; 1
    4148:	7c 01       	movw	r14, r24
    414a:	5e 01       	movw	r10, r28
    414c:	99 e1       	ldi	r25, 0x19	; 25
    414e:	a9 0e       	add	r10, r25
    4150:	b1 1c       	adc	r11, r1
    4152:	87 01       	movw	r16, r14
    4154:	d0 2e       	mov	r13, r16
    4156:	de 18       	sub	r13, r14
    ledState_t tempLedStateArray[NUMBER_OF_LEDS];

    for (int i=0; i<NUMBER_OF_LEDS; i++)    {

        //copy ledstates to temp field
        tempLedStateArray[i] = leds.getLEDstate(i);
    4158:	6d 2d       	mov	r22, r13
    415a:	80 ed       	ldi	r24, 0xD0	; 208
    415c:	9e e0       	ldi	r25, 0x0E	; 14
    415e:	0e 94 74 46 	call	0x8ce8	; 0x8ce8 <_ZN4LEDs11getLEDstateEh>
    4162:	f8 01       	movw	r30, r16
    4164:	81 93       	st	Z+, r24
    4166:	8f 01       	movw	r16, r30
        //turn all leds off
        leds.setLEDstate(i, ledStateOff);
    4168:	40 e0       	ldi	r20, 0x00	; 0
    416a:	6d 2d       	mov	r22, r13
    416c:	80 ed       	ldi	r24, 0xD0	; 208
    416e:	9e e0       	ldi	r25, 0x0E	; 14
    4170:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
    #ifdef MODULE_LEDS
    leds.setFadeSpeed(1);

    ledState_t tempLedStateArray[NUMBER_OF_LEDS];

    for (int i=0; i<NUMBER_OF_LEDS; i++)    {
    4174:	0a 15       	cp	r16, r10
    4176:	1b 05       	cpc	r17, r11
    4178:	69 f7       	brne	.-38     	; 0x4154 <_Z16startUpAnimationv+0x3c>
        leds.setLEDstate(i, ledStateOff);

    }

    //turn all leds on slowly
    leds.allLEDsOn();
    417a:	80 ed       	ldi	r24, 0xD0	; 208
    417c:	9e e0       	ldi	r25, 0x0E	; 14
    417e:	0e 94 62 46 	call	0x8cc4	; 0x8cc4 <_ZN4LEDs9allLEDsOnEv>
    #endif

    sei();
    4182:	78 94       	sei

    #ifdef MODULE_LCD
    display.displayHelloMessage();
    4184:	82 e6       	ldi	r24, 0x62	; 98
    4186:	9c e0       	ldi	r25, 0x0C	; 12
    4188:	0e 94 3d 32 	call	0x647a	; 0x647a <_ZN3LCD19displayHelloMessageEv>
    #endif

    wait(600);
    418c:	68 e5       	ldi	r22, 0x58	; 88
    418e:	72 e0       	ldi	r23, 0x02	; 2
    4190:	80 e0       	ldi	r24, 0x00	; 0
    4192:	90 e0       	ldi	r25, 0x00	; 0
    4194:	a9 d8       	rcall	.-3758   	; 0x32e8 <_Z4waitm>
    4196:	10 e0       	ldi	r17, 0x00	; 0

    #ifdef MODULE_LEDS
    //restore led states
    for (int i=0; i<NUMBER_OF_LEDS; i++)
    leds.setLEDstate(i, tempLedStateArray[i]);
    4198:	f7 01       	movw	r30, r14
    419a:	41 91       	ld	r20, Z+
    419c:	7f 01       	movw	r14, r30
    419e:	61 2f       	mov	r22, r17
    41a0:	80 ed       	ldi	r24, 0xD0	; 208
    41a2:	9e e0       	ldi	r25, 0x0E	; 14
    41a4:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
    41a8:	1f 5f       	subi	r17, 0xFF	; 255

    wait(600);

    #ifdef MODULE_LEDS
    //restore led states
    for (int i=0; i<NUMBER_OF_LEDS; i++)
    41aa:	18 31       	cpi	r17, 0x18	; 24
    41ac:	a9 f7       	brne	.-22     	; 0x4198 <_Z16startUpAnimationv+0x80>
    leds.setLEDstate(i, tempLedStateArray[i]);

    wait(1500);
    41ae:	6c ed       	ldi	r22, 0xDC	; 220
    41b0:	75 e0       	ldi	r23, 0x05	; 5
    41b2:	80 e0       	ldi	r24, 0x00	; 0
    41b4:	90 e0       	ldi	r25, 0x00	; 0
    41b6:	98 d8       	rcall	.-3792   	; 0x32e8 <_Z4waitm>

    //restore normal fade speed
    leds.setFadeSpeed(DEFAULT_FADE_SPEED);
    41b8:	6f e0       	ldi	r22, 0x0F	; 15
    41ba:	80 ed       	ldi	r24, 0xD0	; 208
    41bc:	9e e0       	ldi	r25, 0x0E	; 14
    41be:	0e 94 79 46 	call	0x8cf2	; 0x8cf2 <_ZN4LEDs12setFadeSpeedEh>
    #endif

}
    41c2:	68 96       	adiw	r28, 0x18	; 24
    41c4:	0f b6       	in	r0, 0x3f	; 63
    41c6:	f8 94       	cli
    41c8:	de bf       	out	0x3e, r29	; 62
    41ca:	0f be       	out	0x3f, r0	; 63
    41cc:	cd bf       	out	0x3d, r28	; 61
    41ce:	df 91       	pop	r29
    41d0:	cf 91       	pop	r28
    41d2:	1f 91       	pop	r17
    41d4:	0f 91       	pop	r16
    41d6:	ff 90       	pop	r15
    41d8:	ef 90       	pop	r14
    41da:	df 90       	pop	r13
    41dc:	bf 90       	pop	r11
    41de:	af 90       	pop	r10
    41e0:	08 95       	ret

000041e2 <_Z10globalInitv>:

void globalInit() {
    41e2:	cf 93       	push	r28

    //disable watchdog
    MCUSR &= ~(1 << WDRF);
    41e4:	84 b7       	in	r24, 0x34	; 52
    41e6:	87 7f       	andi	r24, 0xF7	; 247
    41e8:	84 bf       	out	0x34, r24	; 52
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "n"  (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
    41ea:	0f b6       	in	r0, 0x3f	; 63
    41ec:	f8 94       	cli
    41ee:	a8 95       	wdr
    41f0:	80 91 60 00 	lds	r24, 0x0060
    41f4:	88 61       	ori	r24, 0x18	; 24
    41f6:	80 93 60 00 	sts	0x0060, r24
    41fa:	10 92 60 00 	sts	0x0060, r1
    41fe:	0f be       	out	0x3f, r0	; 63
    wdt_disable();

    setOutputMacro(BTLDR_BUTTON_DDR, BTLDR_BUTTON_PIN_INDEX);
    4200:	6a 9a       	sbi	0x0d, 2	; 13
    setLowMacro(BTLDR_BUTTON_PORT, BTLDR_BUTTON_PIN_INDEX);
    4202:	72 98       	cbi	0x0e, 2	; 14
    #if MODE_SERIAL > 0
    vserial.init();
    #endif

    //do not change order of initialization!
    configuration.init();
    4204:	8c e0       	ldi	r24, 0x0C	; 12
    4206:	92 e0       	ldi	r25, 0x02	; 2
    4208:	0e 94 56 0b 	call	0x16ac	; 0x16ac <_ZN13Configuration4initEv>

    #if MODE_SERIAL < 1
    midi.init();
    420c:	87 ec       	ldi	r24, 0xC7	; 199
    420e:	93 e1       	ldi	r25, 0x13	; 19
    4210:	0e 94 7f 7c 	call	0xf8fe	; 0xf8fe <_ZN4MIDI4initEv>
    #endif

    sei();
    4214:	78 94       	sei
    timers.init();
    4216:	88 e1       	ldi	r24, 0x18	; 24
    4218:	97 e0       	ldi	r25, 0x07	; 7
    421a:	0e 94 2f 18 	call	0x305e	; 0x305e <_ZN11TimerObject4initEv>

    #ifdef MODULE_LCD
    display.init();
    421e:	82 e6       	ldi	r24, 0x62	; 98
    4220:	9c e0       	ldi	r25, 0x0C	; 12
    4222:	0e 94 be 42 	call	0x857c	; 0x857c <_ZN3LCD4initEv>
    menu.init();
    4226:	89 ed       	ldi	r24, 0xD9	; 217
    4228:	98 e0       	ldi	r25, 0x08	; 8
    422a:	0e 94 8f 2c 	call	0x591e	; 0x591e <_ZN4Menu4initEv>
    #endif

    #ifdef MODULE_LEDS
    leds.init();
    422e:	80 ed       	ldi	r24, 0xD0	; 208
    4230:	9e e0       	ldi	r25, 0x0E	; 14
    4232:	0e 94 48 46 	call	0x8c90	; 0x8c90 <_ZN4LEDs4initEv>
    #endif

    pads.init();
    4236:	8a e6       	ldi	r24, 0x6A	; 106
    4238:	9f e0       	ldi	r25, 0x0F	; 15
    423a:	0e 94 37 6b 	call	0xd66e	; 0xd66e <_ZN4Pads4initEv>

    #ifdef MODULE_LEDS
    leds.displayActiveNoteLEDs();
    423e:	40 e0       	ldi	r20, 0x00	; 0
    4240:	60 e0       	ldi	r22, 0x00	; 0
    4242:	80 ed       	ldi	r24, 0xD0	; 208
    4244:	9e e0       	ldi	r25, 0x0E	; 14
    4246:	0e 94 9e 46 	call	0x8d3c	; 0x8d3c <_ZN4LEDs21displayActiveNoteLEDsEbh>
    #endif

    #if START_UP_ANIMATION > 0
    startUpAnimation();
    424a:	66 df       	rcall	.-308    	; 0x4118 <_Z16startUpAnimationv>
    #else
    sei();
    #endif

    #ifdef MODULE_LCD
    display.displayProgramAndScale(pads.getActiveProgram()+1, pads.getActiveScale());
    424c:	8a e6       	ldi	r24, 0x6A	; 106
    424e:	9f e0       	ldi	r25, 0x0F	; 15
    4250:	0e 94 f1 67 	call	0xcfe2	; 0xcfe2 <_ZN4Pads14getActiveScaleEv>
    4254:	c8 2f       	mov	r28, r24
    4256:	8a e6       	ldi	r24, 0x6A	; 106
    4258:	9f e0       	ldi	r25, 0x0F	; 15
    425a:	0e 94 ec 67 	call	0xcfd8	; 0xcfd8 <_ZN4Pads16getActiveProgramEv>
    425e:	61 e0       	ldi	r22, 0x01	; 1
    4260:	68 0f       	add	r22, r24
    4262:	4c 2f       	mov	r20, r28
    4264:	82 e6       	ldi	r24, 0x62	; 98
    4266:	9c e0       	ldi	r25, 0x0C	; 12
    4268:	0e 94 a6 38 	call	0x714c	; 0x714c <_ZN3LCD22displayProgramAndScaleEhh>
    #endif

    #ifdef MODULE_BUTTONS
    buttons.init();
    426c:	80 e4       	ldi	r24, 0x40	; 64
    426e:	98 e0       	ldi	r25, 0x08	; 8
    4270:	69 d5       	rcall	.+2770   	; 0x4d44 <_ZN7Buttons4initEv>
    #endif

    if (checkNewRevision()) {
    4272:	0e 94 13 7c 	call	0xf826	; 0xf826 <_Z16checkNewRevisionv>
    4276:	88 23       	and	r24, r24
    4278:	21 f0       	breq	.+8      	; 0x4282 <_Z10globalInitv+0xa0>

        display.displayFirmwareUpdated();
    427a:	82 e6       	ldi	r24, 0x62	; 98
    427c:	9c e0       	ldi	r25, 0x0C	; 12
    427e:	0e 94 5b 37 	call	0x6eb6	; 0x6eb6 <_ZN3LCD22displayFirmwareUpdatedEv>

    }

}
    4282:	cf 91       	pop	r28
    4284:	08 95       	ret

00004286 <_Z6rebootv>:
				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
    4286:	99 e0       	ldi	r25, 0x09	; 9
    4288:	88 e1       	ldi	r24, 0x18	; 24
    428a:	0f b6       	in	r0, 0x3f	; 63
    428c:	f8 94       	cli
    428e:	a8 95       	wdr
    4290:	80 93 60 00 	sts	0x0060, r24
    4294:	0f be       	out	0x3f, r0	; 63
    4296:	90 93 60 00 	sts	0x0060, r25

void reboot()   {
    429a:	ff cf       	rjmp	.-2      	; 0x429a <_Z6rebootv+0x14>

0000429c <_ZN7Buttons18getTonicFromButtonEh>:

#include "../../midi/MIDI.h"

note_t Buttons::getTonicFromButton(uint8_t buttonNumber)   {

    switch(buttonNumber)    {
    429c:	86 2f       	mov	r24, r22
    429e:	90 e0       	ldi	r25, 0x00	; 0
    42a0:	84 31       	cpi	r24, 0x14	; 20
    42a2:	91 05       	cpc	r25, r1
    42a4:	d8 f4       	brcc	.+54     	; 0x42dc <_ZN7Buttons18getTonicFromButtonEh+0x40>
    42a6:	fc 01       	movw	r30, r24
    42a8:	ea 52       	subi	r30, 0x2A	; 42
    42aa:	ff 4f       	sbci	r31, 0xFF	; 255
    42ac:	0c 94 84 82 	jmp	0x10508	; 0x10508 <__tablejump2__>

        case BUTTON_NOTE_C:
        return C;

        case BUTTON_NOTE_C_SHARP:
        return C_SHARP;
    42b0:	81 e0       	ldi	r24, 0x01	; 1
    42b2:	08 95       	ret

        case BUTTON_NOTE_D:
        return D;
    42b4:	82 e0       	ldi	r24, 0x02	; 2
    42b6:	08 95       	ret

        case BUTTON_NOTE_D_SHARP:
        return D_SHARP;
    42b8:	83 e0       	ldi	r24, 0x03	; 3
    42ba:	08 95       	ret

        case BUTTON_NOTE_E:
        return E;
    42bc:	84 e0       	ldi	r24, 0x04	; 4
    42be:	08 95       	ret

        case BUTTON_NOTE_F:
        return F;
    42c0:	85 e0       	ldi	r24, 0x05	; 5
    42c2:	08 95       	ret

        case BUTTON_NOTE_F_SHARP:
        return F_SHARP;
    42c4:	86 e0       	ldi	r24, 0x06	; 6
    42c6:	08 95       	ret

        case BUTTON_NOTE_G:
        return G;
    42c8:	87 e0       	ldi	r24, 0x07	; 7
    42ca:	08 95       	ret

        case BUTTON_NOTE_G_SHARP:
        return G_SHARP;
    42cc:	88 e0       	ldi	r24, 0x08	; 8
    42ce:	08 95       	ret

        case BUTTON_NOTE_A:
        return A;
    42d0:	89 e0       	ldi	r24, 0x09	; 9
    42d2:	08 95       	ret

        case BUTTON_NOTE_A_SHARP:
        return A_SHARP;
    42d4:	8a e0       	ldi	r24, 0x0A	; 10
    42d6:	08 95       	ret

        case BUTTON_NOTE_B:
        return B;
    42d8:	8b e0       	ldi	r24, 0x0B	; 11
    42da:	08 95       	ret

    }   return MIDI_NOTES;   //impossible case
    42dc:	8c e0       	ldi	r24, 0x0C	; 12
    42de:	08 95       	ret
note_t Buttons::getTonicFromButton(uint8_t buttonNumber)   {

    switch(buttonNumber)    {

        case BUTTON_NOTE_C:
        return C;
    42e0:	80 e0       	ldi	r24, 0x00	; 0
        case BUTTON_NOTE_B:
        return B;

    }   return MIDI_NOTES;   //impossible case

}
    42e2:	08 95       	ret

000042e4 <_ZN7Buttons16handleOnOffEventEhb>:

void Buttons::handleOnOffEvent(uint8_t buttonNumber, bool state)    {
    42e4:	0f 93       	push	r16
    42e6:	cf 93       	push	r28
    42e8:	df 93       	push	r29
    42ea:	c6 2f       	mov	r28, r22
    42ec:	d4 2f       	mov	r29, r20

    if (pads.editModeActive()) return;
    42ee:	8a e6       	ldi	r24, 0x6A	; 106
    42f0:	9f e0       	ldi	r25, 0x0F	; 15
    42f2:	0e 94 8c 56 	call	0xad18	; 0xad18 <_ZN4Pads14editModeActiveEv>
    42f6:	81 11       	cpse	r24, r1
    42f8:	a1 c0       	rjmp	.+322    	; 0x443c <_ZN7Buttons16handleOnOffEventEhb+0x158>
    //determine action based on pressed button

    uint8_t ledNumber = 0;
    onOff_t lcdMessageType;
    ledState_t ledState = ledStateOff;
    uint8_t lastTouchedPad = pads.getLastTouchedPad();
    42fa:	8a e6       	ldi	r24, 0x6A	; 106
    42fc:	9f e0       	ldi	r25, 0x0F	; 15
    42fe:	0e 94 38 69 	call	0xd270	; 0xd270 <_ZN4Pads17getLastTouchedPadEv>
    4302:	08 2f       	mov	r16, r24

    switch (buttonNumber)    {
    4304:	cd 31       	cpi	r28, 0x1D	; 29
    4306:	31 f1       	breq	.+76     	; 0x4354 <_ZN7Buttons16handleOnOffEventEhb+0x70>
    4308:	30 f4       	brcc	.+12     	; 0x4316 <_ZN7Buttons16handleOnOffEventEhb+0x32>
    430a:	cb 31       	cpi	r28, 0x1B	; 27
    430c:	09 f4       	brne	.+2      	; 0x4310 <_ZN7Buttons16handleOnOffEventEhb+0x2c>
    430e:	5b c0       	rjmp	.+182    	; 0x43c6 <_ZN7Buttons16handleOnOffEventEhb+0xe2>
    4310:	cc 31       	cpi	r28, 0x1C	; 28
    4312:	39 f0       	breq	.+14     	; 0x4322 <_ZN7Buttons16handleOnOffEventEhb+0x3e>
    4314:	93 c0       	rjmp	.+294    	; 0x443c <_ZN7Buttons16handleOnOffEventEhb+0x158>
    4316:	ce 31       	cpi	r28, 0x1E	; 30
    4318:	81 f1       	breq	.+96     	; 0x437a <_ZN7Buttons16handleOnOffEventEhb+0x96>
    431a:	cf 31       	cpi	r28, 0x1F	; 31
    431c:	09 f4       	brne	.+2      	; 0x4320 <_ZN7Buttons16handleOnOffEventEhb+0x3c>
    431e:	40 c0       	rjmp	.+128    	; 0x43a0 <_ZN7Buttons16handleOnOffEventEhb+0xbc>
    4320:	8d c0       	rjmp	.+282    	; 0x443c <_ZN7Buttons16handleOnOffEventEhb+0x158>

        case BUTTON_ON_OFF_NOTES:
        ledNumber = LED_ON_OFF_NOTES;
        if (!state)  {
    4322:	d1 11       	cpse	r29, r1
    4324:	10 c0       	rjmp	.+32     	; 0x4346 <_ZN7Buttons16handleOnOffEventEhb+0x62>

            pads.midiSendOnOff(onOff_notes);
    4326:	60 e0       	ldi	r22, 0x00	; 0
    4328:	8a e6       	ldi	r24, 0x6A	; 106
    432a:	9f e0       	ldi	r25, 0x0F	; 15
    432c:	0e 94 39 78 	call	0xf072	; 0xf072 <_ZN4Pads13midiSendOnOffE7onOff_t>
            lcdMessageType = onOff_notes;
            if (pads.getMIDISendState(onOff_notes, lastTouchedPad)) ledState = ledStateFull; else ledState = ledStateOff;
    4330:	40 2f       	mov	r20, r16
    4332:	60 e0       	ldi	r22, 0x00	; 0
    4334:	8a e6       	ldi	r24, 0x6A	; 106
    4336:	9f e0       	ldi	r25, 0x0F	; 15
    4338:	0e 94 bc 67 	call	0xcf78	; 0xcf78 <_ZN4Pads16getMIDISendStateE7onOff_th>
    433c:	81 11       	cpse	r24, r1
    433e:	5a c0       	rjmp	.+180    	; 0x43f4 <_ZN7Buttons16handleOnOffEventEhb+0x110>
    4340:	c0 e0       	ldi	r28, 0x00	; 0
    uint8_t lastTouchedPad = pads.getLastTouchedPad();

    switch (buttonNumber)    {

        case BUTTON_ON_OFF_NOTES:
        ledNumber = LED_ON_OFF_NOTES;
    4342:	62 e0       	ldi	r22, 0x02	; 2
    4344:	6a c0       	rjmp	.+212    	; 0x441a <_ZN7Buttons16handleOnOffEventEhb+0x136>
            lcdMessageType = onOff_notes;
            if (pads.getMIDISendState(onOff_notes, lastTouchedPad)) ledState = ledStateFull; else ledState = ledStateOff;

        }   else {

            leds.setLEDstate(ledNumber, ledStateBlink);
    4346:	43 e0       	ldi	r20, 0x03	; 3
    4348:	62 e0       	ldi	r22, 0x02	; 2
    434a:	80 ed       	ldi	r24, 0xD0	; 208
    434c:	9e e0       	ldi	r25, 0x0E	; 14
    434e:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
            return;
    4352:	74 c0       	rjmp	.+232    	; 0x443c <_ZN7Buttons16handleOnOffEventEhb+0x158>

        }
        break;

        case BUTTON_ON_OFF_AFTERTOUCH:
        if (!state)  {
    4354:	d1 11       	cpse	r29, r1
    4356:	72 c0       	rjmp	.+228    	; 0x443c <_ZN7Buttons16handleOnOffEventEhb+0x158>

            pads.midiSendOnOff(onOff_aftertouch);
    4358:	61 e0       	ldi	r22, 0x01	; 1
    435a:	8a e6       	ldi	r24, 0x6A	; 106
    435c:	9f e0       	ldi	r25, 0x0F	; 15
    435e:	0e 94 39 78 	call	0xf072	; 0xf072 <_ZN4Pads13midiSendOnOffE7onOff_t>
            lcdMessageType = onOff_aftertouch;
            ledNumber = LED_ON_OFF_AFTERTOUCH;
            if (pads.getMIDISendState(onOff_aftertouch, lastTouchedPad)) ledState = ledStateFull; else ledState = ledStateOff;
    4362:	40 2f       	mov	r20, r16
    4364:	61 e0       	ldi	r22, 0x01	; 1
    4366:	8a e6       	ldi	r24, 0x6A	; 106
    4368:	9f e0       	ldi	r25, 0x0F	; 15
    436a:	0e 94 bc 67 	call	0xcf78	; 0xcf78 <_ZN4Pads16getMIDISendStateE7onOff_th>
    436e:	81 11       	cpse	r24, r1
    4370:	45 c0       	rjmp	.+138    	; 0x43fc <_ZN7Buttons16handleOnOffEventEhb+0x118>
    4372:	c0 e0       	ldi	r28, 0x00	; 0

        case BUTTON_ON_OFF_AFTERTOUCH:
        if (!state)  {

            pads.midiSendOnOff(onOff_aftertouch);
            lcdMessageType = onOff_aftertouch;
    4374:	d1 e0       	ldi	r29, 0x01	; 1
            ledNumber = LED_ON_OFF_AFTERTOUCH;
    4376:	61 e0       	ldi	r22, 0x01	; 1
    4378:	50 c0       	rjmp	.+160    	; 0x441a <_ZN7Buttons16handleOnOffEventEhb+0x136>

        }   else return;
        break;

        case BUTTON_ON_OFF_X:
        if (!state)  {
    437a:	d1 11       	cpse	r29, r1
    437c:	5f c0       	rjmp	.+190    	; 0x443c <_ZN7Buttons16handleOnOffEventEhb+0x158>

            pads.midiSendOnOff(onOff_x);
    437e:	62 e0       	ldi	r22, 0x02	; 2
    4380:	8a e6       	ldi	r24, 0x6A	; 106
    4382:	9f e0       	ldi	r25, 0x0F	; 15
    4384:	0e 94 39 78 	call	0xf072	; 0xf072 <_ZN4Pads13midiSendOnOffE7onOff_t>
            lcdMessageType = onOff_x;
            ledNumber = LED_ON_OFF_X;
            if (pads.getMIDISendState(onOff_x, lastTouchedPad)) ledState = ledStateFull; else ledState = ledStateOff;
    4388:	40 2f       	mov	r20, r16
    438a:	62 e0       	ldi	r22, 0x02	; 2
    438c:	8a e6       	ldi	r24, 0x6A	; 106
    438e:	9f e0       	ldi	r25, 0x0F	; 15
    4390:	0e 94 bc 67 	call	0xcf78	; 0xcf78 <_ZN4Pads16getMIDISendStateE7onOff_th>
    4394:	81 11       	cpse	r24, r1
    4396:	36 c0       	rjmp	.+108    	; 0x4404 <_ZN7Buttons16handleOnOffEventEhb+0x120>
    4398:	c0 e0       	ldi	r28, 0x00	; 0

        case BUTTON_ON_OFF_X:
        if (!state)  {

            pads.midiSendOnOff(onOff_x);
            lcdMessageType = onOff_x;
    439a:	d2 e0       	ldi	r29, 0x02	; 2
            ledNumber = LED_ON_OFF_X;
    439c:	63 e0       	ldi	r22, 0x03	; 3
    439e:	3d c0       	rjmp	.+122    	; 0x441a <_ZN7Buttons16handleOnOffEventEhb+0x136>

        }   else return;
        break;

        case BUTTON_ON_OFF_Y:
        if (!state)  {
    43a0:	d1 11       	cpse	r29, r1
    43a2:	4c c0       	rjmp	.+152    	; 0x443c <_ZN7Buttons16handleOnOffEventEhb+0x158>

            pads.midiSendOnOff(onOff_y);
    43a4:	63 e0       	ldi	r22, 0x03	; 3
    43a6:	8a e6       	ldi	r24, 0x6A	; 106
    43a8:	9f e0       	ldi	r25, 0x0F	; 15
    43aa:	0e 94 39 78 	call	0xf072	; 0xf072 <_ZN4Pads13midiSendOnOffE7onOff_t>
            lcdMessageType = onOff_y;
            ledNumber = LED_ON_OFF_Y;
            if (pads.getMIDISendState(onOff_y, lastTouchedPad)) ledState = ledStateFull; else ledState = ledStateOff;
    43ae:	40 2f       	mov	r20, r16
    43b0:	63 e0       	ldi	r22, 0x03	; 3
    43b2:	8a e6       	ldi	r24, 0x6A	; 106
    43b4:	9f e0       	ldi	r25, 0x0F	; 15
    43b6:	0e 94 bc 67 	call	0xcf78	; 0xcf78 <_ZN4Pads16getMIDISendStateE7onOff_th>
    43ba:	81 11       	cpse	r24, r1
    43bc:	27 c0       	rjmp	.+78     	; 0x440c <_ZN7Buttons16handleOnOffEventEhb+0x128>
    43be:	c0 e0       	ldi	r28, 0x00	; 0

        case BUTTON_ON_OFF_Y:
        if (!state)  {

            pads.midiSendOnOff(onOff_y);
            lcdMessageType = onOff_y;
    43c0:	d3 e0       	ldi	r29, 0x03	; 3
            ledNumber = LED_ON_OFF_Y;
    43c2:	60 e0       	ldi	r22, 0x00	; 0
    43c4:	2a c0       	rjmp	.+84     	; 0x441a <_ZN7Buttons16handleOnOffEventEhb+0x136>
        }   else return;
        break;

        case BUTTON_ON_OFF_SPLIT:
        ledNumber = LED_ON_OFF_SPLIT;
        if (!state)  {
    43c6:	d1 11       	cpse	r29, r1
    43c8:	0e c0       	rjmp	.+28     	; 0x43e6 <_ZN7Buttons16handleOnOffEventEhb+0x102>

            pads.splitOnOff();
    43ca:	8a e6       	ldi	r24, 0x6A	; 106
    43cc:	9f e0       	ldi	r25, 0x0F	; 15
    43ce:	0e 94 22 6d 	call	0xda44	; 0xda44 <_ZN4Pads10splitOnOffEv>
            lcdMessageType = onOff_split;
            pads.getSplitState() ? ledState = ledStateFull : ledState = ledStateOff;
    43d2:	8a e6       	ldi	r24, 0x6A	; 106
    43d4:	9f e0       	ldi	r25, 0x0F	; 15
    43d6:	0e 94 e7 67 	call	0xcfce	; 0xcfce <_ZN4Pads13getSplitStateEv>
    43da:	81 11       	cpse	r24, r1
    43dc:	1b c0       	rjmp	.+54     	; 0x4414 <_ZN7Buttons16handleOnOffEventEhb+0x130>
    43de:	c0 e0       	ldi	r28, 0x00	; 0
        case BUTTON_ON_OFF_SPLIT:
        ledNumber = LED_ON_OFF_SPLIT;
        if (!state)  {

            pads.splitOnOff();
            lcdMessageType = onOff_split;
    43e0:	d4 e0       	ldi	r29, 0x04	; 4

        }   else return;
        break;

        case BUTTON_ON_OFF_SPLIT:
        ledNumber = LED_ON_OFF_SPLIT;
    43e2:	66 e0       	ldi	r22, 0x06	; 6
    43e4:	1a c0       	rjmp	.+52     	; 0x441a <_ZN7Buttons16handleOnOffEventEhb+0x136>
            lcdMessageType = onOff_split;
            pads.getSplitState() ? ledState = ledStateFull : ledState = ledStateOff;

        }   else {

            leds.setLEDstate(ledNumber, ledStateBlink);
    43e6:	43 e0       	ldi	r20, 0x03	; 3
    43e8:	66 e0       	ldi	r22, 0x06	; 6
    43ea:	80 ed       	ldi	r24, 0xD0	; 208
    43ec:	9e e0       	ldi	r25, 0x0E	; 14
    43ee:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
            return;
    43f2:	24 c0       	rjmp	.+72     	; 0x443c <_ZN7Buttons16handleOnOffEventEhb+0x158>
        ledNumber = LED_ON_OFF_NOTES;
        if (!state)  {

            pads.midiSendOnOff(onOff_notes);
            lcdMessageType = onOff_notes;
            if (pads.getMIDISendState(onOff_notes, lastTouchedPad)) ledState = ledStateFull; else ledState = ledStateOff;
    43f4:	c2 e0       	ldi	r28, 0x02	; 2
        case BUTTON_ON_OFF_NOTES:
        ledNumber = LED_ON_OFF_NOTES;
        if (!state)  {

            pads.midiSendOnOff(onOff_notes);
            lcdMessageType = onOff_notes;
    43f6:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t lastTouchedPad = pads.getLastTouchedPad();

    switch (buttonNumber)    {

        case BUTTON_ON_OFF_NOTES:
        ledNumber = LED_ON_OFF_NOTES;
    43f8:	62 e0       	ldi	r22, 0x02	; 2
    43fa:	0f c0       	rjmp	.+30     	; 0x441a <_ZN7Buttons16handleOnOffEventEhb+0x136>
        if (!state)  {

            pads.midiSendOnOff(onOff_aftertouch);
            lcdMessageType = onOff_aftertouch;
            ledNumber = LED_ON_OFF_AFTERTOUCH;
            if (pads.getMIDISendState(onOff_aftertouch, lastTouchedPad)) ledState = ledStateFull; else ledState = ledStateOff;
    43fc:	c2 e0       	ldi	r28, 0x02	; 2

        case BUTTON_ON_OFF_AFTERTOUCH:
        if (!state)  {

            pads.midiSendOnOff(onOff_aftertouch);
            lcdMessageType = onOff_aftertouch;
    43fe:	d1 e0       	ldi	r29, 0x01	; 1
            ledNumber = LED_ON_OFF_AFTERTOUCH;
    4400:	61 e0       	ldi	r22, 0x01	; 1
    4402:	0b c0       	rjmp	.+22     	; 0x441a <_ZN7Buttons16handleOnOffEventEhb+0x136>
        if (!state)  {

            pads.midiSendOnOff(onOff_x);
            lcdMessageType = onOff_x;
            ledNumber = LED_ON_OFF_X;
            if (pads.getMIDISendState(onOff_x, lastTouchedPad)) ledState = ledStateFull; else ledState = ledStateOff;
    4404:	c2 e0       	ldi	r28, 0x02	; 2

        case BUTTON_ON_OFF_X:
        if (!state)  {

            pads.midiSendOnOff(onOff_x);
            lcdMessageType = onOff_x;
    4406:	d2 e0       	ldi	r29, 0x02	; 2
            ledNumber = LED_ON_OFF_X;
    4408:	63 e0       	ldi	r22, 0x03	; 3
    440a:	07 c0       	rjmp	.+14     	; 0x441a <_ZN7Buttons16handleOnOffEventEhb+0x136>
        if (!state)  {

            pads.midiSendOnOff(onOff_y);
            lcdMessageType = onOff_y;
            ledNumber = LED_ON_OFF_Y;
            if (pads.getMIDISendState(onOff_y, lastTouchedPad)) ledState = ledStateFull; else ledState = ledStateOff;
    440c:	c2 e0       	ldi	r28, 0x02	; 2

        case BUTTON_ON_OFF_Y:
        if (!state)  {

            pads.midiSendOnOff(onOff_y);
            lcdMessageType = onOff_y;
    440e:	d3 e0       	ldi	r29, 0x03	; 3
            ledNumber = LED_ON_OFF_Y;
    4410:	60 e0       	ldi	r22, 0x00	; 0
    4412:	03 c0       	rjmp	.+6      	; 0x441a <_ZN7Buttons16handleOnOffEventEhb+0x136>
        ledNumber = LED_ON_OFF_SPLIT;
        if (!state)  {

            pads.splitOnOff();
            lcdMessageType = onOff_split;
            pads.getSplitState() ? ledState = ledStateFull : ledState = ledStateOff;
    4414:	c2 e0       	ldi	r28, 0x02	; 2
        case BUTTON_ON_OFF_SPLIT:
        ledNumber = LED_ON_OFF_SPLIT;
        if (!state)  {

            pads.splitOnOff();
            lcdMessageType = onOff_split;
    4416:	d4 e0       	ldi	r29, 0x04	; 4

        }   else return;
        break;

        case BUTTON_ON_OFF_SPLIT:
        ledNumber = LED_ON_OFF_SPLIT;
    4418:	66 e0       	ldi	r22, 0x06	; 6
        return;

    }

    #ifdef MODULE_LEDS
        leds.setLEDstate(ledNumber, ledState);
    441a:	4c 2f       	mov	r20, r28
    441c:	80 ed       	ldi	r24, 0xD0	; 208
    441e:	9e e0       	ldi	r25, 0x0E	; 14
    4420:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
    #endif

    #ifdef MODULE_LCD
        display.displayOnOff(lcdMessageType, pads.getSplitState(), (uint8_t)ledState, lastTouchedPad+1);
    4424:	8a e6       	ldi	r24, 0x6A	; 106
    4426:	9f e0       	ldi	r25, 0x0F	; 15
    4428:	0e 94 e7 67 	call	0xcfce	; 0xcfce <_ZN4Pads13getSplitStateEv>
    442c:	0f 5f       	subi	r16, 0xFF	; 255
    442e:	2c 2f       	mov	r18, r28
    4430:	48 2f       	mov	r20, r24
    4432:	6d 2f       	mov	r22, r29
    4434:	82 e6       	ldi	r24, 0x62	; 98
    4436:	9c e0       	ldi	r25, 0x0C	; 12
    4438:	0e 94 b8 34 	call	0x6970	; 0x6970 <_ZN3LCD12displayOnOffE7onOff_tbhh>
    #endif

}
    443c:	df 91       	pop	r29
    443e:	cf 91       	pop	r28
    4440:	0f 91       	pop	r16
    4442:	08 95       	ret

00004444 <_ZN7Buttons27handleTransportControlEventEhb>:

void Buttons::handleTransportControlEvent(uint8_t buttonNumber, bool state)  {
    4444:	0f 93       	push	r16
    4446:	1f 93       	push	r17
    4448:	cf 93       	push	r28
    444a:	df 93       	push	r29
    444c:	00 d0       	rcall	.+0      	; 0x444e <_ZN7Buttons27handleTransportControlEventEhb+0xa>
    444e:	00 d0       	rcall	.+0      	; 0x4450 <_ZN7Buttons27handleTransportControlEventEhb+0xc>
    4450:	00 d0       	rcall	.+0      	; 0x4452 <_ZN7Buttons27handleTransportControlEventEhb+0xe>
    4452:	cd b7       	in	r28, 0x3d	; 61
    4454:	de b7       	in	r29, 0x3e	; 62
    4456:	16 2f       	mov	r17, r22
    4458:	04 2f       	mov	r16, r20

    if (pads.editModeActive()) return;
    445a:	8a e6       	ldi	r24, 0x6A	; 106
    445c:	9f e0       	ldi	r25, 0x0F	; 15
    445e:	0e 94 8c 56 	call	0xad18	; 0xad18 <_ZN4Pads14editModeActiveEv>
    4462:	81 11       	cpse	r24, r1
    4464:	54 c0       	rjmp	.+168    	; 0x450e <_ZN7Buttons27handleTransportControlEventEhb+0xca>

    #if MODE_SERIAL < 1
    uint8_t sysExArray[] =  { 0xF0, 0x7F, 0x7F, 0x06, 0x00, 0xF7 }; //based on MIDI spec for transport control
    4466:	86 e0       	ldi	r24, 0x06	; 6
    4468:	ef e7       	ldi	r30, 0x7F	; 127
    446a:	f1 e0       	ldi	r31, 0x01	; 1
    446c:	de 01       	movw	r26, r28
    446e:	11 96       	adiw	r26, 0x01	; 1
    4470:	01 90       	ld	r0, Z+
    4472:	0d 92       	st	X+, r0
    4474:	8a 95       	dec	r24
    4476:	e1 f7       	brne	.-8      	; 0x4470 <_ZN7Buttons27handleTransportControlEventEhb+0x2c>
    #endif

    transportControl_t type;

    if (!state)  {
    4478:	01 11       	cpse	r16, r1
    447a:	49 c0       	rjmp	.+146    	; 0x450e <_ZN7Buttons27handleTransportControlEventEhb+0xca>

        switch(buttonNumber)    {
    447c:	15 31       	cpi	r17, 0x15	; 21
    447e:	81 f0       	breq	.+32     	; 0x44a0 <_ZN7Buttons27handleTransportControlEventEhb+0x5c>
    4480:	16 31       	cpi	r17, 0x16	; 22
    4482:	21 f0       	breq	.+8      	; 0x448c <_ZN7Buttons27handleTransportControlEventEhb+0x48>
    4484:	14 31       	cpi	r17, 0x14	; 20
    4486:	09 f0       	breq	.+2      	; 0x448a <_ZN7Buttons27handleTransportControlEventEhb+0x46>
    4488:	42 c0       	rjmp	.+132    	; 0x450e <_ZN7Buttons27handleTransportControlEventEhb+0xca>
    448a:	1a c0       	rjmp	.+52     	; 0x44c0 <_ZN7Buttons27handleTransportControlEventEhb+0x7c>

            case BUTTON_TRANSPORT_PLAY:
            type = transportPlay;
            #if MODE_SERIAL < 1
            sysExArray[4] = 0x02;
    448c:	82 e0       	ldi	r24, 0x02	; 2
    448e:	8d 83       	std	Y+5, r24	; 0x05
            #endif
            #ifdef MODULE_LEDS
            leds.setLEDstate(LED_TRANSPORT_PLAY, ledStateFull);
    4490:	42 e0       	ldi	r20, 0x02	; 2
    4492:	65 e0       	ldi	r22, 0x05	; 5
    4494:	80 ed       	ldi	r24, 0xD0	; 208
    4496:	9e e0       	ldi	r25, 0x0E	; 14
    4498:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
    if (!state)  {

        switch(buttonNumber)    {

            case BUTTON_TRANSPORT_PLAY:
            type = transportPlay;
    449c:	11 e0       	ldi	r17, 0x01	; 1
            sysExArray[4] = 0x02;
            #endif
            #ifdef MODULE_LEDS
            leds.setLEDstate(LED_TRANSPORT_PLAY, ledStateFull);
            #endif
            break;
    449e:	2a c0       	rjmp	.+84     	; 0x44f4 <_ZN7Buttons27handleTransportControlEventEhb+0xb0>

            case BUTTON_TRANSPORT_STOP:
            type = transportStop;
            #if MODE_SERIAL < 1
            sysExArray[4] = 0x01;
    44a0:	81 e0       	ldi	r24, 0x01	; 1
    44a2:	8d 83       	std	Y+5, r24	; 0x05
            #endif
            #ifdef MODULE_LEDS
            leds.setLEDstate(LED_TRANSPORT_PLAY, ledStateOff);
    44a4:	40 e0       	ldi	r20, 0x00	; 0
    44a6:	65 e0       	ldi	r22, 0x05	; 5
    44a8:	80 ed       	ldi	r24, 0xD0	; 208
    44aa:	9e e0       	ldi	r25, 0x0E	; 14
    44ac:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
            leds.setLEDstate(LED_TRANSPORT_STOP, ledStateOff);
    44b0:	40 e0       	ldi	r20, 0x00	; 0
    44b2:	67 e0       	ldi	r22, 0x07	; 7
    44b4:	80 ed       	ldi	r24, 0xD0	; 208
    44b6:	9e e0       	ldi	r25, 0x0E	; 14
    44b8:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
            leds.setLEDstate(LED_TRANSPORT_PLAY, ledStateFull);
            #endif
            break;

            case BUTTON_TRANSPORT_STOP:
            type = transportStop;
    44bc:	10 e0       	ldi	r17, 0x00	; 0
            #endif
            #ifdef MODULE_LEDS
            leds.setLEDstate(LED_TRANSPORT_PLAY, ledStateOff);
            leds.setLEDstate(LED_TRANSPORT_STOP, ledStateOff);
            #endif
            break;
    44be:	1a c0       	rjmp	.+52     	; 0x44f4 <_ZN7Buttons27handleTransportControlEventEhb+0xb0>

            case BUTTON_TRANSPORT_RECORD:
            #ifdef MODULE_LEDS
            if (leds.getLEDstate(LED_TRANSPORT_RECORD) == ledStateFull) {
    44c0:	64 e0       	ldi	r22, 0x04	; 4
    44c2:	80 ed       	ldi	r24, 0xD0	; 208
    44c4:	9e e0       	ldi	r25, 0x0E	; 14
    44c6:	0e 94 74 46 	call	0x8ce8	; 0x8ce8 <_ZN4LEDs11getLEDstateEh>
    44ca:	82 30       	cpi	r24, 0x02	; 2
    44cc:	51 f4       	brne	.+20     	; 0x44e2 <_ZN7Buttons27handleTransportControlEventEhb+0x9e>

                leds.setLEDstate(LED_TRANSPORT_RECORD, ledStateOff);
    44ce:	40 e0       	ldi	r20, 0x00	; 0
    44d0:	64 e0       	ldi	r22, 0x04	; 4
    44d2:	80 ed       	ldi	r24, 0xD0	; 208
    44d4:	9e e0       	ldi	r25, 0x0E	; 14
    44d6:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
                type = transportRecordOff;
                #if MODE_SERIAL < 1
                sysExArray[4] = 0x07;
    44da:	87 e0       	ldi	r24, 0x07	; 7
    44dc:	8d 83       	std	Y+5, r24	; 0x05
            case BUTTON_TRANSPORT_RECORD:
            #ifdef MODULE_LEDS
            if (leds.getLEDstate(LED_TRANSPORT_RECORD) == ledStateFull) {

                leds.setLEDstate(LED_TRANSPORT_RECORD, ledStateOff);
                type = transportRecordOff;
    44de:	13 e0       	ldi	r17, 0x03	; 3
    44e0:	09 c0       	rjmp	.+18     	; 0x44f4 <_ZN7Buttons27handleTransportControlEventEhb+0xb0>
                sysExArray[4] = 0x07;
                #endif

            }   else {

                leds.setLEDstate(LED_TRANSPORT_RECORD, ledStateFull);
    44e2:	42 e0       	ldi	r20, 0x02	; 2
    44e4:	64 e0       	ldi	r22, 0x04	; 4
    44e6:	80 ed       	ldi	r24, 0xD0	; 208
    44e8:	9e e0       	ldi	r25, 0x0E	; 14
    44ea:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
                type = transportRecordOn;
                #if MODE_SERIAL < 1
                sysExArray[4] = 0x06;
    44ee:	86 e0       	ldi	r24, 0x06	; 6
    44f0:	8d 83       	std	Y+5, r24	; 0x05
                #endif

            }   else {

                leds.setLEDstate(LED_TRANSPORT_RECORD, ledStateFull);
                type = transportRecordOn;
    44f2:	12 e0       	ldi	r17, 0x02	; 2
        }

    }   else return;

    #if MODE_SERIAL < 1
        midi.sendSysEx(sysExArray, SYS_EX_ARRAY_SIZE);
    44f4:	46 e0       	ldi	r20, 0x06	; 6
    44f6:	be 01       	movw	r22, r28
    44f8:	6f 5f       	subi	r22, 0xFF	; 255
    44fa:	7f 4f       	sbci	r23, 0xFF	; 255
    44fc:	87 ec       	ldi	r24, 0xC7	; 199
    44fe:	93 e1       	ldi	r25, 0x13	; 19
    4500:	0e 94 f0 7d 	call	0xfbe0	; 0xfbe0 <_ZN4MIDI9sendSysExEPhh>
    #endif

    #ifdef MODULE_LCD
        display.displayTransportControl(type);
    4504:	61 2f       	mov	r22, r17
    4506:	82 e6       	ldi	r24, 0x62	; 98
    4508:	9c e0       	ldi	r25, 0x0C	; 12
    450a:	0e 94 37 36 	call	0x6c6e	; 0x6c6e <_ZN3LCD23displayTransportControlE18transportControl_t>
    #endif

}
    450e:	26 96       	adiw	r28, 0x06	; 6
    4510:	0f b6       	in	r0, 0x3f	; 63
    4512:	f8 94       	cli
    4514:	de bf       	out	0x3e, r29	; 62
    4516:	0f be       	out	0x3f, r0	; 63
    4518:	cd bf       	out	0x3d, r28	; 61
    451a:	df 91       	pop	r29
    451c:	cf 91       	pop	r28
    451e:	1f 91       	pop	r17
    4520:	0f 91       	pop	r16
    4522:	08 95       	ret

00004524 <_ZN7Buttons16handleTonicEventE6note_tb>:

void Buttons::handleTonicEvent(note_t note, bool state) {
    4524:	cf 93       	push	r28
    4526:	df 93       	push	r29

    if (state) return;
    4528:	41 11       	cpse	r20, r1
    452a:	39 c0       	rjmp	.+114    	; 0x459e <_ZN7Buttons16handleTonicEventE6note_tb+0x7a>
    452c:	c6 2f       	mov	r28, r22

    if (!pads.editModeActive())   {
    452e:	8a e6       	ldi	r24, 0x6A	; 106
    4530:	9f e0       	ldi	r25, 0x0F	; 15
    4532:	0e 94 8c 56 	call	0xad18	; 0xad18 <_ZN4Pads14editModeActiveEv>
    4536:	81 11       	cpse	r24, r1
    4538:	1c c0       	rjmp	.+56     	; 0x4572 <_ZN7Buttons16handleTonicEventE6note_tb+0x4e>

        changeOutput_t result = pads.setTonic(note);
    453a:	40 e0       	ldi	r20, 0x00	; 0
    453c:	6c 2f       	mov	r22, r28
    453e:	8a e6       	ldi	r24, 0x6A	; 106
    4540:	9f e0       	ldi	r25, 0x0F	; 15
    4542:	0e 94 f4 75 	call	0xebe8	; 0xebe8 <_ZN4Pads8setTonicE6note_tb>
    4546:	c8 2f       	mov	r28, r24
        note_t activeTonic = pads.getActiveTonic();
    4548:	8a e6       	ldi	r24, 0x6A	; 106
    454a:	9f e0       	ldi	r25, 0x0F	; 15
    454c:	0e 94 53 68 	call	0xd0a6	; 0xd0a6 <_ZN4Pads14getActiveTonicEv>
    4550:	d8 2f       	mov	r29, r24

        switch(result)  {
    4552:	c1 30       	cpi	r28, 0x01	; 1
    4554:	31 f4       	brne	.+12     	; 0x4562 <_ZN7Buttons16handleTonicEventE6note_tb+0x3e>

            case outputChanged:
            #ifdef MODULE_LEDS
                leds.displayActiveNoteLEDs();
    4556:	40 e0       	ldi	r20, 0x00	; 0
    4558:	60 e0       	ldi	r22, 0x00	; 0
    455a:	80 ed       	ldi	r24, 0xD0	; 208
    455c:	9e e0       	ldi	r25, 0x0E	; 14
    455e:	0e 94 9e 46 	call	0x8d3c	; 0x8d3c <_ZN4LEDs21displayActiveNoteLEDsEbh>

        }

        //always do this
        #ifdef MODULE_LCD
            display.displayNoteChange(result, tonicChange, activeTonic);
    4562:	2d 2f       	mov	r18, r29
    4564:	40 e0       	ldi	r20, 0x00	; 0
    4566:	6c 2f       	mov	r22, r28
    4568:	82 e6       	ldi	r24, 0x62	; 98
    456a:	9c e0       	ldi	r25, 0x0C	; 12
    456c:	0e 94 fc 34 	call	0x69f8	; 0x69f8 <_ZN3LCD17displayNoteChangeE14changeOutput_t16noteChangeType_ta>
    4570:	16 c0       	rjmp	.+44     	; 0x459e <_ZN7Buttons16handleTonicEventE6note_tb+0x7a>
        #endif

    }   else {

        //add note to pad
        uint8_t pad = pads.getLastTouchedPad();
    4572:	8a e6       	ldi	r24, 0x6A	; 106
    4574:	9f e0       	ldi	r25, 0x0F	; 15
    4576:	0e 94 38 69 	call	0xd270	; 0xd270 <_ZN4Pads17getLastTouchedPadEv>
    457a:	d8 2f       	mov	r29, r24
        pads.assignPadNote(pad, note);
    457c:	4c 2f       	mov	r20, r28
    457e:	68 2f       	mov	r22, r24
    4580:	8a e6       	ldi	r24, 0x6A	; 106
    4582:	9f e0       	ldi	r25, 0x0F	; 15
    4584:	0e 94 1d 71 	call	0xe23a	; 0xe23a <_ZN4Pads13assignPadNoteEh6note_t>
        pads.displayActivePadNotes(pad);
    4588:	6d 2f       	mov	r22, r29
    458a:	8a e6       	ldi	r24, 0x6A	; 106
    458c:	9f e0       	ldi	r25, 0x0F	; 15
    458e:	0e 94 e7 55 	call	0xabce	; 0xabce <_ZN4Pads21displayActivePadNotesEh>
        #ifdef MODULE_LEDS
            leds.displayActiveNoteLEDs(true, pad);
    4592:	4d 2f       	mov	r20, r29
    4594:	61 e0       	ldi	r22, 0x01	; 1
    4596:	80 ed       	ldi	r24, 0xD0	; 208
    4598:	9e e0       	ldi	r25, 0x0E	; 14
    459a:	0e 94 9e 46 	call	0x8d3c	; 0x8d3c <_ZN4LEDs21displayActiveNoteLEDsEbh>
        #endif

    }

}
    459e:	df 91       	pop	r29
    45a0:	cf 91       	pop	r28
    45a2:	08 95       	ret

000045a4 <_ZN7Buttons17handleOctaveEventEbb>:

void Buttons::handleOctaveEvent(bool direction, bool state)   {
    45a4:	ff 92       	push	r15
    45a6:	0f 93       	push	r16
    45a8:	1f 93       	push	r17
    45aa:	cf 93       	push	r28
    45ac:	df 93       	push	r29
    45ae:	ec 01       	movw	r28, r24
    45b0:	16 2f       	mov	r17, r22
    45b2:	04 2f       	mov	r16, r20

    uint8_t lastTouchedPad = pads.getLastTouchedPad();
    45b4:	8a e6       	ldi	r24, 0x6A	; 106
    45b6:	9f e0       	ldi	r25, 0x0F	; 15
    45b8:	0e 94 38 69 	call	0xd270	; 0xd270 <_ZN4Pads17getLastTouchedPadEv>
    45bc:	f8 2e       	mov	r15, r24

    if (buttons.getButtonState(BUTTON_OCTAVE_DOWN) && buttons.getButtonState(BUTTON_OCTAVE_UP))   {
    45be:	67 e0       	ldi	r22, 0x07	; 7
    45c0:	80 e4       	ldi	r24, 0x40	; 64
    45c2:	98 e0       	ldi	r25, 0x08	; 8
    45c4:	d1 d1       	rcall	.+930    	; 0x4968 <_ZN7Buttons14getButtonStateEh>
    45c6:	88 23       	and	r24, r24
    45c8:	09 f4       	brne	.+2      	; 0x45cc <_ZN7Buttons17handleOctaveEventEbb+0x28>
    45ca:	74 c0       	rjmp	.+232    	; 0x46b4 <_ZN7Buttons17handleOctaveEventEbb+0x110>
    45cc:	66 e0       	ldi	r22, 0x06	; 6
    45ce:	80 e4       	ldi	r24, 0x40	; 64
    45d0:	98 e0       	ldi	r25, 0x08	; 8
    45d2:	ca d1       	rcall	.+916    	; 0x4968 <_ZN7Buttons14getButtonStateEh>
    45d4:	88 23       	and	r24, r24
    45d6:	09 f4       	brne	.+2      	; 0x45da <_ZN7Buttons17handleOctaveEventEbb+0x36>
    45d8:	6d c0       	rjmp	.+218    	; 0x46b4 <_ZN7Buttons17handleOctaveEventEbb+0x110>

        //try to enter pad edit mode
        if (pads.isUserScale(pads.getActiveScale()))    {
    45da:	8a e6       	ldi	r24, 0x6A	; 106
    45dc:	9f e0       	ldi	r25, 0x0F	; 15
    45de:	0e 94 f1 67 	call	0xcfe2	; 0xcfe2 <_ZN4Pads14getActiveScaleEv>
    45e2:	68 2f       	mov	r22, r24
    45e4:	8a e6       	ldi	r24, 0x6A	; 106
    45e6:	9f e0       	ldi	r25, 0x0F	; 15
    45e8:	0e 94 f2 68 	call	0xd1e4	; 0xd1e4 <_ZN4Pads11isUserScaleEh>
    45ec:	88 23       	and	r24, r24
    45ee:	09 f4       	brne	.+2      	; 0x45f2 <_ZN7Buttons17handleOctaveEventEbb+0x4e>
    45f0:	4d c0       	rjmp	.+154    	; 0x468c <_ZN7Buttons17handleOctaveEventEbb+0xe8>

            pads.setEditMode(!pads.editModeActive());
    45f2:	8a e6       	ldi	r24, 0x6A	; 106
    45f4:	9f e0       	ldi	r25, 0x0F	; 15
    45f6:	0e 94 8c 56 	call	0xad18	; 0xad18 <_ZN4Pads14editModeActiveEv>
    45fa:	61 e0       	ldi	r22, 0x01	; 1
    45fc:	68 27       	eor	r22, r24
    45fe:	8a e6       	ldi	r24, 0x6A	; 106
    4600:	9f e0       	ldi	r25, 0x0F	; 15
    4602:	0e 94 8f 56 	call	0xad1e	; 0xad1e <_ZN4Pads11setEditModeEb>

            if (pads.editModeActive())  {
    4606:	8a e6       	ldi	r24, 0x6A	; 106
    4608:	9f e0       	ldi	r25, 0x0F	; 15
    460a:	0e 94 8c 56 	call	0xad18	; 0xad18 <_ZN4Pads14editModeActiveEv>
    460e:	88 23       	and	r24, r24
    4610:	61 f1       	breq	.+88     	; 0x466a <_ZN7Buttons17handleOctaveEventEbb+0xc6>

                //check if last touched pad is pressed
                if (pads.isPadPressed(pads.getLastTouchedPad()))   {
    4612:	8a e6       	ldi	r24, 0x6A	; 106
    4614:	9f e0       	ldi	r25, 0x0F	; 15
    4616:	0e 94 38 69 	call	0xd270	; 0xd270 <_ZN4Pads17getLastTouchedPadEv>
    461a:	68 2f       	mov	r22, r24
    461c:	8a e6       	ldi	r24, 0x6A	; 106
    461e:	9f e0       	ldi	r25, 0x0F	; 15
    4620:	0e 94 62 69 	call	0xd2c4	; 0xd2c4 <_ZN4Pads12isPadPressedEh>
    4624:	88 23       	and	r24, r24
    4626:	59 f0       	breq	.+22     	; 0x463e <_ZN7Buttons17handleOctaveEventEbb+0x9a>

                    #ifdef MODULE_LCD
                        display.displayEditModeNotAllowed(padNotReleased);
    4628:	61 e0       	ldi	r22, 0x01	; 1
    462a:	82 e6       	ldi	r24, 0x62	; 98
    462c:	9c e0       	ldi	r25, 0x0C	; 12
    462e:	0e 94 0d 37 	call	0x6e1a	; 0x6e1a <_ZN3LCD25displayEditModeNotAllowedE19padEditModeResult_t>
                    #endif
                    pads.setEditMode(false);
    4632:	60 e0       	ldi	r22, 0x00	; 0
    4634:	8a e6       	ldi	r24, 0x6A	; 106
    4636:	9f e0       	ldi	r25, 0x0F	; 15
    4638:	0e 94 8f 56 	call	0xad1e	; 0xad1e <_ZN4Pads11setEditModeEb>
    463c:	38 c0       	rjmp	.+112    	; 0x46ae <_ZN7Buttons17handleOctaveEventEbb+0x10a>
                    //normally, this is called in automatically in Pads.cpp
                    //but on first occasion call it manually
                    #if MODE_SERIAL > 0
                        printf("Pad edit mode\n");
                    #endif
                    pads.setupPadEditMode(pads.getLastTouchedPad());
    463e:	8a e6       	ldi	r24, 0x6A	; 106
    4640:	9f e0       	ldi	r25, 0x0F	; 15
    4642:	0e 94 38 69 	call	0xd270	; 0xd270 <_ZN4Pads17getLastTouchedPadEv>
    4646:	68 2f       	mov	r22, r24
    4648:	8a e6       	ldi	r24, 0x6A	; 106
    464a:	9f e0       	ldi	r25, 0x0F	; 15
    464c:	0e 94 4d 56 	call	0xac9a	; 0xac9a <_ZN4Pads16setupPadEditModeEh>

                    leds.setLEDstate(LED_OCTAVE_DOWN, ledStateFull);
    4650:	42 e0       	ldi	r20, 0x02	; 2
    4652:	68 e0       	ldi	r22, 0x08	; 8
    4654:	80 ed       	ldi	r24, 0xD0	; 208
    4656:	9e e0       	ldi	r25, 0x0E	; 14
    4658:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
                    leds.setLEDstate(LED_OCTAVE_UP, ledStateFull);
    465c:	42 e0       	ldi	r20, 0x02	; 2
    465e:	6c e0       	ldi	r22, 0x0C	; 12
    4660:	80 ed       	ldi	r24, 0xD0	; 208
    4662:	9e e0       	ldi	r25, 0x0E	; 14
    4664:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
    4668:	22 c0       	rjmp	.+68     	; 0x46ae <_ZN7Buttons17handleOctaveEventEbb+0x10a>

                }

            }   else {

                leds.setLEDstate(LED_OCTAVE_DOWN, ledStateOff);
    466a:	40 e0       	ldi	r20, 0x00	; 0
    466c:	68 e0       	ldi	r22, 0x08	; 8
    466e:	80 ed       	ldi	r24, 0xD0	; 208
    4670:	9e e0       	ldi	r25, 0x0E	; 14
    4672:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
                leds.setLEDstate(LED_OCTAVE_UP, ledStateOff);
    4676:	40 e0       	ldi	r20, 0x00	; 0
    4678:	6c e0       	ldi	r22, 0x0C	; 12
    467a:	80 ed       	ldi	r24, 0xD0	; 208
    467c:	9e e0       	ldi	r25, 0x0E	; 14
    467e:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
                pads.exitPadEditMode();
    4682:	8a e6       	ldi	r24, 0x6A	; 106
    4684:	9f e0       	ldi	r25, 0x0F	; 15
    4686:	0e 94 6e 56 	call	0xacdc	; 0xacdc <_ZN4Pads15exitPadEditModeEv>
    468a:	11 c0       	rjmp	.+34     	; 0x46ae <_ZN7Buttons17handleOctaveEventEbb+0x10a>

            }

        }   else {

                display.displayEditModeNotAllowed(notUserPreset);
    468c:	60 e0       	ldi	r22, 0x00	; 0
    468e:	82 e6       	ldi	r24, 0x62	; 98
    4690:	9c e0       	ldi	r25, 0x0C	; 12
    4692:	0e 94 0d 37 	call	0x6e1a	; 0x6e1a <_ZN3LCD25displayEditModeNotAllowedE19padEditModeResult_t>
                leds.setLEDstate(LED_OCTAVE_DOWN, ledStateOff);
    4696:	40 e0       	ldi	r20, 0x00	; 0
    4698:	68 e0       	ldi	r22, 0x08	; 8
    469a:	80 ed       	ldi	r24, 0xD0	; 208
    469c:	9e e0       	ldi	r25, 0x0E	; 14
    469e:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
                leds.setLEDstate(LED_OCTAVE_UP, ledStateOff);
    46a2:	40 e0       	ldi	r20, 0x00	; 0
    46a4:	6c e0       	ldi	r22, 0x0C	; 12
    46a6:	80 ed       	ldi	r24, 0xD0	; 208
    46a8:	9e e0       	ldi	r25, 0x0E	; 14
    46aa:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>

        }

        //temporarily disable buttons
        buttonEnabled[BUTTON_OCTAVE_UP] = false;
    46ae:	1a aa       	std	Y+50, r1	; 0x32
        buttonEnabled[BUTTON_OCTAVE_DOWN] = false;
    46b0:	1b aa       	std	Y+51, r1	; 0x33
    46b2:	cf c0       	rjmp	.+414    	; 0x4852 <_ZN7Buttons17handleOctaveEventEbb+0x2ae>

    } else {

        bool editMode = pads.editModeActive();
    46b4:	8a e6       	ldi	r24, 0x6A	; 106
    46b6:	9f e0       	ldi	r25, 0x0F	; 15
    46b8:	0e 94 8c 56 	call	0xad18	; 0xad18 <_ZN4Pads14editModeActiveEv>

        switch(editMode)    {
    46bc:	81 30       	cpi	r24, 0x01	; 1
    46be:	b9 f5       	brne	.+110    	; 0x472e <_ZN7Buttons17handleOctaveEventEbb+0x18a>

            case true:
            switch(state)   {
    46c0:	01 30       	cpi	r16, 0x01	; 1
    46c2:	29 f1       	breq	.+74     	; 0x470e <_ZN7Buttons17handleOctaveEventEbb+0x16a>

                case false:
                pads.changeActiveOctave(direction);
    46c4:	61 2f       	mov	r22, r17
    46c6:	8a e6       	ldi	r24, 0x6A	; 106
    46c8:	9f e0       	ldi	r25, 0x0F	; 15
    46ca:	0e 94 2d 6e 	call	0xdc5a	; 0xdc5a <_ZN4Pads18changeActiveOctaveEb>
                #ifdef MODULE_LCD
                    display.displayActiveOctave(normalizeOctave(pads.getActiveOctave()));
    46ce:	8a e6       	ldi	r24, 0x6A	; 106
    46d0:	9f e0       	ldi	r25, 0x0F	; 15
    46d2:	0e 94 4e 68 	call	0xd09c	; 0xd09c <_ZN4Pads15getActiveOctaveEv>
    46d6:	6e ef       	ldi	r22, 0xFE	; 254
    46d8:	68 0f       	add	r22, r24
    46da:	82 e6       	ldi	r24, 0x62	; 98
    46dc:	9c e0       	ldi	r25, 0x0C	; 12
    46de:	0e 94 98 3d 	call	0x7b30	; 0x7b30 <_ZN3LCD19displayActiveOctaveEa>
                #endif
                #ifdef MODULE_LEDS
                    leds.displayActiveNoteLEDs(true, lastTouchedPad);
    46e2:	4f 2d       	mov	r20, r15
    46e4:	61 e0       	ldi	r22, 0x01	; 1
    46e6:	80 ed       	ldi	r24, 0xD0	; 208
    46e8:	9e e0       	ldi	r25, 0x0E	; 14
    46ea:	0e 94 9e 46 	call	0x8d3c	; 0x8d3c <_ZN4LEDs21displayActiveNoteLEDsEbh>
                    direction ? leds.setLEDstate(LED_OCTAVE_UP, ledStateFull) : leds.setLEDstate(LED_OCTAVE_DOWN, ledStateFull);
    46ee:	11 23       	and	r17, r17
    46f0:	39 f0       	breq	.+14     	; 0x4700 <_ZN7Buttons17handleOctaveEventEbb+0x15c>
    46f2:	42 e0       	ldi	r20, 0x02	; 2
    46f4:	6c e0       	ldi	r22, 0x0C	; 12
    46f6:	80 ed       	ldi	r24, 0xD0	; 208
    46f8:	9e e0       	ldi	r25, 0x0E	; 14
    46fa:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
    46fe:	a9 c0       	rjmp	.+338    	; 0x4852 <_ZN7Buttons17handleOctaveEventEbb+0x2ae>
    4700:	42 e0       	ldi	r20, 0x02	; 2
    4702:	68 e0       	ldi	r22, 0x08	; 8
    4704:	80 ed       	ldi	r24, 0xD0	; 208
    4706:	9e e0       	ldi	r25, 0x0E	; 14
    4708:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
    470c:	a2 c0       	rjmp	.+324    	; 0x4852 <_ZN7Buttons17handleOctaveEventEbb+0x2ae>
                #endif
                break;

                case true:
                #ifdef MODULE_LEDS
                    direction ? leds.setLEDstate(LED_OCTAVE_UP, ledStateOff) : leds.setLEDstate(LED_OCTAVE_DOWN, ledStateOff);
    470e:	11 23       	and	r17, r17
    4710:	39 f0       	breq	.+14     	; 0x4720 <_ZN7Buttons17handleOctaveEventEbb+0x17c>
    4712:	40 e0       	ldi	r20, 0x00	; 0
    4714:	6c e0       	ldi	r22, 0x0C	; 12
    4716:	80 ed       	ldi	r24, 0xD0	; 208
    4718:	9e e0       	ldi	r25, 0x0E	; 14
    471a:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
    471e:	99 c0       	rjmp	.+306    	; 0x4852 <_ZN7Buttons17handleOctaveEventEbb+0x2ae>
    4720:	40 e0       	ldi	r20, 0x00	; 0
    4722:	68 e0       	ldi	r22, 0x08	; 8
    4724:	80 ed       	ldi	r24, 0xD0	; 208
    4726:	9e e0       	ldi	r25, 0x0E	; 14
    4728:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
    472c:	92 c0       	rjmp	.+292    	; 0x4852 <_ZN7Buttons17handleOctaveEventEbb+0x2ae>

            }
            break;

            case false:
            if (pads.isUserScale(pads.getActiveScale()) || (pads.isPredefinedScale(pads.getActiveScale()) && !getButtonState(BUTTON_ON_OFF_NOTES)))   {
    472e:	8a e6       	ldi	r24, 0x6A	; 106
    4730:	9f e0       	ldi	r25, 0x0F	; 15
    4732:	0e 94 f1 67 	call	0xcfe2	; 0xcfe2 <_ZN4Pads14getActiveScaleEv>
    4736:	68 2f       	mov	r22, r24
    4738:	8a e6       	ldi	r24, 0x6A	; 106
    473a:	9f e0       	ldi	r25, 0x0F	; 15
    473c:	0e 94 f2 68 	call	0xd1e4	; 0xd1e4 <_ZN4Pads11isUserScaleEh>
    4740:	81 11       	cpse	r24, r1
    4742:	10 c0       	rjmp	.+32     	; 0x4764 <_ZN7Buttons17handleOctaveEventEbb+0x1c0>
    4744:	8a e6       	ldi	r24, 0x6A	; 106
    4746:	9f e0       	ldi	r25, 0x0F	; 15
    4748:	0e 94 f1 67 	call	0xcfe2	; 0xcfe2 <_ZN4Pads14getActiveScaleEv>
    474c:	68 2f       	mov	r22, r24
    474e:	8a e6       	ldi	r24, 0x6A	; 106
    4750:	9f e0       	ldi	r25, 0x0F	; 15
    4752:	0e 94 f7 68 	call	0xd1ee	; 0xd1ee <_ZN4Pads17isPredefinedScaleEh>
    4756:	88 23       	and	r24, r24
    4758:	c9 f1       	breq	.+114    	; 0x47cc <_ZN7Buttons17handleOctaveEventEbb+0x228>
    475a:	6c e1       	ldi	r22, 0x1C	; 28
    475c:	ce 01       	movw	r24, r28
    475e:	04 d1       	rcall	.+520    	; 0x4968 <_ZN7Buttons14getButtonStateEh>
    4760:	81 11       	cpse	r24, r1
    4762:	34 c0       	rjmp	.+104    	; 0x47cc <_ZN7Buttons17handleOctaveEventEbb+0x228>

                //shift entire octave up or down
                if (!state)    {
    4764:	01 11       	cpse	r16, r1
    4766:	22 c0       	rjmp	.+68     	; 0x47ac <_ZN7Buttons17handleOctaveEventEbb+0x208>

                    changeOutput_t shiftResult = pads.shiftOctave(direction);
    4768:	61 2f       	mov	r22, r17
    476a:	8a e6       	ldi	r24, 0x6A	; 106
    476c:	9f e0       	ldi	r25, 0x0F	; 15
    476e:	0e 94 1a 73 	call	0xe634	; 0xe634 <_ZN4Pads11shiftOctaveEb>
    4772:	c8 2f       	mov	r28, r24
                    uint8_t activeOctave = pads.getActiveOctave();
    4774:	8a e6       	ldi	r24, 0x6A	; 106
    4776:	9f e0       	ldi	r25, 0x0F	; 15
    4778:	0e 94 4e 68 	call	0xd09c	; 0xd09c <_ZN4Pads15getActiveOctaveEv>
                    #ifdef MODULE_LCD
                        display.displayNoteChange(shiftResult, octaveChange, normalizeOctave(activeOctave));
    477c:	2e ef       	ldi	r18, 0xFE	; 254
    477e:	28 0f       	add	r18, r24
    4780:	41 e0       	ldi	r20, 0x01	; 1
    4782:	6c 2f       	mov	r22, r28
    4784:	82 e6       	ldi	r24, 0x62	; 98
    4786:	9c e0       	ldi	r25, 0x0C	; 12
    4788:	0e 94 fc 34 	call	0x69f8	; 0x69f8 <_ZN3LCD17displayNoteChangeE14changeOutput_t16noteChangeType_ta>
                    #endif
                    #ifdef MODULE_LEDS
                        direction ? leds.setLEDstate(LED_OCTAVE_UP, ledStateOff) : leds.setLEDstate(LED_OCTAVE_DOWN, ledStateOff);
    478c:	11 23       	and	r17, r17
    478e:	39 f0       	breq	.+14     	; 0x479e <_ZN7Buttons17handleOctaveEventEbb+0x1fa>
    4790:	40 e0       	ldi	r20, 0x00	; 0
    4792:	6c e0       	ldi	r22, 0x0C	; 12
    4794:	80 ed       	ldi	r24, 0xD0	; 208
    4796:	9e e0       	ldi	r25, 0x0E	; 14
    4798:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
    479c:	5a c0       	rjmp	.+180    	; 0x4852 <_ZN7Buttons17handleOctaveEventEbb+0x2ae>
    479e:	40 e0       	ldi	r20, 0x00	; 0
    47a0:	68 e0       	ldi	r22, 0x08	; 8
    47a2:	80 ed       	ldi	r24, 0xD0	; 208
    47a4:	9e e0       	ldi	r25, 0x0E	; 14
    47a6:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
    47aa:	53 c0       	rjmp	.+166    	; 0x4852 <_ZN7Buttons17handleOctaveEventEbb+0x2ae>
                    #endif

                }   else {

                    #ifdef MODULE_LEDS
                        direction ? leds.setLEDstate(LED_OCTAVE_UP, ledStateDim) : leds.setLEDstate(LED_OCTAVE_DOWN, ledStateDim);
    47ac:	11 23       	and	r17, r17
    47ae:	39 f0       	breq	.+14     	; 0x47be <_ZN7Buttons17handleOctaveEventEbb+0x21a>
    47b0:	41 e0       	ldi	r20, 0x01	; 1
    47b2:	6c e0       	ldi	r22, 0x0C	; 12
    47b4:	80 ed       	ldi	r24, 0xD0	; 208
    47b6:	9e e0       	ldi	r25, 0x0E	; 14
    47b8:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
    47bc:	4a c0       	rjmp	.+148    	; 0x4852 <_ZN7Buttons17handleOctaveEventEbb+0x2ae>
    47be:	41 e0       	ldi	r20, 0x01	; 1
    47c0:	68 e0       	ldi	r22, 0x08	; 8
    47c2:	80 ed       	ldi	r24, 0xD0	; 208
    47c4:	9e e0       	ldi	r25, 0x0E	; 14
    47c6:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
    47ca:	43 c0       	rjmp	.+134    	; 0x4852 <_ZN7Buttons17handleOctaveEventEbb+0x2ae>
                    #endif

                }

            }   else if (getButtonState(BUTTON_ON_OFF_NOTES)) {
    47cc:	6c e1       	ldi	r22, 0x1C	; 28
    47ce:	ce 01       	movw	r24, r28
    47d0:	cb d0       	rcall	.+406    	; 0x4968 <_ZN7Buttons14getButtonStateEh>
    47d2:	88 23       	and	r24, r24
    47d4:	f1 f1       	breq	.+124    	; 0x4852 <_ZN7Buttons17handleOctaveEventEbb+0x2ae>

                    //shift single note, but only in predefined presets
                    if (!state)    {
    47d6:	01 11       	cpse	r16, r1
    47d8:	2d c0       	rjmp	.+90     	; 0x4834 <_ZN7Buttons17handleOctaveEventEbb+0x290>

                        if (pads.isPadPressed(lastTouchedPad))   {
    47da:	6f 2d       	mov	r22, r15
    47dc:	8a e6       	ldi	r24, 0x6A	; 106
    47de:	9f e0       	ldi	r25, 0x0F	; 15
    47e0:	0e 94 62 69 	call	0xd2c4	; 0xd2c4 <_ZN4Pads12isPadPressedEh>
    47e4:	88 23       	and	r24, r24
    47e6:	31 f0       	breq	.+12     	; 0x47f4 <_ZN7Buttons17handleOctaveEventEbb+0x250>

                            #ifdef MODULE_LCD
                                display.displayEditModeNotAllowed(padNotReleased);
    47e8:	61 e0       	ldi	r22, 0x01	; 1
    47ea:	82 e6       	ldi	r24, 0x62	; 98
    47ec:	9c e0       	ldi	r25, 0x0C	; 12
    47ee:	0e 94 0d 37 	call	0x6e1a	; 0x6e1a <_ZN3LCD25displayEditModeNotAllowedE19padEditModeResult_t>
                            #endif

                            return;
    47f2:	2f c0       	rjmp	.+94     	; 0x4852 <_ZN7Buttons17handleOctaveEventEbb+0x2ae>

                        }

                        #ifdef MODULE_LEDS
                            direction ? leds.setLEDstate(LED_OCTAVE_UP, ledStateOff) : leds.setLEDstate(LED_OCTAVE_DOWN, ledStateOff);
    47f4:	11 23       	and	r17, r17
    47f6:	39 f0       	breq	.+14     	; 0x4806 <_ZN7Buttons17handleOctaveEventEbb+0x262>
    47f8:	40 e0       	ldi	r20, 0x00	; 0
    47fa:	6c e0       	ldi	r22, 0x0C	; 12
    47fc:	80 ed       	ldi	r24, 0xD0	; 208
    47fe:	9e e0       	ldi	r25, 0x0E	; 14
    4800:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
    4804:	06 c0       	rjmp	.+12     	; 0x4812 <_ZN7Buttons17handleOctaveEventEbb+0x26e>
    4806:	40 e0       	ldi	r20, 0x00	; 0
    4808:	68 e0       	ldi	r22, 0x08	; 8
    480a:	80 ed       	ldi	r24, 0xD0	; 208
    480c:	9e e0       	ldi	r25, 0x0E	; 14
    480e:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
                        #endif

                        buttonEnabled[BUTTON_ON_OFF_NOTES] = false;
    4812:	c8 5b       	subi	r28, 0xB8	; 184
    4814:	df 4f       	sbci	r29, 0xFF	; 255
    4816:	18 82       	st	Y, r1

                        changeOutput_t shiftResult = pads.shiftNote(direction);
    4818:	40 e0       	ldi	r20, 0x00	; 0
    481a:	61 2f       	mov	r22, r17
    481c:	8a e6       	ldi	r24, 0x6A	; 106
    481e:	9f e0       	ldi	r25, 0x0F	; 15
    4820:	0e 94 43 72 	call	0xe486	; 0xe486 <_ZN4Pads9shiftNoteEbb>
                        #ifdef MODULE_LCD
                            display.displayNoteChange(shiftResult, noteShift, direction);
    4824:	21 2f       	mov	r18, r17
    4826:	42 e0       	ldi	r20, 0x02	; 2
    4828:	68 2f       	mov	r22, r24
    482a:	82 e6       	ldi	r24, 0x62	; 98
    482c:	9c e0       	ldi	r25, 0x0C	; 12
    482e:	0e 94 fc 34 	call	0x69f8	; 0x69f8 <_ZN3LCD17displayNoteChangeE14changeOutput_t16noteChangeType_ta>
    4832:	0f c0       	rjmp	.+30     	; 0x4852 <_ZN7Buttons17handleOctaveEventEbb+0x2ae>
                        #endif

                    }   else {

                        #ifdef MODULE_LEDS
                            direction ? leds.setLEDstate(LED_OCTAVE_UP, ledStateFull) : leds.setLEDstate(LED_OCTAVE_DOWN, ledStateFull);
    4834:	11 23       	and	r17, r17
    4836:	39 f0       	breq	.+14     	; 0x4846 <_ZN7Buttons17handleOctaveEventEbb+0x2a2>
    4838:	42 e0       	ldi	r20, 0x02	; 2
    483a:	6c e0       	ldi	r22, 0x0C	; 12
    483c:	80 ed       	ldi	r24, 0xD0	; 208
    483e:	9e e0       	ldi	r25, 0x0E	; 14
    4840:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
    4844:	06 c0       	rjmp	.+12     	; 0x4852 <_ZN7Buttons17handleOctaveEventEbb+0x2ae>
    4846:	42 e0       	ldi	r20, 0x02	; 2
    4848:	68 e0       	ldi	r22, 0x08	; 8
    484a:	80 ed       	ldi	r24, 0xD0	; 208
    484c:	9e e0       	ldi	r25, 0x0E	; 14
    484e:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>

            }

        }

}
    4852:	df 91       	pop	r29
    4854:	cf 91       	pop	r28
    4856:	1f 91       	pop	r17
    4858:	0f 91       	pop	r16
    485a:	ff 90       	pop	r15
    485c:	08 95       	ret

0000485e <_GLOBAL__sub_I__ZN7Buttons18getTonicFromButtonEh>:

Buttons buttons;
    485e:	80 e4       	ldi	r24, 0x40	; 64
    4860:	98 e0       	ldi	r25, 0x08	; 8
    4862:	35 c0       	rjmp	.+106    	; 0x48ce <_ZN7ButtonsC1Ev>
    4864:	08 95       	ret

00004866 <_ZN7Buttons16mapButtonsToLEDsEv>:

uint8_t buttonToLedArray[MAX_NUMBER_OF_BUTTONS];

void Buttons::mapButtonsToLEDs()    {

    buttonToLedArray[BUTTON_NOTE_C]             = LED_NOTE_C;
    4866:	e1 e9       	ldi	r30, 0x91	; 145
    4868:	f8 e0       	ldi	r31, 0x08	; 8
    486a:	8a e0       	ldi	r24, 0x0A	; 10
    486c:	82 8b       	std	Z+18, r24	; 0x12
    buttonToLedArray[BUTTON_NOTE_C_SHARP]       = LED_NOTE_C_SHARP;
    486e:	82 e1       	ldi	r24, 0x12	; 18
    4870:	83 8b       	std	Z+19, r24	; 0x13
    buttonToLedArray[BUTTON_NOTE_D]             = LED_NOTE_D;
    4872:	8e e0       	ldi	r24, 0x0E	; 14
    4874:	80 8b       	std	Z+16, r24	; 0x10
    buttonToLedArray[BUTTON_NOTE_D_SHARP]       = LED_NOTE_D_SHARP;
    4876:	86 e1       	ldi	r24, 0x16	; 22
    4878:	81 8b       	std	Z+17, r24	; 0x11
    buttonToLedArray[BUTTON_NOTE_E]             = LED_NOTE_E;
    487a:	89 e0       	ldi	r24, 0x09	; 9
    487c:	86 87       	std	Z+14, r24	; 0x0e
    buttonToLedArray[BUTTON_NOTE_F]             = LED_NOTE_F;
    487e:	8d e0       	ldi	r24, 0x0D	; 13
    4880:	87 87       	std	Z+15, r24	; 0x0f
    buttonToLedArray[BUTTON_NOTE_F_SHARP]       = LED_NOTE_F_SHARP;
    4882:	81 e1       	ldi	r24, 0x11	; 17
    4884:	85 83       	std	Z+5, r24	; 0x05
    buttonToLedArray[BUTTON_NOTE_G]             = LED_NOTE_G;
    4886:	8b e0       	ldi	r24, 0x0B	; 11
    4888:	84 83       	std	Z+4, r24	; 0x04
    buttonToLedArray[BUTTON_NOTE_G_SHARP]       = LED_NOTE_G_SHARP;
    488a:	85 e1       	ldi	r24, 0x15	; 21
    488c:	83 83       	std	Z+3, r24	; 0x03
    buttonToLedArray[BUTTON_NOTE_A]             = LED_NOTE_A;
    488e:	8f e0       	ldi	r24, 0x0F	; 15
    4890:	82 83       	std	Z+2, r24	; 0x02
    buttonToLedArray[BUTTON_NOTE_A_SHARP]       = LED_NOTE_A_SHARP;
    4892:	83 e1       	ldi	r24, 0x13	; 19
    4894:	81 83       	std	Z+1, r24	; 0x01
    buttonToLedArray[BUTTON_NOTE_B]             = LED_NOTE_B;
    4896:	87 e1       	ldi	r24, 0x17	; 23
    4898:	80 83       	st	Z, r24

    buttonToLedArray[BUTTON_ON_OFF_NOTES]       = LED_ON_OFF_NOTES;
    489a:	82 e0       	ldi	r24, 0x02	; 2
    489c:	84 8f       	std	Z+28, r24	; 0x1c
    buttonToLedArray[BUTTON_ON_OFF_AFTERTOUCH]  = LED_ON_OFF_AFTERTOUCH;
    489e:	81 e0       	ldi	r24, 0x01	; 1
    48a0:	85 8f       	std	Z+29, r24	; 0x1d
    buttonToLedArray[BUTTON_ON_OFF_X]           = LED_ON_OFF_X;
    48a2:	83 e0       	ldi	r24, 0x03	; 3
    48a4:	86 8f       	std	Z+30, r24	; 0x1e
    buttonToLedArray[BUTTON_ON_OFF_Y]           = LED_ON_OFF_Y;
    48a6:	17 8e       	std	Z+31, r1	; 0x1f
    buttonToLedArray[BUTTON_ON_OFF_SPLIT]       = LED_ON_OFF_SPLIT;
    48a8:	86 e0       	ldi	r24, 0x06	; 6
    48aa:	83 8f       	std	Z+27, r24	; 0x1b

    buttonToLedArray[BUTTON_TRANSPORT_PLAY]     = LED_TRANSPORT_PLAY;
    48ac:	85 e0       	ldi	r24, 0x05	; 5
    48ae:	86 8b       	std	Z+22, r24	; 0x16
    buttonToLedArray[BUTTON_TRANSPORT_STOP]     = LED_TRANSPORT_STOP;
    48b0:	87 e0       	ldi	r24, 0x07	; 7
    48b2:	85 8b       	std	Z+21, r24	; 0x15
    buttonToLedArray[BUTTON_TRANSPORT_RECORD]   = LED_TRANSPORT_RECORD;
    48b4:	84 e0       	ldi	r24, 0x04	; 4
    48b6:	84 8b       	std	Z+20, r24	; 0x14

    buttonToLedArray[BUTTON_OCTAVE_DOWN]        = LED_OCTAVE_DOWN;
    48b8:	88 e0       	ldi	r24, 0x08	; 8
    48ba:	87 83       	std	Z+7, r24	; 0x07
    buttonToLedArray[BUTTON_OCTAVE_UP]          = LED_OCTAVE_UP;
    48bc:	8c e0       	ldi	r24, 0x0C	; 12
    48be:	86 83       	std	Z+6, r24	; 0x06
    48c0:	08 95       	ret

000048c2 <_ZN7Buttons22getLEDnumberFromButtonEh>:

}

uint8_t Buttons::getLEDnumberFromButton(uint8_t buttonNumber)   {

    return buttonToLedArray[buttonNumber];
    48c2:	e6 2f       	mov	r30, r22
    48c4:	f0 e0       	ldi	r31, 0x00	; 0
    48c6:	ef 56       	subi	r30, 0x6F	; 111
    48c8:	f7 4f       	sbci	r31, 0xF7	; 247

}
    48ca:	80 81       	ld	r24, Z
    48cc:	08 95       	ret

000048ce <_ZN7ButtonsC1Ev>:

//shift new values from button in this variable
//if it's 0xFF or buttonDebounceCompare, its reading is stable
const uint8_t buttonDebounceCompare = 0b11110000;

Buttons::Buttons()  {
    48ce:	cf 93       	push	r28
    48d0:	df 93       	push	r29
    48d2:	fc 01       	movw	r30, r24

    //default constructor
    lastCheckTime               = 0;
    48d4:	10 a6       	std	Z+40, r1	; 0x28
    48d6:	11 a6       	std	Z+41, r1	; 0x29
    48d8:	12 a6       	std	Z+42, r1	; 0x2a
    48da:	13 a6       	std	Z+43, r1	; 0x2b
    lastButtonDataPress         = 0;
    48dc:	14 a2       	std	Z+36, r1	; 0x24
    48de:	15 a2       	std	Z+37, r1	; 0x25
    48e0:	16 a2       	std	Z+38, r1	; 0x26
    48e2:	17 a2       	std	Z+39, r1	; 0x27
    mcpData                     = 0;
    48e4:	10 82       	st	Z, r1
    48e6:	11 82       	std	Z+1, r1	; 0x01
    48e8:	12 82       	std	Z+2, r1	; 0x02
    48ea:	13 82       	std	Z+3, r1	; 0x03
    processingEnabled           = true;
    48ec:	ec 01       	movw	r28, r24
    48ee:	c4 5b       	subi	r28, 0xB4	; 180
    48f0:	df 4f       	sbci	r29, 0xFF	; 255
    48f2:	21 e0       	ldi	r18, 0x01	; 1
    48f4:	28 83       	st	Y, r18
    48f6:	dc 01       	movw	r26, r24
    48f8:	14 96       	adiw	r26, 0x04	; 4
    48fa:	bc 96       	adiw	r30, 0x2c	; 44
    48fc:	ce 01       	movw	r24, r28

    for (int i=0; i<MAX_NUMBER_OF_BUTTONS; i++) {

        previousButtonState[i] = buttonDebounceCompare;
    48fe:	30 ef       	ldi	r19, 0xF0	; 240
    4900:	3d 93       	st	X+, r19
        buttonEnabled[i] = true;
    4902:	21 93       	st	Z+, r18
    lastCheckTime               = 0;
    lastButtonDataPress         = 0;
    mcpData                     = 0;
    processingEnabled           = true;

    for (int i=0; i<MAX_NUMBER_OF_BUTTONS; i++) {
    4904:	e8 17       	cp	r30, r24
    4906:	f9 07       	cpc	r31, r25
    4908:	d9 f7       	brne	.-10     	; 0x4900 <_ZN7ButtonsC1Ev+0x32>
        previousButtonState[i] = buttonDebounceCompare;
        buttonEnabled[i] = true;

    }

}
    490a:	df 91       	pop	r29
    490c:	cf 91       	pop	r28
    490e:	08 95       	ret

00004910 <_Z12read_I2C_reghh>:

uint8_t read_I2C_reg(uint8_t address, uint8_t reg)   {
    4910:	cf 93       	push	r28
    4912:	df 93       	push	r29
    4914:	d6 2f       	mov	r29, r22

    uint8_t value;

    i2c_start((address << 1) + I2C_WRITE);
    4916:	c8 2f       	mov	r28, r24
    4918:	cc 0f       	add	r28, r28
    491a:	8c 2f       	mov	r24, r28
    491c:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <_Z9i2c_starth>
    i2c_write(reg);
    4920:	8d 2f       	mov	r24, r29
    4922:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <_Z9i2c_writeh>
    i2c_stop();
    4926:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <_Z8i2c_stopv>

    i2c_start((address << 1) + I2C_READ);
    492a:	81 e0       	ldi	r24, 0x01	; 1
    492c:	8c 0f       	add	r24, r28
    492e:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <_Z9i2c_starth>
    value = i2c_read_nack();
    4932:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <_Z13i2c_read_nackv>
    4936:	c8 2f       	mov	r28, r24
    i2c_stop();
    4938:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <_Z8i2c_stopv>

    return value;
}
    493c:	8c 2f       	mov	r24, r28
    493e:	df 91       	pop	r29
    4940:	cf 91       	pop	r28
    4942:	08 95       	ret

00004944 <_Z13write_I2C_reghhh>:

void write_I2C_reg(uint8_t address, uint8_t reg, uint8_t value)  {
    4944:	cf 93       	push	r28
    4946:	df 93       	push	r29
    4948:	d6 2f       	mov	r29, r22
    494a:	c4 2f       	mov	r28, r20

    i2c_start((address << 1) + I2C_WRITE);
    494c:	88 0f       	add	r24, r24
    494e:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <_Z9i2c_starth>
    i2c_write(reg);
    4952:	8d 2f       	mov	r24, r29
    4954:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <_Z9i2c_writeh>
    i2c_write(value);
    4958:	8c 2f       	mov	r24, r28
    495a:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <_Z9i2c_writeh>
    i2c_stop();
    495e:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <_Z8i2c_stopv>

}
    4962:	df 91       	pop	r29
    4964:	cf 91       	pop	r28
    4966:	08 95       	ret

00004968 <_ZN7Buttons14getButtonStateEh>:

}

bool Buttons::getButtonState(uint8_t buttonNumber) {

    return bitRead(lastButtonDataPress, buttonNumber);
    4968:	fc 01       	movw	r30, r24
    496a:	84 a1       	ldd	r24, Z+36	; 0x24
    496c:	95 a1       	ldd	r25, Z+37	; 0x25
    496e:	a6 a1       	ldd	r26, Z+38	; 0x26
    4970:	b7 a1       	ldd	r27, Z+39	; 0x27
    4972:	04 c0       	rjmp	.+8      	; 0x497c <_ZN7Buttons14getButtonStateEh+0x14>
    4974:	b6 95       	lsr	r27
    4976:	a7 95       	ror	r26
    4978:	97 95       	ror	r25
    497a:	87 95       	ror	r24
    497c:	6a 95       	dec	r22
    497e:	d2 f7       	brpl	.-12     	; 0x4974 <_ZN7Buttons14getButtonStateEh+0xc>

}
    4980:	81 70       	andi	r24, 0x01	; 1
    4982:	08 95       	ret

00004984 <_ZN7Buttons10readStatesEv>:

bool Buttons::readStates()   {
    4984:	cf 93       	push	r28
    4986:	df 93       	push	r29
    4988:	ec 01       	movw	r28, r24

    mcpData <<= 8;
    498a:	88 81       	ld	r24, Y
    498c:	99 81       	ldd	r25, Y+1	; 0x01
    498e:	aa 81       	ldd	r26, Y+2	; 0x02
    4990:	bb 81       	ldd	r27, Y+3	; 0x03
    4992:	ba 2f       	mov	r27, r26
    4994:	a9 2f       	mov	r26, r25
    4996:	98 2f       	mov	r25, r24
    4998:	88 27       	eor	r24, r24
    499a:	88 83       	st	Y, r24
    499c:	99 83       	std	Y+1, r25	; 0x01
    499e:	aa 83       	std	Y+2, r26	; 0x02
    49a0:	bb 83       	std	Y+3, r27	; 0x03
    mcpData |= read_I2C_reg(expanderAddress[0], gpioAddress[0]);     //expander A, GPIOA
    49a2:	62 e1       	ldi	r22, 0x12	; 18
    49a4:	81 e2       	ldi	r24, 0x21	; 33
    49a6:	b4 df       	rcall	.-152    	; 0x4910 <_Z12read_I2C_reghh>
    49a8:	48 81       	ld	r20, Y
    49aa:	59 81       	ldd	r21, Y+1	; 0x01
    49ac:	6a 81       	ldd	r22, Y+2	; 0x02
    49ae:	7b 81       	ldd	r23, Y+3	; 0x03
    49b0:	48 2b       	or	r20, r24
    mcpData <<= 8;
    49b2:	76 2f       	mov	r23, r22
    49b4:	65 2f       	mov	r22, r21
    49b6:	54 2f       	mov	r21, r20
    49b8:	44 27       	eor	r20, r20
    49ba:	48 83       	st	Y, r20
    49bc:	59 83       	std	Y+1, r21	; 0x01
    49be:	6a 83       	std	Y+2, r22	; 0x02
    49c0:	7b 83       	std	Y+3, r23	; 0x03
    mcpData |= read_I2C_reg(expanderAddress[0], gpioAddress[1]);     //expander A, GPIOB
    49c2:	63 e1       	ldi	r22, 0x13	; 19
    49c4:	81 e2       	ldi	r24, 0x21	; 33
    49c6:	a4 df       	rcall	.-184    	; 0x4910 <_Z12read_I2C_reghh>
    49c8:	48 81       	ld	r20, Y
    49ca:	59 81       	ldd	r21, Y+1	; 0x01
    49cc:	6a 81       	ldd	r22, Y+2	; 0x02
    49ce:	7b 81       	ldd	r23, Y+3	; 0x03
    49d0:	48 2b       	or	r20, r24
    mcpData <<= 8;
    49d2:	76 2f       	mov	r23, r22
    49d4:	65 2f       	mov	r22, r21
    49d6:	54 2f       	mov	r21, r20
    49d8:	44 27       	eor	r20, r20
    49da:	48 83       	st	Y, r20
    49dc:	59 83       	std	Y+1, r21	; 0x01
    49de:	6a 83       	std	Y+2, r22	; 0x02
    49e0:	7b 83       	std	Y+3, r23	; 0x03
    mcpData |= read_I2C_reg(expanderAddress[1], gpioAddress[0]);     //expander B, GPIOA
    49e2:	62 e1       	ldi	r22, 0x12	; 18
    49e4:	80 e2       	ldi	r24, 0x20	; 32
    49e6:	94 df       	rcall	.-216    	; 0x4910 <_Z12read_I2C_reghh>
    49e8:	48 81       	ld	r20, Y
    49ea:	59 81       	ldd	r21, Y+1	; 0x01
    49ec:	6a 81       	ldd	r22, Y+2	; 0x02
    49ee:	7b 81       	ldd	r23, Y+3	; 0x03
    49f0:	48 2b       	or	r20, r24
    mcpData <<= 8;
    49f2:	76 2f       	mov	r23, r22
    49f4:	65 2f       	mov	r22, r21
    49f6:	54 2f       	mov	r21, r20
    49f8:	44 27       	eor	r20, r20
    49fa:	48 83       	st	Y, r20
    49fc:	59 83       	std	Y+1, r21	; 0x01
    49fe:	6a 83       	std	Y+2, r22	; 0x02
    4a00:	7b 83       	std	Y+3, r23	; 0x03
    mcpData |= read_I2C_reg(expanderAddress[1], gpioAddress[1]);     //expander B, GPIOB
    4a02:	63 e1       	ldi	r22, 0x13	; 19
    4a04:	80 e2       	ldi	r24, 0x20	; 32
    4a06:	84 df       	rcall	.-248    	; 0x4910 <_Z12read_I2C_reghh>
    4a08:	48 81       	ld	r20, Y
    4a0a:	59 81       	ldd	r21, Y+1	; 0x01
    4a0c:	6a 81       	ldd	r22, Y+2	; 0x02
    4a0e:	7b 81       	ldd	r23, Y+3	; 0x03
    4a10:	48 2b       	or	r20, r24
    4a12:	48 83       	st	Y, r20
    4a14:	59 83       	std	Y+1, r21	; 0x01
    4a16:	6a 83       	std	Y+2, r22	; 0x02
    4a18:	7b 83       	std	Y+3, r23	; 0x03

    return true;

}
    4a1a:	81 e0       	ldi	r24, 0x01	; 1
    4a1c:	df 91       	pop	r29
    4a1e:	cf 91       	pop	r28
    4a20:	08 95       	ret

00004a22 <_ZN7Buttons15buttonDebouncedEhh>:

bool Buttons::buttonDebounced(uint8_t buttonNumber, uint8_t state)  {
    4a22:	40 6f       	ori	r20, 0xF0	; 240

    //shift new button reading into previousButtonState
    previousButtonState[buttonNumber] = (previousButtonState[buttonNumber] << 1) | state | buttonDebounceCompare;
    4a24:	fc 01       	movw	r30, r24
    4a26:	e6 0f       	add	r30, r22
    4a28:	f1 1d       	adc	r31, r1
    4a2a:	94 81       	ldd	r25, Z+4	; 0x04
    4a2c:	99 0f       	add	r25, r25
    4a2e:	49 2b       	or	r20, r25
    4a30:	44 83       	std	Z+4, r20	; 0x04

    //if button is debounced, return true
    return ((previousButtonState[buttonNumber] == buttonDebounceCompare) || (previousButtonState[buttonNumber] == 0xFF));
    4a32:	40 3f       	cpi	r20, 0xF0	; 240
    4a34:	29 f0       	breq	.+10     	; 0x4a40 <_ZN7Buttons15buttonDebouncedEhh+0x1e>
    4a36:	81 e0       	ldi	r24, 0x01	; 1
    4a38:	4f 3f       	cpi	r20, 0xFF	; 255
    4a3a:	19 f0       	breq	.+6      	; 0x4a42 <_ZN7Buttons15buttonDebouncedEhh+0x20>
    4a3c:	80 e0       	ldi	r24, 0x00	; 0
    4a3e:	08 95       	ret
    4a40:	81 e0       	ldi	r24, 0x01	; 1

}
    4a42:	08 95       	ret

00004a44 <_ZN7Buttons13processButtonEhb>:

void Buttons::processButton(uint8_t buttonNumber, bool state)    {
    4a44:	cf 92       	push	r12
    4a46:	df 92       	push	r13
    4a48:	ef 92       	push	r14
    4a4a:	ff 92       	push	r15
    4a4c:	0f 93       	push	r16
    4a4e:	1f 93       	push	r17
    4a50:	cf 93       	push	r28
    4a52:	df 93       	push	r29
    4a54:	7c 01       	movw	r14, r24
    4a56:	c4 2f       	mov	r28, r20

    if (buttonEnabled[buttonNumber])    {
    4a58:	fc 01       	movw	r30, r24
    4a5a:	e6 0f       	add	r30, r22
    4a5c:	f1 1d       	adc	r31, r1
    4a5e:	84 a5       	ldd	r24, Z+44	; 0x2c
    4a60:	88 23       	and	r24, r24
    4a62:	f1 f0       	breq	.+60     	; 0x4aa0 <_ZN7Buttons13processButtonEhb+0x5c>

        switch (buttonNumber)   {
    4a64:	86 2f       	mov	r24, r22
    4a66:	90 e0       	ldi	r25, 0x00	; 0
    4a68:	80 32       	cpi	r24, 0x20	; 32
    4a6a:	91 05       	cpc	r25, r1
    4a6c:	c8 f4       	brcc	.+50     	; 0x4aa0 <_ZN7Buttons13processButtonEhb+0x5c>
    4a6e:	fc 01       	movw	r30, r24
    4a70:	e6 51       	subi	r30, 0x16	; 22
    4a72:	ff 4f       	sbci	r31, 0xFF	; 255
    4a74:	0c 94 84 82 	jmp	0x10508	; 0x10508 <__tablejump2__>
            case BUTTON_ON_OFF_AFTERTOUCH:
            case BUTTON_ON_OFF_NOTES:
            case BUTTON_ON_OFF_X:
            case BUTTON_ON_OFF_Y:
            case BUTTON_ON_OFF_SPLIT:
            handleOnOffEvent(buttonNumber, state);
    4a78:	c7 01       	movw	r24, r14
    4a7a:	34 dc       	rcall	.-1944   	; 0x42e4 <_ZN7Buttons16handleOnOffEventEhb>
            break;
    4a7c:	11 c0       	rjmp	.+34     	; 0x4aa0 <_ZN7Buttons13processButtonEhb+0x5c>

            case BUTTON_OCTAVE_DOWN:
            handleOctaveEvent(false, state);
    4a7e:	60 e0       	ldi	r22, 0x00	; 0
    4a80:	c7 01       	movw	r24, r14
    4a82:	90 dd       	rcall	.-1248   	; 0x45a4 <_ZN7Buttons17handleOctaveEventEbb>
            break;
    4a84:	0d c0       	rjmp	.+26     	; 0x4aa0 <_ZN7Buttons13processButtonEhb+0x5c>

            case BUTTON_OCTAVE_UP:
            handleOctaveEvent(true, state);
    4a86:	61 e0       	ldi	r22, 0x01	; 1
    4a88:	c7 01       	movw	r24, r14
    4a8a:	8c dd       	rcall	.-1256   	; 0x45a4 <_ZN7Buttons17handleOctaveEventEbb>
            break;
    4a8c:	09 c0       	rjmp	.+18     	; 0x4aa0 <_ZN7Buttons13processButtonEhb+0x5c>

            case BUTTON_TRANSPORT_STOP:
            case BUTTON_TRANSPORT_PLAY:
            case BUTTON_TRANSPORT_RECORD:
            handleTransportControlEvent(buttonNumber, state);
    4a8e:	c7 01       	movw	r24, r14
    4a90:	d9 dc       	rcall	.-1614   	; 0x4444 <_ZN7Buttons27handleTransportControlEventEhb>
            break;
    4a92:	06 c0       	rjmp	.+12     	; 0x4aa0 <_ZN7Buttons13processButtonEhb+0x5c>
            case BUTTON_NOTE_E:
            case BUTTON_NOTE_F:
            case BUTTON_NOTE_G:
            case BUTTON_NOTE_A:
            case BUTTON_NOTE_B:
            note_t note = getTonicFromButton(buttonNumber);
    4a94:	c7 01       	movw	r24, r14
    4a96:	02 dc       	rcall	.-2044   	; 0x429c <_ZN7Buttons18getTonicFromButtonEh>
            handleTonicEvent(note, state);
    4a98:	4c 2f       	mov	r20, r28
    4a9a:	68 2f       	mov	r22, r24
    4a9c:	c7 01       	movw	r24, r14
    4a9e:	42 dd       	rcall	.-1404   	; 0x4524 <_ZN7Buttons16handleTonicEventE6note_tb>
    4aa0:	e7 01       	movw	r28, r14
    4aa2:	ac 96       	adiw	r28, 0x2c	; 44
    //if button is debounced, return true
    return ((previousButtonState[buttonNumber] == buttonDebounceCompare) || (previousButtonState[buttonNumber] == 0xFF));

}

void Buttons::processButton(uint8_t buttonNumber, bool state)    {
    4aa4:	00 e0       	ldi	r16, 0x00	; 0
    4aa6:	10 e0       	ldi	r17, 0x00	; 0
    //resume all callbacks
    for (int i=0; i<MAX_NUMBER_OF_BUTTONS; i++) {

        if (!buttonEnabled[i] && !getButtonState(i)) {

            buttonEnabled[i] = true;
    4aa8:	dd 24       	eor	r13, r13
    4aaa:	d3 94       	inc	r13
    }

    //resume all callbacks
    for (int i=0; i<MAX_NUMBER_OF_BUTTONS; i++) {

        if (!buttonEnabled[i] && !getButtonState(i)) {
    4aac:	98 81       	ld	r25, Y
    4aae:	91 11       	cpse	r25, r1
    4ab0:	16 c0       	rjmp	.+44     	; 0x4ade <_ZN7Buttons13processButtonEhb+0x9a>

}

bool Buttons::getButtonState(uint8_t buttonNumber) {

    return bitRead(lastButtonDataPress, buttonNumber);
    4ab2:	f7 01       	movw	r30, r14
    4ab4:	84 a1       	ldd	r24, Z+36	; 0x24
    4ab6:	95 a1       	ldd	r25, Z+37	; 0x25
    4ab8:	a6 a1       	ldd	r26, Z+38	; 0x26
    4aba:	b7 a1       	ldd	r27, Z+39	; 0x27
    4abc:	00 2e       	mov	r0, r16
    4abe:	04 c0       	rjmp	.+8      	; 0x4ac8 <_ZN7Buttons13processButtonEhb+0x84>
    4ac0:	b6 95       	lsr	r27
    4ac2:	a7 95       	ror	r26
    4ac4:	97 95       	ror	r25
    4ac6:	87 95       	ror	r24
    4ac8:	0a 94       	dec	r0
    4aca:	d2 f7       	brpl	.-12     	; 0x4ac0 <_ZN7Buttons13processButtonEhb+0x7c>
    }

    //resume all callbacks
    for (int i=0; i<MAX_NUMBER_OF_BUTTONS; i++) {

        if (!buttonEnabled[i] && !getButtonState(i)) {
    4acc:	80 fd       	sbrc	r24, 0
    4ace:	07 c0       	rjmp	.+14     	; 0x4ade <_ZN7Buttons13processButtonEhb+0x9a>
    4ad0:	0d c0       	rjmp	.+26     	; 0x4aec <_ZN7Buttons13processButtonEhb+0xa8>

            buttonEnabled[i] = true;
            //reset blinking
            uint8_t ledNumber = getLEDnumberFromButton(i);
            if (leds.getLEDstate(ledNumber) == ledStateBlink)
                leds.setLEDstate(ledNumber, ledStateOff);
    4ad2:	40 e0       	ldi	r20, 0x00	; 0
    4ad4:	6c 2d       	mov	r22, r12
    4ad6:	80 ed       	ldi	r24, 0xD0	; 208
    4ad8:	9e e0       	ldi	r25, 0x0E	; 14
    4ada:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
        }

    }

    //resume all callbacks
    for (int i=0; i<MAX_NUMBER_OF_BUTTONS; i++) {
    4ade:	0f 5f       	subi	r16, 0xFF	; 255
    4ae0:	1f 4f       	sbci	r17, 0xFF	; 255
    4ae2:	21 96       	adiw	r28, 0x01	; 1
    4ae4:	00 32       	cpi	r16, 0x20	; 32
    4ae6:	11 05       	cpc	r17, r1
    4ae8:	09 f7       	brne	.-62     	; 0x4aac <_ZN7Buttons13processButtonEhb+0x68>
    4aea:	0d c0       	rjmp	.+26     	; 0x4b06 <_ZN7Buttons13processButtonEhb+0xc2>

        if (!buttonEnabled[i] && !getButtonState(i)) {

            buttonEnabled[i] = true;
    4aec:	d8 82       	st	Y, r13
            //reset blinking
            uint8_t ledNumber = getLEDnumberFromButton(i);
    4aee:	60 2f       	mov	r22, r16
    4af0:	c7 01       	movw	r24, r14
    4af2:	e7 de       	rcall	.-562    	; 0x48c2 <_ZN7Buttons22getLEDnumberFromButtonEh>
    4af4:	c8 2e       	mov	r12, r24
            if (leds.getLEDstate(ledNumber) == ledStateBlink)
    4af6:	68 2f       	mov	r22, r24
    4af8:	80 ed       	ldi	r24, 0xD0	; 208
    4afa:	9e e0       	ldi	r25, 0x0E	; 14
    4afc:	0e 94 74 46 	call	0x8ce8	; 0x8ce8 <_ZN4LEDs11getLEDstateEh>
    4b00:	83 30       	cpi	r24, 0x03	; 3
    4b02:	69 f7       	brne	.-38     	; 0x4ade <_ZN7Buttons13processButtonEhb+0x9a>
    4b04:	e6 cf       	rjmp	.-52     	; 0x4ad2 <_ZN7Buttons13processButtonEhb+0x8e>

        }

    }

}
    4b06:	df 91       	pop	r29
    4b08:	cf 91       	pop	r28
    4b0a:	1f 91       	pop	r17
    4b0c:	0f 91       	pop	r16
    4b0e:	ff 90       	pop	r15
    4b10:	ef 90       	pop	r14
    4b12:	df 90       	pop	r13
    4b14:	cf 90       	pop	r12
    4b16:	08 95       	ret

00004b18 <_ZN7Buttons14setButtonStateEhh>:

void Buttons::setButtonState(uint8_t buttonNumber, uint8_t state) {
    4b18:	0f 93       	push	r16
    4b1a:	1f 93       	push	r17
    4b1c:	26 2f       	mov	r18, r22

    bitWrite(lastButtonDataPress, buttonNumber, state);
    4b1e:	44 23       	and	r20, r20
    4b20:	c9 f0       	breq	.+50     	; 0x4b54 <_ZN7Buttons14setButtonStateEhh+0x3c>
    4b22:	41 e0       	ldi	r20, 0x01	; 1
    4b24:	50 e0       	ldi	r21, 0x00	; 0
    4b26:	60 e0       	ldi	r22, 0x00	; 0
    4b28:	70 e0       	ldi	r23, 0x00	; 0
    4b2a:	04 c0       	rjmp	.+8      	; 0x4b34 <_ZN7Buttons14setButtonStateEhh+0x1c>
    4b2c:	44 0f       	add	r20, r20
    4b2e:	55 1f       	adc	r21, r21
    4b30:	66 1f       	adc	r22, r22
    4b32:	77 1f       	adc	r23, r23
    4b34:	2a 95       	dec	r18
    4b36:	d2 f7       	brpl	.-12     	; 0x4b2c <_ZN7Buttons14setButtonStateEhh+0x14>
    4b38:	fc 01       	movw	r30, r24
    4b3a:	04 a1       	ldd	r16, Z+36	; 0x24
    4b3c:	15 a1       	ldd	r17, Z+37	; 0x25
    4b3e:	26 a1       	ldd	r18, Z+38	; 0x26
    4b40:	37 a1       	ldd	r19, Z+39	; 0x27
    4b42:	40 2b       	or	r20, r16
    4b44:	51 2b       	or	r21, r17
    4b46:	62 2b       	or	r22, r18
    4b48:	73 2b       	or	r23, r19
    4b4a:	44 a3       	std	Z+36, r20	; 0x24
    4b4c:	55 a3       	std	Z+37, r21	; 0x25
    4b4e:	66 a3       	std	Z+38, r22	; 0x26
    4b50:	77 a3       	std	Z+39, r23	; 0x27
    4b52:	1c c0       	rjmp	.+56     	; 0x4b8c <_ZN7Buttons14setButtonStateEhh+0x74>
    4b54:	41 e0       	ldi	r20, 0x01	; 1
    4b56:	50 e0       	ldi	r21, 0x00	; 0
    4b58:	60 e0       	ldi	r22, 0x00	; 0
    4b5a:	70 e0       	ldi	r23, 0x00	; 0
    4b5c:	04 c0       	rjmp	.+8      	; 0x4b66 <_ZN7Buttons14setButtonStateEhh+0x4e>
    4b5e:	44 0f       	add	r20, r20
    4b60:	55 1f       	adc	r21, r21
    4b62:	66 1f       	adc	r22, r22
    4b64:	77 1f       	adc	r23, r23
    4b66:	2a 95       	dec	r18
    4b68:	d2 f7       	brpl	.-12     	; 0x4b5e <_ZN7Buttons14setButtonStateEhh+0x46>
    4b6a:	40 95       	com	r20
    4b6c:	50 95       	com	r21
    4b6e:	60 95       	com	r22
    4b70:	70 95       	com	r23
    4b72:	fc 01       	movw	r30, r24
    4b74:	04 a1       	ldd	r16, Z+36	; 0x24
    4b76:	15 a1       	ldd	r17, Z+37	; 0x25
    4b78:	26 a1       	ldd	r18, Z+38	; 0x26
    4b7a:	37 a1       	ldd	r19, Z+39	; 0x27
    4b7c:	40 23       	and	r20, r16
    4b7e:	51 23       	and	r21, r17
    4b80:	62 23       	and	r22, r18
    4b82:	73 23       	and	r23, r19
    4b84:	44 a3       	std	Z+36, r20	; 0x24
    4b86:	55 a3       	std	Z+37, r21	; 0x25
    4b88:	66 a3       	std	Z+38, r22	; 0x26
    4b8a:	77 a3       	std	Z+39, r23	; 0x27

}
    4b8c:	1f 91       	pop	r17
    4b8e:	0f 91       	pop	r16
    4b90:	08 95       	ret

00004b92 <_ZN7Buttons6updateEv>:
    }   else processingEnabled = true;
    #endif

}

void Buttons::update()    {
    4b92:	bf 92       	push	r11
    4b94:	cf 92       	push	r12
    4b96:	df 92       	push	r13
    4b98:	ef 92       	push	r14
    4b9a:	ff 92       	push	r15
    4b9c:	0f 93       	push	r16
    4b9e:	1f 93       	push	r17
    4ba0:	cf 93       	push	r28
    4ba2:	df 93       	push	r29
    4ba4:	8c 01       	movw	r16, r24

    if (!((rTimeMillis() - lastCheckTime) > EXPANDER_CHECK_TIME)) return;
    4ba6:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z11rTimeMillisv>
    4baa:	f8 01       	movw	r30, r16
    4bac:	c0 a4       	ldd	r12, Z+40	; 0x28
    4bae:	d1 a4       	ldd	r13, Z+41	; 0x29
    4bb0:	e2 a4       	ldd	r14, Z+42	; 0x2a
    4bb2:	f3 a4       	ldd	r15, Z+43	; 0x2b
    4bb4:	dc 01       	movw	r26, r24
    4bb6:	cb 01       	movw	r24, r22
    4bb8:	8c 19       	sub	r24, r12
    4bba:	9d 09       	sbc	r25, r13
    4bbc:	ae 09       	sbc	r26, r14
    4bbe:	bf 09       	sbc	r27, r15
    4bc0:	06 97       	sbiw	r24, 0x06	; 6
    4bc2:	a1 05       	cpc	r26, r1
    4bc4:	b1 05       	cpc	r27, r1
    4bc6:	08 f4       	brcc	.+2      	; 0x4bca <_ZN7Buttons6updateEv+0x38>
    4bc8:	b3 c0       	rjmp	.+358    	; 0x4d30 <_ZN7Buttons6updateEv+0x19e>

    if (readStates())   {
    4bca:	c8 01       	movw	r24, r16
    4bcc:	db de       	rcall	.-586    	; 0x4984 <_ZN7Buttons10readStatesEv>
    4bce:	88 23       	and	r24, r24
    4bd0:	09 f4       	brne	.+2      	; 0x4bd4 <_ZN7Buttons6updateEv+0x42>
    4bd2:	43 c0       	rjmp	.+134    	; 0x4c5a <_ZN7Buttons6updateEv+0xc8>
    4bd4:	c0 e0       	ldi	r28, 0x00	; 0
    4bd6:	d0 e0       	ldi	r29, 0x00	; 0
                //act on change only
                if (state == getButtonState(i)) continue;

                //update previous button state with current one
                setButtonState(i, state);
                if (processingEnabled) processButton(i, state);
    4bd8:	78 01       	movw	r14, r16
    4bda:	fc e4       	ldi	r31, 0x4C	; 76
    4bdc:	ef 0e       	add	r14, r31
    4bde:	f1 1c       	adc	r15, r1
    if (readStates())   {

        for (int i=0; i<MAX_NUMBER_OF_BUTTONS; i++) {

            //invert button state because of pull-ups
            uint8_t state = !((mcpData >> i) & 0x01);
    4be0:	f8 01       	movw	r30, r16
    4be2:	40 81       	ld	r20, Z
    4be4:	51 81       	ldd	r21, Z+1	; 0x01
    4be6:	62 81       	ldd	r22, Z+2	; 0x02
    4be8:	73 81       	ldd	r23, Z+3	; 0x03
    4bea:	0c 2e       	mov	r0, r28
    4bec:	04 c0       	rjmp	.+8      	; 0x4bf6 <_ZN7Buttons6updateEv+0x64>
    4bee:	76 95       	lsr	r23
    4bf0:	67 95       	ror	r22
    4bf2:	57 95       	ror	r21
    4bf4:	47 95       	ror	r20
    4bf6:	0a 94       	dec	r0
    4bf8:	d2 f7       	brpl	.-12     	; 0x4bee <_ZN7Buttons6updateEv+0x5c>
    4bfa:	21 e0       	ldi	r18, 0x01	; 1
    4bfc:	42 27       	eor	r20, r18
    4bfe:	84 2f       	mov	r24, r20
    4c00:	81 70       	andi	r24, 0x01	; 1
    4c02:	d8 2e       	mov	r13, r24
            bool debounced = buttonDebounced(i, state);
    4c04:	48 2f       	mov	r20, r24
    4c06:	6c 2f       	mov	r22, r28
    4c08:	c8 01       	movw	r24, r16
    4c0a:	0b df       	rcall	.-490    	; 0x4a22 <_ZN7Buttons15buttonDebouncedEhh>

            if (debounced) {
    4c0c:	88 23       	and	r24, r24
    4c0e:	e1 f0       	breq	.+56     	; 0x4c48 <_ZN7Buttons6updateEv+0xb6>

}

bool Buttons::getButtonState(uint8_t buttonNumber) {

    return bitRead(lastButtonDataPress, buttonNumber);
    4c10:	f8 01       	movw	r30, r16
    4c12:	84 a1       	ldd	r24, Z+36	; 0x24
    4c14:	95 a1       	ldd	r25, Z+37	; 0x25
    4c16:	a6 a1       	ldd	r26, Z+38	; 0x26
    4c18:	b7 a1       	ldd	r27, Z+39	; 0x27
    4c1a:	0c 2e       	mov	r0, r28
    4c1c:	04 c0       	rjmp	.+8      	; 0x4c26 <_ZN7Buttons6updateEv+0x94>
    4c1e:	b6 95       	lsr	r27
    4c20:	a7 95       	ror	r26
    4c22:	97 95       	ror	r25
    4c24:	87 95       	ror	r24
    4c26:	0a 94       	dec	r0
    4c28:	d2 f7       	brpl	.-12     	; 0x4c1e <_ZN7Buttons6updateEv+0x8c>
    4c2a:	81 70       	andi	r24, 0x01	; 1

            if (debounced) {

                //if button state is same as last one, do nothing
                //act on change only
                if (state == getButtonState(i)) continue;
    4c2c:	d8 16       	cp	r13, r24
    4c2e:	61 f0       	breq	.+24     	; 0x4c48 <_ZN7Buttons6updateEv+0xb6>

                //update previous button state with current one
                setButtonState(i, state);
    4c30:	4d 2d       	mov	r20, r13
    4c32:	6c 2f       	mov	r22, r28
    4c34:	c8 01       	movw	r24, r16
    4c36:	70 df       	rcall	.-288    	; 0x4b18 <_ZN7Buttons14setButtonStateEhh>
                if (processingEnabled) processButton(i, state);
    4c38:	f7 01       	movw	r30, r14
    4c3a:	80 81       	ld	r24, Z
    4c3c:	88 23       	and	r24, r24
    4c3e:	21 f0       	breq	.+8      	; 0x4c48 <_ZN7Buttons6updateEv+0xb6>
    4c40:	4d 2d       	mov	r20, r13
    4c42:	6c 2f       	mov	r22, r28
    4c44:	c8 01       	movw	r24, r16
    4c46:	fe de       	rcall	.-516    	; 0x4a44 <_ZN7Buttons13processButtonEhb>

    if (!((rTimeMillis() - lastCheckTime) > EXPANDER_CHECK_TIME)) return;

    if (readStates())   {

        for (int i=0; i<MAX_NUMBER_OF_BUTTONS; i++) {
    4c48:	21 96       	adiw	r28, 0x01	; 1
    4c4a:	c0 32       	cpi	r28, 0x20	; 32
    4c4c:	d1 05       	cpc	r29, r1
    4c4e:	41 f6       	brne	.-112    	; 0x4be0 <_ZN7Buttons6updateEv+0x4e>

            }

        }

        mcpData = 0;
    4c50:	f8 01       	movw	r30, r16
    4c52:	10 82       	st	Z, r1
    4c54:	11 82       	std	Z+1, r1	; 0x01
    4c56:	12 82       	std	Z+2, r1	; 0x02
    4c58:	13 82       	std	Z+3, r1	; 0x03

}

bool Buttons::getButtonState(uint8_t buttonNumber) {

    return bitRead(lastButtonDataPress, buttonNumber);
    4c5a:	f8 01       	movw	r30, r16
    4c5c:	84 a1       	ldd	r24, Z+36	; 0x24
    4c5e:	95 a1       	ldd	r25, Z+37	; 0x25
    4c60:	a6 a1       	ldd	r26, Z+38	; 0x26
    4c62:	b7 a1       	ldd	r27, Z+39	; 0x27
    4c64:	07 2e       	mov	r0, r23
    4c66:	7b e1       	ldi	r23, 0x1B	; 27
    4c68:	b6 95       	lsr	r27
    4c6a:	a7 95       	ror	r26
    4c6c:	97 95       	ror	r25
    4c6e:	87 95       	ror	r24
    4c70:	7a 95       	dec	r23
    4c72:	d1 f7       	brne	.-12     	; 0x4c68 <_ZN7Buttons6updateEv+0xd6>
    4c74:	70 2d       	mov	r23, r0
        mcpData = 0;

    }

    //check split button for entering into user menu
    if (getButtonState(BUTTON_ON_OFF_SPLIT) && buttonEnabled[BUTTON_ON_OFF_SPLIT])   {
    4c76:	80 ff       	sbrs	r24, 0
    4c78:	46 c0       	rjmp	.+140    	; 0x4d06 <_ZN7Buttons6updateEv+0x174>
    4c7a:	e9 5b       	subi	r30, 0xB9	; 185
    4c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c7e:	80 81       	ld	r24, Z
    4c80:	81 11       	cpse	r24, r1
    4c82:	49 c0       	rjmp	.+146    	; 0x4d16 <_ZN7Buttons6updateEv+0x184>
    4c84:	40 c0       	rjmp	.+128    	; 0x4d06 <_ZN7Buttons6updateEv+0x174>

        //measure the time the button is pressed
        if (!userMenuTimeout) userMenuTimeout = rTimeMillis();
    4c86:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z11rTimeMillisv>
    4c8a:	f8 01       	movw	r30, r16
    4c8c:	e3 5b       	subi	r30, 0xB3	; 179
    4c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c90:	60 83       	st	Z, r22
    4c92:	71 83       	std	Z+1, r23	; 0x01
    4c94:	82 83       	std	Z+2, r24	; 0x02
    4c96:	93 83       	std	Z+3, r25	; 0x03
    4c98:	2e c0       	rjmp	.+92     	; 0x4cf6 <_ZN7Buttons6updateEv+0x164>
        else if (((rTimeMillis() - userMenuTimeout) > USER_MENU_TIMEOUT) && !menu.menuDisplayed()) {
    4c9a:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z11rTimeMillisv>
    4c9e:	f8 01       	movw	r30, r16
    4ca0:	e3 5b       	subi	r30, 0xB3	; 179
    4ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ca4:	c0 80       	ld	r12, Z
    4ca6:	d1 80       	ldd	r13, Z+1	; 0x01
    4ca8:	e2 80       	ldd	r14, Z+2	; 0x02
    4caa:	f3 80       	ldd	r15, Z+3	; 0x03
    4cac:	dc 01       	movw	r26, r24
    4cae:	cb 01       	movw	r24, r22
    4cb0:	8c 19       	sub	r24, r12
    4cb2:	9d 09       	sbc	r25, r13
    4cb4:	ae 09       	sbc	r26, r14
    4cb6:	bf 09       	sbc	r27, r15
    4cb8:	8d 3d       	cpi	r24, 0xDD	; 221
    4cba:	95 40       	sbci	r25, 0x05	; 5
    4cbc:	a1 05       	cpc	r26, r1
    4cbe:	b1 05       	cpc	r27, r1
    4cc0:	d0 f0       	brcs	.+52     	; 0x4cf6 <_ZN7Buttons6updateEv+0x164>
    4cc2:	89 ed       	ldi	r24, 0xD9	; 217
    4cc4:	98 e0       	ldi	r25, 0x08	; 8
    4cc6:	0e 94 0f 30 	call	0x601e	; 0x601e <_ZN4Menu13menuDisplayedEv>
    4cca:	81 11       	cpse	r24, r1
    4ccc:	14 c0       	rjmp	.+40     	; 0x4cf6 <_ZN7Buttons6updateEv+0x164>

            //buttonEnabled[BUTTON_ON_OFF_SPLIT] = false;
            userMenuTimeout = 0;
    4cce:	f8 01       	movw	r30, r16
    4cd0:	e3 5b       	subi	r30, 0xB3	; 179
    4cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd4:	10 82       	st	Z, r1
    4cd6:	11 82       	std	Z+1, r1	; 0x01
    4cd8:	12 82       	std	Z+2, r1	; 0x02
    4cda:	13 82       	std	Z+3, r1	; 0x03
            #ifdef MODULE_LCD
            menu.displayMenu(userMenu);
    4cdc:	60 e0       	ldi	r22, 0x00	; 0
    4cde:	89 ed       	ldi	r24, 0xD9	; 217
    4ce0:	98 e0       	ldi	r25, 0x08	; 8
    4ce2:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <_ZN4Menu11displayMenuE10menuType_t>
}

void Buttons::disable(int8_t buttonID) {

    if (buttonID == -1)
        processingEnabled = false;
    4ce6:	10 92 8c 08 	sts	0x088C, r1
                printf("Entering user menu\n");
            #endif
            //disable buttons while in menu
            buttons.disable();
            //turn off blinky led
            leds.setLEDstate(LED_ON_OFF_SPLIT, ledStateOff);
    4cea:	40 e0       	ldi	r20, 0x00	; 0
    4cec:	66 e0       	ldi	r22, 0x06	; 6
    4cee:	80 ed       	ldi	r24, 0xD0	; 208
    4cf0:	9e e0       	ldi	r25, 0x0E	; 14
    4cf2:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>

        }

    }  else userMenuTimeout = 0;

    lastCheckTime = rTimeMillis();
    4cf6:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z11rTimeMillisv>
    4cfa:	f8 01       	movw	r30, r16
    4cfc:	60 a7       	std	Z+40, r22	; 0x28
    4cfe:	71 a7       	std	Z+41, r23	; 0x29
    4d00:	82 a7       	std	Z+42, r24	; 0x2a
    4d02:	93 a7       	std	Z+43, r25	; 0x2b
    4d04:	15 c0       	rjmp	.+42     	; 0x4d30 <_ZN7Buttons6updateEv+0x19e>
            //turn off blinky led
            leds.setLEDstate(LED_ON_OFF_SPLIT, ledStateOff);

        }

    }  else userMenuTimeout = 0;
    4d06:	f8 01       	movw	r30, r16
    4d08:	e3 5b       	subi	r30, 0xB3	; 179
    4d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d0c:	10 82       	st	Z, r1
    4d0e:	11 82       	std	Z+1, r1	; 0x01
    4d10:	12 82       	std	Z+2, r1	; 0x02
    4d12:	13 82       	std	Z+3, r1	; 0x03
    4d14:	f0 cf       	rjmp	.-32     	; 0x4cf6 <_ZN7Buttons6updateEv+0x164>

    //check split button for entering into user menu
    if (getButtonState(BUTTON_ON_OFF_SPLIT) && buttonEnabled[BUTTON_ON_OFF_SPLIT])   {

        //measure the time the button is pressed
        if (!userMenuTimeout) userMenuTimeout = rTimeMillis();
    4d16:	f8 01       	movw	r30, r16
    4d18:	e3 5b       	subi	r30, 0xB3	; 179
    4d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d1c:	80 81       	ld	r24, Z
    4d1e:	91 81       	ldd	r25, Z+1	; 0x01
    4d20:	a2 81       	ldd	r26, Z+2	; 0x02
    4d22:	b3 81       	ldd	r27, Z+3	; 0x03
    4d24:	89 2b       	or	r24, r25
    4d26:	8a 2b       	or	r24, r26
    4d28:	8b 2b       	or	r24, r27
    4d2a:	09 f4       	brne	.+2      	; 0x4d2e <_ZN7Buttons6updateEv+0x19c>
    4d2c:	ac cf       	rjmp	.-168    	; 0x4c86 <_ZN7Buttons6updateEv+0xf4>
    4d2e:	b5 cf       	rjmp	.-150    	; 0x4c9a <_ZN7Buttons6updateEv+0x108>

    }  else userMenuTimeout = 0;

    lastCheckTime = rTimeMillis();

}
    4d30:	df 91       	pop	r29
    4d32:	cf 91       	pop	r28
    4d34:	1f 91       	pop	r17
    4d36:	0f 91       	pop	r16
    4d38:	ff 90       	pop	r15
    4d3a:	ef 90       	pop	r14
    4d3c:	df 90       	pop	r13
    4d3e:	cf 90       	pop	r12
    4d40:	bf 90       	pop	r11
    4d42:	08 95       	ret

00004d44 <_ZN7Buttons4initEv>:
    i2c_write(value);
    i2c_stop();

}

void Buttons::init()  {
    4d44:	cf 92       	push	r12
    4d46:	df 92       	push	r13
    4d48:	ef 92       	push	r14
    4d4a:	ff 92       	push	r15
    4d4c:	cf 93       	push	r28
    4d4e:	df 93       	push	r29
    4d50:	ec 01       	movw	r28, r24

    mapButtonsToLEDs();
    4d52:	89 dd       	rcall	.-1262   	; 0x4866 <_ZN7Buttons16mapButtonsToLEDsEv>

    i2c_init();
    4d54:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <_Z8i2c_initv>

    //ensure that we know the configuration
    write_I2C_reg(expanderAddress[0], 0x0A, 0x00);              //IOCON=0x00 if BANK=0
    4d58:	40 e0       	ldi	r20, 0x00	; 0
    4d5a:	6a e0       	ldi	r22, 0x0A	; 10
    4d5c:	81 e2       	ldi	r24, 0x21	; 33
    4d5e:	f2 dd       	rcall	.-1052   	; 0x4944 <_Z13write_I2C_reghhh>
    write_I2C_reg(expanderAddress[0], 0x05, 0x00);              //IOCON=0x00 if BANK=1
    4d60:	40 e0       	ldi	r20, 0x00	; 0
    4d62:	65 e0       	ldi	r22, 0x05	; 5
    4d64:	81 e2       	ldi	r24, 0x21	; 33
    4d66:	ee dd       	rcall	.-1060   	; 0x4944 <_Z13write_I2C_reghhh>
    write_I2C_reg(expanderAddress[1], 0x0A, 0x00);              //IOCON=0x00 if BANK=0
    4d68:	40 e0       	ldi	r20, 0x00	; 0
    4d6a:	6a e0       	ldi	r22, 0x0A	; 10
    4d6c:	80 e2       	ldi	r24, 0x20	; 32
    4d6e:	ea dd       	rcall	.-1068   	; 0x4944 <_Z13write_I2C_reghhh>
    write_I2C_reg(expanderAddress[1], 0x05, 0x00);              //IOCON=0x00 if BANK=1
    4d70:	40 e0       	ldi	r20, 0x00	; 0
    4d72:	65 e0       	ldi	r22, 0x05	; 5
    4d74:	80 e2       	ldi	r24, 0x20	; 32
    4d76:	e6 dd       	rcall	.-1076   	; 0x4944 <_Z13write_I2C_reghhh>

    write_I2C_reg(expanderAddress[0], iodirAddress[0], 0xFF);   //expander 1, set all pins on PORTA to input mode
    4d78:	4f ef       	ldi	r20, 0xFF	; 255
    4d7a:	60 e0       	ldi	r22, 0x00	; 0
    4d7c:	81 e2       	ldi	r24, 0x21	; 33
    4d7e:	e2 dd       	rcall	.-1084   	; 0x4944 <_Z13write_I2C_reghhh>
    write_I2C_reg(expanderAddress[0], iodirAddress[1], 0xFF);   //expander 1, set all pins on PORTB to input mode
    4d80:	4f ef       	ldi	r20, 0xFF	; 255
    4d82:	61 e0       	ldi	r22, 0x01	; 1
    4d84:	81 e2       	ldi	r24, 0x21	; 33
    4d86:	de dd       	rcall	.-1092   	; 0x4944 <_Z13write_I2C_reghhh>

    write_I2C_reg(expanderAddress[1], iodirAddress[0], 0xFF);   //expander 2, set all pins on PORTA to input mode
    4d88:	4f ef       	ldi	r20, 0xFF	; 255
    4d8a:	60 e0       	ldi	r22, 0x00	; 0
    4d8c:	80 e2       	ldi	r24, 0x20	; 32
    4d8e:	da dd       	rcall	.-1100   	; 0x4944 <_Z13write_I2C_reghhh>
    write_I2C_reg(expanderAddress[1], iodirAddress[1], 0xFF);   //expander 2, set all pins on PORTB to input mode
    4d90:	4f ef       	ldi	r20, 0xFF	; 255
    4d92:	61 e0       	ldi	r22, 0x01	; 1
    4d94:	80 e2       	ldi	r24, 0x20	; 32
    4d96:	d6 dd       	rcall	.-1108   	; 0x4944 <_Z13write_I2C_reghhh>

    write_I2C_reg(expanderAddress[0], gppuAddress[0], 0xFF);    //expander 1, turn on pull-ups, PORTA
    4d98:	4f ef       	ldi	r20, 0xFF	; 255
    4d9a:	6c e0       	ldi	r22, 0x0C	; 12
    4d9c:	81 e2       	ldi	r24, 0x21	; 33
    4d9e:	d2 dd       	rcall	.-1116   	; 0x4944 <_Z13write_I2C_reghhh>
    write_I2C_reg(expanderAddress[0], gppuAddress[1], 0xFF);    //expander 1, turn on pull-ups, PORTB
    4da0:	4f ef       	ldi	r20, 0xFF	; 255
    4da2:	6d e0       	ldi	r22, 0x0D	; 13
    4da4:	81 e2       	ldi	r24, 0x21	; 33
    4da6:	ce dd       	rcall	.-1124   	; 0x4944 <_Z13write_I2C_reghhh>

    write_I2C_reg(expanderAddress[1], gppuAddress[0], 0xFF);    //expander 2, turn on pull-ups, PORTA
    4da8:	4f ef       	ldi	r20, 0xFF	; 255
    4daa:	6c e0       	ldi	r22, 0x0C	; 12
    4dac:	80 e2       	ldi	r24, 0x20	; 32
    4dae:	ca dd       	rcall	.-1132   	; 0x4944 <_Z13write_I2C_reghhh>
    write_I2C_reg(expanderAddress[1], gppuAddress[1], 0xFF);    //expander 2, turn on pull-ups, PORTB
    4db0:	4f ef       	ldi	r20, 0xFF	; 255
    4db2:	6d e0       	ldi	r22, 0x0D	; 13
    4db4:	80 e2       	ldi	r24, 0x20	; 32
    4db6:	c6 dd       	rcall	.-1140   	; 0x4944 <_Z13write_I2C_reghhh>

    uint32_t currentTime = rTimeMillis();
    4db8:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z11rTimeMillisv>
    4dbc:	6b 01       	movw	r12, r22
    4dbe:	7c 01       	movw	r14, r24

    #ifdef MODULE_LCD
    processingEnabled = false;
    4dc0:	fe 01       	movw	r30, r28
    4dc2:	e4 5b       	subi	r30, 0xB4	; 180
    4dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    4dc6:	10 82       	st	Z, r1

    //read buttons for 0.1 seconds
    do {

        //read all buttons without activating event handlers
        update();
    4dc8:	ce 01       	movw	r24, r28
    4dca:	e3 de       	rcall	.-570    	; 0x4b92 <_ZN7Buttons6updateEv>

    }   while ((rTimeMillis() - currentTime) < 100);
    4dcc:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z11rTimeMillisv>
    4dd0:	dc 01       	movw	r26, r24
    4dd2:	cb 01       	movw	r24, r22
    4dd4:	8c 19       	sub	r24, r12
    4dd6:	9d 09       	sbc	r25, r13
    4dd8:	ae 09       	sbc	r26, r14
    4dda:	bf 09       	sbc	r27, r15

    #ifdef MODULE_LCD
    processingEnabled = false;

    //read buttons for 0.1 seconds
    do {
    4ddc:	84 36       	cpi	r24, 0x64	; 100
    4dde:	91 05       	cpc	r25, r1
    4de0:	a1 05       	cpc	r26, r1
    4de2:	b1 05       	cpc	r27, r1
    4de4:	88 f3       	brcs	.-30     	; 0x4dc8 <_ZN7Buttons4initEv+0x84>
    4de6:	8c a1       	ldd	r24, Y+36	; 0x24
    4de8:	9d a1       	ldd	r25, Y+37	; 0x25
    4dea:	ae a1       	ldd	r26, Y+38	; 0x26
    4dec:	bf a1       	ldd	r27, Y+39	; 0x27
    4dee:	88 27       	eor	r24, r24
    4df0:	99 27       	eor	r25, r25
    4df2:	a0 76       	andi	r26, 0x60	; 96
    4df4:	bb 27       	eor	r27, r27
        //read all buttons without activating event handlers
        update();

    }   while ((rTimeMillis() - currentTime) < 100);

    if (getButtonState(BUTTON_TRANSPORT_PLAY) && getButtonState(BUTTON_TRANSPORT_STOP)) {
    4df6:	00 97       	sbiw	r24, 0x00	; 0
    4df8:	a0 46       	sbci	r26, 0x60	; 96
    4dfa:	b1 05       	cpc	r27, r1
    4dfc:	49 f4       	brne	.+18     	; 0x4e10 <_ZN7Buttons4initEv+0xcc>

        menu.displayMenu(serviceMenu);
    4dfe:	61 e0       	ldi	r22, 0x01	; 1
    4e00:	89 ed       	ldi	r24, 0xD9	; 217
    4e02:	98 e0       	ldi	r25, 0x08	; 8
    4e04:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <_ZN4Menu11displayMenuE10menuType_t>
}

void Buttons::disable(int8_t buttonID) {

    if (buttonID == -1)
        processingEnabled = false;
    4e08:	c4 5b       	subi	r28, 0xB4	; 180
    4e0a:	df 4f       	sbci	r29, 0xFF	; 255
    4e0c:	18 82       	st	Y, r1
    4e0e:	04 c0       	rjmp	.+8      	; 0x4e18 <_ZN7Buttons4initEv+0xd4>
    if (getButtonState(BUTTON_TRANSPORT_PLAY) && getButtonState(BUTTON_TRANSPORT_STOP)) {

        menu.displayMenu(serviceMenu);
        disable();

    }   else processingEnabled = true;
    4e10:	c4 5b       	subi	r28, 0xB4	; 180
    4e12:	df 4f       	sbci	r29, 0xFF	; 255
    4e14:	81 e0       	ldi	r24, 0x01	; 1
    4e16:	88 83       	st	Y, r24
    #endif

}
    4e18:	df 91       	pop	r29
    4e1a:	cf 91       	pop	r28
    4e1c:	ff 90       	pop	r15
    4e1e:	ef 90       	pop	r14
    4e20:	df 90       	pop	r13
    4e22:	cf 90       	pop	r12
    4e24:	08 95       	ret

00004e26 <_ZN7Buttons6enableEa>:

}

void Buttons::enable(int8_t buttonID)  {

    if (buttonID == -1)
    4e26:	6f 3f       	cpi	r22, 0xFF	; 255
    4e28:	31 f4       	brne	.+12     	; 0x4e36 <_ZN7Buttons6enableEa+0x10>
        processingEnabled = true;
    4e2a:	fc 01       	movw	r30, r24
    4e2c:	e4 5b       	subi	r30, 0xB4	; 180
    4e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e30:	81 e0       	ldi	r24, 0x01	; 1
    4e32:	80 83       	st	Z, r24
    4e34:	08 95       	ret

    else buttonEnabled[buttonID] = true;
    4e36:	fc 01       	movw	r30, r24
    4e38:	e6 0f       	add	r30, r22
    4e3a:	f1 1d       	adc	r31, r1
    4e3c:	67 fd       	sbrc	r22, 7
    4e3e:	fa 95       	dec	r31
    4e40:	21 e0       	ldi	r18, 0x01	; 1
    4e42:	24 a7       	std	Z+44, r18	; 0x2c
    4e44:	08 95       	ret

00004e46 <_ZN7Buttons7disableEa>:

}

void Buttons::disable(int8_t buttonID) {

    if (buttonID == -1)
    4e46:	6f 3f       	cpi	r22, 0xFF	; 255
    4e48:	29 f4       	brne	.+10     	; 0x4e54 <_ZN7Buttons7disableEa+0xe>
        processingEnabled = false;
    4e4a:	fc 01       	movw	r30, r24
    4e4c:	e4 5b       	subi	r30, 0xB4	; 180
    4e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e50:	10 82       	st	Z, r1
    4e52:	08 95       	ret

    else buttonEnabled[buttonID] = false;
    4e54:	fc 01       	movw	r30, r24
    4e56:	e6 0f       	add	r30, r22
    4e58:	f1 1d       	adc	r31, r1
    4e5a:	67 fd       	sbrc	r22, 7
    4e5c:	fa 95       	dec	r31
    4e5e:	14 a6       	std	Z+44, r1	; 0x2c
    4e60:	08 95       	ret

00004e62 <_ZN8EncodersC1Ev>:
    for (int i=0; i<NUMBER_OF_ENCODERS; i++)
        lastStepTime[i] = 0;

}

void Encoders::init()   {
    4e62:	fc 01       	movw	r30, r24
    4e64:	88 96       	adiw	r24, 0x28	; 40
    4e66:	11 92       	st	Z+, r1
    4e68:	11 92       	st	Z+, r1
    4e6a:	11 92       	st	Z+, r1
    4e6c:	11 92       	st	Z+, r1
    4e6e:	e8 17       	cp	r30, r24
    4e70:	f9 07       	cpc	r31, r25
    4e72:	c9 f7       	brne	.-14     	; 0x4e66 <_ZN8EncodersC1Ev+0x4>
    4e74:	08 95       	ret

00004e76 <_ZN8Encoders13handleEncoderEhbh>:

    }

}

void Encoders::handleEncoder(uint8_t encoderNumber, bool direction, uint8_t steps)   {
    4e76:	cf 92       	push	r12
    4e78:	df 92       	push	r13
    4e7a:	ef 92       	push	r14
    4e7c:	ff 92       	push	r15
    4e7e:	0f 93       	push	r16
    4e80:	1f 93       	push	r17
    4e82:	cf 93       	push	r28
    4e84:	df 93       	push	r29
    4e86:	c6 2f       	mov	r28, r22
    4e88:	d4 2f       	mov	r29, r20
    4e8a:	f2 2e       	mov	r15, r18

    //don't allow changing settings using encoders during pad edit mode
    if (pads.editModeActive()) {
    4e8c:	8a e6       	ldi	r24, 0x6A	; 106
    4e8e:	9f e0       	ldi	r25, 0x0F	; 15
    4e90:	0e 94 8c 56 	call	0xad18	; 0xad18 <_ZN4Pads14editModeActiveEv>
    4e94:	88 23       	and	r24, r24
    4e96:	29 f0       	breq	.+10     	; 0x4ea2 <_ZN8Encoders13handleEncoderEhbh+0x2c>

        #ifdef MODULE_LCD
            display.displayPadEditChangeParametersError();
    4e98:	82 e6       	ldi	r24, 0x62	; 98
    4e9a:	9c e0       	ldi	r25, 0x0C	; 12
    4e9c:	0e 94 38 37 	call	0x6e70	; 0x6e70 <_ZN3LCD35displayPadEditChangeParametersErrorEv>
        #endif
        return;
    4ea0:	4c c1       	rjmp	.+664    	; 0x513a <_ZN8Encoders13handleEncoderEhbh+0x2c4>

    }

    //allow only program and preset encoder while in menu
    #ifdef MODULE_LCD
    if (menu.menuDisplayed())   {
    4ea2:	89 ed       	ldi	r24, 0xD9	; 217
    4ea4:	98 e0       	ldi	r25, 0x08	; 8
    4ea6:	0e 94 0f 30 	call	0x601e	; 0x601e <_ZN4Menu13menuDisplayedEv>
    4eaa:	88 23       	and	r24, r24
    4eac:	19 f0       	breq	.+6      	; 0x4eb4 <_ZN8Encoders13handleEncoderEhbh+0x3e>

        if (!((encoderNumber == PROGRAM_ENCODER) || (encoderNumber == PRESET_ENCODER)))
    4eae:	c2 30       	cpi	r28, 0x02	; 2
    4eb0:	08 f0       	brcs	.+2      	; 0x4eb4 <_ZN8Encoders13handleEncoderEhbh+0x3e>
    4eb2:	43 c1       	rjmp	.+646    	; 0x513a <_ZN8Encoders13handleEncoderEhbh+0x2c4>
            return;

    }
    #endif

    uint8_t lastTouchedPad = pads.getLastTouchedPad();
    4eb4:	8a e6       	ldi	r24, 0x6A	; 106
    4eb6:	9f e0       	ldi	r25, 0x0F	; 15
    4eb8:	0e 94 38 69 	call	0xd270	; 0xd270 <_ZN4Pads17getLastTouchedPadEv>
    4ebc:	e8 2e       	mov	r14, r24
    bool _splitState = pads.getSplitState();
    4ebe:	8a e6       	ldi	r24, 0x6A	; 106
    4ec0:	9f e0       	ldi	r25, 0x0F	; 15
    4ec2:	0e 94 e7 67 	call	0xcfce	; 0xcfce <_ZN4Pads13getSplitStateEv>
    4ec6:	c8 2e       	mov	r12, r24
    uint8_t activeCurve = 0;
    uint8_t value;
    int8_t activePreset;
    bool padsReleased = pads.allPadsReleased();
    4ec8:	8a e6       	ldi	r24, 0x6A	; 106
    4eca:	9f e0       	ldi	r25, 0x0F	; 15
    4ecc:	0e 94 6e 69 	call	0xd2dc	; 0xd2dc <_ZN4Pads15allPadsReleasedEv>
    4ed0:	d8 2e       	mov	r13, r24
    coordinateType_t coordinate = coordinateX;
    ccLimitType_t limit = ccLimitTypeMin;

    switch(encoderNumber)   {
    4ed2:	0c 2f       	mov	r16, r28
    4ed4:	10 e0       	ldi	r17, 0x00	; 0
    4ed6:	0a 30       	cpi	r16, 0x0A	; 10
    4ed8:	11 05       	cpc	r17, r1
    4eda:	08 f0       	brcs	.+2      	; 0x4ede <_ZN8Encoders13handleEncoderEhbh+0x68>
    4edc:	2e c1       	rjmp	.+604    	; 0x513a <_ZN8Encoders13handleEncoderEhbh+0x2c4>
    4ede:	f8 01       	movw	r30, r16
    4ee0:	e6 5f       	subi	r30, 0xF6	; 246
    4ee2:	fe 4f       	sbci	r31, 0xFE	; 254
    4ee4:	0c 94 84 82 	jmp	0x10508	; 0x10508 <__tablejump2__>

        case PROGRAM_ENCODER:
        #ifdef MODULE_LCD
        if (menu.menuDisplayed())
    4ee8:	89 ed       	ldi	r24, 0xD9	; 217
    4eea:	98 e0       	ldi	r25, 0x08	; 8
    4eec:	0e 94 0f 30 	call	0x601e	; 0x601e <_ZN4Menu13menuDisplayedEv>
    4ef0:	88 23       	and	r24, r24
    4ef2:	31 f0       	breq	.+12     	; 0x4f00 <_ZN8Encoders13handleEncoderEhbh+0x8a>
            menu.changeOption(direction);
    4ef4:	6d 2f       	mov	r22, r29
    4ef6:	89 ed       	ldi	r24, 0xD9	; 217
    4ef8:	98 e0       	ldi	r25, 0x08	; 8
    4efa:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <_ZN4Menu12changeOptionEb>
    4efe:	1d c1       	rjmp	.+570    	; 0x513a <_ZN8Encoders13handleEncoderEhbh+0x2c4>
        else
        #endif
        {
            if (!padsReleased) {
    4f00:	d1 10       	cpse	r13, r1
    4f02:	06 c0       	rjmp	.+12     	; 0x4f10 <_ZN8Encoders13handleEncoderEhbh+0x9a>

                //disable encoders while pads are pressed
                #ifdef MODULE_LCD
                display.displayPadReleaseError(changeProgram);
    4f04:	60 e0       	ldi	r22, 0x00	; 0
    4f06:	82 e6       	ldi	r24, 0x62	; 98
    4f08:	9c e0       	ldi	r25, 0x0C	; 12
    4f0a:	0e 94 ae 36 	call	0x6d5c	; 0x6d5c <_ZN3LCD22displayPadReleaseErrorE17padReleaseError_t>
                #endif
                return;
    4f0e:	15 c1       	rjmp	.+554    	; 0x513a <_ZN8Encoders13handleEncoderEhbh+0x2c4>

            }

            if (buttons.getButtonState(BUTTON_ON_OFF_SPLIT))    {   //change midi channel
    4f10:	6b e1       	ldi	r22, 0x1B	; 27
    4f12:	80 e4       	ldi	r24, 0x40	; 64
    4f14:	98 e0       	ldi	r25, 0x08	; 8
    4f16:	28 dd       	rcall	.-1456   	; 0x4968 <_ZN7Buttons14getButtonStateEh>
    4f18:	88 23       	and	r24, r24
    4f1a:	79 f1       	breq	.+94     	; 0x4f7a <_ZN8Encoders13handleEncoderEhbh+0x104>

                buttons.disable(BUTTON_ON_OFF_SPLIT);
    4f1c:	6b e1       	ldi	r22, 0x1B	; 27
    4f1e:	80 e4       	ldi	r24, 0x40	; 64
    4f20:	98 e0       	ldi	r25, 0x08	; 8
    4f22:	91 df       	rcall	.-222    	; 0x4e46 <_ZN7Buttons7disableEa>

                uint8_t midiChannel = pads.getMIDIchannel(lastTouchedPad);
    4f24:	6e 2d       	mov	r22, r14
    4f26:	8a e6       	ldi	r24, 0x6A	; 106
    4f28:	9f e0       	ldi	r25, 0x0F	; 15
    4f2a:	0e 94 47 68 	call	0xd08e	; 0xd08e <_ZN4Pads14getMIDIchannelEh>

                if (direction) midiChannel++;
    4f2e:	dd 23       	and	r29, r29
    4f30:	19 f0       	breq	.+6      	; 0x4f38 <_ZN8Encoders13handleEncoderEhbh+0xc2>
    4f32:	41 e0       	ldi	r20, 0x01	; 1
    4f34:	48 0f       	add	r20, r24
    4f36:	02 c0       	rjmp	.+4      	; 0x4f3c <_ZN8Encoders13handleEncoderEhbh+0xc6>
                else           midiChannel--;
    4f38:	4f ef       	ldi	r20, 0xFF	; 255
    4f3a:	48 0f       	add	r20, r24

                if (midiChannel < 1)  midiChannel = 16;
    4f3c:	44 23       	and	r20, r20
    4f3e:	21 f0       	breq	.+8      	; 0x4f48 <_ZN8Encoders13handleEncoderEhbh+0xd2>
                if (midiChannel > 16) midiChannel = 1;
    4f40:	41 31       	cpi	r20, 0x11	; 17
    4f42:	18 f0       	brcs	.+6      	; 0x4f4a <_ZN8Encoders13handleEncoderEhbh+0xd4>
    4f44:	41 e0       	ldi	r20, 0x01	; 1
    4f46:	01 c0       	rjmp	.+2      	; 0x4f4a <_ZN8Encoders13handleEncoderEhbh+0xd4>
                uint8_t midiChannel = pads.getMIDIchannel(lastTouchedPad);

                if (direction) midiChannel++;
                else           midiChannel--;

                if (midiChannel < 1)  midiChannel = 16;
    4f48:	40 e1       	ldi	r20, 0x10	; 16
                if (midiChannel > 16) midiChannel = 1;

                pads.setMIDIchannel(lastTouchedPad, midiChannel);
    4f4a:	6e 2d       	mov	r22, r14
    4f4c:	8a e6       	ldi	r24, 0x6A	; 106
    4f4e:	9f e0       	ldi	r25, 0x0F	; 15
    4f50:	0e 94 c4 70 	call	0xe188	; 0xe188 <_ZN4Pads14setMIDIchannelEhh>

                #ifdef MODULE_LCD
                display.displayMIDIchannelChange(pads.getMIDIchannel(lastTouchedPad), pads.getSplitState(), lastTouchedPad+1);
    4f54:	8a e6       	ldi	r24, 0x6A	; 106
    4f56:	9f e0       	ldi	r25, 0x0F	; 15
    4f58:	0e 94 e7 67 	call	0xcfce	; 0xcfce <_ZN4Pads13getSplitStateEv>
    4f5c:	c8 2f       	mov	r28, r24
    4f5e:	6e 2d       	mov	r22, r14
    4f60:	8a e6       	ldi	r24, 0x6A	; 106
    4f62:	9f e0       	ldi	r25, 0x0F	; 15
    4f64:	0e 94 47 68 	call	0xd08e	; 0xd08e <_ZN4Pads14getMIDIchannelEh>
    4f68:	68 2f       	mov	r22, r24
    4f6a:	21 e0       	ldi	r18, 0x01	; 1
    4f6c:	2e 0d       	add	r18, r14
    4f6e:	4c 2f       	mov	r20, r28
    4f70:	82 e6       	ldi	r24, 0x62	; 98
    4f72:	9c e0       	ldi	r25, 0x0C	; 12
    4f74:	0e 94 8c 32 	call	0x6518	; 0x6518 <_ZN3LCD24displayMIDIchannelChangeEhbh>
    4f78:	e0 c0       	rjmp	.+448    	; 0x513a <_ZN8Encoders13handleEncoderEhbh+0x2c4>
                #endif

            }   else {

                int8_t activeProgram = pads.getActiveProgram();
    4f7a:	8a e6       	ldi	r24, 0x6A	; 106
    4f7c:	9f e0       	ldi	r25, 0x0F	; 15
    4f7e:	0e 94 ec 67 	call	0xcfd8	; 0xcfd8 <_ZN4Pads16getActiveProgramEv>

                if (direction) activeProgram++; else activeProgram--;
    4f82:	dd 23       	and	r29, r29
    4f84:	19 f0       	breq	.+6      	; 0x4f8c <_ZN8Encoders13handleEncoderEhbh+0x116>
    4f86:	c1 e0       	ldi	r28, 0x01	; 1
    4f88:	c8 0f       	add	r28, r24
    4f8a:	02 c0       	rjmp	.+4      	; 0x4f90 <_ZN8Encoders13handleEncoderEhbh+0x11a>
    4f8c:	cf ef       	ldi	r28, 0xFF	; 255
    4f8e:	c8 0f       	add	r28, r24
                if (activeProgram == NUMBER_OF_PROGRAMS) activeProgram = 0;
    4f90:	ca 30       	cpi	r28, 0x0A	; 10
    4f92:	21 f0       	breq	.+8      	; 0x4f9c <_ZN8Encoders13handleEncoderEhbh+0x126>
                else if (activeProgram < 0) activeProgram = (NUMBER_OF_PROGRAMS-1);
    4f94:	cc 23       	and	r28, r28
    4f96:	1c f4       	brge	.+6      	; 0x4f9e <_ZN8Encoders13handleEncoderEhbh+0x128>
    4f98:	c9 e0       	ldi	r28, 0x09	; 9
    4f9a:	01 c0       	rjmp	.+2      	; 0x4f9e <_ZN8Encoders13handleEncoderEhbh+0x128>
            }   else {

                int8_t activeProgram = pads.getActiveProgram();

                if (direction) activeProgram++; else activeProgram--;
                if (activeProgram == NUMBER_OF_PROGRAMS) activeProgram = 0;
    4f9c:	c0 e0       	ldi	r28, 0x00	; 0
                else if (activeProgram < 0) activeProgram = (NUMBER_OF_PROGRAMS-1);
                pads.setActiveProgram(activeProgram);
    4f9e:	6c 2f       	mov	r22, r28
    4fa0:	8a e6       	ldi	r24, 0x6A	; 106
    4fa2:	9f e0       	ldi	r25, 0x0F	; 15
    4fa4:	0e 94 b7 6d 	call	0xdb6e	; 0xdb6e <_ZN4Pads16setActiveProgramEa>

                //get last active preset on current program
                uint8_t currentPreset = pads.getActiveScale();
    4fa8:	8a e6       	ldi	r24, 0x6A	; 106
    4faa:	9f e0       	ldi	r25, 0x0F	; 15
    4fac:	0e 94 f1 67 	call	0xcfe2	; 0xcfe2 <_ZN4Pads14getActiveScaleEv>
    4fb0:	d8 2f       	mov	r29, r24

                //preset is changed
                #ifdef MODULE_LEDS
                leds.displayActiveNoteLEDs();
    4fb2:	40 e0       	ldi	r20, 0x00	; 0
    4fb4:	60 e0       	ldi	r22, 0x00	; 0
    4fb6:	80 ed       	ldi	r24, 0xD0	; 208
    4fb8:	9e e0       	ldi	r25, 0x0E	; 14
    4fba:	0e 94 9e 46 	call	0x8d3c	; 0x8d3c <_ZN4LEDs21displayActiveNoteLEDsEbh>
                #endif

                //display preset on display
                #ifdef MODULE_LCD
                display.displayProgramAndScale(activeProgram+1, currentPreset);
    4fbe:	61 e0       	ldi	r22, 0x01	; 1
    4fc0:	6c 0f       	add	r22, r28
    4fc2:	4d 2f       	mov	r20, r29
    4fc4:	82 e6       	ldi	r24, 0x62	; 98
    4fc6:	9c e0       	ldi	r25, 0x0C	; 12
    4fc8:	0e 94 a6 38 	call	0x714c	; 0x714c <_ZN3LCD22displayProgramAndScaleEhh>
    4fcc:	b6 c0       	rjmp	.+364    	; 0x513a <_ZN8Encoders13handleEncoderEhbh+0x2c4>
        }
        break;

        case PRESET_ENCODER:
        #ifdef MODULE_LCD
        if (menu.menuDisplayed())   {
    4fce:	89 ed       	ldi	r24, 0xD9	; 217
    4fd0:	98 e0       	ldi	r25, 0x08	; 8
    4fd2:	0e 94 0f 30 	call	0x601e	; 0x601e <_ZN4Menu13menuDisplayedEv>
    4fd6:	88 23       	and	r24, r24
    4fd8:	31 f0       	breq	.+12     	; 0x4fe6 <_ZN8Encoders13handleEncoderEhbh+0x170>

            menu.confirmOption(direction);
    4fda:	6d 2f       	mov	r22, r29
    4fdc:	89 ed       	ldi	r24, 0xD9	; 217
    4fde:	98 e0       	ldi	r25, 0x08	; 8
    4fe0:	0e 94 18 30 	call	0x6030	; 0x6030 <_ZN4Menu13confirmOptionEb>
            return;
    4fe4:	aa c0       	rjmp	.+340    	; 0x513a <_ZN8Encoders13handleEncoderEhbh+0x2c4>

        }
        #endif

        if (!padsReleased) {
    4fe6:	d1 10       	cpse	r13, r1
    4fe8:	06 c0       	rjmp	.+12     	; 0x4ff6 <_ZN8Encoders13handleEncoderEhbh+0x180>

            //disable encoders while pads are pressed
            #ifdef MODULE_LCD
            display.displayPadReleaseError(changePreset);
    4fea:	61 e0       	ldi	r22, 0x01	; 1
    4fec:	82 e6       	ldi	r24, 0x62	; 98
    4fee:	9c e0       	ldi	r25, 0x0C	; 12
    4ff0:	0e 94 ae 36 	call	0x6d5c	; 0x6d5c <_ZN3LCD22displayPadReleaseErrorE17padReleaseError_t>
            #endif
            return;
    4ff4:	a2 c0       	rjmp	.+324    	; 0x513a <_ZN8Encoders13handleEncoderEhbh+0x2c4>

        }

        activePreset = pads.getActiveScale();
    4ff6:	8a e6       	ldi	r24, 0x6A	; 106
    4ff8:	9f e0       	ldi	r25, 0x0F	; 15
    4ffa:	0e 94 f1 67 	call	0xcfe2	; 0xcfe2 <_ZN4Pads14getActiveScaleEv>
        if (direction) activePreset++; else activePreset--;
    4ffe:	dd 23       	and	r29, r29
    5000:	19 f0       	breq	.+6      	; 0x5008 <_ZN8Encoders13handleEncoderEhbh+0x192>
    5002:	c1 e0       	ldi	r28, 0x01	; 1
    5004:	c8 0f       	add	r28, r24
    5006:	02 c0       	rjmp	.+4      	; 0x500c <_ZN8Encoders13handleEncoderEhbh+0x196>
    5008:	cf ef       	ldi	r28, 0xFF	; 255
    500a:	c8 0f       	add	r28, r24
        if (activePreset == (NUMBER_OF_PREDEFINED_SCALES+NUMBER_OF_USER_SCALES)) activePreset = 0;
    500c:	c1 31       	cpi	r28, 0x11	; 17
    500e:	21 f0       	breq	.+8      	; 0x5018 <_ZN8Encoders13handleEncoderEhbh+0x1a2>
        else if (activePreset < 0) activePreset = (NUMBER_OF_PREDEFINED_SCALES+NUMBER_OF_USER_SCALES-1);
    5010:	cc 23       	and	r28, r28
    5012:	1c f4       	brge	.+6      	; 0x501a <_ZN8Encoders13handleEncoderEhbh+0x1a4>
    5014:	c0 e1       	ldi	r28, 0x10	; 16
    5016:	01 c0       	rjmp	.+2      	; 0x501a <_ZN8Encoders13handleEncoderEhbh+0x1a4>

        }

        activePreset = pads.getActiveScale();
        if (direction) activePreset++; else activePreset--;
        if (activePreset == (NUMBER_OF_PREDEFINED_SCALES+NUMBER_OF_USER_SCALES)) activePreset = 0;
    5018:	c0 e0       	ldi	r28, 0x00	; 0
        else if (activePreset < 0) activePreset = (NUMBER_OF_PREDEFINED_SCALES+NUMBER_OF_USER_SCALES-1);

        pads.setActiveScale(activePreset);
    501a:	6c 2f       	mov	r22, r28
    501c:	8a e6       	ldi	r24, 0x6A	; 106
    501e:	9f e0       	ldi	r25, 0x0F	; 15
    5020:	0e 94 e0 6d 	call	0xdbc0	; 0xdbc0 <_ZN4Pads14setActiveScaleEa>

        #ifdef MODULE_LEDS
            leds.displayActiveNoteLEDs();
    5024:	40 e0       	ldi	r20, 0x00	; 0
    5026:	60 e0       	ldi	r22, 0x00	; 0
    5028:	80 ed       	ldi	r24, 0xD0	; 208
    502a:	9e e0       	ldi	r25, 0x0E	; 14
    502c:	0e 94 9e 46 	call	0x8d3c	; 0x8d3c <_ZN4LEDs21displayActiveNoteLEDsEbh>
        #endif

        //display preset on display
        #ifdef MODULE_LCD
            display.displayProgramAndScale(pads.getActiveProgram()+1, activePreset);
    5030:	8a e6       	ldi	r24, 0x6A	; 106
    5032:	9f e0       	ldi	r25, 0x0F	; 15
    5034:	0e 94 ec 67 	call	0xcfd8	; 0xcfd8 <_ZN4Pads16getActiveProgramEv>
    5038:	61 e0       	ldi	r22, 0x01	; 1
    503a:	68 0f       	add	r22, r24
    503c:	4c 2f       	mov	r20, r28
    503e:	82 e6       	ldi	r24, 0x62	; 98
    5040:	9c e0       	ldi	r25, 0x0C	; 12
    5042:	0e 94 a6 38 	call	0x714c	; 0x714c <_ZN3LCD22displayProgramAndScaleEhh>
        #endif
        break;
    5046:	79 c0       	rjmp	.+242    	; 0x513a <_ZN8Encoders13handleEncoderEhbh+0x2c4>

        case X_CC_ENCODER:
        case Y_CC_ENCODER:
        switch(encoderNumber)   {
    5048:	c7 30       	cpi	r28, 0x07	; 7
    504a:	11 f4       	brne	.+4      	; 0x5050 <_ZN8Encoders13handleEncoderEhbh+0x1da>
            case X_CC_ENCODER:
            coordinate = coordinateX;
            break;

            case Y_CC_ENCODER:
            coordinate = coordinateY;
    504c:	c1 e0       	ldi	r28, 0x01	; 1
    504e:	01 c0       	rjmp	.+2      	; 0x5052 <_ZN8Encoders13handleEncoderEhbh+0x1dc>
    bool _splitState = pads.getSplitState();
    uint8_t activeCurve = 0;
    uint8_t value;
    int8_t activePreset;
    bool padsReleased = pads.allPadsReleased();
    coordinateType_t coordinate = coordinateX;
    5050:	c0 e0       	ldi	r28, 0x00	; 0
            coordinate = coordinateY;
            break;

        }

        if (!padsReleased) {
    5052:	d1 10       	cpse	r13, r1
    5054:	06 c0       	rjmp	.+12     	; 0x5062 <_ZN8Encoders13handleEncoderEhbh+0x1ec>

            //disable encoders while pads are pressed
            #ifdef MODULE_LCD
            display.displayPadReleaseError(changeCCnumber);
    5056:	62 e0       	ldi	r22, 0x02	; 2
    5058:	82 e6       	ldi	r24, 0x62	; 98
    505a:	9c e0       	ldi	r25, 0x0C	; 12
    505c:	0e 94 ae 36 	call	0x6d5c	; 0x6d5c <_ZN3LCD22displayPadReleaseErrorE17padReleaseError_t>
            #endif
            return;
    5060:	6c c0       	rjmp	.+216    	; 0x513a <_ZN8Encoders13handleEncoderEhbh+0x2c4>

        }

        pads.changeCC(direction, coordinate, steps);
    5062:	2f 2d       	mov	r18, r15
    5064:	4c 2f       	mov	r20, r28
    5066:	6d 2f       	mov	r22, r29
    5068:	8a e6       	ldi	r24, 0x6A	; 106
    506a:	9f e0       	ldi	r25, 0x0F	; 15
    506c:	0e 94 4d 6e 	call	0xdc9a	; 0xdc9a <_ZN4Pads8changeCCEb16coordinateType_ta>
        #ifdef MODULE_LCD
            display.displayCCchange(coordinate,  _splitState, pads.getCCvalue(coordinate, lastTouchedPad), lastTouchedPad+1);
    5070:	4e 2d       	mov	r20, r14
    5072:	6c 2f       	mov	r22, r28
    5074:	8a e6       	ldi	r24, 0x6A	; 106
    5076:	9f e0       	ldi	r25, 0x0F	; 15
    5078:	0e 94 32 68 	call	0xd064	; 0xd064 <_ZN4Pads10getCCvalueE16coordinateType_th>
    507c:	01 e0       	ldi	r16, 0x01	; 1
    507e:	0e 0d       	add	r16, r14
    5080:	28 2f       	mov	r18, r24
    5082:	4c 2d       	mov	r20, r12
    5084:	6c 2f       	mov	r22, r28
    5086:	82 e6       	ldi	r24, 0x62	; 98
    5088:	9c e0       	ldi	r25, 0x0C	; 12
    508a:	0e 94 f4 32 	call	0x65e8	; 0x65e8 <_ZN3LCD15displayCCchangeE16coordinateType_tbhh>
        #endif
        break;
    508e:	55 c0       	rjmp	.+170    	; 0x513a <_ZN8Encoders13handleEncoderEhbh+0x2c4>

        case X_MIN_ENCODER:
        case X_MAX_ENCODER:
        case Y_MIN_ENCODER:
        case Y_MAX_ENCODER:
        switch(encoderNumber)   {
    5090:	c5 30       	cpi	r28, 0x05	; 5
    5092:	39 f0       	breq	.+14     	; 0x50a2 <_ZN8Encoders13handleEncoderEhbh+0x22c>
    5094:	c9 30       	cpi	r28, 0x09	; 9
    5096:	41 f0       	breq	.+16     	; 0x50a8 <_ZN8Encoders13handleEncoderEhbh+0x232>
    5098:	c3 30       	cpi	r28, 0x03	; 3
    509a:	49 f4       	brne	.+18     	; 0x50ae <_ZN8Encoders13handleEncoderEhbh+0x238>
            limit = ccLimitTypeMin;
            break;

            case X_MAX_ENCODER:
            coordinate = coordinateX;
            limit = ccLimitTypeMax;
    509c:	11 e0       	ldi	r17, 0x01	; 1
            coordinate = coordinateX;
            limit = ccLimitTypeMin;
            break;

            case X_MAX_ENCODER:
            coordinate = coordinateX;
    509e:	c0 e0       	ldi	r28, 0x00	; 0
    50a0:	08 c0       	rjmp	.+16     	; 0x50b2 <_ZN8Encoders13handleEncoderEhbh+0x23c>
            limit = ccLimitTypeMax;
            break;

            case Y_MIN_ENCODER:
            coordinate = coordinateY;
            limit = ccLimitTypeMin;
    50a2:	10 e0       	ldi	r17, 0x00	; 0
            coordinate = coordinateX;
            limit = ccLimitTypeMax;
            break;

            case Y_MIN_ENCODER:
            coordinate = coordinateY;
    50a4:	c1 e0       	ldi	r28, 0x01	; 1
            limit = ccLimitTypeMin;
            break;
    50a6:	05 c0       	rjmp	.+10     	; 0x50b2 <_ZN8Encoders13handleEncoderEhbh+0x23c>

            case Y_MAX_ENCODER:
            coordinate = coordinateY;
            limit = ccLimitTypeMax;
    50a8:	11 e0       	ldi	r17, 0x01	; 1
            coordinate = coordinateY;
            limit = ccLimitTypeMin;
            break;

            case Y_MAX_ENCODER:
            coordinate = coordinateY;
    50aa:	c1 e0       	ldi	r28, 0x01	; 1
            limit = ccLimitTypeMax;
            break;
    50ac:	02 c0       	rjmp	.+4      	; 0x50b2 <_ZN8Encoders13handleEncoderEhbh+0x23c>
    uint8_t activeCurve = 0;
    uint8_t value;
    int8_t activePreset;
    bool padsReleased = pads.allPadsReleased();
    coordinateType_t coordinate = coordinateX;
    ccLimitType_t limit = ccLimitTypeMin;
    50ae:	10 e0       	ldi	r17, 0x00	; 0
    bool _splitState = pads.getSplitState();
    uint8_t activeCurve = 0;
    uint8_t value;
    int8_t activePreset;
    bool padsReleased = pads.allPadsReleased();
    coordinateType_t coordinate = coordinateX;
    50b0:	c0 e0       	ldi	r28, 0x00	; 0
            limit = ccLimitTypeMax;
            break;

        }

        if (!padsReleased) {
    50b2:	d1 10       	cpse	r13, r1
    50b4:	06 c0       	rjmp	.+12     	; 0x50c2 <_ZN8Encoders13handleEncoderEhbh+0x24c>

            //disable encoders while pads are pressed
            #ifdef MODULE_LCD
            display.displayPadReleaseError(changeCClimit);
    50b6:	63 e0       	ldi	r22, 0x03	; 3
    50b8:	82 e6       	ldi	r24, 0x62	; 98
    50ba:	9c e0       	ldi	r25, 0x0C	; 12
    50bc:	0e 94 ae 36 	call	0x6d5c	; 0x6d5c <_ZN3LCD22displayPadReleaseErrorE17padReleaseError_t>
            #endif
            return;
    50c0:	3c c0       	rjmp	.+120    	; 0x513a <_ZN8Encoders13handleEncoderEhbh+0x2c4>

        }

        pads.changeCClimits(direction, coordinate, limit, steps);
    50c2:	0f 2d       	mov	r16, r15
    50c4:	21 2f       	mov	r18, r17
    50c6:	4c 2f       	mov	r20, r28
    50c8:	6d 2f       	mov	r22, r29
    50ca:	8a e6       	ldi	r24, 0x6A	; 106
    50cc:	9f e0       	ldi	r25, 0x0F	; 15
    50ce:	0e 94 18 6f 	call	0xde30	; 0xde30 <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta>
        value = pads.getCClimitValue(coordinate, limit, lastTouchedPad);
    50d2:	2e 2d       	mov	r18, r14
    50d4:	41 2f       	mov	r20, r17
    50d6:	6c 2f       	mov	r22, r28
    50d8:	8a e6       	ldi	r24, 0x6A	; 106
    50da:	9f e0       	ldi	r25, 0x0F	; 15
    50dc:	0e 94 0b 68 	call	0xd016	; 0xd016 <_ZN4Pads15getCClimitValueE16coordinateType_t13ccLimitType_th>
        #ifdef MODULE_LCD
            display.displayCClimitChange(coordinate, limit, _splitState, value, lastTouchedPad+1);
    50e0:	e3 94       	inc	r14
    50e2:	08 2f       	mov	r16, r24
    50e4:	2c 2d       	mov	r18, r12
    50e6:	41 2f       	mov	r20, r17
    50e8:	6c 2f       	mov	r22, r28
    50ea:	82 e6       	ldi	r24, 0x62	; 98
    50ec:	9c e0       	ldi	r25, 0x0C	; 12
    50ee:	0e 94 1f 34 	call	0x683e	; 0x683e <_ZN3LCD20displayCClimitChangeE16coordinateType_t13ccLimitType_tbhh>
        #endif
        break;
    50f2:	23 c0       	rjmp	.+70     	; 0x513a <_ZN8Encoders13handleEncoderEhbh+0x2c4>

        case X_CURVE_ENCODER:
        case Y_CURVE_ENCODER:
        switch(encoderNumber)   {
    50f4:	c4 30       	cpi	r28, 0x04	; 4
    50f6:	11 f4       	brne	.+4      	; 0x50fc <_ZN8Encoders13handleEncoderEhbh+0x286>
            case X_CURVE_ENCODER:
            coordinate = coordinateX;
            break;

            case Y_CURVE_ENCODER:
            coordinate = coordinateY;
    50f8:	c1 e0       	ldi	r28, 0x01	; 1
    50fa:	01 c0       	rjmp	.+2      	; 0x50fe <_ZN8Encoders13handleEncoderEhbh+0x288>
    bool _splitState = pads.getSplitState();
    uint8_t activeCurve = 0;
    uint8_t value;
    int8_t activePreset;
    bool padsReleased = pads.allPadsReleased();
    coordinateType_t coordinate = coordinateX;
    50fc:	c0 e0       	ldi	r28, 0x00	; 0
            coordinate = coordinateY;
            break;

        }

        if (!padsReleased) {
    50fe:	d1 10       	cpse	r13, r1
    5100:	06 c0       	rjmp	.+12     	; 0x510e <_ZN8Encoders13handleEncoderEhbh+0x298>

            //disable encoders while pads are pressed
            #ifdef MODULE_LCD
            display.displayPadReleaseError(changeCurve);
    5102:	64 e0       	ldi	r22, 0x04	; 4
    5104:	82 e6       	ldi	r24, 0x62	; 98
    5106:	9c e0       	ldi	r25, 0x0C	; 12
    5108:	0e 94 ae 36 	call	0x6d5c	; 0x6d5c <_ZN3LCD22displayPadReleaseErrorE17padReleaseError_t>
            #endif
            return;
    510c:	16 c0       	rjmp	.+44     	; 0x513a <_ZN8Encoders13handleEncoderEhbh+0x2c4>

        }

        pads.setCCcurve(direction, coordinate);
    510e:	21 e0       	ldi	r18, 0x01	; 1
    5110:	4c 2f       	mov	r20, r28
    5112:	6d 2f       	mov	r22, r29
    5114:	8a e6       	ldi	r24, 0x6A	; 106
    5116:	9f e0       	ldi	r25, 0x0F	; 15
    5118:	0e 94 fe 6f 	call	0xdffc	; 0xdffc <_ZN4Pads10setCCcurveEb16coordinateType_ta>
        activeCurve = pads.getCCcurve(coordinate, lastTouchedPad);
    511c:	4e 2d       	mov	r20, r14
    511e:	6c 2f       	mov	r22, r28
    5120:	8a e6       	ldi	r24, 0x6A	; 106
    5122:	9f e0       	ldi	r25, 0x0F	; 15
    5124:	0e 94 f6 67 	call	0xcfec	; 0xcfec <_ZN4Pads10getCCcurveE16coordinateType_th>
        #ifdef MODULE_LCD
            display.displayCurveChange(coordinate, _splitState, activeCurve, lastTouchedPad+1);
    5128:	01 e0       	ldi	r16, 0x01	; 1
    512a:	0e 0d       	add	r16, r14
    512c:	28 2f       	mov	r18, r24
    512e:	4c 2d       	mov	r20, r12
    5130:	6c 2f       	mov	r22, r28
    5132:	82 e6       	ldi	r24, 0x62	; 98
    5134:	9c e0       	ldi	r25, 0x0C	; 12
    5136:	0e 94 67 33 	call	0x66ce	; 0x66ce <_ZN3LCD18displayCurveChangeE16coordinateType_tbah>
        #endif
        break;

    }

}
    513a:	df 91       	pop	r29
    513c:	cf 91       	pop	r28
    513e:	1f 91       	pop	r17
    5140:	0f 91       	pop	r16
    5142:	ff 90       	pop	r15
    5144:	ef 90       	pop	r14
    5146:	df 90       	pop	r13
    5148:	cf 90       	pop	r12
    514a:	08 95       	ret

0000514c <_ZN8Encoders6updateEb>:

    //nothing

}

void Encoders::update(bool process) {
    514c:	3f 92       	push	r3
    514e:	4f 92       	push	r4
    5150:	5f 92       	push	r5
    5152:	6f 92       	push	r6
    5154:	7f 92       	push	r7
    5156:	8f 92       	push	r8
    5158:	9f 92       	push	r9
    515a:	af 92       	push	r10
    515c:	bf 92       	push	r11
    515e:	cf 92       	push	r12
    5160:	df 92       	push	r13
    5162:	ef 92       	push	r14
    5164:	ff 92       	push	r15
    5166:	0f 93       	push	r16
    5168:	1f 93       	push	r17
    516a:	cf 93       	push	r28
    516c:	df 93       	push	r29
    516e:	98 2e       	mov	r9, r24
    5170:	c9 2e       	mov	r12, r25
    5172:	a8 2e       	mov	r10, r24
    5174:	b9 2e       	mov	r11, r25
    5176:	10 e0       	ldi	r17, 0x00	; 0
        if (timeDifference > SPEED_TIMEOUT) steps = ENCODER_SPEED_1;
        else steps = ENCODER_SPEED_2;

        lastStepTime[i] = rTimeMillis();

        for (int j=0; j<abs(encoderSteps); j++)
    5178:	51 2c       	mov	r5, r1
    517a:	61 2c       	mov	r6, r1
            handleEncoder(i, (encoderSteps > 0), steps);
    517c:	44 24       	eor	r4, r4
    517e:	43 94       	inc	r4
    5180:	84 2c       	mov	r8, r4
    5182:	71 2c       	mov	r7, r1

        uint32_t timeDifference = rTimeMillis() - lastStepTime[i];
        uint8_t steps = ENCODER_SPEED_1;

        if (timeDifference > SPEED_TIMEOUT) steps = ENCODER_SPEED_1;
        else steps = ENCODER_SPEED_2;
    5184:	0f 2e       	mov	r0, r31
    5186:	f5 e0       	ldi	r31, 0x05	; 5
    5188:	3f 2e       	mov	r3, r31
    518a:	f0 2d       	mov	r31, r0

void Encoders::update(bool process) {

    for (int i=0; i<NUMBER_OF_ENCODERS; i++)    {

        int8_t encoderSteps = timers.getEncoderState(i);
    518c:	61 2f       	mov	r22, r17
    518e:	88 e1       	ldi	r24, 0x18	; 24
    5190:	97 e0       	ldi	r25, 0x07	; 7
    5192:	0e 94 5e 19 	call	0x32bc	; 0x32bc <_ZN11TimerObject15getEncoderStateEh>
    5196:	08 2f       	mov	r16, r24
        if (encoderSteps == 0) continue;
    5198:	88 23       	and	r24, r24
    519a:	b1 f1       	breq	.+108    	; 0x5208 <_ZN8Encoders6updateEb+0xbc>

        uint32_t timeDifference = rTimeMillis() - lastStepTime[i];
    519c:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z11rTimeMillisv>
    51a0:	e5 01       	movw	r28, r10
    51a2:	28 81       	ld	r18, Y
    51a4:	39 81       	ldd	r19, Y+1	; 0x01
    51a6:	4a 81       	ldd	r20, Y+2	; 0x02
    51a8:	5b 81       	ldd	r21, Y+3	; 0x03
    51aa:	dc 01       	movw	r26, r24
    51ac:	cb 01       	movw	r24, r22
    51ae:	82 1b       	sub	r24, r18
    51b0:	93 0b       	sbc	r25, r19
    51b2:	a4 0b       	sbc	r26, r20
    51b4:	b5 0b       	sbc	r27, r21
        uint8_t steps = ENCODER_SPEED_1;

        if (timeDifference > SPEED_TIMEOUT) steps = ENCODER_SPEED_1;
    51b6:	85 36       	cpi	r24, 0x65	; 101
    51b8:	91 05       	cpc	r25, r1
    51ba:	a1 05       	cpc	r26, r1
    51bc:	b1 05       	cpc	r27, r1
    51be:	10 f4       	brcc	.+4      	; 0x51c4 <_ZN8Encoders6updateEb+0x78>
        else steps = ENCODER_SPEED_2;
    51c0:	d3 2c       	mov	r13, r3
    51c2:	01 c0       	rjmp	.+2      	; 0x51c6 <_ZN8Encoders6updateEb+0x7a>
        if (encoderSteps == 0) continue;

        uint32_t timeDifference = rTimeMillis() - lastStepTime[i];
        uint8_t steps = ENCODER_SPEED_1;

        if (timeDifference > SPEED_TIMEOUT) steps = ENCODER_SPEED_1;
    51c4:	d4 2c       	mov	r13, r4
        else steps = ENCODER_SPEED_2;

        lastStepTime[i] = rTimeMillis();
    51c6:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z11rTimeMillisv>
    51ca:	68 83       	st	Y, r22
    51cc:	79 83       	std	Y+1, r23	; 0x01
    51ce:	8a 83       	std	Y+2, r24	; 0x02
    51d0:	9b 83       	std	Y+3, r25	; 0x03

        for (int j=0; j<abs(encoderSteps); j++)
    51d2:	e0 2e       	mov	r14, r16
    51d4:	00 2e       	mov	r0, r16
    51d6:	00 0c       	add	r0, r0
    51d8:	ff 08       	sbc	r15, r15
    51da:	ff 20       	and	r15, r15
    51dc:	1c f4       	brge	.+6      	; 0x51e4 <_ZN8Encoders6updateEb+0x98>
    51de:	f1 94       	neg	r15
    51e0:	e1 94       	neg	r14
    51e2:	f1 08       	sbc	r15, r1
    51e4:	1e 14       	cp	r1, r14
    51e6:	1f 04       	cpc	r1, r15
    51e8:	7c f4       	brge	.+30     	; 0x5208 <_ZN8Encoders6updateEb+0xbc>
    51ea:	c5 2d       	mov	r28, r5
    51ec:	d6 2d       	mov	r29, r6
            handleEncoder(i, (encoderSteps > 0), steps);
    51ee:	48 2d       	mov	r20, r8
    51f0:	10 16       	cp	r1, r16
    51f2:	0c f0       	brlt	.+2      	; 0x51f6 <_ZN8Encoders6updateEb+0xaa>
    51f4:	47 2d       	mov	r20, r7
    51f6:	2d 2d       	mov	r18, r13
    51f8:	61 2f       	mov	r22, r17
    51fa:	89 2d       	mov	r24, r9
    51fc:	9c 2d       	mov	r25, r12
    51fe:	3b de       	rcall	.-906    	; 0x4e76 <_ZN8Encoders13handleEncoderEhbh>
        if (timeDifference > SPEED_TIMEOUT) steps = ENCODER_SPEED_1;
        else steps = ENCODER_SPEED_2;

        lastStepTime[i] = rTimeMillis();

        for (int j=0; j<abs(encoderSteps); j++)
    5200:	21 96       	adiw	r28, 0x01	; 1
    5202:	ce 15       	cp	r28, r14
    5204:	df 05       	cpc	r29, r15
    5206:	99 f7       	brne	.-26     	; 0x51ee <_ZN8Encoders6updateEb+0xa2>
    5208:	1f 5f       	subi	r17, 0xFF	; 255
    520a:	f4 e0       	ldi	r31, 0x04	; 4
    520c:	af 0e       	add	r10, r31
    520e:	b1 1c       	adc	r11, r1

}

void Encoders::update(bool process) {

    for (int i=0; i<NUMBER_OF_ENCODERS; i++)    {
    5210:	1a 30       	cpi	r17, 0x0A	; 10
    5212:	09 f0       	breq	.+2      	; 0x5216 <_ZN8Encoders6updateEb+0xca>
    5214:	bb cf       	rjmp	.-138    	; 0x518c <_ZN8Encoders6updateEb+0x40>
        for (int j=0; j<abs(encoderSteps); j++)
            handleEncoder(i, (encoderSteps > 0), steps);

    }

}
    5216:	df 91       	pop	r29
    5218:	cf 91       	pop	r28
    521a:	1f 91       	pop	r17
    521c:	0f 91       	pop	r16
    521e:	ff 90       	pop	r15
    5220:	ef 90       	pop	r14
    5222:	df 90       	pop	r13
    5224:	cf 90       	pop	r12
    5226:	bf 90       	pop	r11
    5228:	af 90       	pop	r10
    522a:	9f 90       	pop	r9
    522c:	8f 90       	pop	r8
    522e:	7f 90       	pop	r7
    5230:	6f 90       	pop	r6
    5232:	5f 90       	pop	r5
    5234:	4f 90       	pop	r4
    5236:	3f 90       	pop	r3
    5238:	08 95       	ret

0000523a <_ZN8Encoders5flushEv>:

}

void Encoders::flush()    {

    update(false);
    523a:	60 e0       	ldi	r22, 0x00	; 0
    523c:	87 cf       	rjmp	.-242    	; 0x514c <_ZN8Encoders6updateEb>
    523e:	08 95       	ret

00005240 <_GLOBAL__sub_I__ZN8EncodersC2Ev>:

}

Encoders encoders;
    5240:	81 eb       	ldi	r24, 0xB1	; 177
    5242:	98 e0       	ldi	r25, 0x08	; 8
    5244:	0e ce       	rjmp	.-996    	; 0x4e62 <_ZN8EncodersC1Ev>
    5246:	08 95       	ret

00005248 <_ZN3LCD14setupLCDlayoutEv>:
#ifdef LCD_H_

void LCD::setupLCDlayout()  {

    {
        lcdElements.programAndScale.row = 0;
    5248:	fc 01       	movw	r30, r24
    524a:	e0 5a       	subi	r30, 0xA0	; 160
    524c:	fd 4f       	sbci	r31, 0xFD	; 253
    524e:	10 82       	st	Z, r1
        lcdElements.programAndScale.startIndex = 0;
    5250:	31 96       	adiw	r30, 0x01	; 1
    5252:	10 82       	st	Z, r1
    }

    {
        lcdElements.padNumber.row = 1;
    5254:	35 97       	sbiw	r30, 0x05	; 5
    5256:	31 e0       	ldi	r19, 0x01	; 1
    5258:	30 83       	st	Z, r19
        lcdElements.padNumber.startIndex = 0;
    525a:	31 96       	adiw	r30, 0x01	; 1
    525c:	10 82       	st	Z, r1

        lcdElements.notes.row = 1;
    525e:	35 96       	adiw	r30, 0x05	; 5
    5260:	30 83       	st	Z, r19
        lcdElements.notes.startIndex = 5;
    5262:	31 96       	adiw	r30, 0x01	; 1
    5264:	45 e0       	ldi	r20, 0x05	; 5
    5266:	40 83       	st	Z, r20

        lcdElements.noteShiftLevel.row = 1;
    5268:	39 96       	adiw	r30, 0x09	; 9
    526a:	30 83       	st	Z, r19
        lcdElements.noteShiftLevel.startIndex = 17;
    526c:	31 96       	adiw	r30, 0x01	; 1
    526e:	21 e1       	ldi	r18, 0x11	; 17
    5270:	20 83       	st	Z, r18
    }

    {
        lcdElements.velocity.row = 2;
    5272:	75 97       	sbiw	r30, 0x15	; 21
    5274:	22 e0       	ldi	r18, 0x02	; 2
    5276:	20 83       	st	Z, r18
        lcdElements.velocity.startIndex = 0;
    5278:	31 96       	adiw	r30, 0x01	; 1
    527a:	10 82       	st	Z, r1

        lcdElements.xpos.row = 2;
    527c:	35 97       	sbiw	r30, 0x05	; 5
    527e:	20 83       	st	Z, r18
        lcdElements.xpos.startIndex = 5;
    5280:	31 96       	adiw	r30, 0x01	; 1
    5282:	40 83       	st	Z, r20

        lcdElements.ypos.row = 2;
    5284:	31 96       	adiw	r30, 0x01	; 1
    5286:	20 83       	st	Z, r18
        lcdElements.ypos.startIndex = 10;
    5288:	31 96       	adiw	r30, 0x01	; 1
    528a:	4a e0       	ldi	r20, 0x0A	; 10
    528c:	40 83       	st	Z, r20

        lcdElements.aftertouch.row = 2;
    528e:	33 96       	adiw	r30, 0x03	; 3
    5290:	20 83       	st	Z, r18
        lcdElements.aftertouch.startIndex = 15;
    5292:	31 96       	adiw	r30, 0x01	; 1
    5294:	4f e0       	ldi	r20, 0x0F	; 15
    5296:	40 83       	st	Z, r20

        //pad edit mode only
        lcdElements.activeOctave.row = 2;
    5298:	39 96       	adiw	r30, 0x09	; 9
    529a:	20 83       	st	Z, r18
        lcdElements.activeOctave.startIndex = 0;
    529c:	31 96       	adiw	r30, 0x01	; 1
    529e:	10 82       	st	Z, r1
    }

    {
        lcdElements.ccx.row = 3;
    52a0:	75 97       	sbiw	r30, 0x15	; 21
    52a2:	43 e0       	ldi	r20, 0x03	; 3
    52a4:	40 83       	st	Z, r20
        lcdElements.ccx.startIndex = 0;
    52a6:	31 96       	adiw	r30, 0x01	; 1
    52a8:	10 82       	st	Z, r1

        lcdElements.ccy.row = 3;
    52aa:	31 96       	adiw	r30, 0x01	; 1
    52ac:	40 83       	st	Z, r20
        lcdElements.ccy.startIndex = 7;
    52ae:	31 96       	adiw	r30, 0x01	; 1
    52b0:	57 e0       	ldi	r21, 0x07	; 7
    52b2:	50 83       	st	Z, r21

        lcdElements.midiChannel.row = 3;
    52b4:	3b 96       	adiw	r30, 0x0b	; 11
    52b6:	40 83       	st	Z, r20
        lcdElements.midiChannel.startIndex = 16;
    52b8:	31 96       	adiw	r30, 0x01	; 1
    52ba:	40 e1       	ldi	r20, 0x10	; 16
    52bc:	40 83       	st	Z, r20
    }

    {
        lcdElements.messageText1.row = 1;
    52be:	37 96       	adiw	r30, 0x07	; 7
    52c0:	30 83       	st	Z, r19
        lcdElements.messageText1.startIndex = 0;
    52c2:	31 96       	adiw	r30, 0x01	; 1
    52c4:	10 82       	st	Z, r1

        lcdElements.messageText2.row = 2;
    52c6:	31 96       	adiw	r30, 0x01	; 1
    52c8:	20 83       	st	Z, r18
        lcdElements.messageText2.startIndex = 0;
    52ca:	31 96       	adiw	r30, 0x01	; 1
    52cc:	10 82       	st	Z, r1
    }

    {
        //used during pad calibration
        lcdElements.padCalibration.row = 0;
    52ce:	31 96       	adiw	r30, 0x01	; 1
    52d0:	10 82       	st	Z, r1
        lcdElements.padCalibration.startIndex = 0;
    52d2:	31 96       	adiw	r30, 0x01	; 1
    52d4:	10 82       	st	Z, r1
    52d6:	08 95       	ret

000052d8 <_Z12factoryReset16functionArgument>:

bool checkPressureCurve(functionArgument argument)    {

    return true;

}
    52d8:	3f 92       	push	r3
    52da:	4f 92       	push	r4
    52dc:	5f 92       	push	r5
    52de:	6f 92       	push	r6
    52e0:	7f 92       	push	r7
    52e2:	8f 92       	push	r8
    52e4:	9f 92       	push	r9
    52e6:	af 92       	push	r10
    52e8:	bf 92       	push	r11
    52ea:	cf 92       	push	r12
    52ec:	df 92       	push	r13
    52ee:	ef 92       	push	r14
    52f0:	ff 92       	push	r15
    52f2:	0f 93       	push	r16
    52f4:	1f 93       	push	r17
    52f6:	cf 93       	push	r28
    52f8:	df 93       	push	r29
    52fa:	38 2e       	mov	r3, r24
    52fc:	82 e6       	ldi	r24, 0x62	; 98
    52fe:	9c e0       	ldi	r25, 0x0C	; 12
    5300:	0e 94 d4 41 	call	0x83a8	; 0x83a8 <_ZN3LCD26displayFactoryResetWarningEv>
    5304:	c1 2c       	mov	r12, r1
    5306:	d1 2c       	mov	r13, r1
    5308:	88 24       	eor	r8, r8
    530a:	83 94       	inc	r8
    530c:	91 2c       	mov	r9, r1
    530e:	a1 2c       	mov	r10, r1
    5310:	b1 2c       	mov	r11, r1
    5312:	41 2c       	mov	r4, r1
    5314:	51 2c       	mov	r5, r1
    5316:	32 01       	movw	r6, r4
    5318:	43 94       	inc	r4
    531a:	8a e6       	ldi	r24, 0x6A	; 106
    531c:	9f e0       	ldi	r25, 0x0F	; 15
    531e:	0e 94 c7 54 	call	0xa98e	; 0xa98e <_ZN4Pads6updateEv>
    5322:	e8 2c       	mov	r14, r8
    5324:	f9 2c       	mov	r15, r9
    5326:	ca 2d       	mov	r28, r10
    5328:	db 2d       	mov	r29, r11
    532a:	04 c0       	rjmp	.+8      	; 0x5334 <_Z12factoryReset16functionArgument+0x5c>
    532c:	21 96       	adiw	r28, 0x01	; 1
    532e:	2f ef       	ldi	r18, 0xFF	; 255
    5330:	e2 1a       	sub	r14, r18
    5332:	f2 0a       	sbc	r15, r18
    5334:	6c 2f       	mov	r22, r28
    5336:	8a e6       	ldi	r24, 0x6A	; 106
    5338:	9f e0       	ldi	r25, 0x0F	; 15
    533a:	0e 94 62 69 	call	0xd2c4	; 0xd2c4 <_ZN4Pads12isPadPressedEh>
    533e:	88 23       	and	r24, r24
    5340:	61 f0       	breq	.+24     	; 0x535a <_Z12factoryReset16functionArgument+0x82>
    5342:	c6 30       	cpi	r28, 0x06	; 6
    5344:	d1 05       	cpc	r29, r1
    5346:	09 f4       	brne	.+2      	; 0x534a <_Z12factoryReset16functionArgument+0x72>
    5348:	88 c0       	rjmp	.+272    	; 0x545a <_Z12factoryReset16functionArgument+0x182>
    534a:	20 97       	sbiw	r28, 0x00	; 0
    534c:	09 f4       	brne	.+2      	; 0x5350 <_Z12factoryReset16functionArgument+0x78>
    534e:	78 c0       	rjmp	.+240    	; 0x5440 <_Z12factoryReset16functionArgument+0x168>
    5350:	c8 30       	cpi	r28, 0x08	; 8
    5352:	d1 05       	cpc	r29, r1
    5354:	09 f4       	brne	.+2      	; 0x5358 <_Z12factoryReset16functionArgument+0x80>
    5356:	67 c0       	rjmp	.+206    	; 0x5426 <_Z12factoryReset16functionArgument+0x14e>
    5358:	83 c0       	rjmp	.+262    	; 0x5460 <_Z12factoryReset16functionArgument+0x188>
    535a:	c6 01       	movw	r24, r12
    535c:	0c 2e       	mov	r0, r28
    535e:	02 c0       	rjmp	.+4      	; 0x5364 <_Z12factoryReset16functionArgument+0x8c>
    5360:	96 95       	lsr	r25
    5362:	87 95       	ror	r24
    5364:	0a 94       	dec	r0
    5366:	e2 f7       	brpl	.-8      	; 0x5360 <_Z12factoryReset16functionArgument+0x88>
    5368:	80 ff       	sbrs	r24, 0
    536a:	2e c0       	rjmp	.+92     	; 0x53c8 <_Z12factoryReset16functionArgument+0xf0>
    536c:	d3 01       	movw	r26, r6
    536e:	c2 01       	movw	r24, r4
    5370:	0c 2e       	mov	r0, r28
    5372:	04 c0       	rjmp	.+8      	; 0x537c <_Z12factoryReset16functionArgument+0xa4>
    5374:	88 0f       	add	r24, r24
    5376:	99 1f       	adc	r25, r25
    5378:	aa 1f       	adc	r26, r26
    537a:	bb 1f       	adc	r27, r27
    537c:	0a 94       	dec	r0
    537e:	d2 f7       	brpl	.-12     	; 0x5374 <_Z12factoryReset16functionArgument+0x9c>
    5380:	80 95       	com	r24
    5382:	90 95       	com	r25
    5384:	c8 22       	and	r12, r24
    5386:	d9 22       	and	r13, r25
    5388:	c6 30       	cpi	r28, 0x06	; 6
    538a:	d1 05       	cpc	r29, r1
    538c:	69 f0       	breq	.+26     	; 0x53a8 <_Z12factoryReset16functionArgument+0xd0>
    538e:	c8 30       	cpi	r28, 0x08	; 8
    5390:	d1 05       	cpc	r29, r1
    5392:	91 f0       	breq	.+36     	; 0x53b8 <_Z12factoryReset16functionArgument+0xe0>
    5394:	20 97       	sbiw	r28, 0x00	; 0
    5396:	c1 f4       	brne	.+48     	; 0x53c8 <_Z12factoryReset16functionArgument+0xf0>
    5398:	62 e0       	ldi	r22, 0x02	; 2
    539a:	84 e0       	ldi	r24, 0x04	; 4
    539c:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_Z10lcd_gotoxyhh>
    53a0:	80 e2       	ldi	r24, 0x20	; 32
    53a2:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <_Z8lcd_putcc>
    53a6:	c2 cf       	rjmp	.-124    	; 0x532c <_Z12factoryReset16functionArgument+0x54>
    53a8:	62 e0       	ldi	r22, 0x02	; 2
    53aa:	89 e0       	ldi	r24, 0x09	; 9
    53ac:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_Z10lcd_gotoxyhh>
    53b0:	80 e2       	ldi	r24, 0x20	; 32
    53b2:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <_Z8lcd_putcc>
    53b6:	ba cf       	rjmp	.-140    	; 0x532c <_Z12factoryReset16functionArgument+0x54>
    53b8:	62 e0       	ldi	r22, 0x02	; 2
    53ba:	8e e0       	ldi	r24, 0x0E	; 14
    53bc:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_Z10lcd_gotoxyhh>
    53c0:	80 e2       	ldi	r24, 0x20	; 32
    53c2:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <_Z8lcd_putcc>
    53c6:	05 c0       	rjmp	.+10     	; 0x53d2 <_Z12factoryReset16functionArgument+0xfa>
    53c8:	89 e0       	ldi	r24, 0x09	; 9
    53ca:	e8 16       	cp	r14, r24
    53cc:	f1 04       	cpc	r15, r1
    53ce:	0c f4       	brge	.+2      	; 0x53d2 <_Z12factoryReset16functionArgument+0xfa>
    53d0:	ad cf       	rjmp	.-166    	; 0x532c <_Z12factoryReset16functionArgument+0x54>
    53d2:	c6 01       	movw	r24, r12
    53d4:	81 74       	andi	r24, 0x41	; 65
    53d6:	99 27       	eor	r25, r25
    53d8:	81 34       	cpi	r24, 0x41	; 65
    53da:	91 05       	cpc	r25, r1
    53dc:	09 f0       	breq	.+2      	; 0x53e0 <_Z12factoryReset16functionArgument+0x108>
    53de:	9d cf       	rjmp	.-198    	; 0x531a <_Z12factoryReset16functionArgument+0x42>
    53e0:	d0 fe       	sbrs	r13, 0
    53e2:	9b cf       	rjmp	.-202    	; 0x531a <_Z12factoryReset16functionArgument+0x42>
    53e4:	64 ef       	ldi	r22, 0xF4	; 244
    53e6:	71 e0       	ldi	r23, 0x01	; 1
    53e8:	80 e0       	ldi	r24, 0x00	; 0
    53ea:	90 e0       	ldi	r25, 0x00	; 0
    53ec:	0e 94 74 19 	call	0x32e8	; 0x32e8 <_Z4waitm>
    53f0:	61 e0       	ldi	r22, 0x01	; 1
    53f2:	80 ed       	ldi	r24, 0xD0	; 208
    53f4:	9e e0       	ldi	r25, 0x0E	; 14
    53f6:	0e 94 79 46 	call	0x8cf2	; 0x8cf2 <_ZN4LEDs12setFadeSpeedEh>
    53fa:	80 ed       	ldi	r24, 0xD0	; 208
    53fc:	9e e0       	ldi	r25, 0x0E	; 14
    53fe:	0e 94 55 46 	call	0x8caa	; 0x8caa <_ZN4LEDs10allLEDsOffEv>
    5402:	63 2d       	mov	r22, r3
    5404:	8c e0       	ldi	r24, 0x0C	; 12
    5406:	92 e0       	ldi	r25, 0x02	; 2
    5408:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <_ZN13Configuration12factoryResetE18factoryResetType_t>
    540c:	0e 94 43 21 	call	0x4286	; 0x4286 <_Z6rebootv>
    5410:	84 cf       	rjmp	.-248    	; 0x531a <_Z12factoryReset16functionArgument+0x42>
    5412:	68 94       	set
    5414:	d0 f8       	bld	r13, 0
    5416:	62 e0       	ldi	r22, 0x02	; 2
    5418:	8e e0       	ldi	r24, 0x0E	; 14
    541a:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_Z10lcd_gotoxyhh>
    541e:	88 e7       	ldi	r24, 0x78	; 120
    5420:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <_Z8lcd_putcc>
    5424:	d6 cf       	rjmp	.-84     	; 0x53d2 <_Z12factoryReset16functionArgument+0xfa>
    5426:	d0 fe       	sbrs	r13, 0
    5428:	f4 cf       	rjmp	.-24     	; 0x5412 <_Z12factoryReset16functionArgument+0x13a>
    542a:	ce cf       	rjmp	.-100    	; 0x53c8 <_Z12factoryReset16functionArgument+0xf0>
    542c:	68 94       	set
    542e:	c0 f8       	bld	r12, 0
    5430:	62 e0       	ldi	r22, 0x02	; 2
    5432:	84 e0       	ldi	r24, 0x04	; 4
    5434:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_Z10lcd_gotoxyhh>
    5438:	88 e7       	ldi	r24, 0x78	; 120
    543a:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <_Z8lcd_putcc>
    543e:	76 cf       	rjmp	.-276    	; 0x532c <_Z12factoryReset16functionArgument+0x54>
    5440:	c0 fe       	sbrs	r12, 0
    5442:	f4 cf       	rjmp	.-24     	; 0x542c <_Z12factoryReset16functionArgument+0x154>
    5444:	c1 cf       	rjmp	.-126    	; 0x53c8 <_Z12factoryReset16functionArgument+0xf0>
    5446:	68 94       	set
    5448:	c6 f8       	bld	r12, 6
    544a:	62 e0       	ldi	r22, 0x02	; 2
    544c:	89 e0       	ldi	r24, 0x09	; 9
    544e:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_Z10lcd_gotoxyhh>
    5452:	88 e7       	ldi	r24, 0x78	; 120
    5454:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <_Z8lcd_putcc>
    5458:	69 cf       	rjmp	.-302    	; 0x532c <_Z12factoryReset16functionArgument+0x54>
    545a:	c6 fe       	sbrs	r12, 6
    545c:	f4 cf       	rjmp	.-24     	; 0x5446 <_Z12factoryReset16functionArgument+0x16e>
    545e:	b4 cf       	rjmp	.-152    	; 0x53c8 <_Z12factoryReset16functionArgument+0xf0>
    5460:	81 eb       	ldi	r24, 0xB1	; 177
    5462:	98 e0       	ldi	r25, 0x08	; 8
    5464:	ea de       	rcall	.-556    	; 0x523a <_ZN8Encoders5flushEv>
    5466:	80 e0       	ldi	r24, 0x00	; 0
    5468:	df 91       	pop	r29
    546a:	cf 91       	pop	r28
    546c:	1f 91       	pop	r17
    546e:	0f 91       	pop	r16
    5470:	ff 90       	pop	r15
    5472:	ef 90       	pop	r14
    5474:	df 90       	pop	r13
    5476:	cf 90       	pop	r12
    5478:	bf 90       	pop	r11
    547a:	af 90       	pop	r10
    547c:	9f 90       	pop	r9
    547e:	8f 90       	pop	r8
    5480:	7f 90       	pop	r7
    5482:	6f 90       	pop	r6
    5484:	5f 90       	pop	r5
    5486:	4f 90       	pop	r4
    5488:	3f 90       	pop	r3
    548a:	08 95       	ret

0000548c <_Z10deviceInfo16functionArgument>:
    548c:	82 e6       	ldi	r24, 0x62	; 98
    548e:	9c e0       	ldi	r25, 0x0C	; 12
    5490:	0e 94 3d 40 	call	0x807a	; 0x807a <_ZN3LCD17displayDeviceInfoEv>
    5494:	81 e0       	ldi	r24, 0x01	; 1
    5496:	08 95       	ret

00005498 <_Z17enableCalibration16functionArgument>:
    5498:	83 30       	cpi	r24, 0x03	; 3
    549a:	b8 f4       	brcc	.+46     	; 0x54ca <_Z17enableCalibration16functionArgument+0x32>
    549c:	48 2f       	mov	r20, r24
    549e:	61 e0       	ldi	r22, 0x01	; 1
    54a0:	8a e6       	ldi	r24, 0x6A	; 106
    54a2:	9f e0       	ldi	r25, 0x0F	; 15
    54a4:	0e 94 99 6d 	call	0xdb32	; 0xdb32 <_ZN4Pads18setCalibrationModeEb16coordinateType_t>
    54a8:	61 e0       	ldi	r22, 0x01	; 1
    54aa:	82 e6       	ldi	r24, 0x62	; 98
    54ac:	9c e0       	ldi	r25, 0x0C	; 12
    54ae:	0e 94 23 40 	call	0x8046	; 0x8046 <_ZN3LCD9clearLineEh>
    54b2:	62 e0       	ldi	r22, 0x02	; 2
    54b4:	82 e6       	ldi	r24, 0x62	; 98
    54b6:	9c e0       	ldi	r25, 0x0C	; 12
    54b8:	0e 94 23 40 	call	0x8046	; 0x8046 <_ZN3LCD9clearLineEh>
    54bc:	63 e0       	ldi	r22, 0x03	; 3
    54be:	82 e6       	ldi	r24, 0x62	; 98
    54c0:	9c e0       	ldi	r25, 0x0C	; 12
    54c2:	0e 94 23 40 	call	0x8046	; 0x8046 <_ZN3LCD9clearLineEh>
    54c6:	81 e0       	ldi	r24, 0x01	; 1
    54c8:	08 95       	ret
    54ca:	80 e0       	ldi	r24, 0x00	; 0
    54cc:	08 95       	ret

000054ce <_Z16checkCalibration16functionArgument>:
    54ce:	cf 93       	push	r28
    54d0:	8a e6       	ldi	r24, 0x6A	; 106
    54d2:	9f e0       	ldi	r25, 0x0F	; 15
    54d4:	0e 94 6e 69 	call	0xd2dc	; 0xd2dc <_ZN4Pads15allPadsReleasedEv>
    54d8:	c8 2f       	mov	r28, r24
    54da:	81 11       	cpse	r24, r1
    54dc:	08 c0       	rjmp	.+16     	; 0x54ee <_Z16checkCalibration16functionArgument+0x20>
    54de:	65 e0       	ldi	r22, 0x05	; 5
    54e0:	82 e6       	ldi	r24, 0x62	; 98
    54e2:	9c e0       	ldi	r25, 0x0C	; 12
    54e4:	0e 94 ae 36 	call	0x6d5c	; 0x6d5c <_ZN3LCD22displayPadReleaseErrorE17padReleaseError_t>
    54e8:	89 ed       	ldi	r24, 0xD9	; 217
    54ea:	98 e0       	ldi	r25, 0x08	; 8
    54ec:	3f d7       	rcall	.+3710   	; 0x636c <_ZN4Menu12stopFunctionEv>
    54ee:	8c 2f       	mov	r24, r28
    54f0:	cf 91       	pop	r28
    54f2:	08 95       	ret

000054f4 <_Z19checkAftertouchType16functionArgument>:

bool checkAftertouchType(functionArgument argument)   {
    54f4:	cf 93       	push	r28
    54f6:	c8 2f       	mov	r28, r24

    switch((aftertouchType_t)argument.argument1)    {
    54f8:	82 30       	cpi	r24, 0x02	; 2
    54fa:	a0 f4       	brcc	.+40     	; 0x5524 <_Z19checkAftertouchType16functionArgument+0x30>
    54fc:	68 2f       	mov	r22, r24
        default:
        return false;

    }

    switch(argument.argument2)  {
    54fe:	99 23       	and	r25, r25
    5500:	41 f0       	breq	.+16     	; 0x5512 <_Z19checkAftertouchType16functionArgument+0x1e>
    5502:	91 30       	cpi	r25, 0x01	; 1
    5504:	89 f4       	brne	.+34     	; 0x5528 <_Z19checkAftertouchType16functionArgument+0x34>

        case true:
        //change option
        pads.setAftertouchType((aftertouchType_t)argument.argument1);
    5506:	8a e6       	ldi	r24, 0x6A	; 106
    5508:	9f e0       	ldi	r25, 0x0F	; 15
    550a:	0e 94 0d 6e 	call	0xdc1a	; 0xdc1a <_ZN4Pads17setAftertouchTypeE16aftertouchType_t>
        return true;
    550e:	91 e0       	ldi	r25, 0x01	; 1
    5510:	0c c0       	rjmp	.+24     	; 0x552a <_Z19checkAftertouchType16functionArgument+0x36>
        break;

        case false:
        //check if current aftertouch type is same as received argument
        return (pads.getAftertouchType() == (aftertouchType_t)argument.argument1);
    5512:	8a e6       	ldi	r24, 0x6A	; 106
    5514:	9f e0       	ldi	r25, 0x0F	; 15
    5516:	0e 94 e2 67 	call	0xcfc4	; 0xcfc4 <_ZN4Pads17getAftertouchTypeEv>
    551a:	91 e0       	ldi	r25, 0x01	; 1
    551c:	8c 17       	cp	r24, r28
    551e:	29 f0       	breq	.+10     	; 0x552a <_Z19checkAftertouchType16functionArgument+0x36>
    5520:	90 e0       	ldi	r25, 0x00	; 0
    5522:	03 c0       	rjmp	.+6      	; 0x552a <_Z19checkAftertouchType16functionArgument+0x36>
        case aftertouchChannel:
        //nothing
        break;

        default:
        return false;
    5524:	90 e0       	ldi	r25, 0x00	; 0
    5526:	01 c0       	rjmp	.+2      	; 0x552a <_Z19checkAftertouchType16functionArgument+0x36>

        case false:
        //check if current aftertouch type is same as received argument
        return (pads.getAftertouchType() == (aftertouchType_t)argument.argument1);

    }   return false;
    5528:	90 e0       	ldi	r25, 0x00	; 0

}
    552a:	89 2f       	mov	r24, r25
    552c:	cf 91       	pop	r28
    552e:	08 95       	ret

00005530 <_Z18checkRunningStatus16functionArgument>:

bool checkRunningStatus(functionArgument argument)  {
    5530:	cf 93       	push	r28
    5532:	c8 2f       	mov	r28, r24

    switch(argument.argument2)  {
    5534:	99 23       	and	r25, r25
    5536:	61 f0       	breq	.+24     	; 0x5550 <_Z18checkRunningStatus16functionArgument+0x20>
    5538:	91 30       	cpi	r25, 0x01	; 1
    553a:	c1 f4       	brne	.+48     	; 0x556c <_Z18checkRunningStatus16functionArgument+0x3c>

        case true:
        //switch option
        #if MODE_SERIAL < 1
        midi.setRunningStatus((bool)argument.argument1);
    553c:	61 e0       	ldi	r22, 0x01	; 1
    553e:	81 11       	cpse	r24, r1
    5540:	01 c0       	rjmp	.+2      	; 0x5544 <_Z18checkRunningStatus16functionArgument+0x14>
    5542:	60 e0       	ldi	r22, 0x00	; 0
    5544:	87 ec       	ldi	r24, 0xC7	; 199
    5546:	93 e1       	ldi	r25, 0x13	; 19
    5548:	0e 94 2a 7e 	call	0xfc54	; 0xfc54 <_ZN4MIDI16setRunningStatusEb>
        #endif
        return true;
    554c:	81 e0       	ldi	r24, 0x01	; 1
    554e:	0f c0       	rjmp	.+30     	; 0x556e <_Z18checkRunningStatus16functionArgument+0x3e>

        case false:
        #if MODE_SERIAL < 1
        return (midi.runningStatusEnabled() == (bool)argument.argument1);
    5550:	87 ec       	ldi	r24, 0xC7	; 199
    5552:	93 e1       	ldi	r25, 0x13	; 19
    5554:	0e 94 25 7e 	call	0xfc4a	; 0xfc4a <_ZN4MIDI20runningStatusEnabledEv>
    5558:	28 2f       	mov	r18, r24
    555a:	91 e0       	ldi	r25, 0x01	; 1
    555c:	c1 11       	cpse	r28, r1
    555e:	01 c0       	rjmp	.+2      	; 0x5562 <_Z18checkRunningStatus16functionArgument+0x32>
    5560:	90 e0       	ldi	r25, 0x00	; 0
    5562:	81 e0       	ldi	r24, 0x01	; 1
    5564:	29 17       	cp	r18, r25
    5566:	19 f0       	breq	.+6      	; 0x556e <_Z18checkRunningStatus16functionArgument+0x3e>
    5568:	80 e0       	ldi	r24, 0x00	; 0
    556a:	01 c0       	rjmp	.+2      	; 0x556e <_Z18checkRunningStatus16functionArgument+0x3e>
        #endif
        break;

    }   return false;
    556c:	80 e0       	ldi	r24, 0x00	; 0

}
    556e:	cf 91       	pop	r28
    5570:	08 95       	ret

00005572 <_Z18checkNoteOffStatus16functionArgument>:

bool checkNoteOffStatus(functionArgument argument)    {
    5572:	cf 93       	push	r28
    5574:	c8 2f       	mov	r28, r24

    switch(argument.argument1)  {
    5576:	82 30       	cpi	r24, 0x02	; 2
    5578:	a0 f4       	brcc	.+40     	; 0x55a2 <_Z18checkNoteOffStatus16functionArgument+0x30>
    557a:	68 2f       	mov	r22, r24
        default:
        return false;

    }

    switch(argument.argument2)  {
    557c:	99 23       	and	r25, r25
    557e:	41 f0       	breq	.+16     	; 0x5590 <_Z18checkNoteOffStatus16functionArgument+0x1e>
    5580:	91 30       	cpi	r25, 0x01	; 1
    5582:	89 f4       	brne	.+34     	; 0x55a6 <_Z18checkNoteOffStatus16functionArgument+0x34>

        case true:
        //switch option
        #if MODE_SERIAL < 1
        midi.setNoteOffStatus((noteOffType_t)argument.argument1);
    5584:	87 ec       	ldi	r24, 0xC7	; 199
    5586:	93 e1       	ldi	r25, 0x13	; 19
    5588:	0e 94 11 7e 	call	0xfc22	; 0xfc22 <_ZN4MIDI16setNoteOffStatusE13noteOffType_t>
        #endif
        return true;
    558c:	91 e0       	ldi	r25, 0x01	; 1
    558e:	0c c0       	rjmp	.+24     	; 0x55a8 <_Z18checkNoteOffStatus16functionArgument+0x36>

        case false:
        #if MODE_SERIAL < 1
        return (midi.getNoteOffStatus() == (noteOffType_t)argument.argument1);
    5590:	87 ec       	ldi	r24, 0xC7	; 199
    5592:	93 e1       	ldi	r25, 0x13	; 19
    5594:	0e 94 0e 7e 	call	0xfc1c	; 0xfc1c <_ZN4MIDI16getNoteOffStatusEv>
    5598:	91 e0       	ldi	r25, 0x01	; 1
    559a:	8c 17       	cp	r24, r28
    559c:	29 f0       	breq	.+10     	; 0x55a8 <_Z18checkNoteOffStatus16functionArgument+0x36>
    559e:	90 e0       	ldi	r25, 0x00	; 0
    55a0:	03 c0       	rjmp	.+6      	; 0x55a8 <_Z18checkNoteOffStatus16functionArgument+0x36>
        case noteOffType_standardNoteOff:
        //nothing
        break;

        default:
        return false;
    55a2:	90 e0       	ldi	r25, 0x00	; 0
    55a4:	01 c0       	rjmp	.+2      	; 0x55a8 <_Z18checkNoteOffStatus16functionArgument+0x36>
        return (midi.getNoteOffStatus() == (noteOffType_t)argument.argument1);
        #else
        return false;
        #endif

    }   return false;
    55a6:	90 e0       	ldi	r25, 0x00	; 0

}
    55a8:	89 2f       	mov	r24, r25
    55aa:	cf 91       	pop	r28
    55ac:	08 95       	ret

000055ae <_ZN4Menu23createServiceMenuLayoutEv>:

#include "../functions/MenuFunctions.h"

void Menu::createServiceMenuLayout()   {

    menuItem[serviceMenuItem_calibration].stringPointer = menuOption_padCalibration_string;
    55ae:	fc 01       	movw	r30, r24
    55b0:	ee 56       	subi	r30, 0x6E	; 110
    55b2:	fd 4f       	sbci	r31, 0xFD	; 253
    55b4:	29 ed       	ldi	r18, 0xD9	; 217
    55b6:	33 e0       	ldi	r19, 0x03	; 3
    55b8:	31 83       	std	Z+1, r19	; 0x01
    55ba:	20 83       	st	Z, r18
    menuItem[serviceMenuItem_calibration].level = 1;
    55bc:	34 97       	sbiw	r30, 0x04	; 4
    55be:	21 e0       	ldi	r18, 0x01	; 1
    55c0:	30 e0       	ldi	r19, 0x00	; 0
    55c2:	31 83       	std	Z+1, r19	; 0x01
    55c4:	20 83       	st	Z, r18
    menuItem[serviceMenuItem_calibration].function = checkCalibration;
    55c6:	32 96       	adiw	r30, 0x02	; 2
    55c8:	27 e6       	ldi	r18, 0x67	; 103
    55ca:	3a e2       	ldi	r19, 0x2A	; 42
    55cc:	31 83       	std	Z+1, r19	; 0x01
    55ce:	20 83       	st	Z, r18
    menuItem[serviceMenuItem_calibration].conditionCheck = true;
    55d0:	34 96       	adiw	r30, 0x04	; 4
    55d2:	21 e0       	ldi	r18, 0x01	; 1
    55d4:	20 83       	st	Z, r18

        {

            menuItem[serviceMenuItem_calibrateX].stringPointer = calibration_x_string;
    55d6:	7c 96       	adiw	r30, 0x1c	; 28
    55d8:	43 eb       	ldi	r20, 0xB3	; 179
    55da:	53 e0       	ldi	r21, 0x03	; 3
    55dc:	51 83       	std	Z+1, r21	; 0x01
    55de:	40 83       	st	Z, r20
            menuItem[serviceMenuItem_calibrateX].level = 11;
    55e0:	34 97       	sbiw	r30, 0x04	; 4
    55e2:	4b e0       	ldi	r20, 0x0B	; 11
    55e4:	50 e0       	ldi	r21, 0x00	; 0
    55e6:	51 83       	std	Z+1, r21	; 0x01
    55e8:	40 83       	st	Z, r20
            menuItem[serviceMenuItem_calibrateX].function = enableCalibration;
    55ea:	32 96       	adiw	r30, 0x02	; 2
    55ec:	4c e4       	ldi	r20, 0x4C	; 76
    55ee:	5a e2       	ldi	r21, 0x2A	; 42
    55f0:	51 83       	std	Z+1, r21	; 0x01
    55f2:	40 83       	st	Z, r20
            menuItem[serviceMenuItem_calibrateX].argument.argument1 = (uint8_t)coordinateX;
    55f4:	36 96       	adiw	r30, 0x06	; 6
    55f6:	10 82       	st	Z, r1

            menuItem[serviceMenuItem_calibrateY].stringPointer = calibration_y_string;
    55f8:	36 96       	adiw	r30, 0x06	; 6
    55fa:	67 ea       	ldi	r22, 0xA7	; 167
    55fc:	73 e0       	ldi	r23, 0x03	; 3
    55fe:	71 83       	std	Z+1, r23	; 0x01
    5600:	60 83       	st	Z, r22
            menuItem[serviceMenuItem_calibrateY].level = 12;
    5602:	34 97       	sbiw	r30, 0x04	; 4
    5604:	6c e0       	ldi	r22, 0x0C	; 12
    5606:	70 e0       	ldi	r23, 0x00	; 0
    5608:	71 83       	std	Z+1, r23	; 0x01
    560a:	60 83       	st	Z, r22
            menuItem[serviceMenuItem_calibrateY].function = enableCalibration;
    560c:	32 96       	adiw	r30, 0x02	; 2
    560e:	51 83       	std	Z+1, r21	; 0x01
    5610:	40 83       	st	Z, r20
            menuItem[serviceMenuItem_calibrateY].argument.argument1 = (uint8_t)coordinateY;
    5612:	36 96       	adiw	r30, 0x06	; 6
    5614:	20 83       	st	Z, r18

            menuItem[serviceMenuItem_calibratePressure].stringPointer = calibration_pressure_string;
    5616:	36 96       	adiw	r30, 0x06	; 6
    5618:	64 e9       	ldi	r22, 0x94	; 148
    561a:	73 e0       	ldi	r23, 0x03	; 3
    561c:	71 83       	std	Z+1, r23	; 0x01
    561e:	60 83       	st	Z, r22
            menuItem[serviceMenuItem_calibratePressure].level = 13;
    5620:	34 97       	sbiw	r30, 0x04	; 4
    5622:	6d e0       	ldi	r22, 0x0D	; 13
    5624:	70 e0       	ldi	r23, 0x00	; 0
    5626:	71 83       	std	Z+1, r23	; 0x01
    5628:	60 83       	st	Z, r22
            menuItem[serviceMenuItem_calibratePressure].function = enableCalibration;
    562a:	32 96       	adiw	r30, 0x02	; 2
    562c:	51 83       	std	Z+1, r21	; 0x01
    562e:	40 83       	st	Z, r20
            menuItem[serviceMenuItem_calibratePressure].argument.argument1 = (uint8_t)coordinateZ;
    5630:	36 96       	adiw	r30, 0x06	; 6
    5632:	32 e0       	ldi	r19, 0x02	; 2
    5634:	30 83       	st	Z, r19

        }

    menuItem[serviceMenuItem_deviceInfo].stringPointer = menuOption_deviceInfo_string;
    5636:	bc 97       	sbiw	r30, 0x2c	; 44
    5638:	4d ec       	ldi	r20, 0xCD	; 205
    563a:	53 e0       	ldi	r21, 0x03	; 3
    563c:	51 83       	std	Z+1, r21	; 0x01
    563e:	40 83       	st	Z, r20
    menuItem[serviceMenuItem_deviceInfo].level = 2;
    5640:	34 97       	sbiw	r30, 0x04	; 4
    5642:	42 e0       	ldi	r20, 0x02	; 2
    5644:	50 e0       	ldi	r21, 0x00	; 0
    5646:	51 83       	std	Z+1, r21	; 0x01
    5648:	40 83       	st	Z, r20
    menuItem[serviceMenuItem_deviceInfo].function = deviceInfo;
    564a:	32 96       	adiw	r30, 0x02	; 2
    564c:	46 e4       	ldi	r20, 0x46	; 70
    564e:	5a e2       	ldi	r21, 0x2A	; 42
    5650:	51 83       	std	Z+1, r21	; 0x01
    5652:	40 83       	st	Z, r20

    menuItem[serviceMenuItem_factoryReset].stringPointer = menuOption_factoryReset_string;
    5654:	3c 96       	adiw	r30, 0x0c	; 12
    5656:	4f eb       	ldi	r20, 0xBF	; 191
    5658:	53 e0       	ldi	r21, 0x03	; 3
    565a:	51 83       	std	Z+1, r21	; 0x01
    565c:	40 83       	st	Z, r20
    menuItem[serviceMenuItem_factoryReset].level = 3;
    565e:	34 97       	sbiw	r30, 0x04	; 4
    5660:	43 e0       	ldi	r20, 0x03	; 3
    5662:	50 e0       	ldi	r21, 0x00	; 0
    5664:	51 83       	std	Z+1, r21	; 0x01
    5666:	40 83       	st	Z, r20
    menuItem[serviceMenuItem_factoryReset].function = factoryReset;
    5668:	32 96       	adiw	r30, 0x02	; 2
    566a:	4c e6       	ldi	r20, 0x6C	; 108
    566c:	59 e2       	ldi	r21, 0x29	; 41
    566e:	51 83       	std	Z+1, r21	; 0x01
    5670:	40 83       	st	Z, r20
    menuItem[serviceMenuItem_factoryReset].argument.argument1 = (uint8_t)factoryReset_restore;
    5672:	36 96       	adiw	r30, 0x06	; 6
    5674:	20 83       	st	Z, r18
    5676:	08 95       	ret

00005678 <_ZN4Menu20createUserMenuLayoutEv>:

#include "../functions/MenuFunctions.h"

void Menu::createUserMenuLayout()   {

    menuItem[userMenuItem_pressureSensitivity].stringPointer = menuOption_pressureSensitivity_string;
    5678:	fc 01       	movw	r30, r24
    567a:	ee 56       	subi	r30, 0x6E	; 110
    567c:	fd 4f       	sbci	r31, 0xFD	; 253
    567e:	29 e8       	ldi	r18, 0x89	; 137
    5680:	34 e0       	ldi	r19, 0x04	; 4
    5682:	31 83       	std	Z+1, r19	; 0x01
    5684:	20 83       	st	Z, r18
    menuItem[userMenuItem_pressureSensitivity].level = 1;
    5686:	34 97       	sbiw	r30, 0x04	; 4
    5688:	21 e0       	ldi	r18, 0x01	; 1
    568a:	30 e0       	ldi	r19, 0x00	; 0
    568c:	31 83       	std	Z+1, r19	; 0x01
    568e:	20 83       	st	Z, r18
    menuItem[userMenuItem_pressureSensitivity].function = NULL;
    5690:	32 96       	adiw	r30, 0x02	; 2
    5692:	11 82       	std	Z+1, r1	; 0x01
    5694:	10 82       	st	Z, r1

    {

        menuItem[userMenuItem_pressureSensitivity_1].stringPointer = pressure_sensitivity_1_string;
    5696:	f4 96       	adiw	r30, 0x34	; 52
    5698:	29 e6       	ldi	r18, 0x69	; 105
    569a:	34 e0       	ldi	r19, 0x04	; 4
    569c:	31 83       	std	Z+1, r19	; 0x01
    569e:	20 83       	st	Z, r18
        menuItem[userMenuItem_pressureSensitivity_1].level = 11;
    56a0:	34 97       	sbiw	r30, 0x04	; 4
    56a2:	2b e0       	ldi	r18, 0x0B	; 11
    56a4:	30 e0       	ldi	r19, 0x00	; 0
    56a6:	31 83       	std	Z+1, r19	; 0x01
    56a8:	20 83       	st	Z, r18
        menuItem[userMenuItem_pressureSensitivity_1].checkable = true;
    56aa:	37 96       	adiw	r30, 0x07	; 7
    56ac:	21 e0       	ldi	r18, 0x01	; 1
    56ae:	20 83       	st	Z, r18
        menuItem[userMenuItem_pressureSensitivity_1].function = NULL;
    56b0:	35 97       	sbiw	r30, 0x05	; 5
    56b2:	11 82       	std	Z+1, r1	; 0x01
    56b4:	10 82       	st	Z, r1

        menuItem[userMenuItem_pressureSensitivity_2].stringPointer = pressure_sensitivity_2_string;
    56b6:	3c 96       	adiw	r30, 0x0c	; 12
    56b8:	42 e6       	ldi	r20, 0x62	; 98
    56ba:	54 e0       	ldi	r21, 0x04	; 4
    56bc:	51 83       	std	Z+1, r21	; 0x01
    56be:	40 83       	st	Z, r20
        menuItem[userMenuItem_pressureSensitivity_2].level = 12;
    56c0:	34 97       	sbiw	r30, 0x04	; 4
    56c2:	4c e0       	ldi	r20, 0x0C	; 12
    56c4:	50 e0       	ldi	r21, 0x00	; 0
    56c6:	51 83       	std	Z+1, r21	; 0x01
    56c8:	40 83       	st	Z, r20
        menuItem[userMenuItem_pressureSensitivity_2].checkable = true;
    56ca:	37 96       	adiw	r30, 0x07	; 7
    56cc:	20 83       	st	Z, r18
        menuItem[userMenuItem_pressureSensitivity_2].function = NULL;
    56ce:	35 97       	sbiw	r30, 0x05	; 5
    56d0:	11 82       	std	Z+1, r1	; 0x01
    56d2:	10 82       	st	Z, r1

        menuItem[userMenuItem_pressureSensitivity_3].stringPointer = pressure_sensitivity_3_string;
    56d4:	3c 96       	adiw	r30, 0x0c	; 12
    56d6:	4d e5       	ldi	r20, 0x5D	; 93
    56d8:	54 e0       	ldi	r21, 0x04	; 4
    56da:	51 83       	std	Z+1, r21	; 0x01
    56dc:	40 83       	st	Z, r20
        menuItem[userMenuItem_pressureSensitivity_3].level = 13;
    56de:	34 97       	sbiw	r30, 0x04	; 4
    56e0:	4d e0       	ldi	r20, 0x0D	; 13
    56e2:	50 e0       	ldi	r21, 0x00	; 0
    56e4:	51 83       	std	Z+1, r21	; 0x01
    56e6:	40 83       	st	Z, r20
        menuItem[userMenuItem_pressureSensitivity_3].checkable = true;
    56e8:	37 96       	adiw	r30, 0x07	; 7
    56ea:	20 83       	st	Z, r18
        menuItem[userMenuItem_pressureSensitivity_3].function = NULL;
    56ec:	35 97       	sbiw	r30, 0x05	; 5
    56ee:	11 82       	std	Z+1, r1	; 0x01
    56f0:	10 82       	st	Z, r1

    }

    menuItem[userMenuItem_pressureCurve].stringPointer = menuOption_pressureCurve_string;
    56f2:	fa 97       	sbiw	r30, 0x3a	; 58
    56f4:	4c e7       	ldi	r20, 0x7C	; 124
    56f6:	54 e0       	ldi	r21, 0x04	; 4
    56f8:	51 83       	std	Z+1, r21	; 0x01
    56fa:	40 83       	st	Z, r20
    menuItem[userMenuItem_pressureCurve].level = 2;
    56fc:	34 97       	sbiw	r30, 0x04	; 4
    56fe:	42 e0       	ldi	r20, 0x02	; 2
    5700:	50 e0       	ldi	r21, 0x00	; 0
    5702:	51 83       	std	Z+1, r21	; 0x01
    5704:	40 83       	st	Z, r20
    menuItem[userMenuItem_pressureCurve].function = NULL;
    5706:	32 96       	adiw	r30, 0x02	; 2
    5708:	11 82       	std	Z+1, r1	; 0x01
    570a:	10 82       	st	Z, r1

        {
            menuItem[userMenuItem_pressureCurve_linear].stringPointer = pressure_curve_linear_string;
    570c:	e8 5b       	subi	r30, 0xB8	; 184
    570e:	ff 4f       	sbci	r31, 0xFF	; 255
    5710:	46 e5       	ldi	r20, 0x56	; 86
    5712:	54 e0       	ldi	r21, 0x04	; 4
    5714:	51 83       	std	Z+1, r21	; 0x01
    5716:	40 83       	st	Z, r20
            menuItem[userMenuItem_pressureCurve_linear].level = 21;
    5718:	34 97       	sbiw	r30, 0x04	; 4
    571a:	45 e1       	ldi	r20, 0x15	; 21
    571c:	50 e0       	ldi	r21, 0x00	; 0
    571e:	51 83       	std	Z+1, r21	; 0x01
    5720:	40 83       	st	Z, r20
            menuItem[userMenuItem_pressureCurve_linear].checkable = true;
    5722:	37 96       	adiw	r30, 0x07	; 7
    5724:	20 83       	st	Z, r18
            menuItem[userMenuItem_pressureCurve_linear].function = NULL;
    5726:	35 97       	sbiw	r30, 0x05	; 5
    5728:	11 82       	std	Z+1, r1	; 0x01
    572a:	10 82       	st	Z, r1

            menuItem[userMenuItem_pressureCurve_log].stringPointer = pressure_curve_log_string;
    572c:	3c 96       	adiw	r30, 0x0c	; 12
    572e:	41 e5       	ldi	r20, 0x51	; 81
    5730:	54 e0       	ldi	r21, 0x04	; 4
    5732:	51 83       	std	Z+1, r21	; 0x01
    5734:	40 83       	st	Z, r20
            menuItem[userMenuItem_pressureCurve_log].level = 22;
    5736:	34 97       	sbiw	r30, 0x04	; 4
    5738:	46 e1       	ldi	r20, 0x16	; 22
    573a:	50 e0       	ldi	r21, 0x00	; 0
    573c:	51 83       	std	Z+1, r21	; 0x01
    573e:	40 83       	st	Z, r20
            menuItem[userMenuItem_pressureCurve_log].checkable = true;
    5740:	37 96       	adiw	r30, 0x07	; 7
    5742:	20 83       	st	Z, r18
            menuItem[userMenuItem_pressureCurve_log].function = NULL;
    5744:	35 97       	sbiw	r30, 0x05	; 5
    5746:	11 82       	std	Z+1, r1	; 0x01
    5748:	10 82       	st	Z, r1

            menuItem[userMenuItem_pressureCurve_exp].stringPointer = pressure_curve_inv_exp_string;
    574a:	3c 96       	adiw	r30, 0x0c	; 12
    574c:	4c e4       	ldi	r20, 0x4C	; 76
    574e:	54 e0       	ldi	r21, 0x04	; 4
    5750:	51 83       	std	Z+1, r21	; 0x01
    5752:	40 83       	st	Z, r20
            menuItem[userMenuItem_pressureCurve_exp].level = 23;
    5754:	34 97       	sbiw	r30, 0x04	; 4
    5756:	47 e1       	ldi	r20, 0x17	; 23
    5758:	50 e0       	ldi	r21, 0x00	; 0
    575a:	51 83       	std	Z+1, r21	; 0x01
    575c:	40 83       	st	Z, r20
            menuItem[userMenuItem_pressureCurve_exp].checkable = true;
    575e:	37 96       	adiw	r30, 0x07	; 7
    5760:	20 83       	st	Z, r18
            menuItem[userMenuItem_pressureCurve_exp].function = NULL;
    5762:	35 97       	sbiw	r30, 0x05	; 5
    5764:	11 82       	std	Z+1, r1	; 0x01
    5766:	10 82       	st	Z, r1
        }

    menuItem[userMenuItem_midiSettings].stringPointer = menuOption_midiSettings_string;
    5768:	ee 54       	subi	r30, 0x4E	; 78
    576a:	f1 09       	sbc	r31, r1
    576c:	4e e6       	ldi	r20, 0x6E	; 110
    576e:	54 e0       	ldi	r21, 0x04	; 4
    5770:	51 83       	std	Z+1, r21	; 0x01
    5772:	40 83       	st	Z, r20
    menuItem[userMenuItem_midiSettings].level = 3;
    5774:	34 97       	sbiw	r30, 0x04	; 4
    5776:	43 e0       	ldi	r20, 0x03	; 3
    5778:	50 e0       	ldi	r21, 0x00	; 0
    577a:	51 83       	std	Z+1, r21	; 0x01
    577c:	40 83       	st	Z, r20
    menuItem[userMenuItem_midiSettings].function = NULL;
    577e:	32 96       	adiw	r30, 0x02	; 2
    5780:	11 82       	std	Z+1, r1	; 0x01
    5782:	10 82       	st	Z, r1

        {
            menuItem[userMenuItem_midiSettings_aftertouchType].stringPointer = midiSettings_atouchType_string;
    5784:	e4 5a       	subi	r30, 0xA4	; 164
    5786:	ff 4f       	sbci	r31, 0xFF	; 255
    5788:	4c e3       	ldi	r20, 0x3C	; 60
    578a:	54 e0       	ldi	r21, 0x04	; 4
    578c:	51 83       	std	Z+1, r21	; 0x01
    578e:	40 83       	st	Z, r20
            menuItem[userMenuItem_midiSettings_aftertouchType].level = 31;
    5790:	34 97       	sbiw	r30, 0x04	; 4
    5792:	4f e1       	ldi	r20, 0x1F	; 31
    5794:	50 e0       	ldi	r21, 0x00	; 0
    5796:	51 83       	std	Z+1, r21	; 0x01
    5798:	40 83       	st	Z, r20
            menuItem[userMenuItem_midiSettings_aftertouchType].function = NULL;
    579a:	32 96       	adiw	r30, 0x02	; 2
    579c:	11 82       	std	Z+1, r1	; 0x01
    579e:	10 82       	st	Z, r1

                {
                    menuItem[userMenuItem_midiSettings_aftertouchType_channel].stringPointer = aftertouchType_channel_string;
    57a0:	b0 96       	adiw	r30, 0x20	; 32
    57a2:	4c e1       	ldi	r20, 0x1C	; 28
    57a4:	54 e0       	ldi	r21, 0x04	; 4
    57a6:	51 83       	std	Z+1, r21	; 0x01
    57a8:	40 83       	st	Z, r20
                    menuItem[userMenuItem_midiSettings_aftertouchType_channel].level = 311;
    57aa:	34 97       	sbiw	r30, 0x04	; 4
    57ac:	47 e3       	ldi	r20, 0x37	; 55
    57ae:	51 e0       	ldi	r21, 0x01	; 1
    57b0:	51 83       	std	Z+1, r21	; 0x01
    57b2:	40 83       	st	Z, r20
                    menuItem[userMenuItem_midiSettings_aftertouchType_channel].checkable = true;
    57b4:	37 96       	adiw	r30, 0x07	; 7
    57b6:	20 83       	st	Z, r18
                    menuItem[userMenuItem_midiSettings_aftertouchType_channel].function = checkAftertouchType;
    57b8:	35 97       	sbiw	r30, 0x05	; 5
    57ba:	4a e7       	ldi	r20, 0x7A	; 122
    57bc:	5a e2       	ldi	r21, 0x2A	; 42
    57be:	51 83       	std	Z+1, r21	; 0x01
    57c0:	40 83       	st	Z, r20
                    menuItem[userMenuItem_midiSettings_aftertouchType_channel].argument.argument1 = (uint8_t)aftertouchChannel;
    57c2:	36 96       	adiw	r30, 0x06	; 6
    57c4:	10 82       	st	Z, r1

                    menuItem[userMenuItem_midiSettings_aftertouchType_poly].stringPointer = aftertouchType_poly_string;
    57c6:	36 96       	adiw	r30, 0x06	; 6
    57c8:	67 e1       	ldi	r22, 0x17	; 23
    57ca:	74 e0       	ldi	r23, 0x04	; 4
    57cc:	71 83       	std	Z+1, r23	; 0x01
    57ce:	60 83       	st	Z, r22
                    menuItem[userMenuItem_midiSettings_aftertouchType_poly].level = 312;
    57d0:	34 97       	sbiw	r30, 0x04	; 4
    57d2:	68 e3       	ldi	r22, 0x38	; 56
    57d4:	71 e0       	ldi	r23, 0x01	; 1
    57d6:	71 83       	std	Z+1, r23	; 0x01
    57d8:	60 83       	st	Z, r22
                    menuItem[userMenuItem_midiSettings_aftertouchType_poly].checkable = true;
    57da:	37 96       	adiw	r30, 0x07	; 7
    57dc:	20 83       	st	Z, r18
                    menuItem[userMenuItem_midiSettings_aftertouchType_poly].function = checkAftertouchType;
    57de:	35 97       	sbiw	r30, 0x05	; 5
    57e0:	51 83       	std	Z+1, r21	; 0x01
    57e2:	40 83       	st	Z, r20
                    menuItem[userMenuItem_midiSettings_aftertouchType_poly].argument.argument1 = (uint8_t)aftertouchPoly;
    57e4:	36 96       	adiw	r30, 0x06	; 6
    57e6:	20 83       	st	Z, r18
                }

            menuItem[userMenuItem_midiSettings_runningStatus].stringPointer = midiSettings_runningStatus_string;
    57e8:	b2 97       	sbiw	r30, 0x22	; 34
    57ea:	4d e2       	ldi	r20, 0x2D	; 45
    57ec:	54 e0       	ldi	r21, 0x04	; 4
    57ee:	51 83       	std	Z+1, r21	; 0x01
    57f0:	40 83       	st	Z, r20
            menuItem[userMenuItem_midiSettings_runningStatus].level = 32;
    57f2:	34 97       	sbiw	r30, 0x04	; 4
    57f4:	40 e2       	ldi	r20, 0x20	; 32
    57f6:	50 e0       	ldi	r21, 0x00	; 0
    57f8:	51 83       	std	Z+1, r21	; 0x01
    57fa:	40 83       	st	Z, r20
            menuItem[userMenuItem_midiSettings_runningStatus].function = NULL;
    57fc:	32 96       	adiw	r30, 0x02	; 2
    57fe:	11 82       	std	Z+1, r1	; 0x01
    5800:	10 82       	st	Z, r1

            {
                menuItem[userMenuItem_midiSettings_runningStatus_enabled].stringPointer = enabled_string_string;
    5802:	fe 96       	adiw	r30, 0x3e	; 62
    5804:	4f e0       	ldi	r20, 0x0F	; 15
    5806:	54 e0       	ldi	r21, 0x04	; 4
    5808:	51 83       	std	Z+1, r21	; 0x01
    580a:	40 83       	st	Z, r20
                menuItem[userMenuItem_midiSettings_runningStatus_enabled].level = 321;
    580c:	34 97       	sbiw	r30, 0x04	; 4
    580e:	41 e4       	ldi	r20, 0x41	; 65
    5810:	51 e0       	ldi	r21, 0x01	; 1
    5812:	51 83       	std	Z+1, r21	; 0x01
    5814:	40 83       	st	Z, r20
                menuItem[userMenuItem_midiSettings_runningStatus_enabled].checkable = true;
    5816:	37 96       	adiw	r30, 0x07	; 7
    5818:	20 83       	st	Z, r18
                menuItem[userMenuItem_midiSettings_runningStatus_enabled].function = checkRunningStatus;
    581a:	35 97       	sbiw	r30, 0x05	; 5
    581c:	48 e9       	ldi	r20, 0x98	; 152
    581e:	5a e2       	ldi	r21, 0x2A	; 42
    5820:	51 83       	std	Z+1, r21	; 0x01
    5822:	40 83       	st	Z, r20
                menuItem[userMenuItem_midiSettings_runningStatus_enabled].argument.argument1 = 1;
    5824:	36 96       	adiw	r30, 0x06	; 6
    5826:	20 83       	st	Z, r18

                menuItem[userMenuItem_midiSettings_runningStatus_disabled].stringPointer = disabled_string_string;
    5828:	36 96       	adiw	r30, 0x06	; 6
    582a:	66 e0       	ldi	r22, 0x06	; 6
    582c:	74 e0       	ldi	r23, 0x04	; 4
    582e:	71 83       	std	Z+1, r23	; 0x01
    5830:	60 83       	st	Z, r22
                menuItem[userMenuItem_midiSettings_runningStatus_disabled].level = 322;
    5832:	34 97       	sbiw	r30, 0x04	; 4
    5834:	62 e4       	ldi	r22, 0x42	; 66
    5836:	71 e0       	ldi	r23, 0x01	; 1
    5838:	71 83       	std	Z+1, r23	; 0x01
    583a:	60 83       	st	Z, r22
                menuItem[userMenuItem_midiSettings_runningStatus_disabled].checkable = true;
    583c:	37 96       	adiw	r30, 0x07	; 7
    583e:	20 83       	st	Z, r18
                menuItem[userMenuItem_midiSettings_runningStatus_disabled].function = checkRunningStatus;
    5840:	35 97       	sbiw	r30, 0x05	; 5
    5842:	51 83       	std	Z+1, r21	; 0x01
    5844:	40 83       	st	Z, r20
                menuItem[userMenuItem_midiSettings_runningStatus_disabled].argument.argument1 = 0;
    5846:	36 96       	adiw	r30, 0x06	; 6
    5848:	10 82       	st	Z, r1
            }

            menuItem[userMenuItem_midiSettings_noteOff].stringPointer = midiSettings_noteOff_string;
    584a:	e0 54       	subi	r30, 0x40	; 64
    584c:	f1 09       	sbc	r31, r1
    584e:	44 e2       	ldi	r20, 0x24	; 36
    5850:	54 e0       	ldi	r21, 0x04	; 4
    5852:	51 83       	std	Z+1, r21	; 0x01
    5854:	40 83       	st	Z, r20
            menuItem[userMenuItem_midiSettings_noteOff].level = 33;
    5856:	34 97       	sbiw	r30, 0x04	; 4
    5858:	41 e2       	ldi	r20, 0x21	; 33
    585a:	50 e0       	ldi	r21, 0x00	; 0
    585c:	51 83       	std	Z+1, r21	; 0x01
    585e:	40 83       	st	Z, r20
            menuItem[userMenuItem_midiSettings_noteOff].function = NULL;
    5860:	32 96       	adiw	r30, 0x02	; 2
    5862:	11 82       	std	Z+1, r1	; 0x01
    5864:	10 82       	st	Z, r1

            {
                menuItem[userMenuItem_midiSettings_noteOff_channel].stringPointer = noteOff_offChannel_string;
    5866:	b0 96       	adiw	r30, 0x20	; 32
    5868:	49 ee       	ldi	r20, 0xE9	; 233
    586a:	53 e0       	ldi	r21, 0x03	; 3
    586c:	51 83       	std	Z+1, r21	; 0x01
    586e:	40 83       	st	Z, r20
                menuItem[userMenuItem_midiSettings_noteOff_channel].level = 331;
    5870:	34 97       	sbiw	r30, 0x04	; 4
    5872:	4b e4       	ldi	r20, 0x4B	; 75
    5874:	51 e0       	ldi	r21, 0x01	; 1
    5876:	51 83       	std	Z+1, r21	; 0x01
    5878:	40 83       	st	Z, r20
                menuItem[userMenuItem_midiSettings_noteOff_channel].checkable = true;
    587a:	37 96       	adiw	r30, 0x07	; 7
    587c:	20 83       	st	Z, r18
                menuItem[userMenuItem_midiSettings_noteOff_channel].function = checkNoteOffStatus;
    587e:	35 97       	sbiw	r30, 0x05	; 5
    5880:	49 eb       	ldi	r20, 0xB9	; 185
    5882:	5a e2       	ldi	r21, 0x2A	; 42
    5884:	51 83       	std	Z+1, r21	; 0x01
    5886:	40 83       	st	Z, r20
                menuItem[userMenuItem_midiSettings_noteOff_channel].argument.argument1 = (uint8_t)noteOffType_standardNoteOff;
    5888:	36 96       	adiw	r30, 0x06	; 6
    588a:	10 82       	st	Z, r1

                menuItem[userMenuItem_midiSettings_noteOff_zero_vel].stringPointer = noteOff_zeroVel_string;
    588c:	36 96       	adiw	r30, 0x06	; 6
    588e:	65 ef       	ldi	r22, 0xF5	; 245
    5890:	73 e0       	ldi	r23, 0x03	; 3
    5892:	71 83       	std	Z+1, r23	; 0x01
    5894:	60 83       	st	Z, r22
                menuItem[userMenuItem_midiSettings_noteOff_zero_vel].level = 332;
    5896:	34 97       	sbiw	r30, 0x04	; 4
    5898:	6c e4       	ldi	r22, 0x4C	; 76
    589a:	71 e0       	ldi	r23, 0x01	; 1
    589c:	71 83       	std	Z+1, r23	; 0x01
    589e:	60 83       	st	Z, r22
                menuItem[userMenuItem_midiSettings_noteOff_zero_vel].checkable = true;
    58a0:	37 96       	adiw	r30, 0x07	; 7
    58a2:	20 83       	st	Z, r18
                menuItem[userMenuItem_midiSettings_noteOff_zero_vel].function = checkNoteOffStatus;
    58a4:	35 97       	sbiw	r30, 0x05	; 5
    58a6:	51 83       	std	Z+1, r21	; 0x01
    58a8:	40 83       	st	Z, r20
                menuItem[userMenuItem_midiSettings_noteOff_zero_vel].argument.argument1 = (uint8_t)noteOffType_noteOnZeroVel;
    58aa:	36 96       	adiw	r30, 0x06	; 6
    58ac:	20 83       	st	Z, r18
            }
        }

    menuItem[userMenuItem_deviceInfo].stringPointer = menuOption_deviceInfo_string;
    58ae:	e0 59       	subi	r30, 0x90	; 144
    58b0:	f1 09       	sbc	r31, r1
    58b2:	2a ea       	ldi	r18, 0xAA	; 170
    58b4:	34 e0       	ldi	r19, 0x04	; 4
    58b6:	31 83       	std	Z+1, r19	; 0x01
    58b8:	20 83       	st	Z, r18
    menuItem[userMenuItem_deviceInfo].level = 4;
    58ba:	34 97       	sbiw	r30, 0x04	; 4
    58bc:	24 e0       	ldi	r18, 0x04	; 4
    58be:	30 e0       	ldi	r19, 0x00	; 0
    58c0:	31 83       	std	Z+1, r19	; 0x01
    58c2:	20 83       	st	Z, r18
    menuItem[userMenuItem_deviceInfo].function = deviceInfo;
    58c4:	32 96       	adiw	r30, 0x02	; 2
    58c6:	26 e4       	ldi	r18, 0x46	; 70
    58c8:	3a e2       	ldi	r19, 0x2A	; 42
    58ca:	31 83       	std	Z+1, r19	; 0x01
    58cc:	20 83       	st	Z, r18

    menuItem[userMenuItem_factoryReset].stringPointer = menuOption_factoryReset_string;
    58ce:	3c 96       	adiw	r30, 0x0c	; 12
    58d0:	2c e9       	ldi	r18, 0x9C	; 156
    58d2:	34 e0       	ldi	r19, 0x04	; 4
    58d4:	31 83       	std	Z+1, r19	; 0x01
    58d6:	20 83       	st	Z, r18
    menuItem[userMenuItem_factoryReset].level = 5;
    58d8:	34 97       	sbiw	r30, 0x04	; 4
    58da:	25 e0       	ldi	r18, 0x05	; 5
    58dc:	30 e0       	ldi	r19, 0x00	; 0
    58de:	31 83       	std	Z+1, r19	; 0x01
    58e0:	20 83       	st	Z, r18
    menuItem[userMenuItem_factoryReset].function = factoryReset;
    58e2:	32 96       	adiw	r30, 0x02	; 2
    58e4:	2c e6       	ldi	r18, 0x6C	; 108
    58e6:	39 e2       	ldi	r19, 0x29	; 41
    58e8:	31 83       	std	Z+1, r19	; 0x01
    58ea:	20 83       	st	Z, r18
    menuItem[userMenuItem_factoryReset].argument.argument1 = (uint8_t)factoryReset_partial;
    58ec:	36 96       	adiw	r30, 0x06	; 6
    58ee:	82 e0       	ldi	r24, 0x02	; 2
    58f0:	80 83       	st	Z, r24
    58f2:	08 95       	ret

000058f4 <_ZN4MenuC1Ev>:
#ifdef MENU_H_
#include "../strings/Strings.h"
#include "../../pads/Pads.h"
#include "../../buttons/Buttons.h"

Menu::Menu()    {
    58f4:	cf 93       	push	r28
    58f6:	df 93       	push	r29
    58f8:	ec 01       	movw	r28, r24
    58fa:	0e 94 a9 42 	call	0x8552	; 0x8552 <_ZN3LCDC1Ev>

    //default constructor
    activeMenu = noMenu;
    58fe:	fe 01       	movw	r30, r28
    5900:	e2 59       	subi	r30, 0x92	; 146
    5902:	fd 4f       	sbci	r31, 0xFD	; 253
    5904:	82 e0       	ldi	r24, 0x02	; 2
    5906:	80 83       	st	Z, r24
    activeOption = 0;
    5908:	31 96       	adiw	r30, 0x01	; 1
    590a:	10 82       	st	Z, r1
    menuHierarchyPosition = 0;
    590c:	32 96       	adiw	r30, 0x02	; 2
    590e:	11 82       	std	Z+1, r1	; 0x01
    5910:	10 82       	st	Z, r1
    functionRunning = false;
    5912:	c3 57       	subi	r28, 0x73	; 115
    5914:	dd 4f       	sbci	r29, 0xFD	; 253
    5916:	18 82       	st	Y, r1

}
    5918:	df 91       	pop	r29
    591a:	cf 91       	pop	r28
    591c:	08 95       	ret

0000591e <_ZN4Menu4initEv>:

void Menu::init()   {
    591e:	08 95       	ret

00005920 <_ZN4Menu12setMenuTitleEb>:
    getMenuItems();
    updateMenuScreen();

}

void Menu::setMenuTitle(bool rootTitle)   {
    5920:	cf 92       	push	r12
    5922:	ef 92       	push	r14
    5924:	ff 92       	push	r15
    5926:	0f 93       	push	r16
    5928:	1f 93       	push	r17
    592a:	cf 93       	push	r28
    592c:	df 93       	push	r29
    592e:	ec 01       	movw	r28, r24

    uint8_t size = 0;
    uint8_t currentOptionIndex = (menuHierarchyPosition % 10) - 1;
    5930:	fc 01       	movw	r30, r24
    5932:	ef 58       	subi	r30, 0x8F	; 143
    5934:	fd 4f       	sbci	r31, 0xFD	; 253
    5936:	40 81       	ld	r20, Z
    5938:	51 81       	ldd	r21, Z+1	; 0x01

    //set menu title, but only if current level isn't 1 (root)
    if (!rootTitle) {
    593a:	61 11       	cpse	r22, r1
    593c:	63 c0       	rjmp	.+198    	; 0x5a04 <_ZN4Menu12setMenuTitleEb+0xe4>

        stringBuffer[0] = '<';
    593e:	8c e3       	ldi	r24, 0x3C	; 60
    5940:	88 83       	st	Y, r24
        stringBuffer[1] = '\0';
    5942:	19 82       	std	Y+1, r1	; 0x01
}

void Menu::setMenuTitle(bool rootTitle)   {

    uint8_t size = 0;
    uint8_t currentOptionIndex = (menuHierarchyPosition % 10) - 1;
    5944:	9a 01       	movw	r18, r20
    5946:	ad ec       	ldi	r26, 0xCD	; 205
    5948:	bc ec       	ldi	r27, 0xCC	; 204
    594a:	0e 94 8d 82 	call	0x1051a	; 0x1051a <__umulhisi3>
    594e:	96 95       	lsr	r25
    5950:	87 95       	ror	r24
    5952:	96 95       	lsr	r25
    5954:	87 95       	ror	r24
    5956:	96 95       	lsr	r25
    5958:	87 95       	ror	r24
    595a:	9c 01       	movw	r18, r24
    595c:	22 0f       	add	r18, r18
    595e:	33 1f       	adc	r19, r19
    5960:	88 0f       	add	r24, r24
    5962:	99 1f       	adc	r25, r25
    5964:	88 0f       	add	r24, r24
    5966:	99 1f       	adc	r25, r25
    5968:	88 0f       	add	r24, r24
    596a:	99 1f       	adc	r25, r25
    596c:	82 0f       	add	r24, r18
    596e:	93 1f       	adc	r25, r19
    5970:	48 1b       	sub	r20, r24
    5972:	59 0b       	sbc	r21, r25
    5974:	41 50       	subi	r20, 0x01	; 1
    //set menu title, but only if current level isn't 1 (root)
    if (!rootTitle) {

        stringBuffer[0] = '<';
        stringBuffer[1] = '\0';
        strcpy_P(tempBuffer, menuItem[indexes[currentOptionIndex]].stringPointer);
    5976:	8e 01       	movw	r16, r28
    5978:	01 5e       	subi	r16, 0xE1	; 225
    597a:	1f 4f       	sbci	r17, 0xFF	; 255
    597c:	7e 01       	movw	r14, r28
    597e:	e4 0e       	add	r14, r20
    5980:	f1 1c       	adc	r15, r1
    5982:	8c e8       	ldi	r24, 0x8C	; 140
    5984:	e8 1a       	sub	r14, r24
    5986:	8d ef       	ldi	r24, 0xFD	; 253
    5988:	f8 0a       	sbc	r15, r24
    598a:	f7 01       	movw	r30, r14
    598c:	20 81       	ld	r18, Z
    598e:	30 e0       	ldi	r19, 0x00	; 0
    5990:	f9 01       	movw	r30, r18
    5992:	ee 0f       	add	r30, r30
    5994:	ff 1f       	adc	r31, r31
    5996:	22 0f       	add	r18, r18
    5998:	33 1f       	adc	r19, r19
    599a:	22 0f       	add	r18, r18
    599c:	33 1f       	adc	r19, r19
    599e:	22 0f       	add	r18, r18
    59a0:	33 1f       	adc	r19, r19
    59a2:	e2 0f       	add	r30, r18
    59a4:	f3 1f       	adc	r31, r19
    59a6:	ec 0f       	add	r30, r28
    59a8:	fd 1f       	adc	r31, r29
    59aa:	ee 56       	subi	r30, 0x6E	; 110
    59ac:	fd 4f       	sbci	r31, 0xFD	; 253
    59ae:	60 81       	ld	r22, Z
    59b0:	71 81       	ldd	r23, Z+1	; 0x01
    59b2:	c8 01       	movw	r24, r16
    59b4:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
        strcat(stringBuffer, tempBuffer);
    59b8:	b8 01       	movw	r22, r16
    59ba:	ce 01       	movw	r24, r28
    59bc:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
        size = strlen_P(menuItem[indexes[currentOptionIndex]].stringPointer) + 1;
    59c0:	f7 01       	movw	r30, r14
    59c2:	80 81       	ld	r24, Z
    59c4:	90 e0       	ldi	r25, 0x00	; 0
    59c6:	fc 01       	movw	r30, r24
    59c8:	ee 0f       	add	r30, r30
    59ca:	ff 1f       	adc	r31, r31
    59cc:	88 0f       	add	r24, r24
    59ce:	99 1f       	adc	r25, r25
    59d0:	88 0f       	add	r24, r24
    59d2:	99 1f       	adc	r25, r25
    59d4:	88 0f       	add	r24, r24
    59d6:	99 1f       	adc	r25, r25
    59d8:	e8 0f       	add	r30, r24
    59da:	f9 1f       	adc	r31, r25
    59dc:	ec 0f       	add	r30, r28
    59de:	fd 1f       	adc	r31, r29
    59e0:	ee 56       	subi	r30, 0x6E	; 110
    59e2:	fd 4f       	sbci	r31, 0xFD	; 253
#else
extern size_t __strlen_P(const char *) __ATTR_CONST__;  /* internal helper function */
__attribute__((__always_inline__)) static __inline__ size_t strlen_P(const char * s);
static __inline__ size_t strlen_P(const char *s) {
  return __builtin_constant_p(__builtin_strlen(s))
     ? __builtin_strlen(s) : __strlen_P(s);
    59e4:	80 81       	ld	r24, Z
    59e6:	91 81       	ldd	r25, Z+1	; 0x01
    59e8:	0e 94 b6 82 	call	0x1056c	; 0x1056c <__strlen_P>
    59ec:	ee 24       	eor	r14, r14
    59ee:	e3 94       	inc	r14
    59f0:	e8 0e       	add	r14, r24
        updateDisplay(0, text, 0, true, size);
    59f2:	c1 2c       	mov	r12, r1
    59f4:	01 e0       	ldi	r16, 0x01	; 1
    59f6:	20 e0       	ldi	r18, 0x00	; 0
    59f8:	40 e0       	ldi	r20, 0x00	; 0
    59fa:	60 e0       	ldi	r22, 0x00	; 0
    59fc:	ce 01       	movw	r24, r28
    59fe:	0e 94 8f 42 	call	0x851e	; 0x851e <_ZN3LCD13updateDisplayEh11lcdTextTypehbhb>
    5a02:	2b c0       	rjmp	.+86     	; 0x5a5a <_ZN4Menu12setMenuTitleEb+0x13a>

    }   else {

        switch(activeMenu)  {
    5a04:	fc 01       	movw	r30, r24
    5a06:	e2 59       	subi	r30, 0x92	; 146
    5a08:	fd 4f       	sbci	r31, 0xFD	; 253
    5a0a:	80 81       	ld	r24, Z
    5a0c:	88 23       	and	r24, r24
    5a0e:	19 f0       	breq	.+6      	; 0x5a16 <_ZN4Menu12setMenuTitleEb+0xf6>
    5a10:	81 30       	cpi	r24, 0x01	; 1
    5a12:	91 f0       	breq	.+36     	; 0x5a38 <_ZN4Menu12setMenuTitleEb+0x118>
    5a14:	22 c0       	rjmp	.+68     	; 0x5a5a <_ZN4Menu12setMenuTitleEb+0x13a>

            case userMenu:
            strcpy_P(stringBuffer, menuType_user_string);
    5a16:	60 ee       	ldi	r22, 0xE0	; 224
    5a18:	74 e0       	ldi	r23, 0x04	; 4
    5a1a:	ce 01       	movw	r24, r28
    5a1c:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
            size = progmemCharArraySize(menuType_user_string);
            updateDisplay(0, text, 0, true, size);
    5a20:	c1 2c       	mov	r12, r1
    5a22:	68 94       	set
    5a24:	ee 24       	eor	r14, r14
    5a26:	e3 f8       	bld	r14, 3
    5a28:	01 e0       	ldi	r16, 0x01	; 1
    5a2a:	20 e0       	ldi	r18, 0x00	; 0
    5a2c:	40 e0       	ldi	r20, 0x00	; 0
    5a2e:	60 e0       	ldi	r22, 0x00	; 0
    5a30:	ce 01       	movw	r24, r28
    5a32:	0e 94 8f 42 	call	0x851e	; 0x851e <_ZN3LCD13updateDisplayEh11lcdTextTypehbhb>
            break;
    5a36:	11 c0       	rjmp	.+34     	; 0x5a5a <_ZN4Menu12setMenuTitleEb+0x13a>
            break;

            case serviceMenu:
            strcpy_P(stringBuffer, menuType_service_string);
    5a38:	63 ed       	ldi	r22, 0xD3	; 211
    5a3a:	74 e0       	ldi	r23, 0x04	; 4
    5a3c:	ce 01       	movw	r24, r28
    5a3e:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
            size = progmemCharArraySize(menuType_service_string);
            updateDisplay(0, text, 0, true, size);
    5a42:	c1 2c       	mov	r12, r1
    5a44:	0f 2e       	mov	r0, r31
    5a46:	fc e0       	ldi	r31, 0x0C	; 12
    5a48:	ef 2e       	mov	r14, r31
    5a4a:	f0 2d       	mov	r31, r0
    5a4c:	01 e0       	ldi	r16, 0x01	; 1
    5a4e:	20 e0       	ldi	r18, 0x00	; 0
    5a50:	40 e0       	ldi	r20, 0x00	; 0
    5a52:	60 e0       	ldi	r22, 0x00	; 0
    5a54:	ce 01       	movw	r24, r28
    5a56:	0e 94 8f 42 	call	0x851e	; 0x851e <_ZN3LCD13updateDisplayEh11lcdTextTypehbhb>

        }

    }

}
    5a5a:	df 91       	pop	r29
    5a5c:	cf 91       	pop	r28
    5a5e:	1f 91       	pop	r17
    5a60:	0f 91       	pop	r16
    5a62:	ff 90       	pop	r15
    5a64:	ef 90       	pop	r14
    5a66:	cf 90       	pop	r12
    5a68:	08 95       	ret

00005a6a <_ZN4Menu11getMenuSizeEv>:

uint8_t Menu::getMenuSize() {

    uint8_t menuSize = 0;

    switch(activeMenu)  {
    5a6a:	fc 01       	movw	r30, r24
    5a6c:	e2 59       	subi	r30, 0x92	; 146
    5a6e:	fd 4f       	sbci	r31, 0xFD	; 253
    5a70:	80 81       	ld	r24, Z
    5a72:	88 23       	and	r24, r24
    5a74:	21 f0       	breq	.+8      	; 0x5a7e <_ZN4Menu11getMenuSizeEv+0x14>
    5a76:	81 30       	cpi	r24, 0x01	; 1
    5a78:	21 f4       	brne	.+8      	; 0x5a82 <_ZN4Menu11getMenuSizeEv+0x18>

        case serviceMenu:
        menuSize = SERVICE_MENU_ITEMS;
    5a7a:	86 e0       	ldi	r24, 0x06	; 6
    5a7c:	08 95       	ret
        break;

        case userMenu:
        menuSize = USER_MENU_ITEMS;
    5a7e:	84 e1       	ldi	r24, 0x14	; 20
        break;
    5a80:	08 95       	ret

}

uint8_t Menu::getMenuSize() {

    uint8_t menuSize = 0;
    5a82:	80 e0       	ldi	r24, 0x00	; 0
        default:
        break;

    }   return menuSize;

}
    5a84:	08 95       	ret

00005a86 <_ZN4Menu12getMenuItemsEv>:

void Menu::getMenuItems()   {
    5a86:	6f 92       	push	r6
    5a88:	7f 92       	push	r7
    5a8a:	8f 92       	push	r8
    5a8c:	9f 92       	push	r9
    5a8e:	af 92       	push	r10
    5a90:	bf 92       	push	r11
    5a92:	cf 92       	push	r12
    5a94:	df 92       	push	r13
    5a96:	ef 92       	push	r14
    5a98:	ff 92       	push	r15
    5a9a:	0f 93       	push	r16
    5a9c:	1f 93       	push	r17
    5a9e:	cf 93       	push	r28
    5aa0:	df 93       	push	r29
    5aa2:	8c 01       	movw	r16, r24

    //reset current items
    items = 0;
    5aa4:	fc 01       	movw	r30, r24
    5aa6:	ed 58       	subi	r30, 0x8D	; 141
    5aa8:	fd 4f       	sbci	r31, 0xFD	; 253
    5aaa:	10 82       	st	Z, r1

    uint8_t currentDigits = display.getNumberOfDigits(menuHierarchyPosition);
    5aac:	32 97       	sbiw	r30, 0x02	; 2
    5aae:	40 81       	ld	r20, Z
    5ab0:	51 81       	ldd	r21, Z+1	; 0x01
    5ab2:	ca 01       	movw	r24, r20
    5ab4:	a0 e0       	ldi	r26, 0x00	; 0
    5ab6:	b0 e0       	ldi	r27, 0x00	; 0
    void displayFactoryResetWarning();
    void displayNoteShiftLevel(int8_t level);

    inline uint8_t getNumberOfDigits(int32_t number)  {

        if (number < 10)            return 1;
    5ab8:	8a 30       	cpi	r24, 0x0A	; 10
    5aba:	91 05       	cpc	r25, r1
    5abc:	a1 05       	cpc	r26, r1
    5abe:	b1 05       	cpc	r27, r1
    5ac0:	8c f0       	brlt	.+34     	; 0x5ae4 <_ZN4Menu12getMenuItemsEv+0x5e>
        if (number < 100)           return 2;
    5ac2:	84 36       	cpi	r24, 0x64	; 100
    5ac4:	91 05       	cpc	r25, r1
    5ac6:	a1 05       	cpc	r26, r1
    5ac8:	b1 05       	cpc	r27, r1
    5aca:	7c f0       	brlt	.+30     	; 0x5aea <_ZN4Menu12getMenuItemsEv+0x64>
        if (number < 1000)          return 3;
    5acc:	88 3e       	cpi	r24, 0xE8	; 232
    5ace:	23 e0       	ldi	r18, 0x03	; 3
    5ad0:	92 07       	cpc	r25, r18
    5ad2:	a1 05       	cpc	r26, r1
    5ad4:	b1 05       	cpc	r27, r1
    5ad6:	6c f0       	brlt	.+26     	; 0x5af2 <_ZN4Menu12getMenuItemsEv+0x6c>
        if (number < 10000)         return 4;
    5ad8:	80 31       	cpi	r24, 0x10	; 16
    5ada:	97 42       	sbci	r25, 0x27	; 39
    5adc:	a1 05       	cpc	r26, r1
    5ade:	b1 05       	cpc	r27, r1
    5ae0:	6c f0       	brlt	.+26     	; 0x5afc <_ZN4Menu12getMenuItemsEv+0x76>
    5ae2:	10 c0       	rjmp	.+32     	; 0x5b04 <_ZN4Menu12getMenuItemsEv+0x7e>
    void displayFactoryResetWarning();
    void displayNoteShiftLevel(int8_t level);

    inline uint8_t getNumberOfDigits(int32_t number)  {

        if (number < 10)            return 1;
    5ae4:	ff 24       	eor	r15, r15
    5ae6:	f3 94       	inc	r15
    5ae8:	11 c0       	rjmp	.+34     	; 0x5b0c <_ZN4Menu12getMenuItemsEv+0x86>
        if (number < 100)           return 2;
    5aea:	68 94       	set
    5aec:	ff 24       	eor	r15, r15
    5aee:	f1 f8       	bld	r15, 1
    5af0:	0d c0       	rjmp	.+26     	; 0x5b0c <_ZN4Menu12getMenuItemsEv+0x86>
        if (number < 1000)          return 3;
    5af2:	0f 2e       	mov	r0, r31
    5af4:	f3 e0       	ldi	r31, 0x03	; 3
    5af6:	ff 2e       	mov	r15, r31
    5af8:	f0 2d       	mov	r31, r0
    5afa:	08 c0       	rjmp	.+16     	; 0x5b0c <_ZN4Menu12getMenuItemsEv+0x86>
        if (number < 10000)         return 4;
    5afc:	68 94       	set
    5afe:	ff 24       	eor	r15, r15
    5b00:	f2 f8       	bld	r15, 2
    5b02:	04 c0       	rjmp	.+8      	; 0x5b0c <_ZN4Menu12getMenuItemsEv+0x86>
        if (number < 100000)        return 5;
    5b04:	0f 2e       	mov	r0, r31
    5b06:	f5 e0       	ldi	r31, 0x05	; 5
    5b08:	ff 2e       	mov	r15, r31
    5b0a:	f0 2d       	mov	r31, r0
    uint8_t currentOption = menuHierarchyPosition % 10;
    uint16_t subtract = (menuHierarchyPosition - currentOption) * (currentDigits > 1);
    5b0c:	e1 e0       	ldi	r30, 0x01	; 1
    5b0e:	f0 e0       	ldi	r31, 0x00	; 0
    5b10:	81 e0       	ldi	r24, 0x01	; 1
    5b12:	8f 15       	cp	r24, r15
    5b14:	10 f0       	brcs	.+4      	; 0x5b1a <_ZN4Menu12getMenuItemsEv+0x94>
    5b16:	e0 e0       	ldi	r30, 0x00	; 0
    5b18:	f0 e0       	ldi	r31, 0x00	; 0

    //reset current items
    items = 0;

    uint8_t currentDigits = display.getNumberOfDigits(menuHierarchyPosition);
    uint8_t currentOption = menuHierarchyPosition % 10;
    5b1a:	9a 01       	movw	r18, r20
    5b1c:	ad ec       	ldi	r26, 0xCD	; 205
    5b1e:	bc ec       	ldi	r27, 0xCC	; 204
    5b20:	0e 94 8d 82 	call	0x1051a	; 0x1051a <__umulhisi3>
    5b24:	96 95       	lsr	r25
    5b26:	87 95       	ror	r24
    5b28:	96 95       	lsr	r25
    5b2a:	87 95       	ror	r24
    5b2c:	96 95       	lsr	r25
    5b2e:	87 95       	ror	r24
    5b30:	9c 01       	movw	r18, r24
    5b32:	22 0f       	add	r18, r18
    5b34:	33 1f       	adc	r19, r19
    5b36:	88 0f       	add	r24, r24
    5b38:	99 1f       	adc	r25, r25
    5b3a:	88 0f       	add	r24, r24
    5b3c:	99 1f       	adc	r25, r25
    5b3e:	88 0f       	add	r24, r24
    5b40:	99 1f       	adc	r25, r25
    5b42:	82 0f       	add	r24, r18
    5b44:	93 1f       	adc	r25, r19
    5b46:	da 01       	movw	r26, r20
    5b48:	a8 1b       	sub	r26, r24
    5b4a:	b9 0b       	sbc	r27, r25
    uint16_t subtract = (menuHierarchyPosition - currentOption) * (currentDigits > 1);
    5b4c:	4a 1b       	sub	r20, r26
    5b4e:	51 09       	sbc	r21, r1
    5b50:	e4 9f       	mul	r30, r20
    5b52:	c0 01       	movw	r24, r0
    5b54:	e5 9f       	mul	r30, r21
    5b56:	90 0d       	add	r25, r0
    5b58:	f4 9f       	mul	r31, r20
    5b5a:	90 0d       	add	r25, r0
    5b5c:	11 24       	eor	r1, r1

    for (int i=0; i<menuSize; i++) {
    5b5e:	f8 01       	movw	r30, r16
    5b60:	e8 57       	subi	r30, 0x78	; 120
    5b62:	fc 4f       	sbci	r31, 0xFC	; 252
    5b64:	c0 81       	ld	r28, Z
    5b66:	d0 e0       	ldi	r29, 0x00	; 0
    5b68:	1c 16       	cp	r1, r28
    5b6a:	1d 06       	cpc	r1, r29
    5b6c:	0c f0       	brlt	.+2      	; 0x5b70 <_ZN4Menu12getMenuItemsEv+0xea>
    5b6e:	57 c0       	rjmp	.+174    	; 0x5c1e <_ZN4Menu12getMenuItemsEv+0x198>
    5b70:	ea 5f       	subi	r30, 0xFA	; 250
    5b72:	f1 09       	sbc	r31, r1
    5b74:	20 e0       	ldi	r18, 0x00	; 0
    5b76:	30 e0       	ldi	r19, 0x00	; 0
    void displayFactoryResetWarning();
    void displayNoteShiftLevel(int8_t level);

    inline uint8_t getNumberOfDigits(int32_t number)  {

        if (number < 10)            return 1;
    5b78:	bb 24       	eor	r11, r11
    5b7a:	b3 94       	inc	r11
        if (number < 100)           return 2;
    5b7c:	68 94       	set
    5b7e:	ee 24       	eor	r14, r14
    5b80:	e1 f8       	bld	r14, 1
        if (number < 1000)          return 3;
    5b82:	0f 2e       	mov	r0, r31
    5b84:	f3 e0       	ldi	r31, 0x03	; 3
    5b86:	af 2e       	mov	r10, r31
    5b88:	f0 2d       	mov	r31, r0
        if (number < 10000)         return 4;
    5b8a:	68 94       	set
    5b8c:	99 24       	eor	r9, r9
    5b8e:	92 f8       	bld	r9, 2
        if (number < 100000)        return 5;
    5b90:	0f 2e       	mov	r0, r31
    5b92:	f5 e0       	ldi	r31, 0x05	; 5
    5b94:	8f 2e       	mov	r8, r31
    5b96:	f0 2d       	mov	r31, r0
    5b98:	3c 01       	movw	r6, r24
    5b9a:	60 94       	com	r6
    5b9c:	70 94       	com	r7

            int16_t result = menuItem[i].level - subtract;

            if ((display.getNumberOfDigits(result) == 1) && (result > 0)) {

                indexes[items] = i;
    5b9e:	68 01       	movw	r12, r16
    5ba0:	bd e8       	ldi	r27, 0x8D	; 141
    5ba2:	cb 1a       	sub	r12, r27
    5ba4:	bd ef       	ldi	r27, 0xFD	; 253
    5ba6:	db 0a       	sbc	r13, r27
    uint8_t currentOption = menuHierarchyPosition % 10;
    uint16_t subtract = (menuHierarchyPosition - currentOption) * (currentDigits > 1);

    for (int i=0; i<menuSize; i++) {

        if (display.getNumberOfDigits(menuItem[i].level) == currentDigits)  {
    5ba8:	a0 81       	ld	r26, Z
    5baa:	b1 81       	ldd	r27, Z+1	; 0x01
    5bac:	ad 01       	movw	r20, r26
    5bae:	60 e0       	ldi	r22, 0x00	; 0
    5bb0:	70 e0       	ldi	r23, 0x00	; 0
    void displayFactoryResetWarning();
    void displayNoteShiftLevel(int8_t level);

    inline uint8_t getNumberOfDigits(int32_t number)  {

        if (number < 10)            return 1;
    5bb2:	4a 30       	cpi	r20, 0x0A	; 10
    5bb4:	51 05       	cpc	r21, r1
    5bb6:	61 05       	cpc	r22, r1
    5bb8:	71 05       	cpc	r23, r1
    5bba:	8c f0       	brlt	.+34     	; 0x5bde <_ZN4Menu12getMenuItemsEv+0x158>
        if (number < 100)           return 2;
    5bbc:	44 36       	cpi	r20, 0x64	; 100
    5bbe:	51 05       	cpc	r21, r1
    5bc0:	61 05       	cpc	r22, r1
    5bc2:	71 05       	cpc	r23, r1
    5bc4:	74 f0       	brlt	.+28     	; 0x5be2 <_ZN4Menu12getMenuItemsEv+0x15c>
        if (number < 1000)          return 3;
    5bc6:	48 3e       	cpi	r20, 0xE8	; 232
    5bc8:	83 e0       	ldi	r24, 0x03	; 3
    5bca:	58 07       	cpc	r21, r24
    5bcc:	61 05       	cpc	r22, r1
    5bce:	71 05       	cpc	r23, r1
    5bd0:	54 f0       	brlt	.+20     	; 0x5be6 <_ZN4Menu12getMenuItemsEv+0x160>
        if (number < 10000)         return 4;
    5bd2:	40 31       	cpi	r20, 0x10	; 16
    5bd4:	57 42       	sbci	r21, 0x27	; 39
    5bd6:	61 05       	cpc	r22, r1
    5bd8:	71 05       	cpc	r23, r1
    5bda:	3c f0       	brlt	.+14     	; 0x5bea <_ZN4Menu12getMenuItemsEv+0x164>
    5bdc:	08 c0       	rjmp	.+16     	; 0x5bee <_ZN4Menu12getMenuItemsEv+0x168>
    void displayFactoryResetWarning();
    void displayNoteShiftLevel(int8_t level);

    inline uint8_t getNumberOfDigits(int32_t number)  {

        if (number < 10)            return 1;
    5bde:	4b 2d       	mov	r20, r11
    5be0:	07 c0       	rjmp	.+14     	; 0x5bf0 <_ZN4Menu12getMenuItemsEv+0x16a>
        if (number < 100)           return 2;
    5be2:	4e 2d       	mov	r20, r14
    5be4:	05 c0       	rjmp	.+10     	; 0x5bf0 <_ZN4Menu12getMenuItemsEv+0x16a>
        if (number < 1000)          return 3;
    5be6:	4a 2d       	mov	r20, r10
    5be8:	03 c0       	rjmp	.+6      	; 0x5bf0 <_ZN4Menu12getMenuItemsEv+0x16a>
        if (number < 10000)         return 4;
    5bea:	49 2d       	mov	r20, r9
    5bec:	01 c0       	rjmp	.+2      	; 0x5bf0 <_ZN4Menu12getMenuItemsEv+0x16a>
        if (number < 100000)        return 5;
    5bee:	48 2d       	mov	r20, r8
    5bf0:	f4 12       	cpse	r15, r20
    5bf2:	0f c0       	rjmp	.+30     	; 0x5c12 <_ZN4Menu12getMenuItemsEv+0x18c>

            int16_t result = menuItem[i].level - subtract;

            if ((display.getNumberOfDigits(result) == 1) && (result > 0)) {
    5bf4:	a6 0d       	add	r26, r6
    5bf6:	b7 1d       	adc	r27, r7
    5bf8:	19 97       	sbiw	r26, 0x09	; 9
    5bfa:	58 f4       	brcc	.+22     	; 0x5c12 <_ZN4Menu12getMenuItemsEv+0x18c>

                indexes[items] = i;
    5bfc:	d6 01       	movw	r26, r12
    5bfe:	4c 91       	ld	r20, X
    5c00:	d8 01       	movw	r26, r16
    5c02:	a4 0f       	add	r26, r20
    5c04:	b1 1d       	adc	r27, r1
    5c06:	ac 58       	subi	r26, 0x8C	; 140
    5c08:	bd 4f       	sbci	r27, 0xFD	; 253
    5c0a:	2c 93       	st	X, r18
                items++;
    5c0c:	4f 5f       	subi	r20, 0xFF	; 255
    5c0e:	d6 01       	movw	r26, r12
    5c10:	4c 93       	st	X, r20

    uint8_t currentDigits = display.getNumberOfDigits(menuHierarchyPosition);
    uint8_t currentOption = menuHierarchyPosition % 10;
    uint16_t subtract = (menuHierarchyPosition - currentOption) * (currentDigits > 1);

    for (int i=0; i<menuSize; i++) {
    5c12:	2f 5f       	subi	r18, 0xFF	; 255
    5c14:	3f 4f       	sbci	r19, 0xFF	; 255
    5c16:	3a 96       	adiw	r30, 0x0a	; 10
    5c18:	2c 17       	cp	r18, r28
    5c1a:	3d 07       	cpc	r19, r29
    5c1c:	2c f2       	brlt	.-118    	; 0x5ba8 <_ZN4Menu12getMenuItemsEv+0x122>

        }

    }

}
    5c1e:	df 91       	pop	r29
    5c20:	cf 91       	pop	r28
    5c22:	1f 91       	pop	r17
    5c24:	0f 91       	pop	r16
    5c26:	ff 90       	pop	r15
    5c28:	ef 90       	pop	r14
    5c2a:	df 90       	pop	r13
    5c2c:	cf 90       	pop	r12
    5c2e:	bf 90       	pop	r11
    5c30:	af 90       	pop	r10
    5c32:	9f 90       	pop	r9
    5c34:	8f 90       	pop	r8
    5c36:	7f 90       	pop	r7
    5c38:	6f 90       	pop	r6
    5c3a:	08 95       	ret

00005c3c <_ZN4Menu16updateMenuScreenEv>:

void Menu::updateMenuScreen()   {
    5c3c:	2f 92       	push	r2
    5c3e:	3f 92       	push	r3
    5c40:	4f 92       	push	r4
    5c42:	5f 92       	push	r5
    5c44:	6f 92       	push	r6
    5c46:	7f 92       	push	r7
    5c48:	8f 92       	push	r8
    5c4a:	9f 92       	push	r9
    5c4c:	af 92       	push	r10
    5c4e:	bf 92       	push	r11
    5c50:	cf 92       	push	r12
    5c52:	df 92       	push	r13
    5c54:	ef 92       	push	r14
    5c56:	ff 92       	push	r15
    5c58:	0f 93       	push	r16
    5c5a:	1f 93       	push	r17
    5c5c:	cf 93       	push	r28
    5c5e:	df 93       	push	r29
    5c60:	00 d0       	rcall	.+0      	; 0x5c62 <_ZN4Menu16updateMenuScreenEv+0x26>
    5c62:	00 d0       	rcall	.+0      	; 0x5c64 <_ZN4Menu16updateMenuScreenEv+0x28>
    5c64:	cd b7       	in	r28, 0x3d	; 61
    5c66:	de b7       	in	r29, 0x3e	; 62
    5c68:	5c 01       	movw	r10, r24

    uint8_t size;

    uint8_t currentOption = menuHierarchyPosition % 10;
    5c6a:	fc 01       	movw	r30, r24
    5c6c:	ef 58       	subi	r30, 0x8F	; 143
    5c6e:	fd 4f       	sbci	r31, 0xFD	; 253
    5c70:	40 81       	ld	r20, Z
    5c72:	51 81       	ldd	r21, Z+1	; 0x01
    5c74:	9a 01       	movw	r18, r20
    5c76:	ad ec       	ldi	r26, 0xCD	; 205
    5c78:	bc ec       	ldi	r27, 0xCC	; 204
    5c7a:	0e 94 8d 82 	call	0x1051a	; 0x1051a <__umulhisi3>
    5c7e:	96 95       	lsr	r25
    5c80:	87 95       	ror	r24
    5c82:	96 95       	lsr	r25
    5c84:	87 95       	ror	r24
    5c86:	96 95       	lsr	r25
    5c88:	87 95       	ror	r24
    5c8a:	9c 01       	movw	r18, r24
    5c8c:	22 0f       	add	r18, r18
    5c8e:	33 1f       	adc	r19, r19
    5c90:	88 0f       	add	r24, r24
    5c92:	99 1f       	adc	r25, r25
    5c94:	88 0f       	add	r24, r24
    5c96:	99 1f       	adc	r25, r25
    5c98:	88 0f       	add	r24, r24
    5c9a:	99 1f       	adc	r25, r25
    5c9c:	82 0f       	add	r24, r18
    5c9e:	93 1f       	adc	r25, r19
    5ca0:	9a 01       	movw	r18, r20
    5ca2:	28 1b       	sub	r18, r24
    5ca4:	39 0b       	sbc	r19, r25
    5ca6:	c9 01       	movw	r24, r18
    5ca8:	33 27       	eor	r19, r19

    //we can display up to three options/suboptions at the time
    //newSelectedOption needs to be subtracted by 1 since indexing uses 1 as starting point
    uint8_t markerOption = ((currentOption-1) > (NUMBER_OF_LCD_ROWS-2)) ? (NUMBER_OF_LCD_ROWS-2) : (currentOption-1);
    5caa:	21 50       	subi	r18, 0x01	; 1
    5cac:	31 09       	sbc	r19, r1
    5cae:	a9 01       	movw	r20, r18
    5cb0:	23 30       	cpi	r18, 0x03	; 3
    5cb2:	31 05       	cpc	r19, r1
    5cb4:	14 f0       	brlt	.+4      	; 0x5cba <_ZN4Menu16updateMenuScreenEv+0x7e>
    5cb6:	42 e0       	ldi	r20, 0x02	; 2
    5cb8:	50 e0       	ldi	r21, 0x00	; 0
    //position from which we start retrieving menu items
    uint8_t startPosition = ((currentOption-1) > (NUMBER_OF_LCD_ROWS-2)) ? currentOption-1-(NUMBER_OF_LCD_ROWS-2) : 0;
    5cba:	23 30       	cpi	r18, 0x03	; 3
    5cbc:	31 05       	cpc	r19, r1
    5cbe:	14 f0       	brlt	.+4      	; 0x5cc4 <_ZN4Menu16updateMenuScreenEv+0x88>
    5cc0:	83 50       	subi	r24, 0x03	; 3
    5cc2:	01 c0       	rjmp	.+2      	; 0x5cc6 <_ZN4Menu16updateMenuScreenEv+0x8a>
    5cc4:	80 e0       	ldi	r24, 0x00	; 0
    uint8_t itemsIterate = items > (NUMBER_OF_LCD_ROWS-1) ? (NUMBER_OF_LCD_ROWS-1) : items;
    5cc6:	f5 01       	movw	r30, r10
    5cc8:	ed 58       	subi	r30, 0x8D	; 141
    5cca:	fd 4f       	sbci	r31, 0xFD	; 253
    5ccc:	90 81       	ld	r25, Z
    5cce:	94 30       	cpi	r25, 0x04	; 4
    5cd0:	08 f0       	brcs	.+2      	; 0x5cd4 <_ZN4Menu16updateMenuScreenEv+0x98>
    5cd2:	93 e0       	ldi	r25, 0x03	; 3

    for (int i=0; i<itemsIterate; i++)    {
    5cd4:	99 23       	and	r25, r25
    5cd6:	09 f4       	brne	.+2      	; 0x5cda <_ZN4Menu16updateMenuScreenEv+0x9e>
    5cd8:	c0 c0       	rjmp	.+384    	; 0x5e5a <_ZN4Menu16updateMenuScreenEv+0x21e>
    5cda:	68 2e       	mov	r6, r24
    5cdc:	71 2c       	mov	r7, r1
    5cde:	3c e8       	ldi	r19, 0x8C	; 140
    5ce0:	63 1a       	sub	r6, r19
    5ce2:	3d ef       	ldi	r19, 0xFD	; 253
    5ce4:	73 0a       	sbc	r7, r19
    5ce6:	6a 0c       	add	r6, r10
    5ce8:	7b 1c       	adc	r7, r11
    5cea:	49 2e       	mov	r4, r25
    5cec:	51 2c       	mov	r5, r1
    5cee:	81 2c       	mov	r8, r1
    5cf0:	91 2c       	mov	r9, r1

        //skipping first row since it's reserved for the menu title

        if (i == markerOption)  stringBuffer[0] = '>';
    5cf2:	1a 01       	movw	r2, r20
    5cf4:	33 24       	eor	r3, r3
        else                    stringBuffer[0] = SPACE_CHAR;
    5cf6:	68 94       	set
    5cf8:	ff 24       	eor	r15, r15
    5cfa:	f5 f8       	bld	r15, 5

        stringBuffer[1] = '\0';
        strcpy_P(tempBuffer, menuItem[indexes[i+startPosition]].stringPointer);
    5cfc:	c5 01       	movw	r24, r10
    5cfe:	4f 96       	adiw	r24, 0x1f	; 31
    5d00:	9a 83       	std	Y+2, r25	; 0x02
    5d02:	89 83       	std	Y+1, r24	; 0x01
        //check for checkable items
        if (menuItem[indexes[i+startPosition]].checkable && menuItem[indexes[i+startPosition]].function != NULL)   {

            //checked and unchecked strings have the same size
            uint8_t checkMarkerSize = progmemCharArraySize(checked_string);
            uint8_t spaceFill = NUMBER_OF_LCD_COLUMNS - size - checkMarkerSize;
    5d04:	68 94       	set
    5d06:	dd 24       	eor	r13, r13
    5d08:	d4 f8       	bld	r13, 4

    for (int i=0; i<itemsIterate; i++)    {

        //skipping first row since it's reserved for the menu title

        if (i == markerOption)  stringBuffer[0] = '>';
    5d0a:	28 14       	cp	r2, r8
    5d0c:	39 04       	cpc	r3, r9
    5d0e:	21 f4       	brne	.+8      	; 0x5d18 <_ZN4Menu16updateMenuScreenEv+0xdc>
    5d10:	ee e3       	ldi	r30, 0x3E	; 62
    5d12:	d5 01       	movw	r26, r10
    5d14:	ec 93       	st	X, r30
    5d16:	02 c0       	rjmp	.+4      	; 0x5d1c <_ZN4Menu16updateMenuScreenEv+0xe0>
        else                    stringBuffer[0] = SPACE_CHAR;
    5d18:	d5 01       	movw	r26, r10
    5d1a:	fc 92       	st	X, r15

        stringBuffer[1] = '\0';
    5d1c:	f5 01       	movw	r30, r10
    5d1e:	11 82       	std	Z+1, r1	; 0x01
    5d20:	83 01       	movw	r16, r6
    5d22:	ff ef       	ldi	r31, 0xFF	; 255
    5d24:	8f 1a       	sub	r8, r31
    5d26:	9f 0a       	sbc	r9, r31
        strcpy_P(tempBuffer, menuItem[indexes[i+startPosition]].stringPointer);
    5d28:	d3 01       	movw	r26, r6
    5d2a:	8d 91       	ld	r24, X+
    5d2c:	3d 01       	movw	r6, r26
    5d2e:	90 e0       	ldi	r25, 0x00	; 0
    5d30:	fc 01       	movw	r30, r24
    5d32:	ee 0f       	add	r30, r30
    5d34:	ff 1f       	adc	r31, r31
    5d36:	88 0f       	add	r24, r24
    5d38:	99 1f       	adc	r25, r25
    5d3a:	88 0f       	add	r24, r24
    5d3c:	99 1f       	adc	r25, r25
    5d3e:	88 0f       	add	r24, r24
    5d40:	99 1f       	adc	r25, r25
    5d42:	e8 0f       	add	r30, r24
    5d44:	f9 1f       	adc	r31, r25
    5d46:	ea 0d       	add	r30, r10
    5d48:	fb 1d       	adc	r31, r11
    5d4a:	ee 56       	subi	r30, 0x6E	; 110
    5d4c:	fd 4f       	sbci	r31, 0xFD	; 253
    5d4e:	60 81       	ld	r22, Z
    5d50:	71 81       	ldd	r23, Z+1	; 0x01
    5d52:	89 81       	ldd	r24, Y+1	; 0x01
    5d54:	9a 81       	ldd	r25, Y+2	; 0x02
    5d56:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
        strcat(stringBuffer, tempBuffer);
    5d5a:	69 81       	ldd	r22, Y+1	; 0x01
    5d5c:	7a 81       	ldd	r23, Y+2	; 0x02
    5d5e:	c5 01       	movw	r24, r10
    5d60:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
        size = 1 + strlen_P(menuItem[indexes[i+startPosition]].stringPointer);
    5d64:	f8 01       	movw	r30, r16
    5d66:	80 81       	ld	r24, Z
    5d68:	28 2f       	mov	r18, r24
    5d6a:	30 e0       	ldi	r19, 0x00	; 0
    5d6c:	3c 83       	std	Y+4, r19	; 0x04
    5d6e:	2b 83       	std	Y+3, r18	; 0x03
    5d70:	89 01       	movw	r16, r18
    5d72:	00 0f       	add	r16, r16
    5d74:	11 1f       	adc	r17, r17
    5d76:	c9 01       	movw	r24, r18
    5d78:	88 0f       	add	r24, r24
    5d7a:	99 1f       	adc	r25, r25
    5d7c:	88 0f       	add	r24, r24
    5d7e:	99 1f       	adc	r25, r25
    5d80:	88 0f       	add	r24, r24
    5d82:	99 1f       	adc	r25, r25
    5d84:	08 0f       	add	r16, r24
    5d86:	19 1f       	adc	r17, r25
    5d88:	0a 0d       	add	r16, r10
    5d8a:	1b 1d       	adc	r17, r11
    5d8c:	f8 01       	movw	r30, r16
    5d8e:	ee 56       	subi	r30, 0x6E	; 110
    5d90:	fd 4f       	sbci	r31, 0xFD	; 253
    5d92:	80 81       	ld	r24, Z
    5d94:	91 81       	ldd	r25, Z+1	; 0x01
    5d96:	0e 94 b6 82 	call	0x1056c	; 0x1056c <__strlen_P>
    5d9a:	ee 24       	eor	r14, r14
    5d9c:	e3 94       	inc	r14
    5d9e:	e8 0e       	add	r14, r24

        //check for checkable items
        if (menuItem[indexes[i+startPosition]].checkable && menuItem[indexes[i+startPosition]].function != NULL)   {
    5da0:	f8 01       	movw	r30, r16
    5da2:	eb 56       	subi	r30, 0x6B	; 107
    5da4:	fd 4f       	sbci	r31, 0xFD	; 253
    5da6:	90 81       	ld	r25, Z
    5da8:	99 23       	and	r25, r25
    5daa:	09 f4       	brne	.+2      	; 0x5dae <_ZN4Menu16updateMenuScreenEv+0x172>
    5dac:	4a c0       	rjmp	.+148    	; 0x5e42 <_ZN4Menu16updateMenuScreenEv+0x206>
    5dae:	f8 01       	movw	r30, r16
    5db0:	e0 57       	subi	r30, 0x70	; 112
    5db2:	fd 4f       	sbci	r31, 0xFD	; 253
    5db4:	01 90       	ld	r0, Z+
    5db6:	f0 81       	ld	r31, Z
    5db8:	e0 2d       	mov	r30, r0
    5dba:	30 97       	sbiw	r30, 0x00	; 0
    5dbc:	09 f4       	brne	.+2      	; 0x5dc0 <_ZN4Menu16updateMenuScreenEv+0x184>
    5dbe:	41 c0       	rjmp	.+130    	; 0x5e42 <_ZN4Menu16updateMenuScreenEv+0x206>

            //checked and unchecked strings have the same size
            uint8_t checkMarkerSize = progmemCharArraySize(checked_string);
            uint8_t spaceFill = NUMBER_OF_LCD_COLUMNS - size - checkMarkerSize;
    5dc0:	3d 2d       	mov	r19, r13
    5dc2:	38 1b       	sub	r19, r24
    5dc4:	83 2f       	mov	r24, r19

    }

    inline void addSpaceToCharArray(uint8_t &stringSize, uint8_t numberOfSpaces) {

        for (int i=0; i<numberOfSpaces; i++)
    5dc6:	69 f0       	breq	.+26     	; 0x5de2 <_ZN4Menu16updateMenuScreenEv+0x1a6>
    5dc8:	2e 2d       	mov	r18, r14
    5dca:	30 e0       	ldi	r19, 0x00	; 0
    5dcc:	d5 01       	movw	r26, r10
    5dce:	a2 0f       	add	r26, r18
    5dd0:	b3 1f       	adc	r27, r19
    5dd2:	28 0f       	add	r18, r24
    5dd4:	31 1d       	adc	r19, r1
    5dd6:	2a 0d       	add	r18, r10
    5dd8:	3b 1d       	adc	r19, r11
        stringBuffer[stringSize+i] = SPACE_CHAR;
    5dda:	fd 92       	st	X+, r15

    }

    inline void addSpaceToCharArray(uint8_t &stringSize, uint8_t numberOfSpaces) {

        for (int i=0; i<numberOfSpaces; i++)
    5ddc:	a2 17       	cp	r26, r18
    5dde:	b3 07       	cpc	r27, r19
    5de0:	e1 f7       	brne	.-8      	; 0x5dda <_ZN4Menu16updateMenuScreenEv+0x19e>
        stringBuffer[stringSize+i] = SPACE_CHAR;
        stringSize += numberOfSpaces;
        stringBuffer[stringSize] = '\0';
    5de2:	d5 01       	movw	r26, r10
    5de4:	51 96       	adiw	r26, 0x11	; 17
    5de6:	1c 92       	st	X, r1
            addSpaceToCharArray(size, spaceFill);
            size += checkMarkerSize;

            //place checked/unchecked characters at the end of the screen line
            (menuItem[indexes[i+startPosition]].function(menuItem[indexes[i+startPosition]].argument)) ? strcpy_P(tempBuffer, checked_string) : strcpy_P(tempBuffer, unchecked_string);
    5de8:	ab 81       	ldd	r26, Y+3	; 0x03
    5dea:	bc 81       	ldd	r27, Y+4	; 0x04
    5dec:	aa 0f       	add	r26, r26
    5dee:	bb 1f       	adc	r27, r27
    5df0:	8b 81       	ldd	r24, Y+3	; 0x03
    5df2:	9c 81       	ldd	r25, Y+4	; 0x04
    5df4:	88 0f       	add	r24, r24
    5df6:	99 1f       	adc	r25, r25
    5df8:	88 0f       	add	r24, r24
    5dfa:	99 1f       	adc	r25, r25
    5dfc:	88 0f       	add	r24, r24
    5dfe:	99 1f       	adc	r25, r25
    5e00:	a8 0f       	add	r26, r24
    5e02:	b9 1f       	adc	r27, r25
    5e04:	aa 0d       	add	r26, r10
    5e06:	bb 1d       	adc	r27, r11
    5e08:	aa 56       	subi	r26, 0x6A	; 106
    5e0a:	bd 4f       	sbci	r27, 0xFD	; 253
    5e0c:	8d 91       	ld	r24, X+
    5e0e:	9c 91       	ld	r25, X
    5e10:	09 95       	icall
    5e12:	88 23       	and	r24, r24
    5e14:	39 f0       	breq	.+14     	; 0x5e24 <_ZN4Menu16updateMenuScreenEv+0x1e8>
    5e16:	6f ec       	ldi	r22, 0xCF	; 207
    5e18:	74 e0       	ldi	r23, 0x04	; 4
    5e1a:	89 81       	ldd	r24, Y+1	; 0x01
    5e1c:	9a 81       	ldd	r25, Y+2	; 0x02
    5e1e:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    5e22:	06 c0       	rjmp	.+12     	; 0x5e30 <_ZN4Menu16updateMenuScreenEv+0x1f4>
    5e24:	6b ec       	ldi	r22, 0xCB	; 203
    5e26:	74 e0       	ldi	r23, 0x04	; 4
    5e28:	89 81       	ldd	r24, Y+1	; 0x01
    5e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    5e2c:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
            strcat(stringBuffer, tempBuffer);
    5e30:	69 81       	ldd	r22, Y+1	; 0x01
    5e32:	7a 81       	ldd	r23, Y+2	; 0x02
    5e34:	c5 01       	movw	r24, r10
    5e36:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>

            //checked and unchecked strings have the same size
            uint8_t checkMarkerSize = progmemCharArraySize(checked_string);
            uint8_t spaceFill = NUMBER_OF_LCD_COLUMNS - size - checkMarkerSize;
            addSpaceToCharArray(size, spaceFill);
            size += checkMarkerSize;
    5e3a:	0f 2e       	mov	r0, r31
    5e3c:	f4 e1       	ldi	r31, 0x14	; 20
    5e3e:	ef 2e       	mov	r14, r31
    5e40:	f0 2d       	mov	r31, r0
            (menuItem[indexes[i+startPosition]].function(menuItem[indexes[i+startPosition]].argument)) ? strcpy_P(tempBuffer, checked_string) : strcpy_P(tempBuffer, unchecked_string);
            strcat(stringBuffer, tempBuffer);

        }

        updateDisplay(i+1, text, 0, true, size);
    5e42:	c1 2c       	mov	r12, r1
    5e44:	01 e0       	ldi	r16, 0x01	; 1
    5e46:	20 e0       	ldi	r18, 0x00	; 0
    5e48:	40 e0       	ldi	r20, 0x00	; 0
    5e4a:	68 2d       	mov	r22, r8
    5e4c:	c5 01       	movw	r24, r10
    5e4e:	0e 94 8f 42 	call	0x851e	; 0x851e <_ZN3LCD13updateDisplayEh11lcdTextTypehbhb>
    uint8_t markerOption = ((currentOption-1) > (NUMBER_OF_LCD_ROWS-2)) ? (NUMBER_OF_LCD_ROWS-2) : (currentOption-1);
    //position from which we start retrieving menu items
    uint8_t startPosition = ((currentOption-1) > (NUMBER_OF_LCD_ROWS-2)) ? currentOption-1-(NUMBER_OF_LCD_ROWS-2) : 0;
    uint8_t itemsIterate = items > (NUMBER_OF_LCD_ROWS-1) ? (NUMBER_OF_LCD_ROWS-1) : items;

    for (int i=0; i<itemsIterate; i++)    {
    5e52:	84 14       	cp	r8, r4
    5e54:	95 04       	cpc	r9, r5
    5e56:	09 f0       	breq	.+2      	; 0x5e5a <_ZN4Menu16updateMenuScreenEv+0x21e>
    5e58:	58 cf       	rjmp	.-336    	; 0x5d0a <_ZN4Menu16updateMenuScreenEv+0xce>

        updateDisplay(i+1, text, 0, true, size);

    }

    if (items < (NUMBER_OF_LCD_ROWS-1)) {
    5e5a:	f5 01       	movw	r30, r10
    5e5c:	ed 58       	subi	r30, 0x8D	; 141
    5e5e:	fd 4f       	sbci	r31, 0xFD	; 253
    5e60:	80 81       	ld	r24, Z
    5e62:	83 30       	cpi	r24, 0x03	; 3
    5e64:	38 f5       	brcc	.+78     	; 0x5eb4 <_ZN4Menu16updateMenuScreenEv+0x278>

        //clear rows if needed

        strcpy_P(stringBuffer, emptyLine_string);
    5e66:	fa 2c       	mov	r15, r10
    5e68:	1b 2d       	mov	r17, r11
    5e6a:	66 eb       	ldi	r22, 0xB6	; 182
    5e6c:	74 e0       	ldi	r23, 0x04	; 4
    5e6e:	c5 01       	movw	r24, r10
    5e70:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
        size = progmemCharArraySize(emptyLine_string);

        for (int i=items+1; i<NUMBER_OF_LCD_ROWS; i++)
    5e74:	f5 01       	movw	r30, r10
    5e76:	ed 58       	subi	r30, 0x8D	; 141
    5e78:	fd 4f       	sbci	r31, 0xFD	; 253
    5e7a:	a0 80       	ld	r10, Z
    5e7c:	b1 2c       	mov	r11, r1
    5e7e:	bf ef       	ldi	r27, 0xFF	; 255
    5e80:	ab 1a       	sub	r10, r27
    5e82:	bb 0a       	sbc	r11, r27
    5e84:	e4 e0       	ldi	r30, 0x04	; 4
    5e86:	ae 16       	cp	r10, r30
    5e88:	b1 04       	cpc	r11, r1
    5e8a:	a4 f4       	brge	.+40     	; 0x5eb4 <_ZN4Menu16updateMenuScreenEv+0x278>
        updateDisplay(i, text, 0, true, size);
    5e8c:	c1 2c       	mov	r12, r1
    5e8e:	0f 2e       	mov	r0, r31
    5e90:	f4 e1       	ldi	r31, 0x14	; 20
    5e92:	ef 2e       	mov	r14, r31
    5e94:	f0 2d       	mov	r31, r0
    5e96:	01 e0       	ldi	r16, 0x01	; 1
    5e98:	20 e0       	ldi	r18, 0x00	; 0
    5e9a:	40 e0       	ldi	r20, 0x00	; 0
    5e9c:	6a 2d       	mov	r22, r10
    5e9e:	8f 2d       	mov	r24, r15
    5ea0:	91 2f       	mov	r25, r17
    5ea2:	0e 94 8f 42 	call	0x851e	; 0x851e <_ZN3LCD13updateDisplayEh11lcdTextTypehbhb>
        //clear rows if needed

        strcpy_P(stringBuffer, emptyLine_string);
        size = progmemCharArraySize(emptyLine_string);

        for (int i=items+1; i<NUMBER_OF_LCD_ROWS; i++)
    5ea6:	ff ef       	ldi	r31, 0xFF	; 255
    5ea8:	af 1a       	sub	r10, r31
    5eaa:	bf 0a       	sbc	r11, r31
    5eac:	24 e0       	ldi	r18, 0x04	; 4
    5eae:	a2 16       	cp	r10, r18
    5eb0:	b1 04       	cpc	r11, r1
    5eb2:	61 f7       	brne	.-40     	; 0x5e8c <_ZN4Menu16updateMenuScreenEv+0x250>

    #if MODE_SERIAL > 0
    printf("\nmenuHierarchyPosition: %d\n", menuHierarchyPosition);
    #endif

}
    5eb4:	0f 90       	pop	r0
    5eb6:	0f 90       	pop	r0
    5eb8:	0f 90       	pop	r0
    5eba:	0f 90       	pop	r0
    5ebc:	df 91       	pop	r29
    5ebe:	cf 91       	pop	r28
    5ec0:	1f 91       	pop	r17
    5ec2:	0f 91       	pop	r16
    5ec4:	ff 90       	pop	r15
    5ec6:	ef 90       	pop	r14
    5ec8:	df 90       	pop	r13
    5eca:	cf 90       	pop	r12
    5ecc:	bf 90       	pop	r11
    5ece:	af 90       	pop	r10
    5ed0:	9f 90       	pop	r9
    5ed2:	8f 90       	pop	r8
    5ed4:	7f 90       	pop	r7
    5ed6:	6f 90       	pop	r6
    5ed8:	5f 90       	pop	r5
    5eda:	4f 90       	pop	r4
    5edc:	3f 90       	pop	r3
    5ede:	2f 90       	pop	r2
    5ee0:	08 95       	ret

00005ee2 <_ZN4Menu11displayMenuE10menuType_t>:
void Menu::init()   {


}

void Menu::displayMenu(menuType_t type) {
    5ee2:	cf 93       	push	r28
    5ee4:	df 93       	push	r29
    5ee6:	ec 01       	movw	r28, r24

    activeMenu = type;
    5ee8:	fc 01       	movw	r30, r24
    5eea:	e2 59       	subi	r30, 0x92	; 146
    5eec:	fd 4f       	sbci	r31, 0xFD	; 253
    5eee:	60 83       	st	Z, r22

    switch(type)    {
    5ef0:	66 23       	and	r22, r22
    5ef2:	21 f0       	breq	.+8      	; 0x5efc <_ZN4Menu11displayMenuE10menuType_t+0x1a>
    5ef4:	61 30       	cpi	r22, 0x01	; 1
    5ef6:	19 f4       	brne	.+6      	; 0x5efe <_ZN4Menu11displayMenuE10menuType_t+0x1c>

        case serviceMenu:
        createServiceMenuLayout();
    5ef8:	5a db       	rcall	.-2380   	; 0x55ae <_ZN4Menu23createServiceMenuLayoutEv>
        break;
    5efa:	01 c0       	rjmp	.+2      	; 0x5efe <_ZN4Menu11displayMenuE10menuType_t+0x1c>

        case userMenu:
        createUserMenuLayout();
    5efc:	bd db       	rcall	.-2182   	; 0x5678 <_ZN4Menu20createUserMenuLayoutEv>
        break;

    }

    //always reset menu level when displaying menu
    menuHierarchyPosition = 1;
    5efe:	fe 01       	movw	r30, r28
    5f00:	ef 58       	subi	r30, 0x8F	; 143
    5f02:	fd 4f       	sbci	r31, 0xFD	; 253
    5f04:	81 e0       	ldi	r24, 0x01	; 1
    5f06:	90 e0       	ldi	r25, 0x00	; 0
    5f08:	91 83       	std	Z+1, r25	; 0x01
    5f0a:	80 83       	st	Z, r24
    activeOption = 0;
    5f0c:	32 97       	sbiw	r30, 0x02	; 2
    5f0e:	10 82       	st	Z, r1
    functionRunning = false;
    5f10:	7e 96       	adiw	r30, 0x1e	; 30
    5f12:	10 82       	st	Z, r1

    setMenuTitle(true);
    5f14:	61 e0       	ldi	r22, 0x01	; 1
    5f16:	ce 01       	movw	r24, r28
    5f18:	03 dd       	rcall	.-1530   	; 0x5920 <_ZN4Menu12setMenuTitleEb>
    menuSize = getMenuSize();
    5f1a:	ce 01       	movw	r24, r28
    5f1c:	a6 dd       	rcall	.-1204   	; 0x5a6a <_ZN4Menu11getMenuSizeEv>
    5f1e:	fe 01       	movw	r30, r28
    5f20:	e8 57       	subi	r30, 0x78	; 120
    5f22:	fc 4f       	sbci	r31, 0xFC	; 252
    5f24:	80 83       	st	Z, r24
    getMenuItems();
    5f26:	ce 01       	movw	r24, r28
    5f28:	ae dd       	rcall	.-1188   	; 0x5a86 <_ZN4Menu12getMenuItemsEv>
    updateMenuScreen();
    5f2a:	ce 01       	movw	r24, r28
    5f2c:	87 de       	rcall	.-754    	; 0x5c3c <_ZN4Menu16updateMenuScreenEv>

}
    5f2e:	df 91       	pop	r29
    5f30:	cf 91       	pop	r28
    5f32:	08 95       	ret

00005f34 <_ZN4Menu12changeOptionEb>:
    printf("\nmenuHierarchyPosition: %d\n", menuHierarchyPosition);
    #endif

}

void Menu::changeOption(bool direction) {
    5f34:	1f 93       	push	r17
    5f36:	cf 93       	push	r28
    5f38:	df 93       	push	r29
    5f3a:	fc 01       	movw	r30, r24
    5f3c:	16 2f       	mov	r17, r22

    if (functionRunning) return;
    5f3e:	dc 01       	movw	r26, r24
    5f40:	a3 57       	subi	r26, 0x73	; 115
    5f42:	bd 4f       	sbci	r27, 0xFD	; 253
    5f44:	8c 91       	ld	r24, X
    5f46:	81 11       	cpse	r24, r1
    5f48:	3b c0       	rjmp	.+118    	; 0x5fc0 <_ZN4Menu12changeOptionEb+0x8c>

    uint8_t currentOption = menuHierarchyPosition % 10;
    5f4a:	5c 97       	sbiw	r26, 0x1c	; 28
    5f4c:	cd 91       	ld	r28, X+
    5f4e:	dc 91       	ld	r29, X
    5f50:	9e 01       	movw	r18, r28
    5f52:	ad ec       	ldi	r26, 0xCD	; 205
    5f54:	bc ec       	ldi	r27, 0xCC	; 204
    5f56:	0e 94 8d 82 	call	0x1051a	; 0x1051a <__umulhisi3>
    5f5a:	ac 01       	movw	r20, r24
    5f5c:	56 95       	lsr	r21
    5f5e:	47 95       	ror	r20
    5f60:	56 95       	lsr	r21
    5f62:	47 95       	ror	r20
    5f64:	56 95       	lsr	r21
    5f66:	47 95       	ror	r20
    5f68:	ca 01       	movw	r24, r20
    5f6a:	88 0f       	add	r24, r24
    5f6c:	99 1f       	adc	r25, r25
    5f6e:	44 0f       	add	r20, r20
    5f70:	55 1f       	adc	r21, r21
    5f72:	44 0f       	add	r20, r20
    5f74:	55 1f       	adc	r21, r21
    5f76:	44 0f       	add	r20, r20
    5f78:	55 1f       	adc	r21, r21
    5f7a:	48 0f       	add	r20, r24
    5f7c:	59 1f       	adc	r21, r25
    5f7e:	ce 01       	movw	r24, r28
    5f80:	84 1b       	sub	r24, r20
    5f82:	95 0b       	sbc	r25, r21
    5f84:	ac 01       	movw	r20, r24

    //here we actually change selected option
    uint8_t newSelectedOption = currentOption;
    direction ? newSelectedOption++ : newSelectedOption--;
    5f86:	11 23       	and	r17, r17
    5f88:	19 f0       	breq	.+6      	; 0x5f90 <_ZN4Menu12changeOptionEb+0x5c>
    5f8a:	31 e0       	ldi	r19, 0x01	; 1
    5f8c:	34 0f       	add	r19, r20
    5f8e:	02 c0       	rjmp	.+4      	; 0x5f94 <_ZN4Menu12changeOptionEb+0x60>
    5f90:	3f ef       	ldi	r19, 0xFF	; 255
    5f92:	34 0f       	add	r19, r20

    //make sure we don't cross bounds
    if (newSelectedOption < 1) newSelectedOption = 1;
    5f94:	31 11       	cpse	r19, r1
    5f96:	01 c0       	rjmp	.+2      	; 0x5f9a <_ZN4Menu12changeOptionEb+0x66>
    5f98:	31 e0       	ldi	r19, 0x01	; 1
    if (newSelectedOption > items) newSelectedOption--;
    5f9a:	df 01       	movw	r26, r30
    5f9c:	ad 58       	subi	r26, 0x8D	; 141
    5f9e:	bd 4f       	sbci	r27, 0xFD	; 253
    5fa0:	9c 91       	ld	r25, X
    5fa2:	93 17       	cp	r25, r19
    5fa4:	08 f4       	brcc	.+2      	; 0x5fa8 <_ZN4Menu12changeOptionEb+0x74>
    5fa6:	31 50       	subi	r19, 0x01	; 1

    if (newSelectedOption != currentOption) {
    5fa8:	38 17       	cp	r19, r24
    5faa:	51 f0       	breq	.+20     	; 0x5fc0 <_ZN4Menu12changeOptionEb+0x8c>
    5fac:	cf 01       	movw	r24, r30

        //we need to update global hierarchy position
        //to do that, first we get rid of current position and then add new one
        menuHierarchyPosition = (menuHierarchyPosition-currentOption)+newSelectedOption;
    5fae:	ef 58       	subi	r30, 0x8F	; 143
    5fb0:	fd 4f       	sbci	r31, 0xFD	; 253
    5fb2:	c4 1b       	sub	r28, r20
    5fb4:	d1 09       	sbc	r29, r1
    5fb6:	c3 0f       	add	r28, r19
    5fb8:	d1 1d       	adc	r29, r1
    5fba:	d1 83       	std	Z+1, r29	; 0x01
    5fbc:	c0 83       	st	Z, r28

        updateMenuScreen();
    5fbe:	3e de       	rcall	.-900    	; 0x5c3c <_ZN4Menu16updateMenuScreenEv>

    }

}
    5fc0:	df 91       	pop	r29
    5fc2:	cf 91       	pop	r28
    5fc4:	1f 91       	pop	r17
    5fc6:	08 95       	ret

00005fc8 <_ZN4Menu8exitMenuEv>:

void Menu::exitMenu()   {
    5fc8:	1f 93       	push	r17
    5fca:	cf 93       	push	r28
    5fcc:	df 93       	push	r29
    5fce:	ec 01       	movw	r28, r24

    #if MODE_SERIAL > 0
        printf("Exiting menu\n");
    #endif
    //exit menu and restore initial state
    display.displayProgramAndScale(pads.getActiveProgram()+1, pads.getActiveScale());
    5fd0:	8a e6       	ldi	r24, 0x6A	; 106
    5fd2:	9f e0       	ldi	r25, 0x0F	; 15
    5fd4:	0e 94 f1 67 	call	0xcfe2	; 0xcfe2 <_ZN4Pads14getActiveScaleEv>
    5fd8:	18 2f       	mov	r17, r24
    5fda:	8a e6       	ldi	r24, 0x6A	; 106
    5fdc:	9f e0       	ldi	r25, 0x0F	; 15
    5fde:	0e 94 ec 67 	call	0xcfd8	; 0xcfd8 <_ZN4Pads16getActiveProgramEv>
    5fe2:	61 e0       	ldi	r22, 0x01	; 1
    5fe4:	68 0f       	add	r22, r24
    5fe6:	41 2f       	mov	r20, r17
    5fe8:	82 e6       	ldi	r24, 0x62	; 98
    5fea:	9c e0       	ldi	r25, 0x0C	; 12
    5fec:	0e 94 a6 38 	call	0x714c	; 0x714c <_ZN3LCD22displayProgramAndScaleEhh>
    //disable calibration if active
    pads.setCalibrationMode(false);
    5ff0:	40 e0       	ldi	r20, 0x00	; 0
    5ff2:	60 e0       	ldi	r22, 0x00	; 0
    5ff4:	8a e6       	ldi	r24, 0x6A	; 106
    5ff6:	9f e0       	ldi	r25, 0x0F	; 15
    5ff8:	0e 94 99 6d 	call	0xdb32	; 0xdb32 <_ZN4Pads18setCalibrationModeEb16coordinateType_t>
    //re-enable buttons
    #ifdef MODULE_BUTTONS
    buttons.enable();
    5ffc:	6f ef       	ldi	r22, 0xFF	; 255
    5ffe:	80 e4       	ldi	r24, 0x40	; 64
    6000:	98 e0       	ldi	r25, 0x08	; 8
    6002:	0e 94 13 27 	call	0x4e26	; 0x4e26 <_ZN7Buttons6enableEa>
    #endif
    activeMenu = noMenu;
    6006:	fe 01       	movw	r30, r28
    6008:	e2 59       	subi	r30, 0x92	; 146
    600a:	fd 4f       	sbci	r31, 0xFD	; 253
    600c:	82 e0       	ldi	r24, 0x02	; 2
    600e:	80 83       	st	Z, r24
    functionRunning = false;
    6010:	c3 57       	subi	r28, 0x73	; 115
    6012:	dd 4f       	sbci	r29, 0xFD	; 253
    6014:	18 82       	st	Y, r1

}
    6016:	df 91       	pop	r29
    6018:	cf 91       	pop	r28
    601a:	1f 91       	pop	r17
    601c:	08 95       	ret

0000601e <_ZN4Menu13menuDisplayedEv>:

bool Menu::menuDisplayed()  {

    return (activeMenu != noMenu);
    601e:	fc 01       	movw	r30, r24
    6020:	e2 59       	subi	r30, 0x92	; 146
    6022:	fd 4f       	sbci	r31, 0xFD	; 253
    6024:	81 e0       	ldi	r24, 0x01	; 1
    6026:	90 81       	ld	r25, Z
    6028:	92 30       	cpi	r25, 0x02	; 2
    602a:	09 f4       	brne	.+2      	; 0x602e <_ZN4Menu13menuDisplayedEv+0x10>
    602c:	80 e0       	ldi	r24, 0x00	; 0

}
    602e:	08 95       	ret

00006030 <_ZN4Menu13confirmOptionEb>:

void Menu::confirmOption(bool confirm)  {
    6030:	ef 92       	push	r14
    6032:	ff 92       	push	r15
    6034:	0f 93       	push	r16
    6036:	1f 93       	push	r17
    6038:	cf 93       	push	r28
    603a:	df 93       	push	r29
    603c:	ec 01       	movw	r28, r24
    603e:	46 2f       	mov	r20, r22

    if (confirm && functionRunning) return;
    6040:	66 23       	and	r22, r22
    6042:	39 f0       	breq	.+14     	; 0x6052 <_ZN4Menu13confirmOptionEb+0x22>
    6044:	fc 01       	movw	r30, r24
    6046:	e3 57       	subi	r30, 0x73	; 115
    6048:	fd 4f       	sbci	r31, 0xFD	; 253
    604a:	80 81       	ld	r24, Z
    604c:	88 23       	and	r24, r24
    604e:	51 f0       	breq	.+20     	; 0x6064 <_ZN4Menu13confirmOptionEb+0x34>
    6050:	86 c1       	rjmp	.+780    	; 0x635e <_ZN4Menu13confirmOptionEb+0x32e>
    if (!confirm && functionRunning) functionRunning = false;
    6052:	fc 01       	movw	r30, r24
    6054:	e3 57       	subi	r30, 0x73	; 115
    6056:	fd 4f       	sbci	r31, 0xFD	; 253
    6058:	80 81       	ld	r24, Z
    605a:	88 23       	and	r24, r24
    605c:	09 f4       	brne	.+2      	; 0x6060 <_ZN4Menu13confirmOptionEb+0x30>
    605e:	61 c1       	rjmp	.+706    	; 0x6322 <_ZN4Menu13confirmOptionEb+0x2f2>
    6060:	10 82       	st	Z, r1
    6062:	5f c1       	rjmp	.+702    	; 0x6322 <_ZN4Menu13confirmOptionEb+0x2f2>

    uint8_t currentOptionIndex = (menuHierarchyPosition % 10) - 1;
    6064:	fe 01       	movw	r30, r28
    6066:	ef 58       	subi	r30, 0x8F	; 143
    6068:	fd 4f       	sbci	r31, 0xFD	; 253
    606a:	40 81       	ld	r20, Z
    606c:	51 81       	ldd	r21, Z+1	; 0x01

    //this confirms current hierarchy level and moves to next one,
    //or it deletes current level and switches to previous, depending on received argument
    uint16_t newLevel = menuHierarchyPosition;

    confirm ? newLevel = (newLevel*10) + 1 : newLevel /= 10;
    606e:	7a 01       	movw	r14, r20
    6070:	ee 0c       	add	r14, r14
    6072:	ff 1c       	adc	r15, r15
    6074:	ca 01       	movw	r24, r20
    6076:	88 0f       	add	r24, r24
    6078:	99 1f       	adc	r25, r25
    607a:	88 0f       	add	r24, r24
    607c:	99 1f       	adc	r25, r25
    607e:	88 0f       	add	r24, r24
    6080:	99 1f       	adc	r25, r25
    6082:	e8 0e       	add	r14, r24
    6084:	f9 1e       	adc	r15, r25
    6086:	8f ef       	ldi	r24, 0xFF	; 255
    6088:	e8 1a       	sub	r14, r24
    608a:	f8 0a       	sbc	r15, r24
void Menu::confirmOption(bool confirm)  {

    if (confirm && functionRunning) return;
    if (!confirm && functionRunning) functionRunning = false;

    uint8_t currentOptionIndex = (menuHierarchyPosition % 10) - 1;
    608c:	9a 01       	movw	r18, r20
    608e:	ad ec       	ldi	r26, 0xCD	; 205
    6090:	bc ec       	ldi	r27, 0xCC	; 204
    6092:	0e 94 8d 82 	call	0x1051a	; 0x1051a <__umulhisi3>
    6096:	96 95       	lsr	r25
    6098:	87 95       	ror	r24
    609a:	96 95       	lsr	r25
    609c:	87 95       	ror	r24
    609e:	96 95       	lsr	r25
    60a0:	87 95       	ror	r24
    60a2:	9c 01       	movw	r18, r24
    60a4:	22 0f       	add	r18, r18
    60a6:	33 1f       	adc	r19, r19
    60a8:	88 0f       	add	r24, r24
    60aa:	99 1f       	adc	r25, r25
    60ac:	88 0f       	add	r24, r24
    60ae:	99 1f       	adc	r25, r25
    60b0:	88 0f       	add	r24, r24
    60b2:	99 1f       	adc	r25, r25
    60b4:	82 0f       	add	r24, r18
    60b6:	93 1f       	adc	r25, r19
    60b8:	48 1b       	sub	r20, r24
    60ba:	59 0b       	sbc	r21, r25
    60bc:	41 50       	subi	r20, 0x01	; 1
    if (confirm)    {

        bool menuLevelPresent = false;

        //check if level has assigned function
        if (menuItem[indexes[currentOptionIndex]].function != NULL) {
    60be:	04 2f       	mov	r16, r20
    60c0:	10 e0       	ldi	r17, 0x00	; 0
    60c2:	fe 01       	movw	r30, r28
    60c4:	e0 0f       	add	r30, r16
    60c6:	f1 1f       	adc	r31, r17
    60c8:	ec 58       	subi	r30, 0x8C	; 140
    60ca:	fd 4f       	sbci	r31, 0xFD	; 253
    60cc:	40 81       	ld	r20, Z
    60ce:	50 e0       	ldi	r21, 0x00	; 0
    60d0:	fa 01       	movw	r30, r20
    60d2:	ee 0f       	add	r30, r30
    60d4:	ff 1f       	adc	r31, r31
    60d6:	ca 01       	movw	r24, r20
    60d8:	88 0f       	add	r24, r24
    60da:	99 1f       	adc	r25, r25
    60dc:	88 0f       	add	r24, r24
    60de:	99 1f       	adc	r25, r25
    60e0:	88 0f       	add	r24, r24
    60e2:	99 1f       	adc	r25, r25
    60e4:	e8 0f       	add	r30, r24
    60e6:	f9 1f       	adc	r31, r25
    60e8:	ec 0f       	add	r30, r28
    60ea:	fd 1f       	adc	r31, r29
    60ec:	e0 57       	subi	r30, 0x70	; 112
    60ee:	fd 4f       	sbci	r31, 0xFD	; 253
    60f0:	01 90       	ld	r0, Z+
    60f2:	f0 81       	ld	r31, Z
    60f4:	e0 2d       	mov	r30, r0
    60f6:	30 97       	sbiw	r30, 0x00	; 0
    60f8:	21 f4       	brne	.+8      	; 0x6102 <_ZN4Menu13confirmOptionEb+0xd2>
    60fa:	9e c0       	rjmp	.+316    	; 0x6238 <_ZN4Menu13confirmOptionEb+0x208>

    confirm ? newLevel = (newLevel*10) + 1 : newLevel /= 10;

    if (newLevel < 1)   {   //exit menu

        exitMenu();
    60fc:	ce 01       	movw	r24, r28
    60fe:	64 df       	rcall	.-312    	; 0x5fc8 <_ZN4Menu8exitMenuEv>
        return;
    6100:	2e c1       	rjmp	.+604    	; 0x635e <_ZN4Menu13confirmOptionEb+0x32e>
        bool menuLevelPresent = false;

        //check if level has assigned function
        if (menuItem[indexes[currentOptionIndex]].function != NULL) {

            if (menuItem[indexes[currentOptionIndex]].conditionCheck)   {
    6102:	ca 01       	movw	r24, r20
    6104:	88 0f       	add	r24, r24
    6106:	99 1f       	adc	r25, r25
    6108:	88 0f       	add	r24, r24
    610a:	99 1f       	adc	r25, r25
    610c:	88 0f       	add	r24, r24
    610e:	99 1f       	adc	r25, r25
    6110:	da 01       	movw	r26, r20
    6112:	aa 0f       	add	r26, r26
    6114:	bb 1f       	adc	r27, r27
    6116:	a8 0f       	add	r26, r24
    6118:	b9 1f       	adc	r27, r25
    611a:	ac 0f       	add	r26, r28
    611c:	bd 1f       	adc	r27, r29
    611e:	ac 56       	subi	r26, 0x6C	; 108
    6120:	bd 4f       	sbci	r27, 0xFD	; 253
    6122:	8c 91       	ld	r24, X
    6124:	88 23       	and	r24, r24
    6126:	a9 f0       	breq	.+42     	; 0x6152 <_ZN4Menu13confirmOptionEb+0x122>

                //run function without setting any flag or menu title
                if (menuItem[indexes[currentOptionIndex]].function(menuItem[indexes[currentOptionIndex]].argument))   {
    6128:	da 01       	movw	r26, r20
    612a:	aa 0f       	add	r26, r26
    612c:	bb 1f       	adc	r27, r27
    612e:	44 0f       	add	r20, r20
    6130:	55 1f       	adc	r21, r21
    6132:	44 0f       	add	r20, r20
    6134:	55 1f       	adc	r21, r21
    6136:	44 0f       	add	r20, r20
    6138:	55 1f       	adc	r21, r21
    613a:	a4 0f       	add	r26, r20
    613c:	b5 1f       	adc	r27, r21
    613e:	ac 0f       	add	r26, r28
    6140:	bd 1f       	adc	r27, r29
    6142:	aa 56       	subi	r26, 0x6A	; 106
    6144:	bd 4f       	sbci	r27, 0xFD	; 253
    6146:	8d 91       	ld	r24, X+
    6148:	9c 91       	ld	r25, X
    614a:	09 95       	icall
    614c:	81 11       	cpse	r24, r1
    614e:	74 c0       	rjmp	.+232    	; 0x6238 <_ZN4Menu13confirmOptionEb+0x208>
    6150:	06 c1       	rjmp	.+524    	; 0x635e <_ZN4Menu13confirmOptionEb+0x32e>

                    //do nothing

                } else return; //function returned false

            } else if (menuItem[indexes[currentOptionIndex]].checkable) {
    6152:	ca 01       	movw	r24, r20
    6154:	88 0f       	add	r24, r24
    6156:	99 1f       	adc	r25, r25
    6158:	88 0f       	add	r24, r24
    615a:	99 1f       	adc	r25, r25
    615c:	88 0f       	add	r24, r24
    615e:	99 1f       	adc	r25, r25
    6160:	da 01       	movw	r26, r20
    6162:	aa 0f       	add	r26, r26
    6164:	bb 1f       	adc	r27, r27
    6166:	a8 0f       	add	r26, r24
    6168:	b9 1f       	adc	r27, r25
    616a:	ac 0f       	add	r26, r28
    616c:	bd 1f       	adc	r27, r29
    616e:	ab 56       	subi	r26, 0x6B	; 107
    6170:	bd 4f       	sbci	r27, 0xFD	; 253
    6172:	8c 91       	ld	r24, X
    6174:	88 23       	and	r24, r24
    6176:	b1 f1       	breq	.+108    	; 0x61e4 <_ZN4Menu13confirmOptionEb+0x1b4>

                //set second argument to "true" value to switch to new option
                menuItem[indexes[currentOptionIndex]].argument.argument2 = true;
    6178:	ca 01       	movw	r24, r20
    617a:	88 0f       	add	r24, r24
    617c:	99 1f       	adc	r25, r25
    617e:	44 0f       	add	r20, r20
    6180:	55 1f       	adc	r21, r21
    6182:	44 0f       	add	r20, r20
    6184:	55 1f       	adc	r21, r21
    6186:	44 0f       	add	r20, r20
    6188:	55 1f       	adc	r21, r21
    618a:	48 0f       	add	r20, r24
    618c:	59 1f       	adc	r21, r25
    618e:	4c 0f       	add	r20, r28
    6190:	5d 1f       	adc	r21, r29
    6192:	fa 01       	movw	r30, r20
    6194:	e9 56       	subi	r30, 0x69	; 105
    6196:	fd 4f       	sbci	r31, 0xFD	; 253
    6198:	81 e0       	ldi	r24, 0x01	; 1
    619a:	80 83       	st	Z, r24
                menuItem[indexes[currentOptionIndex]].function(menuItem[indexes[currentOptionIndex]].argument);
    619c:	37 97       	sbiw	r30, 0x07	; 7
    619e:	da 01       	movw	r26, r20
    61a0:	aa 56       	subi	r26, 0x6A	; 106
    61a2:	bd 4f       	sbci	r27, 0xFD	; 253
    61a4:	01 90       	ld	r0, Z+
    61a6:	f0 81       	ld	r31, Z
    61a8:	e0 2d       	mov	r30, r0
    61aa:	8d 91       	ld	r24, X+
    61ac:	9c 91       	ld	r25, X
    61ae:	09 95       	icall
                //reset switch argument
                menuItem[indexes[currentOptionIndex]].argument.argument2 = false;
    61b0:	0c 0f       	add	r16, r28
    61b2:	1d 1f       	adc	r17, r29
    61b4:	f8 01       	movw	r30, r16
    61b6:	ec 58       	subi	r30, 0x8C	; 140
    61b8:	fd 4f       	sbci	r31, 0xFD	; 253
    61ba:	80 81       	ld	r24, Z
    61bc:	90 e0       	ldi	r25, 0x00	; 0
    61be:	fc 01       	movw	r30, r24
    61c0:	ee 0f       	add	r30, r30
    61c2:	ff 1f       	adc	r31, r31
    61c4:	88 0f       	add	r24, r24
    61c6:	99 1f       	adc	r25, r25
    61c8:	88 0f       	add	r24, r24
    61ca:	99 1f       	adc	r25, r25
    61cc:	88 0f       	add	r24, r24
    61ce:	99 1f       	adc	r25, r25
    61d0:	e8 0f       	add	r30, r24
    61d2:	f9 1f       	adc	r31, r25
    61d4:	ec 0f       	add	r30, r28
    61d6:	fd 1f       	adc	r31, r29
    61d8:	e9 56       	subi	r30, 0x69	; 105
    61da:	fd 4f       	sbci	r31, 0xFD	; 253
    61dc:	10 82       	st	Z, r1
                //now refresh screen with changed arguments
                updateMenuScreen();
    61de:	ce 01       	movw	r24, r28
    61e0:	2d dd       	rcall	.-1446   	; 0x5c3c <_ZN4Menu16updateMenuScreenEv>
    61e2:	2a c0       	rjmp	.+84     	; 0x6238 <_ZN4Menu13confirmOptionEb+0x208>

                bool functionStatus = true;

                if (!functionRunning) {

                    functionStatus = menuItem[indexes[currentOptionIndex]].function(menuItem[indexes[currentOptionIndex]].argument);
    61e4:	da 01       	movw	r26, r20
    61e6:	aa 0f       	add	r26, r26
    61e8:	bb 1f       	adc	r27, r27
    61ea:	44 0f       	add	r20, r20
    61ec:	55 1f       	adc	r21, r21
    61ee:	44 0f       	add	r20, r20
    61f0:	55 1f       	adc	r21, r21
    61f2:	44 0f       	add	r20, r20
    61f4:	55 1f       	adc	r21, r21
    61f6:	a4 0f       	add	r26, r20
    61f8:	b5 1f       	adc	r27, r21
    61fa:	ac 0f       	add	r26, r28
    61fc:	bd 1f       	adc	r27, r29
    61fe:	aa 56       	subi	r26, 0x6A	; 106
    6200:	bd 4f       	sbci	r27, 0xFD	; 253
    6202:	8d 91       	ld	r24, X+
    6204:	9c 91       	ld	r25, X
    6206:	09 95       	icall

                    if (functionStatus) {
    6208:	88 23       	and	r24, r24
    620a:	69 f0       	breq	.+26     	; 0x6226 <_ZN4Menu13confirmOptionEb+0x1f6>

                        setMenuTitle(false);
    620c:	60 e0       	ldi	r22, 0x00	; 0
    620e:	ce 01       	movw	r24, r28
    6210:	87 db       	rcall	.-2290   	; 0x5920 <_ZN4Menu12setMenuTitleEb>
                        functionRunning = true;
    6212:	fe 01       	movw	r30, r28
    6214:	e3 57       	subi	r30, 0x73	; 115
    6216:	fd 4f       	sbci	r31, 0xFD	; 253
    6218:	81 e0       	ldi	r24, 0x01	; 1
    621a:	80 83       	st	Z, r24
                        //update level regardless
                        menuHierarchyPosition = newLevel;
    621c:	cf 58       	subi	r28, 0x8F	; 143
    621e:	dd 4f       	sbci	r29, 0xFD	; 253
    6220:	f9 82       	std	Y+1, r15	; 0x01
    6222:	e8 82       	st	Y, r14
    6224:	9c c0       	rjmp	.+312    	; 0x635e <_ZN4Menu13confirmOptionEb+0x32e>

                    }   else {  //non-regular exit

                        //in this case, increase menu level first so that we can decrease it properly
                        menuHierarchyPosition = newLevel;
    6226:	fe 01       	movw	r30, r28
    6228:	ef 58       	subi	r30, 0x8F	; 143
    622a:	fd 4f       	sbci	r31, 0xFD	; 253
    622c:	f1 82       	std	Z+1, r15	; 0x01
    622e:	e0 82       	st	Z, r14
                        confirmOption(false);
    6230:	60 e0       	ldi	r22, 0x00	; 0
    6232:	ce 01       	movw	r24, r28
    6234:	fd de       	rcall	.-518    	; 0x6030 <_ZN4Menu13confirmOptionEb>
    6236:	93 c0       	rjmp	.+294    	; 0x635e <_ZN4Menu13confirmOptionEb+0x32e>

        }

        //level needs to be increased
        //we should first check it that level exists
        for (int i=0; i<menuSize; i++)
    6238:	fe 01       	movw	r30, r28
    623a:	e8 57       	subi	r30, 0x78	; 120
    623c:	fc 4f       	sbci	r31, 0xFC	; 252
    623e:	20 81       	ld	r18, Z
    6240:	22 23       	and	r18, r18
    6242:	09 f4       	brne	.+2      	; 0x6246 <_ZN4Menu13confirmOptionEb+0x216>
    6244:	8c c0       	rjmp	.+280    	; 0x635e <_ZN4Menu13confirmOptionEb+0x32e>
        if (menuItem[i].level == newLevel)  {
    6246:	ea 5f       	subi	r30, 0xFA	; 250
    6248:	f1 09       	sbc	r31, r1
    624a:	00 81       	ld	r16, Z
    624c:	11 81       	ldd	r17, Z+1	; 0x01
    624e:	e0 16       	cp	r14, r16
    6250:	f1 06       	cpc	r15, r17
    6252:	09 f4       	brne	.+2      	; 0x6256 <_ZN4Menu13confirmOptionEb+0x226>
    6254:	7b c0       	rjmp	.+246    	; 0x634c <_ZN4Menu13confirmOptionEb+0x31c>
    6256:	ae 01       	movw	r20, r28
    6258:	48 56       	subi	r20, 0x68	; 104
    625a:	5d 4f       	sbci	r21, 0xFD	; 253
    625c:	30 e0       	ldi	r19, 0x00	; 0
    625e:	c9 01       	movw	r24, r18
    6260:	88 0f       	add	r24, r24
    6262:	99 1f       	adc	r25, r25
    6264:	22 0f       	add	r18, r18
    6266:	33 1f       	adc	r19, r19
    6268:	22 0f       	add	r18, r18
    626a:	33 1f       	adc	r19, r19
    626c:	22 0f       	add	r18, r18
    626e:	33 1f       	adc	r19, r19
    6270:	28 0f       	add	r18, r24
    6272:	39 1f       	adc	r19, r25
    6274:	c9 01       	movw	r24, r18
    6276:	82 57       	subi	r24, 0x72	; 114
    6278:	9d 4f       	sbci	r25, 0xFD	; 253
    627a:	8c 0f       	add	r24, r28
    627c:	9d 1f       	adc	r25, r29
    627e:	0a c0       	rjmp	.+20     	; 0x6294 <_ZN4Menu13confirmOptionEb+0x264>
    6280:	46 5f       	subi	r20, 0xF6	; 246
    6282:	5f 4f       	sbci	r21, 0xFF	; 255
    6284:	fa 01       	movw	r30, r20
    6286:	3a 97       	sbiw	r30, 0x0a	; 10
    6288:	00 81       	ld	r16, Z
    628a:	11 81       	ldd	r17, Z+1	; 0x01
    628c:	e0 16       	cp	r14, r16
    628e:	f1 06       	cpc	r15, r17
    6290:	09 f4       	brne	.+2      	; 0x6294 <_ZN4Menu13confirmOptionEb+0x264>
    6292:	5c c0       	rjmp	.+184    	; 0x634c <_ZN4Menu13confirmOptionEb+0x31c>

        }

        //level needs to be increased
        //we should first check it that level exists
        for (int i=0; i<menuSize; i++)
    6294:	48 17       	cp	r20, r24
    6296:	59 07       	cpc	r21, r25
    6298:	99 f7       	brne	.-26     	; 0x6280 <_ZN4Menu13confirmOptionEb+0x250>
    629a:	61 c0       	rjmp	.+194    	; 0x635e <_ZN4Menu13confirmOptionEb+0x32e>

        }   if (!menuLevelPresent) return; //no level

    }

    if (newLevel != menuHierarchyPosition)   {
    629c:	fe 01       	movw	r30, r28
    629e:	ef 58       	subi	r30, 0x8F	; 143
    62a0:	fd 4f       	sbci	r31, 0xFD	; 253
    62a2:	80 81       	ld	r24, Z
    62a4:	91 81       	ldd	r25, Z+1	; 0x01
    62a6:	08 17       	cp	r16, r24
    62a8:	19 07       	cpc	r17, r25
    62aa:	09 f4       	brne	.+2      	; 0x62ae <_ZN4Menu13confirmOptionEb+0x27e>
    62ac:	58 c0       	rjmp	.+176    	; 0x635e <_ZN4Menu13confirmOptionEb+0x32e>

        //if we got here, we should update menu

        if (confirm)    {
    62ae:	44 23       	and	r20, r20
    62b0:	91 f0       	breq	.+36     	; 0x62d6 <_ZN4Menu13confirmOptionEb+0x2a6>

            if (newLevel > 10) setMenuTitle(false);
    62b2:	0b 30       	cpi	r16, 0x0B	; 11
    62b4:	11 05       	cpc	r17, r1
    62b6:	20 f0       	brcs	.+8      	; 0x62c0 <_ZN4Menu13confirmOptionEb+0x290>
    62b8:	60 e0       	ldi	r22, 0x00	; 0
    62ba:	ce 01       	movw	r24, r28
    62bc:	31 db       	rcall	.-2462   	; 0x5920 <_ZN4Menu12setMenuTitleEb>
    62be:	03 c0       	rjmp	.+6      	; 0x62c6 <_ZN4Menu13confirmOptionEb+0x296>
            else setMenuTitle(true);
    62c0:	61 e0       	ldi	r22, 0x01	; 1
    62c2:	ce 01       	movw	r24, r28
    62c4:	2d db       	rcall	.-2470   	; 0x5920 <_ZN4Menu12setMenuTitleEb>

            menuHierarchyPosition = newLevel;
    62c6:	fe 01       	movw	r30, r28
    62c8:	ef 58       	subi	r30, 0x8F	; 143
    62ca:	fd 4f       	sbci	r31, 0xFD	; 253
    62cc:	11 83       	std	Z+1, r17	; 0x01
    62ce:	00 83       	st	Z, r16
            getMenuItems();
    62d0:	ce 01       	movw	r24, r28
    62d2:	d9 db       	rcall	.-2126   	; 0x5a86 <_ZN4Menu12getMenuItemsEv>
    62d4:	23 c0       	rjmp	.+70     	; 0x631c <_ZN4Menu13confirmOptionEb+0x2ec>

        }   else {

            //we need to get one level behind new level to find out menu title when going backwards
            menuHierarchyPosition = newLevel/10;
    62d6:	fe 01       	movw	r30, r28
    62d8:	ef 58       	subi	r30, 0x8F	; 143
    62da:	fd 4f       	sbci	r31, 0xFD	; 253
    62dc:	98 01       	movw	r18, r16
    62de:	ad ec       	ldi	r26, 0xCD	; 205
    62e0:	bc ec       	ldi	r27, 0xCC	; 204
    62e2:	0e 94 8d 82 	call	0x1051a	; 0x1051a <__umulhisi3>
    62e6:	96 95       	lsr	r25
    62e8:	87 95       	ror	r24
    62ea:	96 95       	lsr	r25
    62ec:	87 95       	ror	r24
    62ee:	96 95       	lsr	r25
    62f0:	87 95       	ror	r24
    62f2:	91 83       	std	Z+1, r25	; 0x01
    62f4:	80 83       	st	Z, r24

            getMenuItems();
    62f6:	ce 01       	movw	r24, r28
    62f8:	c6 db       	rcall	.-2164   	; 0x5a86 <_ZN4Menu12getMenuItemsEv>

            if (newLevel > 10) setMenuTitle(false);
    62fa:	0b 30       	cpi	r16, 0x0B	; 11
    62fc:	11 05       	cpc	r17, r1
    62fe:	20 f0       	brcs	.+8      	; 0x6308 <_ZN4Menu13confirmOptionEb+0x2d8>
    6300:	60 e0       	ldi	r22, 0x00	; 0
    6302:	ce 01       	movw	r24, r28
    6304:	0d db       	rcall	.-2534   	; 0x5920 <_ZN4Menu12setMenuTitleEb>
    6306:	03 c0       	rjmp	.+6      	; 0x630e <_ZN4Menu13confirmOptionEb+0x2de>
            else setMenuTitle(true);
    6308:	61 e0       	ldi	r22, 0x01	; 1
    630a:	ce 01       	movw	r24, r28
    630c:	09 db       	rcall	.-2542   	; 0x5920 <_ZN4Menu12setMenuTitleEb>

            menuHierarchyPosition = newLevel;
    630e:	fe 01       	movw	r30, r28
    6310:	ef 58       	subi	r30, 0x8F	; 143
    6312:	fd 4f       	sbci	r31, 0xFD	; 253
    6314:	11 83       	std	Z+1, r17	; 0x01
    6316:	00 83       	st	Z, r16
            getMenuItems();
    6318:	ce 01       	movw	r24, r28
    631a:	b5 db       	rcall	.-2198   	; 0x5a86 <_ZN4Menu12getMenuItemsEv>

        }

        //fill menu with items
        updateMenuScreen();
    631c:	ce 01       	movw	r24, r28
    631e:	8e dc       	rcall	.-1764   	; 0x5c3c <_ZN4Menu16updateMenuScreenEv>
    6320:	1e c0       	rjmp	.+60     	; 0x635e <_ZN4Menu13confirmOptionEb+0x32e>
void Menu::confirmOption(bool confirm)  {

    if (confirm && functionRunning) return;
    if (!confirm && functionRunning) functionRunning = false;

    uint8_t currentOptionIndex = (menuHierarchyPosition % 10) - 1;
    6322:	fe 01       	movw	r30, r28
    6324:	ef 58       	subi	r30, 0x8F	; 143
    6326:	fd 4f       	sbci	r31, 0xFD	; 253

    //this confirms current hierarchy level and moves to next one,
    //or it deletes current level and switches to previous, depending on received argument
    uint16_t newLevel = menuHierarchyPosition;

    confirm ? newLevel = (newLevel*10) + 1 : newLevel /= 10;
    6328:	20 81       	ld	r18, Z
    632a:	31 81       	ldd	r19, Z+1	; 0x01
    632c:	ad ec       	ldi	r26, 0xCD	; 205
    632e:	bc ec       	ldi	r27, 0xCC	; 204
    6330:	0e 94 8d 82 	call	0x1051a	; 0x1051a <__umulhisi3>
    6334:	8c 01       	movw	r16, r24
    6336:	16 95       	lsr	r17
    6338:	07 95       	ror	r16
    633a:	16 95       	lsr	r17
    633c:	07 95       	ror	r16
    633e:	16 95       	lsr	r17
    6340:	07 95       	ror	r16

    if (newLevel < 1)   {   //exit menu
    6342:	01 15       	cp	r16, r1
    6344:	11 05       	cpc	r17, r1
    6346:	09 f0       	breq	.+2      	; 0x634a <_ZN4Menu13confirmOptionEb+0x31a>
    6348:	a9 cf       	rjmp	.-174    	; 0x629c <_ZN4Menu13confirmOptionEb+0x26c>
    634a:	d8 ce       	rjmp	.-592    	; 0x60fc <_ZN4Menu13confirmOptionEb+0xcc>

        }   if (!menuLevelPresent) return; //no level

    }

    if (newLevel != menuHierarchyPosition)   {
    634c:	fe 01       	movw	r30, r28
    634e:	ef 58       	subi	r30, 0x8F	; 143
    6350:	fd 4f       	sbci	r31, 0xFD	; 253
    6352:	80 81       	ld	r24, Z
    6354:	91 81       	ldd	r25, Z+1	; 0x01
    6356:	80 17       	cp	r24, r16
    6358:	91 07       	cpc	r25, r17
    635a:	09 f0       	breq	.+2      	; 0x635e <_ZN4Menu13confirmOptionEb+0x32e>
    635c:	aa cf       	rjmp	.-172    	; 0x62b2 <_ZN4Menu13confirmOptionEb+0x282>
        //fill menu with items
        updateMenuScreen();

    }

}
    635e:	df 91       	pop	r29
    6360:	cf 91       	pop	r28
    6362:	1f 91       	pop	r17
    6364:	0f 91       	pop	r16
    6366:	ff 90       	pop	r15
    6368:	ef 90       	pop	r14
    636a:	08 95       	ret

0000636c <_ZN4Menu12stopFunctionEv>:

void Menu::stopFunction()   {

    functionRunning = false;
    636c:	fc 01       	movw	r30, r24
    636e:	e3 57       	subi	r30, 0x73	; 115
    6370:	fd 4f       	sbci	r31, 0xFD	; 253
    6372:	10 82       	st	Z, r1
    6374:	08 95       	ret

00006376 <_GLOBAL__sub_I__ZN4MenuC2Ev>:

}

Menu menu;
    6376:	89 ed       	ldi	r24, 0xD9	; 217
    6378:	98 e0       	ldi	r25, 0x08	; 8
    637a:	bc ca       	rjmp	.-2696   	; 0x58f4 <_ZN4MenuC1Ev>
    637c:	08 95       	ret

0000637e <_ZN3LCD16displayPadAmountEbh>:
void LCD::clearMIDIchannel()    {

    strcpy_P(stringBuffer, midiChannelClear_string);
    updateDisplay(lcdElements.midiChannel.row, text, lcdElements.midiChannel.startIndex, false, progmemCharArraySize(midiChannelClear_string));

}
    637e:	8f 92       	push	r8
    6380:	9f 92       	push	r9
    6382:	af 92       	push	r10
    6384:	bf 92       	push	r11
    6386:	cf 92       	push	r12
    6388:	df 92       	push	r13
    638a:	ef 92       	push	r14
    638c:	ff 92       	push	r15
    638e:	0f 93       	push	r16
    6390:	1f 93       	push	r17
    6392:	cf 93       	push	r28
    6394:	df 93       	push	r29
    6396:	cd b7       	in	r28, 0x3d	; 61
    6398:	de b7       	in	r29, 0x3e	; 62
    639a:	27 97       	sbiw	r28, 0x07	; 7
    639c:	0f b6       	in	r0, 0x3f	; 63
    639e:	f8 94       	cli
    63a0:	de bf       	out	0x3e, r29	; 62
    63a2:	0f be       	out	0x3f, r0	; 63
    63a4:	cd bf       	out	0x3d, r28	; 61
    63a6:	8c 01       	movw	r16, r24
    63a8:	f4 2e       	mov	r15, r20
    63aa:	61 11       	cpse	r22, r1
    63ac:	35 c0       	rjmp	.+106    	; 0x6418 <_ZN3LCD16displayPadAmountEbh+0x9a>
    63ae:	2a c0       	rjmp	.+84     	; 0x6404 <_ZN3LCD16displayPadAmountEbh+0x86>
    63b0:	84 e6       	ldi	r24, 0x64	; 100
    63b2:	88 16       	cp	r8, r24
    63b4:	91 04       	cpc	r9, r1
    63b6:	a1 04       	cpc	r10, r1
    63b8:	b1 04       	cpc	r11, r1
    63ba:	14 f4       	brge	.+4      	; 0x63c0 <_ZN3LCD16displayPadAmountEbh+0x42>
    63bc:	82 e0       	ldi	r24, 0x02	; 2
    63be:	03 c0       	rjmp	.+6      	; 0x63c6 <_ZN3LCD16displayPadAmountEbh+0x48>
    63c0:	83 e0       	ldi	r24, 0x03	; 3
    63c2:	01 c0       	rjmp	.+2      	; 0x63c6 <_ZN3LCD16displayPadAmountEbh+0x48>
    63c4:	81 e0       	ldi	r24, 0x01	; 1
    63c6:	e8 2e       	mov	r14, r24
    63c8:	f1 2c       	mov	r15, r1
    63ca:	e4 e0       	ldi	r30, 0x04	; 4
    63cc:	ee 0e       	add	r14, r30
    63ce:	f1 1c       	adc	r15, r1
    63d0:	fe 2c       	mov	r15, r14
    63d2:	be 01       	movw	r22, r28
    63d4:	6f 5f       	subi	r22, 0xFF	; 255
    63d6:	7f 4f       	sbci	r23, 0xFF	; 255
    63d8:	c8 01       	movw	r24, r16
    63da:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
    63de:	f8 01       	movw	r30, r16
    63e0:	ee 0d       	add	r30, r14
    63e2:	f1 1d       	adc	r31, r1
    63e4:	10 82       	st	Z, r1
    63e6:	f8 01       	movw	r30, r16
    63e8:	e8 59       	subi	r30, 0x98	; 152
    63ea:	fd 4f       	sbci	r31, 0xFD	; 253
    63ec:	60 81       	ld	r22, Z
    63ee:	f8 01       	movw	r30, r16
    63f0:	ef 0d       	add	r30, r15
    63f2:	f1 1d       	adc	r31, r1
    63f4:	10 82       	st	Z, r1
    63f6:	4d 2d       	mov	r20, r13
    63f8:	5c 2d       	mov	r21, r12
    63fa:	82 e6       	ldi	r24, 0x62	; 98
    63fc:	9c e0       	ldi	r25, 0x0C	; 12
    63fe:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <_ZN3LCD14displayMessageEhPKc>
    6402:	28 c0       	rjmp	.+80     	; 0x6454 <_ZN3LCD16displayPadAmountEbh+0xd6>
    6404:	d8 2e       	mov	r13, r24
    6406:	c1 2e       	mov	r12, r17
    6408:	61 e4       	ldi	r22, 0x41	; 65
    640a:	75 e0       	ldi	r23, 0x05	; 5
    640c:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6410:	68 94       	set
    6412:	ff 24       	eor	r15, r15
    6414:	f3 f8       	bld	r15, 3
    6416:	e7 cf       	rjmp	.-50     	; 0x63e6 <_ZN3LCD16displayPadAmountEbh+0x68>
    6418:	d8 2e       	mov	r13, r24
    641a:	c1 2e       	mov	r12, r17
    641c:	6a e4       	ldi	r22, 0x4A	; 74
    641e:	75 e0       	ldi	r23, 0x05	; 5
    6420:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6424:	80 e2       	ldi	r24, 0x20	; 32
    6426:	f8 01       	movw	r30, r16
    6428:	83 83       	std	Z+3, r24	; 0x03
    642a:	14 82       	std	Z+4, r1	; 0x04
    642c:	8f 2c       	mov	r8, r15
    642e:	91 2c       	mov	r9, r1
    6430:	a1 2c       	mov	r10, r1
    6432:	b1 2c       	mov	r11, r1
    6434:	4a e0       	ldi	r20, 0x0A	; 10
    6436:	be 01       	movw	r22, r28
    6438:	6f 5f       	subi	r22, 0xFF	; 255
    643a:	7f 4f       	sbci	r23, 0xFF	; 255
    643c:	8f 2d       	mov	r24, r15
    643e:	90 e0       	ldi	r25, 0x00	; 0
    6440:	0e 94 e1 82 	call	0x105c2	; 0x105c2 <__itoa_ncheck>
    6444:	fa e0       	ldi	r31, 0x0A	; 10
    6446:	8f 16       	cp	r8, r31
    6448:	91 04       	cpc	r9, r1
    644a:	a1 04       	cpc	r10, r1
    644c:	b1 04       	cpc	r11, r1
    644e:	0c f0       	brlt	.+2      	; 0x6452 <_ZN3LCD16displayPadAmountEbh+0xd4>
    6450:	af cf       	rjmp	.-162    	; 0x63b0 <_ZN3LCD16displayPadAmountEbh+0x32>
    6452:	b8 cf       	rjmp	.-144    	; 0x63c4 <_ZN3LCD16displayPadAmountEbh+0x46>
    6454:	27 96       	adiw	r28, 0x07	; 7
    6456:	0f b6       	in	r0, 0x3f	; 63
    6458:	f8 94       	cli
    645a:	de bf       	out	0x3e, r29	; 62
    645c:	0f be       	out	0x3f, r0	; 63
    645e:	cd bf       	out	0x3d, r28	; 61
    6460:	df 91       	pop	r29
    6462:	cf 91       	pop	r28
    6464:	1f 91       	pop	r17
    6466:	0f 91       	pop	r16
    6468:	ff 90       	pop	r15
    646a:	ef 90       	pop	r14
    646c:	df 90       	pop	r13
    646e:	cf 90       	pop	r12
    6470:	bf 90       	pop	r11
    6472:	af 90       	pop	r10
    6474:	9f 90       	pop	r9
    6476:	8f 90       	pop	r8
    6478:	08 95       	ret

0000647a <_ZN3LCD19displayHelloMessageEv>:
    647a:	0f 93       	push	r16
    647c:	1f 93       	push	r17
    647e:	cf 93       	push	r28
    6480:	8c 01       	movw	r16, r24
    6482:	6e e1       	ldi	r22, 0x1E	; 30
    6484:	75 e0       	ldi	r23, 0x05	; 5
    6486:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    648a:	f8 01       	movw	r30, r16
    648c:	80 81       	ld	r24, Z
    648e:	88 23       	and	r24, r24
    6490:	81 f0       	breq	.+32     	; 0x64b2 <_ZN3LCD19displayHelloMessageEv+0x38>
    6492:	c0 e0       	ldi	r28, 0x00	; 0
    6494:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <_Z8lcd_putcc>
    6498:	6b e4       	ldi	r22, 0x4B	; 75
    649a:	70 e0       	ldi	r23, 0x00	; 0
    649c:	80 e0       	ldi	r24, 0x00	; 0
    649e:	90 e0       	ldi	r25, 0x00	; 0
    64a0:	0e 94 74 19 	call	0x32e8	; 0x32e8 <_Z4waitm>
    64a4:	cf 5f       	subi	r28, 0xFF	; 255
    64a6:	f8 01       	movw	r30, r16
    64a8:	ec 0f       	add	r30, r28
    64aa:	f1 1d       	adc	r31, r1
    64ac:	80 81       	ld	r24, Z
    64ae:	81 11       	cpse	r24, r1
    64b0:	f1 cf       	rjmp	.-30     	; 0x6494 <_ZN3LCD19displayHelloMessageEv+0x1a>
    64b2:	b8 01       	movw	r22, r16
    64b4:	c8 01       	movw	r24, r16
    64b6:	88 5a       	subi	r24, 0xA8	; 168
    64b8:	9e 4f       	sbci	r25, 0xFE	; 254
    64ba:	0e 94 ca 82 	call	0x10594	; 0x10594 <strcpy>
    64be:	6a ef       	ldi	r22, 0xFA	; 250
    64c0:	70 e0       	ldi	r23, 0x00	; 0
    64c2:	80 e0       	ldi	r24, 0x00	; 0
    64c4:	90 e0       	ldi	r25, 0x00	; 0
    64c6:	0e 94 74 19 	call	0x32e8	; 0x32e8 <_Z4waitm>
    64ca:	cf 91       	pop	r28
    64cc:	1f 91       	pop	r17
    64ce:	0f 91       	pop	r16
    64d0:	08 95       	ret

000064d2 <_ZN3LCD17displayOutOfRangeEv>:
    64d2:	cf 93       	push	r28
    64d4:	df 93       	push	r29
    64d6:	ec 01       	movw	r28, r24
    64d8:	68 e3       	ldi	r22, 0x38	; 56
    64da:	78 e0       	ldi	r23, 0x08	; 8
    64dc:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    64e0:	fe 01       	movw	r30, r28
    64e2:	ea 59       	subi	r30, 0x9A	; 154
    64e4:	fd 4f       	sbci	r31, 0xFD	; 253
    64e6:	60 81       	ld	r22, Z
    64e8:	1c 86       	std	Y+12, r1	; 0x0c
    64ea:	ae 01       	movw	r20, r28
    64ec:	82 e6       	ldi	r24, 0x62	; 98
    64ee:	9c e0       	ldi	r25, 0x0C	; 12
    64f0:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <_ZN3LCD14displayMessageEhPKc>
    64f4:	6c e2       	ldi	r22, 0x2C	; 44
    64f6:	75 e0       	ldi	r23, 0x05	; 5
    64f8:	ce 01       	movw	r24, r28
    64fa:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    64fe:	fe 01       	movw	r30, r28
    6500:	e8 59       	subi	r30, 0x98	; 152
    6502:	fd 4f       	sbci	r31, 0xFD	; 253
    6504:	60 81       	ld	r22, Z
    6506:	1c 8a       	std	Y+20, r1	; 0x14
    6508:	ae 01       	movw	r20, r28
    650a:	82 e6       	ldi	r24, 0x62	; 98
    650c:	9c e0       	ldi	r25, 0x0C	; 12
    650e:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <_ZN3LCD14displayMessageEhPKc>
    6512:	df 91       	pop	r29
    6514:	cf 91       	pop	r28
    6516:	08 95       	ret

00006518 <_ZN3LCD24displayMIDIchannelChangeEhbh>:
    6518:	8f 92       	push	r8
    651a:	9f 92       	push	r9
    651c:	af 92       	push	r10
    651e:	bf 92       	push	r11
    6520:	df 92       	push	r13
    6522:	ef 92       	push	r14
    6524:	ff 92       	push	r15
    6526:	0f 93       	push	r16
    6528:	1f 93       	push	r17
    652a:	cf 93       	push	r28
    652c:	df 93       	push	r29
    652e:	cd b7       	in	r28, 0x3d	; 61
    6530:	de b7       	in	r29, 0x3e	; 62
    6532:	27 97       	sbiw	r28, 0x07	; 7
    6534:	0f b6       	in	r0, 0x3f	; 63
    6536:	f8 94       	cli
    6538:	de bf       	out	0x3e, r29	; 62
    653a:	0f be       	out	0x3f, r0	; 63
    653c:	cd bf       	out	0x3d, r28	; 61
    653e:	8c 01       	movw	r16, r24
    6540:	f6 2e       	mov	r15, r22
    6542:	e4 2e       	mov	r14, r20
    6544:	d2 2e       	mov	r13, r18
    6546:	60 e1       	ldi	r22, 0x10	; 16
    6548:	75 e0       	ldi	r23, 0x05	; 5
    654a:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    654e:	8f 2c       	mov	r8, r15
    6550:	91 2c       	mov	r9, r1
    6552:	a1 2c       	mov	r10, r1
    6554:	b1 2c       	mov	r11, r1
    6556:	4a e0       	ldi	r20, 0x0A	; 10
    6558:	be 01       	movw	r22, r28
    655a:	6f 5f       	subi	r22, 0xFF	; 255
    655c:	7f 4f       	sbci	r23, 0xFF	; 255
    655e:	8f 2d       	mov	r24, r15
    6560:	90 e0       	ldi	r25, 0x00	; 0
    6562:	0e 94 e1 82 	call	0x105c2	; 0x105c2 <__itoa_ncheck>
    6566:	8a e0       	ldi	r24, 0x0A	; 10
    6568:	88 16       	cp	r8, r24
    656a:	91 04       	cpc	r9, r1
    656c:	a1 04       	cpc	r10, r1
    656e:	b1 04       	cpc	r11, r1
    6570:	3c f0       	brlt	.+14     	; 0x6580 <_ZN3LCD24displayMIDIchannelChangeEhbh+0x68>
    6572:	84 e6       	ldi	r24, 0x64	; 100
    6574:	88 16       	cp	r8, r24
    6576:	91 04       	cpc	r9, r1
    6578:	a1 04       	cpc	r10, r1
    657a:	b1 04       	cpc	r11, r1
    657c:	24 f0       	brlt	.+8      	; 0x6586 <_ZN3LCD24displayMIDIchannelChangeEhbh+0x6e>
    657e:	07 c0       	rjmp	.+14     	; 0x658e <_ZN3LCD24displayMIDIchannelChangeEhbh+0x76>
    6580:	ff 24       	eor	r15, r15
    6582:	f3 94       	inc	r15
    6584:	08 c0       	rjmp	.+16     	; 0x6596 <_ZN3LCD24displayMIDIchannelChangeEhbh+0x7e>
    6586:	68 94       	set
    6588:	ff 24       	eor	r15, r15
    658a:	f1 f8       	bld	r15, 1
    658c:	04 c0       	rjmp	.+8      	; 0x6596 <_ZN3LCD24displayMIDIchannelChangeEhbh+0x7e>
    658e:	0f 2e       	mov	r0, r31
    6590:	f3 e0       	ldi	r31, 0x03	; 3
    6592:	ff 2e       	mov	r15, r31
    6594:	f0 2d       	mov	r31, r0
    6596:	be 01       	movw	r22, r28
    6598:	6f 5f       	subi	r22, 0xFF	; 255
    659a:	7f 4f       	sbci	r23, 0xFF	; 255
    659c:	c8 01       	movw	r24, r16
    659e:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
    65a2:	f8 01       	movw	r30, r16
    65a4:	ef 0d       	add	r30, r15
    65a6:	f1 1d       	adc	r31, r1
    65a8:	15 86       	std	Z+13, r1	; 0x0d
    65aa:	f8 01       	movw	r30, r16
    65ac:	ea 59       	subi	r30, 0x9A	; 154
    65ae:	fd 4f       	sbci	r31, 0xFD	; 253
    65b0:	a8 01       	movw	r20, r16
    65b2:	60 81       	ld	r22, Z
    65b4:	82 e6       	ldi	r24, 0x62	; 98
    65b6:	9c e0       	ldi	r25, 0x0C	; 12
    65b8:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <_ZN3LCD14displayMessageEhPKc>
    65bc:	4d 2d       	mov	r20, r13
    65be:	6e 2d       	mov	r22, r14
    65c0:	c8 01       	movw	r24, r16
    65c2:	dd de       	rcall	.-582    	; 0x637e <_ZN3LCD16displayPadAmountEbh>
    65c4:	27 96       	adiw	r28, 0x07	; 7
    65c6:	0f b6       	in	r0, 0x3f	; 63
    65c8:	f8 94       	cli
    65ca:	de bf       	out	0x3e, r29	; 62
    65cc:	0f be       	out	0x3f, r0	; 63
    65ce:	cd bf       	out	0x3d, r28	; 61
    65d0:	df 91       	pop	r29
    65d2:	cf 91       	pop	r28
    65d4:	1f 91       	pop	r17
    65d6:	0f 91       	pop	r16
    65d8:	ff 90       	pop	r15
    65da:	ef 90       	pop	r14
    65dc:	df 90       	pop	r13
    65de:	bf 90       	pop	r11
    65e0:	af 90       	pop	r10
    65e2:	9f 90       	pop	r9
    65e4:	8f 90       	pop	r8
    65e6:	08 95       	ret

000065e8 <_ZN3LCD15displayCCchangeE16coordinateType_tbhh>:
    65e8:	4f 92       	push	r4
    65ea:	5f 92       	push	r5
    65ec:	6f 92       	push	r6
    65ee:	7f 92       	push	r7
    65f0:	bf 92       	push	r11
    65f2:	cf 92       	push	r12
    65f4:	df 92       	push	r13
    65f6:	ef 92       	push	r14
    65f8:	ff 92       	push	r15
    65fa:	0f 93       	push	r16
    65fc:	1f 93       	push	r17
    65fe:	cf 93       	push	r28
    6600:	df 93       	push	r29
    6602:	cd b7       	in	r28, 0x3d	; 61
    6604:	de b7       	in	r29, 0x3e	; 62
    6606:	27 97       	sbiw	r28, 0x07	; 7
    6608:	0f b6       	in	r0, 0x3f	; 63
    660a:	f8 94       	cli
    660c:	de bf       	out	0x3e, r29	; 62
    660e:	0f be       	out	0x3f, r0	; 63
    6610:	cd bf       	out	0x3d, r28	; 61
    6612:	6c 01       	movw	r12, r24
    6614:	b4 2e       	mov	r11, r20
    6616:	12 2f       	mov	r17, r18
    6618:	e6 2e       	mov	r14, r22
    661a:	f1 2c       	mov	r15, r1
    661c:	f7 01       	movw	r30, r14
    661e:	ee 0f       	add	r30, r30
    6620:	ff 1f       	adc	r31, r31
    6622:	e5 58       	subi	r30, 0x85	; 133
    6624:	fa 4f       	sbci	r31, 0xFA	; 250
    6626:	65 91       	lpm	r22, Z+
    6628:	74 91       	lpm	r23, Z
    662a:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    662e:	f7 01       	movw	r30, r14
    6630:	e7 58       	subi	r30, 0x87	; 135
    6632:	fa 4f       	sbci	r31, 0xFA	; 250
    6634:	e4 90       	lpm	r14, Z
    6636:	41 2e       	mov	r4, r17
    6638:	51 2c       	mov	r5, r1
    663a:	61 2c       	mov	r6, r1
    663c:	71 2c       	mov	r7, r1
    663e:	4a e0       	ldi	r20, 0x0A	; 10
    6640:	be 01       	movw	r22, r28
    6642:	6f 5f       	subi	r22, 0xFF	; 255
    6644:	7f 4f       	sbci	r23, 0xFF	; 255
    6646:	81 2f       	mov	r24, r17
    6648:	90 e0       	ldi	r25, 0x00	; 0
    664a:	0e 94 e1 82 	call	0x105c2	; 0x105c2 <__itoa_ncheck>
    664e:	8a e0       	ldi	r24, 0x0A	; 10
    6650:	48 16       	cp	r4, r24
    6652:	51 04       	cpc	r5, r1
    6654:	61 04       	cpc	r6, r1
    6656:	71 04       	cpc	r7, r1
    6658:	3c f0       	brlt	.+14     	; 0x6668 <_ZN3LCD15displayCCchangeE16coordinateType_tbhh+0x80>
    665a:	94 e6       	ldi	r25, 0x64	; 100
    665c:	49 16       	cp	r4, r25
    665e:	51 04       	cpc	r5, r1
    6660:	61 04       	cpc	r6, r1
    6662:	71 04       	cpc	r7, r1
    6664:	1c f0       	brlt	.+6      	; 0x666c <_ZN3LCD15displayCCchangeE16coordinateType_tbhh+0x84>
    6666:	04 c0       	rjmp	.+8      	; 0x6670 <_ZN3LCD15displayCCchangeE16coordinateType_tbhh+0x88>
    6668:	11 e0       	ldi	r17, 0x01	; 1
    666a:	03 c0       	rjmp	.+6      	; 0x6672 <_ZN3LCD15displayCCchangeE16coordinateType_tbhh+0x8a>
    666c:	12 e0       	ldi	r17, 0x02	; 2
    666e:	01 c0       	rjmp	.+2      	; 0x6672 <_ZN3LCD15displayCCchangeE16coordinateType_tbhh+0x8a>
    6670:	13 e0       	ldi	r17, 0x03	; 3
    6672:	be 01       	movw	r22, r28
    6674:	6f 5f       	subi	r22, 0xFF	; 255
    6676:	7f 4f       	sbci	r23, 0xFF	; 255
    6678:	c6 01       	movw	r24, r12
    667a:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
    667e:	ee 2d       	mov	r30, r14
    6680:	e1 0f       	add	r30, r17
    6682:	c6 01       	movw	r24, r12
    6684:	8e 0f       	add	r24, r30
    6686:	91 1d       	adc	r25, r1
    6688:	fc 01       	movw	r30, r24
    668a:	10 82       	st	Z, r1
    668c:	f6 01       	movw	r30, r12
    668e:	ea 59       	subi	r30, 0x9A	; 154
    6690:	fd 4f       	sbci	r31, 0xFD	; 253
    6692:	a6 01       	movw	r20, r12
    6694:	60 81       	ld	r22, Z
    6696:	82 e6       	ldi	r24, 0x62	; 98
    6698:	9c e0       	ldi	r25, 0x0C	; 12
    669a:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <_ZN3LCD14displayMessageEhPKc>
    669e:	40 2f       	mov	r20, r16
    66a0:	6b 2d       	mov	r22, r11
    66a2:	c6 01       	movw	r24, r12
    66a4:	6c de       	rcall	.-808    	; 0x637e <_ZN3LCD16displayPadAmountEbh>
    66a6:	27 96       	adiw	r28, 0x07	; 7
    66a8:	0f b6       	in	r0, 0x3f	; 63
    66aa:	f8 94       	cli
    66ac:	de bf       	out	0x3e, r29	; 62
    66ae:	0f be       	out	0x3f, r0	; 63
    66b0:	cd bf       	out	0x3d, r28	; 61
    66b2:	df 91       	pop	r29
    66b4:	cf 91       	pop	r28
    66b6:	1f 91       	pop	r17
    66b8:	0f 91       	pop	r16
    66ba:	ff 90       	pop	r15
    66bc:	ef 90       	pop	r14
    66be:	df 90       	pop	r13
    66c0:	cf 90       	pop	r12
    66c2:	bf 90       	pop	r11
    66c4:	7f 90       	pop	r7
    66c6:	6f 90       	pop	r6
    66c8:	5f 90       	pop	r5
    66ca:	4f 90       	pop	r4
    66cc:	08 95       	ret

000066ce <_ZN3LCD18displayCurveChangeE16coordinateType_tbah>:
    66ce:	4f 92       	push	r4
    66d0:	5f 92       	push	r5
    66d2:	6f 92       	push	r6
    66d4:	7f 92       	push	r7
    66d6:	bf 92       	push	r11
    66d8:	cf 92       	push	r12
    66da:	df 92       	push	r13
    66dc:	ef 92       	push	r14
    66de:	ff 92       	push	r15
    66e0:	0f 93       	push	r16
    66e2:	1f 93       	push	r17
    66e4:	cf 93       	push	r28
    66e6:	df 93       	push	r29
    66e8:	cd b7       	in	r28, 0x3d	; 61
    66ea:	de b7       	in	r29, 0x3e	; 62
    66ec:	27 97       	sbiw	r28, 0x07	; 7
    66ee:	0f b6       	in	r0, 0x3f	; 63
    66f0:	f8 94       	cli
    66f2:	de bf       	out	0x3e, r29	; 62
    66f4:	0f be       	out	0x3f, r0	; 63
    66f6:	cd bf       	out	0x3d, r28	; 61
    66f8:	6c 01       	movw	r12, r24
    66fa:	b4 2e       	mov	r11, r20
    66fc:	12 2f       	mov	r17, r18
    66fe:	e6 2e       	mov	r14, r22
    6700:	f1 2c       	mov	r15, r1
    6702:	f7 01       	movw	r30, r14
    6704:	ee 0f       	add	r30, r30
    6706:	ff 1f       	adc	r31, r31
    6708:	ef 57       	subi	r30, 0x7F	; 127
    670a:	fa 4f       	sbci	r31, 0xFA	; 250
    670c:	65 91       	lpm	r22, Z+
    670e:	74 91       	lpm	r23, Z
    6710:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6714:	f7 01       	movw	r30, r14
    6716:	e1 58       	subi	r30, 0x81	; 129
    6718:	fa 4f       	sbci	r31, 0xFA	; 250
    671a:	e4 90       	lpm	r14, Z
    671c:	15 30       	cpi	r17, 0x05	; 5
    671e:	29 f0       	breq	.+10     	; 0x672a <_ZN3LCD18displayCurveChangeE16coordinateType_tbah+0x5c>
    6720:	19 30       	cpi	r17, 0x09	; 9
    6722:	99 f0       	breq	.+38     	; 0x674a <_ZN3LCD18displayCurveChangeE16coordinateType_tbah+0x7c>
    6724:	11 30       	cpi	r17, 0x01	; 1
    6726:	89 f5       	brne	.+98     	; 0x678a <_ZN3LCD18displayCurveChangeE16coordinateType_tbah+0xbc>
    6728:	20 c0       	rjmp	.+64     	; 0x676a <_ZN3LCD18displayCurveChangeE16coordinateType_tbah+0x9c>
    672a:	6b ed       	ldi	r22, 0xDB	; 219
    672c:	75 e0       	ldi	r23, 0x05	; 5
    672e:	36 01       	movw	r6, r12
    6730:	8f e1       	ldi	r24, 0x1F	; 31
    6732:	68 0e       	add	r6, r24
    6734:	71 1c       	adc	r7, r1
    6736:	c3 01       	movw	r24, r6
    6738:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    673c:	b3 01       	movw	r22, r6
    673e:	c6 01       	movw	r24, r12
    6740:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
    6744:	16 e0       	ldi	r17, 0x06	; 6
    6746:	1e 0d       	add	r17, r14
    6748:	55 c0       	rjmp	.+170    	; 0x67f4 <_ZN3LCD18displayCurveChangeE16coordinateType_tbah+0x126>
    674a:	65 ec       	ldi	r22, 0xC5	; 197
    674c:	75 e0       	ldi	r23, 0x05	; 5
    674e:	36 01       	movw	r6, r12
    6750:	8f e1       	ldi	r24, 0x1F	; 31
    6752:	68 0e       	add	r6, r24
    6754:	71 1c       	adc	r7, r1
    6756:	c3 01       	movw	r24, r6
    6758:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    675c:	b3 01       	movw	r22, r6
    675e:	c6 01       	movw	r24, r12
    6760:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
    6764:	19 e0       	ldi	r17, 0x09	; 9
    6766:	1e 0d       	add	r17, r14
    6768:	45 c0       	rjmp	.+138    	; 0x67f4 <_ZN3LCD18displayCurveChangeE16coordinateType_tbah+0x126>
    676a:	6f ec       	ldi	r22, 0xCF	; 207
    676c:	75 e0       	ldi	r23, 0x05	; 5
    676e:	36 01       	movw	r6, r12
    6770:	8f e1       	ldi	r24, 0x1F	; 31
    6772:	68 0e       	add	r6, r24
    6774:	71 1c       	adc	r7, r1
    6776:	c3 01       	movw	r24, r6
    6778:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    677c:	b3 01       	movw	r22, r6
    677e:	c6 01       	movw	r24, r12
    6780:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
    6784:	1b e0       	ldi	r17, 0x0B	; 11
    6786:	1e 0d       	add	r17, r14
    6788:	35 c0       	rjmp	.+106    	; 0x67f4 <_ZN3LCD18displayCurveChangeE16coordinateType_tbah+0x126>
    678a:	8b ef       	ldi	r24, 0xFB	; 251
    678c:	81 0f       	add	r24, r17
    678e:	48 2e       	mov	r4, r24
    6790:	08 2e       	mov	r0, r24
    6792:	00 0c       	add	r0, r0
    6794:	55 08       	sbc	r5, r5
    6796:	66 08       	sbc	r6, r6
    6798:	77 08       	sbc	r7, r7
    679a:	4a e0       	ldi	r20, 0x0A	; 10
    679c:	be 01       	movw	r22, r28
    679e:	6f 5f       	subi	r22, 0xFF	; 255
    67a0:	7f 4f       	sbci	r23, 0xFF	; 255
    67a2:	08 2e       	mov	r0, r24
    67a4:	00 0c       	add	r0, r0
    67a6:	99 0b       	sbc	r25, r25
    67a8:	0e 94 e1 82 	call	0x105c2	; 0x105c2 <__itoa_ncheck>
    67ac:	8a e0       	ldi	r24, 0x0A	; 10
    67ae:	48 16       	cp	r4, r24
    67b0:	51 04       	cpc	r5, r1
    67b2:	61 04       	cpc	r6, r1
    67b4:	71 04       	cpc	r7, r1
    67b6:	3c f0       	brlt	.+14     	; 0x67c6 <_ZN3LCD18displayCurveChangeE16coordinateType_tbah+0xf8>
    67b8:	84 e6       	ldi	r24, 0x64	; 100
    67ba:	48 16       	cp	r4, r24
    67bc:	51 04       	cpc	r5, r1
    67be:	61 04       	cpc	r6, r1
    67c0:	71 04       	cpc	r7, r1
    67c2:	1c f0       	brlt	.+6      	; 0x67ca <_ZN3LCD18displayCurveChangeE16coordinateType_tbah+0xfc>
    67c4:	04 c0       	rjmp	.+8      	; 0x67ce <_ZN3LCD18displayCurveChangeE16coordinateType_tbah+0x100>
    67c6:	81 e0       	ldi	r24, 0x01	; 1
    67c8:	03 c0       	rjmp	.+6      	; 0x67d0 <_ZN3LCD18displayCurveChangeE16coordinateType_tbah+0x102>
    67ca:	82 e0       	ldi	r24, 0x02	; 2
    67cc:	01 c0       	rjmp	.+2      	; 0x67d0 <_ZN3LCD18displayCurveChangeE16coordinateType_tbah+0x102>
    67ce:	83 e0       	ldi	r24, 0x03	; 3
    67d0:	90 e0       	ldi	r25, 0x00	; 0
    67d2:	8e 0d       	add	r24, r14
    67d4:	91 1d       	adc	r25, r1
    67d6:	18 2f       	mov	r17, r24
    67d8:	77 20       	and	r7, r7
    67da:	14 f4       	brge	.+4      	; 0x67e0 <_ZN3LCD18displayCurveChangeE16coordinateType_tbah+0x112>
    67dc:	11 e0       	ldi	r17, 0x01	; 1
    67de:	18 0f       	add	r17, r24
    67e0:	be 01       	movw	r22, r28
    67e2:	6f 5f       	subi	r22, 0xFF	; 255
    67e4:	7f 4f       	sbci	r23, 0xFF	; 255
    67e6:	c6 01       	movw	r24, r12
    67e8:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
    67ec:	f6 01       	movw	r30, r12
    67ee:	e1 0f       	add	r30, r17
    67f0:	f1 1d       	adc	r31, r1
    67f2:	10 82       	st	Z, r1
    67f4:	f6 01       	movw	r30, r12
    67f6:	ea 59       	subi	r30, 0x9A	; 154
    67f8:	fd 4f       	sbci	r31, 0xFD	; 253
    67fa:	60 81       	ld	r22, Z
    67fc:	f6 01       	movw	r30, r12
    67fe:	e1 0f       	add	r30, r17
    6800:	f1 1d       	adc	r31, r1
    6802:	10 82       	st	Z, r1
    6804:	a6 01       	movw	r20, r12
    6806:	82 e6       	ldi	r24, 0x62	; 98
    6808:	9c e0       	ldi	r25, 0x0C	; 12
    680a:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <_ZN3LCD14displayMessageEhPKc>
    680e:	40 2f       	mov	r20, r16
    6810:	6b 2d       	mov	r22, r11
    6812:	c6 01       	movw	r24, r12
    6814:	b4 dd       	rcall	.-1176   	; 0x637e <_ZN3LCD16displayPadAmountEbh>
    6816:	27 96       	adiw	r28, 0x07	; 7
    6818:	0f b6       	in	r0, 0x3f	; 63
    681a:	f8 94       	cli
    681c:	de bf       	out	0x3e, r29	; 62
    681e:	0f be       	out	0x3f, r0	; 63
    6820:	cd bf       	out	0x3d, r28	; 61
    6822:	df 91       	pop	r29
    6824:	cf 91       	pop	r28
    6826:	1f 91       	pop	r17
    6828:	0f 91       	pop	r16
    682a:	ff 90       	pop	r15
    682c:	ef 90       	pop	r14
    682e:	df 90       	pop	r13
    6830:	cf 90       	pop	r12
    6832:	bf 90       	pop	r11
    6834:	7f 90       	pop	r7
    6836:	6f 90       	pop	r6
    6838:	5f 90       	pop	r5
    683a:	4f 90       	pop	r4
    683c:	08 95       	ret

0000683e <_ZN3LCD20displayCClimitChangeE16coordinateType_t13ccLimitType_tbhh>:
    683e:	7f 92       	push	r7
    6840:	8f 92       	push	r8
    6842:	9f 92       	push	r9
    6844:	af 92       	push	r10
    6846:	bf 92       	push	r11
    6848:	cf 92       	push	r12
    684a:	df 92       	push	r13
    684c:	ef 92       	push	r14
    684e:	ff 92       	push	r15
    6850:	0f 93       	push	r16
    6852:	1f 93       	push	r17
    6854:	cf 93       	push	r28
    6856:	df 93       	push	r29
    6858:	cd b7       	in	r28, 0x3d	; 61
    685a:	de b7       	in	r29, 0x3e	; 62
    685c:	27 97       	sbiw	r28, 0x07	; 7
    685e:	0f b6       	in	r0, 0x3f	; 63
    6860:	f8 94       	cli
    6862:	de bf       	out	0x3e, r29	; 62
    6864:	0f be       	out	0x3f, r0	; 63
    6866:	cd bf       	out	0x3d, r28	; 61
    6868:	6c 01       	movw	r12, r24
    686a:	f2 2e       	mov	r15, r18
    686c:	66 23       	and	r22, r22
    686e:	19 f0       	breq	.+6      	; 0x6876 <_ZN3LCD20displayCClimitChangeE16coordinateType_t13ccLimitType_tbhh+0x38>
    6870:	61 30       	cpi	r22, 0x01	; 1
    6872:	c1 f0       	breq	.+48     	; 0x68a4 <_ZN3LCD20displayCClimitChangeE16coordinateType_t13ccLimitType_tbhh+0x66>
    6874:	69 c0       	rjmp	.+210    	; 0x6948 <_ZN3LCD20displayCClimitChangeE16coordinateType_t13ccLimitType_tbhh+0x10a>
    6876:	44 23       	and	r20, r20
    6878:	19 f0       	breq	.+6      	; 0x6880 <_ZN3LCD20displayCClimitChangeE16coordinateType_t13ccLimitType_tbhh+0x42>
    687a:	41 30       	cpi	r20, 0x01	; 1
    687c:	51 f0       	breq	.+20     	; 0x6892 <_ZN3LCD20displayCClimitChangeE16coordinateType_t13ccLimitType_tbhh+0x54>
    687e:	29 c0       	rjmp	.+82     	; 0x68d2 <_ZN3LCD20displayCClimitChangeE16coordinateType_t13ccLimitType_tbhh+0x94>
    6880:	67 eb       	ldi	r22, 0xB7	; 183
    6882:	75 e0       	ldi	r23, 0x05	; 5
    6884:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6888:	0f 2e       	mov	r0, r31
    688a:	f6 e0       	ldi	r31, 0x06	; 6
    688c:	7f 2e       	mov	r7, r31
    688e:	f0 2d       	mov	r31, r0
    6890:	23 c0       	rjmp	.+70     	; 0x68d8 <_ZN3LCD20displayCClimitChangeE16coordinateType_t13ccLimitType_tbhh+0x9a>
    6892:	6e eb       	ldi	r22, 0xBE	; 190
    6894:	75 e0       	ldi	r23, 0x05	; 5
    6896:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    689a:	0f 2e       	mov	r0, r31
    689c:	f6 e0       	ldi	r31, 0x06	; 6
    689e:	7f 2e       	mov	r7, r31
    68a0:	f0 2d       	mov	r31, r0
    68a2:	1a c0       	rjmp	.+52     	; 0x68d8 <_ZN3LCD20displayCClimitChangeE16coordinateType_t13ccLimitType_tbhh+0x9a>
    68a4:	44 23       	and	r20, r20
    68a6:	19 f0       	breq	.+6      	; 0x68ae <_ZN3LCD20displayCClimitChangeE16coordinateType_t13ccLimitType_tbhh+0x70>
    68a8:	41 30       	cpi	r20, 0x01	; 1
    68aa:	51 f0       	breq	.+20     	; 0x68c0 <_ZN3LCD20displayCClimitChangeE16coordinateType_t13ccLimitType_tbhh+0x82>
    68ac:	14 c0       	rjmp	.+40     	; 0x68d6 <_ZN3LCD20displayCClimitChangeE16coordinateType_t13ccLimitType_tbhh+0x98>
    68ae:	69 ea       	ldi	r22, 0xA9	; 169
    68b0:	75 e0       	ldi	r23, 0x05	; 5
    68b2:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    68b6:	0f 2e       	mov	r0, r31
    68b8:	f6 e0       	ldi	r31, 0x06	; 6
    68ba:	7f 2e       	mov	r7, r31
    68bc:	f0 2d       	mov	r31, r0
    68be:	0c c0       	rjmp	.+24     	; 0x68d8 <_ZN3LCD20displayCClimitChangeE16coordinateType_t13ccLimitType_tbhh+0x9a>
    68c0:	60 eb       	ldi	r22, 0xB0	; 176
    68c2:	75 e0       	ldi	r23, 0x05	; 5
    68c4:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    68c8:	0f 2e       	mov	r0, r31
    68ca:	f6 e0       	ldi	r31, 0x06	; 6
    68cc:	7f 2e       	mov	r7, r31
    68ce:	f0 2d       	mov	r31, r0
    68d0:	03 c0       	rjmp	.+6      	; 0x68d8 <_ZN3LCD20displayCClimitChangeE16coordinateType_t13ccLimitType_tbhh+0x9a>
    68d2:	71 2c       	mov	r7, r1
    68d4:	01 c0       	rjmp	.+2      	; 0x68d8 <_ZN3LCD20displayCClimitChangeE16coordinateType_t13ccLimitType_tbhh+0x9a>
    68d6:	71 2c       	mov	r7, r1
    68d8:	80 2e       	mov	r8, r16
    68da:	91 2c       	mov	r9, r1
    68dc:	a1 2c       	mov	r10, r1
    68de:	b1 2c       	mov	r11, r1
    68e0:	4a e0       	ldi	r20, 0x0A	; 10
    68e2:	be 01       	movw	r22, r28
    68e4:	6f 5f       	subi	r22, 0xFF	; 255
    68e6:	7f 4f       	sbci	r23, 0xFF	; 255
    68e8:	80 2f       	mov	r24, r16
    68ea:	90 e0       	ldi	r25, 0x00	; 0
    68ec:	0e 94 e1 82 	call	0x105c2	; 0x105c2 <__itoa_ncheck>
    68f0:	8a e0       	ldi	r24, 0x0A	; 10
    68f2:	88 16       	cp	r8, r24
    68f4:	91 04       	cpc	r9, r1
    68f6:	a1 04       	cpc	r10, r1
    68f8:	b1 04       	cpc	r11, r1
    68fa:	3c f0       	brlt	.+14     	; 0x690a <_ZN3LCD20displayCClimitChangeE16coordinateType_t13ccLimitType_tbhh+0xcc>
    68fc:	84 e6       	ldi	r24, 0x64	; 100
    68fe:	88 16       	cp	r8, r24
    6900:	91 04       	cpc	r9, r1
    6902:	a1 04       	cpc	r10, r1
    6904:	b1 04       	cpc	r11, r1
    6906:	1c f0       	brlt	.+6      	; 0x690e <_ZN3LCD20displayCClimitChangeE16coordinateType_t13ccLimitType_tbhh+0xd0>
    6908:	04 c0       	rjmp	.+8      	; 0x6912 <_ZN3LCD20displayCClimitChangeE16coordinateType_t13ccLimitType_tbhh+0xd4>
    690a:	11 e0       	ldi	r17, 0x01	; 1
    690c:	03 c0       	rjmp	.+6      	; 0x6914 <_ZN3LCD20displayCClimitChangeE16coordinateType_t13ccLimitType_tbhh+0xd6>
    690e:	12 e0       	ldi	r17, 0x02	; 2
    6910:	01 c0       	rjmp	.+2      	; 0x6914 <_ZN3LCD20displayCClimitChangeE16coordinateType_t13ccLimitType_tbhh+0xd6>
    6912:	13 e0       	ldi	r17, 0x03	; 3
    6914:	be 01       	movw	r22, r28
    6916:	6f 5f       	subi	r22, 0xFF	; 255
    6918:	7f 4f       	sbci	r23, 0xFF	; 255
    691a:	c6 01       	movw	r24, r12
    691c:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
    6920:	e1 2f       	mov	r30, r17
    6922:	f0 e0       	ldi	r31, 0x00	; 0
    6924:	e7 0d       	add	r30, r7
    6926:	f1 1d       	adc	r31, r1
    6928:	ec 0d       	add	r30, r12
    692a:	fd 1d       	adc	r31, r13
    692c:	10 82       	st	Z, r1
    692e:	f6 01       	movw	r30, r12
    6930:	ea 59       	subi	r30, 0x9A	; 154
    6932:	fd 4f       	sbci	r31, 0xFD	; 253
    6934:	a6 01       	movw	r20, r12
    6936:	60 81       	ld	r22, Z
    6938:	82 e6       	ldi	r24, 0x62	; 98
    693a:	9c e0       	ldi	r25, 0x0C	; 12
    693c:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <_ZN3LCD14displayMessageEhPKc>
    6940:	4e 2d       	mov	r20, r14
    6942:	6f 2d       	mov	r22, r15
    6944:	c6 01       	movw	r24, r12
    6946:	1b dd       	rcall	.-1482   	; 0x637e <_ZN3LCD16displayPadAmountEbh>
    6948:	27 96       	adiw	r28, 0x07	; 7
    694a:	0f b6       	in	r0, 0x3f	; 63
    694c:	f8 94       	cli
    694e:	de bf       	out	0x3e, r29	; 62
    6950:	0f be       	out	0x3f, r0	; 63
    6952:	cd bf       	out	0x3d, r28	; 61
    6954:	df 91       	pop	r29
    6956:	cf 91       	pop	r28
    6958:	1f 91       	pop	r17
    695a:	0f 91       	pop	r16
    695c:	ff 90       	pop	r15
    695e:	ef 90       	pop	r14
    6960:	df 90       	pop	r13
    6962:	cf 90       	pop	r12
    6964:	bf 90       	pop	r11
    6966:	af 90       	pop	r10
    6968:	9f 90       	pop	r9
    696a:	8f 90       	pop	r8
    696c:	7f 90       	pop	r7
    696e:	08 95       	ret

00006970 <_ZN3LCD12displayOnOffE7onOff_tbhh>:
    6970:	ef 92       	push	r14
    6972:	ff 92       	push	r15
    6974:	0f 93       	push	r16
    6976:	1f 93       	push	r17
    6978:	cf 93       	push	r28
    697a:	df 93       	push	r29
    697c:	65 30       	cpi	r22, 0x05	; 5
    697e:	08 f0       	brcs	.+2      	; 0x6982 <_ZN3LCD12displayOnOffE7onOff_tbhh+0x12>
    6980:	34 c0       	rjmp	.+104    	; 0x69ea <_ZN3LCD12displayOnOffE7onOff_tbhh+0x7a>
    6982:	14 2f       	mov	r17, r20
    6984:	7c 01       	movw	r14, r24
    6986:	21 11       	cpse	r18, r1
    6988:	10 c0       	rjmp	.+32     	; 0x69aa <_ZN3LCD12displayOnOffE7onOff_tbhh+0x3a>
    698a:	c6 2f       	mov	r28, r22
    698c:	d0 e0       	ldi	r29, 0x00	; 0
    698e:	fe 01       	movw	r30, r28
    6990:	ee 0f       	add	r30, r30
    6992:	ff 1f       	adc	r31, r31
    6994:	e8 5f       	subi	r30, 0xF8	; 248
    6996:	f9 4f       	sbci	r31, 0xF9	; 249
    6998:	65 91       	lpm	r22, Z+
    699a:	74 91       	lpm	r23, Z
    699c:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    69a0:	fe 01       	movw	r30, r28
    69a2:	ed 5f       	subi	r30, 0xFD	; 253
    69a4:	f9 4f       	sbci	r31, 0xF9	; 249
    69a6:	c4 91       	lpm	r28, Z
    69a8:	0f c0       	rjmp	.+30     	; 0x69c8 <_ZN3LCD12displayOnOffE7onOff_tbhh+0x58>
    69aa:	c6 2f       	mov	r28, r22
    69ac:	d0 e0       	ldi	r29, 0x00	; 0
    69ae:	fe 01       	movw	r30, r28
    69b0:	ee 0f       	add	r30, r30
    69b2:	ff 1f       	adc	r31, r31
    69b4:	e7 50       	subi	r30, 0x07	; 7
    69b6:	fa 4f       	sbci	r31, 0xFA	; 250
    69b8:	65 91       	lpm	r22, Z+
    69ba:	74 91       	lpm	r23, Z
    69bc:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    69c0:	fe 01       	movw	r30, r28
    69c2:	ec 50       	subi	r30, 0x0C	; 12
    69c4:	fa 4f       	sbci	r31, 0xFA	; 250
    69c6:	c4 91       	lpm	r28, Z
    69c8:	f7 01       	movw	r30, r14
    69ca:	ea 59       	subi	r30, 0x9A	; 154
    69cc:	fd 4f       	sbci	r31, 0xFD	; 253
    69ce:	60 81       	ld	r22, Z
    69d0:	f7 01       	movw	r30, r14
    69d2:	ec 0f       	add	r30, r28
    69d4:	f1 1d       	adc	r31, r1
    69d6:	10 82       	st	Z, r1
    69d8:	a7 01       	movw	r20, r14
    69da:	82 e6       	ldi	r24, 0x62	; 98
    69dc:	9c e0       	ldi	r25, 0x0C	; 12
    69de:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <_ZN3LCD14displayMessageEhPKc>
    69e2:	40 2f       	mov	r20, r16
    69e4:	61 2f       	mov	r22, r17
    69e6:	c7 01       	movw	r24, r14
    69e8:	ca dc       	rcall	.-1644   	; 0x637e <_ZN3LCD16displayPadAmountEbh>
    69ea:	df 91       	pop	r29
    69ec:	cf 91       	pop	r28
    69ee:	1f 91       	pop	r17
    69f0:	0f 91       	pop	r16
    69f2:	ff 90       	pop	r15
    69f4:	ef 90       	pop	r14
    69f6:	08 95       	ret

000069f8 <_ZN3LCD17displayNoteChangeE14changeOutput_t16noteChangeType_ta>:
    69f8:	8f 92       	push	r8
    69fa:	9f 92       	push	r9
    69fc:	af 92       	push	r10
    69fe:	bf 92       	push	r11
    6a00:	ef 92       	push	r14
    6a02:	ff 92       	push	r15
    6a04:	0f 93       	push	r16
    6a06:	1f 93       	push	r17
    6a08:	cf 93       	push	r28
    6a0a:	df 93       	push	r29
    6a0c:	cd b7       	in	r28, 0x3d	; 61
    6a0e:	de b7       	in	r29, 0x3e	; 62
    6a10:	27 97       	sbiw	r28, 0x07	; 7
    6a12:	0f b6       	in	r0, 0x3f	; 63
    6a14:	f8 94       	cli
    6a16:	de bf       	out	0x3e, r29	; 62
    6a18:	0f be       	out	0x3f, r0	; 63
    6a1a:	cd bf       	out	0x3d, r28	; 61
    6a1c:	8c 01       	movw	r16, r24
    6a1e:	e2 2e       	mov	r14, r18
    6a20:	41 30       	cpi	r20, 0x01	; 1
    6a22:	09 f4       	brne	.+2      	; 0x6a26 <_ZN3LCD17displayNoteChangeE14changeOutput_t16noteChangeType_ta+0x2e>
    6a24:	69 c0       	rjmp	.+210    	; 0x6af8 <_ZN3LCD17displayNoteChangeE14changeOutput_t16noteChangeType_ta+0x100>
    6a26:	20 f0       	brcs	.+8      	; 0x6a30 <_ZN3LCD17displayNoteChangeE14changeOutput_t16noteChangeType_ta+0x38>
    6a28:	42 30       	cpi	r20, 0x02	; 2
    6a2a:	09 f4       	brne	.+2      	; 0x6a2e <_ZN3LCD17displayNoteChangeE14changeOutput_t16noteChangeType_ta+0x36>
    6a2c:	b6 c0       	rjmp	.+364    	; 0x6b9a <_ZN3LCD17displayNoteChangeE14changeOutput_t16noteChangeType_ta+0x1a2>
    6a2e:	0e c1       	rjmp	.+540    	; 0x6c4c <_ZN3LCD17displayNoteChangeE14changeOutput_t16noteChangeType_ta+0x254>
    6a30:	62 30       	cpi	r22, 0x02	; 2
    6a32:	20 f0       	brcs	.+8      	; 0x6a3c <_ZN3LCD17displayNoteChangeE14changeOutput_t16noteChangeType_ta+0x44>
    6a34:	62 30       	cpi	r22, 0x02	; 2
    6a36:	09 f4       	brne	.+2      	; 0x6a3a <_ZN3LCD17displayNoteChangeE14changeOutput_t16noteChangeType_ta+0x42>
    6a38:	3f c0       	rjmp	.+126    	; 0x6ab8 <_ZN3LCD17displayNoteChangeE14changeOutput_t16noteChangeType_ta+0xc0>
    6a3a:	08 c1       	rjmp	.+528    	; 0x6c4c <_ZN3LCD17displayNoteChangeE14changeOutput_t16noteChangeType_ta+0x254>
    6a3c:	69 eb       	ldi	r22, 0xB9	; 185
    6a3e:	78 e0       	ldi	r23, 0x08	; 8
    6a40:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6a44:	0e 2c       	mov	r0, r14
    6a46:	00 0c       	add	r0, r0
    6a48:	ff 08       	sbc	r15, r15
    6a4a:	f7 01       	movw	r30, r14
    6a4c:	ee 0f       	add	r30, r30
    6a4e:	ff 1f       	adc	r31, r31
    6a50:	ef 5a       	subi	r30, 0xAF	; 175
    6a52:	f7 4f       	sbci	r31, 0xF7	; 247
    6a54:	65 91       	lpm	r22, Z+
    6a56:	74 91       	lpm	r23, Z
    6a58:	58 01       	movw	r10, r16
    6a5a:	8f e1       	ldi	r24, 0x1F	; 31
    6a5c:	a8 0e       	add	r10, r24
    6a5e:	b1 1c       	adc	r11, r1
    6a60:	c5 01       	movw	r24, r10
    6a62:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6a66:	f7 01       	movw	r30, r14
    6a68:	eb 5b       	subi	r30, 0xBB	; 187
    6a6a:	f7 4f       	sbci	r31, 0xF7	; 247
    6a6c:	e4 90       	lpm	r14, Z
    6a6e:	b5 01       	movw	r22, r10
    6a70:	c8 01       	movw	r24, r16
    6a72:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
    6a76:	f8 01       	movw	r30, r16
    6a78:	ea 59       	subi	r30, 0x9A	; 154
    6a7a:	fd 4f       	sbci	r31, 0xFD	; 253
    6a7c:	60 81       	ld	r22, Z
    6a7e:	e6 e0       	ldi	r30, 0x06	; 6
    6a80:	ee 0d       	add	r30, r14
    6a82:	c8 01       	movw	r24, r16
    6a84:	8e 0f       	add	r24, r30
    6a86:	91 1d       	adc	r25, r1
    6a88:	fc 01       	movw	r30, r24
    6a8a:	10 82       	st	Z, r1
    6a8c:	a8 01       	movw	r20, r16
    6a8e:	82 e6       	ldi	r24, 0x62	; 98
    6a90:	9c e0       	ldi	r25, 0x0C	; 12
    6a92:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <_ZN3LCD14displayMessageEhPKc>
    6a96:	6c e2       	ldi	r22, 0x2C	; 44
    6a98:	75 e0       	ldi	r23, 0x05	; 5
    6a9a:	c8 01       	movw	r24, r16
    6a9c:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6aa0:	f8 01       	movw	r30, r16
    6aa2:	e8 59       	subi	r30, 0x98	; 152
    6aa4:	fd 4f       	sbci	r31, 0xFD	; 253
    6aa6:	60 81       	ld	r22, Z
    6aa8:	f8 01       	movw	r30, r16
    6aaa:	14 8a       	std	Z+20, r1	; 0x14
    6aac:	a8 01       	movw	r20, r16
    6aae:	82 e6       	ldi	r24, 0x62	; 98
    6ab0:	9c e0       	ldi	r25, 0x0C	; 12
    6ab2:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <_ZN3LCD14displayMessageEhPKc>
    6ab6:	ca c0       	rjmp	.+404    	; 0x6c4c <_ZN3LCD17displayNoteChangeE14changeOutput_t16noteChangeType_ta+0x254>
    6ab8:	68 e3       	ldi	r22, 0x38	; 56
    6aba:	78 e0       	ldi	r23, 0x08	; 8
    6abc:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6ac0:	f8 01       	movw	r30, r16
    6ac2:	ea 59       	subi	r30, 0x9A	; 154
    6ac4:	fd 4f       	sbci	r31, 0xFD	; 253
    6ac6:	60 81       	ld	r22, Z
    6ac8:	f8 01       	movw	r30, r16
    6aca:	14 86       	std	Z+12, r1	; 0x0c
    6acc:	a8 01       	movw	r20, r16
    6ace:	82 e6       	ldi	r24, 0x62	; 98
    6ad0:	9c e0       	ldi	r25, 0x0C	; 12
    6ad2:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <_ZN3LCD14displayMessageEhPKc>
    6ad6:	6c e2       	ldi	r22, 0x2C	; 44
    6ad8:	75 e0       	ldi	r23, 0x05	; 5
    6ada:	c8 01       	movw	r24, r16
    6adc:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6ae0:	f8 01       	movw	r30, r16
    6ae2:	e8 59       	subi	r30, 0x98	; 152
    6ae4:	fd 4f       	sbci	r31, 0xFD	; 253
    6ae6:	60 81       	ld	r22, Z
    6ae8:	f8 01       	movw	r30, r16
    6aea:	14 8a       	std	Z+20, r1	; 0x14
    6aec:	a8 01       	movw	r20, r16
    6aee:	82 e6       	ldi	r24, 0x62	; 98
    6af0:	9c e0       	ldi	r25, 0x0C	; 12
    6af2:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <_ZN3LCD14displayMessageEhPKc>
    6af6:	aa c0       	rjmp	.+340    	; 0x6c4c <_ZN3LCD17displayNoteChangeE14changeOutput_t16noteChangeType_ta+0x254>
    6af8:	61 eb       	ldi	r22, 0xB1	; 177
    6afa:	78 e0       	ldi	r23, 0x08	; 8
    6afc:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6b00:	8e 2c       	mov	r8, r14
    6b02:	0e 2c       	mov	r0, r14
    6b04:	00 0c       	add	r0, r0
    6b06:	99 08       	sbc	r9, r9
    6b08:	aa 08       	sbc	r10, r10
    6b0a:	bb 08       	sbc	r11, r11
    6b0c:	4a e0       	ldi	r20, 0x0A	; 10
    6b0e:	be 01       	movw	r22, r28
    6b10:	6f 5f       	subi	r22, 0xFF	; 255
    6b12:	7f 4f       	sbci	r23, 0xFF	; 255
    6b14:	8e 2d       	mov	r24, r14
    6b16:	ee 0c       	add	r14, r14
    6b18:	99 0b       	sbc	r25, r25
    6b1a:	0e 94 e1 82 	call	0x105c2	; 0x105c2 <__itoa_ncheck>
    6b1e:	fa e0       	ldi	r31, 0x0A	; 10
    6b20:	8f 16       	cp	r8, r31
    6b22:	91 04       	cpc	r9, r1
    6b24:	a1 04       	cpc	r10, r1
    6b26:	b1 04       	cpc	r11, r1
    6b28:	3c f0       	brlt	.+14     	; 0x6b38 <_ZN3LCD17displayNoteChangeE14changeOutput_t16noteChangeType_ta+0x140>
    6b2a:	84 e6       	ldi	r24, 0x64	; 100
    6b2c:	88 16       	cp	r8, r24
    6b2e:	91 04       	cpc	r9, r1
    6b30:	a1 04       	cpc	r10, r1
    6b32:	b1 04       	cpc	r11, r1
    6b34:	1c f0       	brlt	.+6      	; 0x6b3c <_ZN3LCD17displayNoteChangeE14changeOutput_t16noteChangeType_ta+0x144>
    6b36:	04 c0       	rjmp	.+8      	; 0x6b40 <_ZN3LCD17displayNoteChangeE14changeOutput_t16noteChangeType_ta+0x148>
    6b38:	81 e0       	ldi	r24, 0x01	; 1
    6b3a:	03 c0       	rjmp	.+6      	; 0x6b42 <_ZN3LCD17displayNoteChangeE14changeOutput_t16noteChangeType_ta+0x14a>
    6b3c:	82 e0       	ldi	r24, 0x02	; 2
    6b3e:	01 c0       	rjmp	.+2      	; 0x6b42 <_ZN3LCD17displayNoteChangeE14changeOutput_t16noteChangeType_ta+0x14a>
    6b40:	83 e0       	ldi	r24, 0x03	; 3
    6b42:	90 e0       	ldi	r25, 0x00	; 0
    6b44:	07 96       	adiw	r24, 0x07	; 7
    6b46:	f8 2e       	mov	r15, r24
    6b48:	bb 20       	and	r11, r11
    6b4a:	1c f4       	brge	.+6      	; 0x6b52 <_ZN3LCD17displayNoteChangeE14changeOutput_t16noteChangeType_ta+0x15a>
    6b4c:	ff 24       	eor	r15, r15
    6b4e:	f3 94       	inc	r15
    6b50:	f8 0e       	add	r15, r24
    6b52:	be 01       	movw	r22, r28
    6b54:	6f 5f       	subi	r22, 0xFF	; 255
    6b56:	7f 4f       	sbci	r23, 0xFF	; 255
    6b58:	c8 01       	movw	r24, r16
    6b5a:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
    6b5e:	f8 01       	movw	r30, r16
    6b60:	ef 0d       	add	r30, r15
    6b62:	f1 1d       	adc	r31, r1
    6b64:	10 82       	st	Z, r1
    6b66:	f8 01       	movw	r30, r16
    6b68:	ea 59       	subi	r30, 0x9A	; 154
    6b6a:	fd 4f       	sbci	r31, 0xFD	; 253
    6b6c:	a8 01       	movw	r20, r16
    6b6e:	60 81       	ld	r22, Z
    6b70:	82 e6       	ldi	r24, 0x62	; 98
    6b72:	9c e0       	ldi	r25, 0x0C	; 12
    6b74:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <_ZN3LCD14displayMessageEhPKc>
    6b78:	6c e2       	ldi	r22, 0x2C	; 44
    6b7a:	75 e0       	ldi	r23, 0x05	; 5
    6b7c:	c8 01       	movw	r24, r16
    6b7e:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6b82:	f8 01       	movw	r30, r16
    6b84:	e8 59       	subi	r30, 0x98	; 152
    6b86:	fd 4f       	sbci	r31, 0xFD	; 253
    6b88:	60 81       	ld	r22, Z
    6b8a:	f8 01       	movw	r30, r16
    6b8c:	14 8a       	std	Z+20, r1	; 0x14
    6b8e:	a8 01       	movw	r20, r16
    6b90:	82 e6       	ldi	r24, 0x62	; 98
    6b92:	9c e0       	ldi	r25, 0x0C	; 12
    6b94:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <_ZN3LCD14displayMessageEhPKc>
    6b98:	59 c0       	rjmp	.+178    	; 0x6c4c <_ZN3LCD17displayNoteChangeE14changeOutput_t16noteChangeType_ta+0x254>
    6b9a:	61 30       	cpi	r22, 0x01	; 1
    6b9c:	19 f0       	breq	.+6      	; 0x6ba4 <_ZN3LCD17displayNoteChangeE14changeOutput_t16noteChangeType_ta+0x1ac>
    6b9e:	62 30       	cpi	r22, 0x02	; 2
    6ba0:	29 f1       	breq	.+74     	; 0x6bec <_ZN3LCD17displayNoteChangeE14changeOutput_t16noteChangeType_ta+0x1f4>
    6ba2:	54 c0       	rjmp	.+168    	; 0x6c4c <_ZN3LCD17displayNoteChangeE14changeOutput_t16noteChangeType_ta+0x254>
    6ba4:	21 11       	cpse	r18, r1
    6ba6:	4a c0       	rjmp	.+148    	; 0x6c3c <_ZN3LCD17displayNoteChangeE14changeOutput_t16noteChangeType_ta+0x244>
    6ba8:	41 c0       	rjmp	.+130    	; 0x6c2c <_ZN3LCD17displayNoteChangeE14changeOutput_t16noteChangeType_ta+0x234>
    6baa:	f8 01       	movw	r30, r16
    6bac:	ea 59       	subi	r30, 0x9A	; 154
    6bae:	fd 4f       	sbci	r31, 0xFD	; 253
    6bb0:	60 81       	ld	r22, Z
    6bb2:	f8 01       	movw	r30, r16
    6bb4:	e8 0f       	add	r30, r24
    6bb6:	f1 1d       	adc	r31, r1
    6bb8:	10 82       	st	Z, r1
    6bba:	4e 2d       	mov	r20, r14
    6bbc:	5f 2d       	mov	r21, r15
    6bbe:	82 e6       	ldi	r24, 0x62	; 98
    6bc0:	9c e0       	ldi	r25, 0x0C	; 12
    6bc2:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <_ZN3LCD14displayMessageEhPKc>
    6bc6:	6c e2       	ldi	r22, 0x2C	; 44
    6bc8:	75 e0       	ldi	r23, 0x05	; 5
    6bca:	8e 2d       	mov	r24, r14
    6bcc:	9f 2d       	mov	r25, r15
    6bce:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6bd2:	f8 01       	movw	r30, r16
    6bd4:	e8 59       	subi	r30, 0x98	; 152
    6bd6:	fd 4f       	sbci	r31, 0xFD	; 253
    6bd8:	60 81       	ld	r22, Z
    6bda:	f8 01       	movw	r30, r16
    6bdc:	14 8a       	std	Z+20, r1	; 0x14
    6bde:	4e 2d       	mov	r20, r14
    6be0:	5f 2d       	mov	r21, r15
    6be2:	82 e6       	ldi	r24, 0x62	; 98
    6be4:	9c e0       	ldi	r25, 0x0C	; 12
    6be6:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <_ZN3LCD14displayMessageEhPKc>
    6bea:	30 c0       	rjmp	.+96     	; 0x6c4c <_ZN3LCD17displayNoteChangeE14changeOutput_t16noteChangeType_ta+0x254>
    6bec:	68 e3       	ldi	r22, 0x38	; 56
    6bee:	78 e0       	ldi	r23, 0x08	; 8
    6bf0:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6bf4:	f8 01       	movw	r30, r16
    6bf6:	ea 59       	subi	r30, 0x9A	; 154
    6bf8:	fd 4f       	sbci	r31, 0xFD	; 253
    6bfa:	60 81       	ld	r22, Z
    6bfc:	f8 01       	movw	r30, r16
    6bfe:	14 86       	std	Z+12, r1	; 0x0c
    6c00:	a8 01       	movw	r20, r16
    6c02:	82 e6       	ldi	r24, 0x62	; 98
    6c04:	9c e0       	ldi	r25, 0x0C	; 12
    6c06:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <_ZN3LCD14displayMessageEhPKc>
    6c0a:	6c e2       	ldi	r22, 0x2C	; 44
    6c0c:	75 e0       	ldi	r23, 0x05	; 5
    6c0e:	c8 01       	movw	r24, r16
    6c10:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6c14:	f8 01       	movw	r30, r16
    6c16:	e8 59       	subi	r30, 0x98	; 152
    6c18:	fd 4f       	sbci	r31, 0xFD	; 253
    6c1a:	60 81       	ld	r22, Z
    6c1c:	f8 01       	movw	r30, r16
    6c1e:	14 8a       	std	Z+20, r1	; 0x14
    6c20:	a8 01       	movw	r20, r16
    6c22:	82 e6       	ldi	r24, 0x62	; 98
    6c24:	9c e0       	ldi	r25, 0x0C	; 12
    6c26:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <_ZN3LCD14displayMessageEhPKc>
    6c2a:	10 c0       	rjmp	.+32     	; 0x6c4c <_ZN3LCD17displayNoteChangeE14changeOutput_t16noteChangeType_ta+0x254>
    6c2c:	e8 2e       	mov	r14, r24
    6c2e:	f1 2e       	mov	r15, r17
    6c30:	63 e9       	ldi	r22, 0x93	; 147
    6c32:	78 e0       	ldi	r23, 0x08	; 8
    6c34:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6c38:	8d e0       	ldi	r24, 0x0D	; 13
    6c3a:	b7 cf       	rjmp	.-146    	; 0x6baa <_ZN3LCD17displayNoteChangeE14changeOutput_t16noteChangeType_ta+0x1b2>
    6c3c:	e8 2e       	mov	r14, r24
    6c3e:	f1 2e       	mov	r15, r17
    6c40:	67 e8       	ldi	r22, 0x87	; 135
    6c42:	78 e0       	ldi	r23, 0x08	; 8
    6c44:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6c48:	8b e0       	ldi	r24, 0x0B	; 11
    6c4a:	af cf       	rjmp	.-162    	; 0x6baa <_ZN3LCD17displayNoteChangeE14changeOutput_t16noteChangeType_ta+0x1b2>
    6c4c:	27 96       	adiw	r28, 0x07	; 7
    6c4e:	0f b6       	in	r0, 0x3f	; 63
    6c50:	f8 94       	cli
    6c52:	de bf       	out	0x3e, r29	; 62
    6c54:	0f be       	out	0x3f, r0	; 63
    6c56:	cd bf       	out	0x3d, r28	; 61
    6c58:	df 91       	pop	r29
    6c5a:	cf 91       	pop	r28
    6c5c:	1f 91       	pop	r17
    6c5e:	0f 91       	pop	r16
    6c60:	ff 90       	pop	r15
    6c62:	ef 90       	pop	r14
    6c64:	bf 90       	pop	r11
    6c66:	af 90       	pop	r10
    6c68:	9f 90       	pop	r9
    6c6a:	8f 90       	pop	r8
    6c6c:	08 95       	ret

00006c6e <_ZN3LCD23displayTransportControlE18transportControl_t>:
    6c6e:	cf 93       	push	r28
    6c70:	df 93       	push	r29
    6c72:	ec 01       	movw	r28, r24
    6c74:	61 30       	cpi	r22, 0x01	; 1
    6c76:	d1 f0       	breq	.+52     	; 0x6cac <_ZN3LCD23displayTransportControlE18transportControl_t+0x3e>
    6c78:	18 f1       	brcs	.+70     	; 0x6cc0 <_ZN3LCD23displayTransportControlE18transportControl_t+0x52>
    6c7a:	62 30       	cpi	r22, 0x02	; 2
    6c7c:	19 f0       	breq	.+6      	; 0x6c84 <_ZN3LCD23displayTransportControlE18transportControl_t+0x16>
    6c7e:	63 30       	cpi	r22, 0x03	; 3
    6c80:	59 f0       	breq	.+22     	; 0x6c98 <_ZN3LCD23displayTransportControlE18transportControl_t+0x2a>
    6c82:	28 c0       	rjmp	.+80     	; 0x6cd4 <_ZN3LCD23displayTransportControlE18transportControl_t+0x66>
    6c84:	e6 e5       	ldi	r30, 0x56	; 86
    6c86:	f5 e0       	ldi	r31, 0x05	; 5
    6c88:	65 91       	lpm	r22, Z+
    6c8a:	74 91       	lpm	r23, Z
    6c8c:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6c90:	e0 e5       	ldi	r30, 0x50	; 80
    6c92:	f5 e0       	ldi	r31, 0x05	; 5
    6c94:	e4 91       	lpm	r30, Z
    6c96:	1f c0       	rjmp	.+62     	; 0x6cd6 <_ZN3LCD23displayTransportControlE18transportControl_t+0x68>
    6c98:	e8 e5       	ldi	r30, 0x58	; 88
    6c9a:	f5 e0       	ldi	r31, 0x05	; 5
    6c9c:	65 91       	lpm	r22, Z+
    6c9e:	74 91       	lpm	r23, Z
    6ca0:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6ca4:	e1 e5       	ldi	r30, 0x51	; 81
    6ca6:	f5 e0       	ldi	r31, 0x05	; 5
    6ca8:	e4 91       	lpm	r30, Z
    6caa:	15 c0       	rjmp	.+42     	; 0x6cd6 <_ZN3LCD23displayTransportControlE18transportControl_t+0x68>
    6cac:	e2 e5       	ldi	r30, 0x52	; 82
    6cae:	f5 e0       	ldi	r31, 0x05	; 5
    6cb0:	65 91       	lpm	r22, Z+
    6cb2:	74 91       	lpm	r23, Z
    6cb4:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6cb8:	ee e4       	ldi	r30, 0x4E	; 78
    6cba:	f5 e0       	ldi	r31, 0x05	; 5
    6cbc:	e4 91       	lpm	r30, Z
    6cbe:	0b c0       	rjmp	.+22     	; 0x6cd6 <_ZN3LCD23displayTransportControlE18transportControl_t+0x68>
    6cc0:	e4 e5       	ldi	r30, 0x54	; 84
    6cc2:	f5 e0       	ldi	r31, 0x05	; 5
    6cc4:	65 91       	lpm	r22, Z+
    6cc6:	74 91       	lpm	r23, Z
    6cc8:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6ccc:	ef e4       	ldi	r30, 0x4F	; 79
    6cce:	f5 e0       	ldi	r31, 0x05	; 5
    6cd0:	e4 91       	lpm	r30, Z
    6cd2:	01 c0       	rjmp	.+2      	; 0x6cd6 <_ZN3LCD23displayTransportControlE18transportControl_t+0x68>
    6cd4:	e0 e0       	ldi	r30, 0x00	; 0
    6cd6:	de 01       	movw	r26, r28
    6cd8:	aa 59       	subi	r26, 0x9A	; 154
    6cda:	bd 4f       	sbci	r27, 0xFD	; 253
    6cdc:	6c 91       	ld	r22, X
    6cde:	ce 01       	movw	r24, r28
    6ce0:	8e 0f       	add	r24, r30
    6ce2:	91 1d       	adc	r25, r1
    6ce4:	fc 01       	movw	r30, r24
    6ce6:	10 82       	st	Z, r1
    6ce8:	ae 01       	movw	r20, r28
    6cea:	82 e6       	ldi	r24, 0x62	; 98
    6cec:	9c e0       	ldi	r25, 0x0C	; 12
    6cee:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <_ZN3LCD14displayMessageEhPKc>
    6cf2:	6c e2       	ldi	r22, 0x2C	; 44
    6cf4:	75 e0       	ldi	r23, 0x05	; 5
    6cf6:	ce 01       	movw	r24, r28
    6cf8:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6cfc:	fe 01       	movw	r30, r28
    6cfe:	e8 59       	subi	r30, 0x98	; 152
    6d00:	fd 4f       	sbci	r31, 0xFD	; 253
    6d02:	60 81       	ld	r22, Z
    6d04:	1c 8a       	std	Y+20, r1	; 0x14
    6d06:	ae 01       	movw	r20, r28
    6d08:	82 e6       	ldi	r24, 0x62	; 98
    6d0a:	9c e0       	ldi	r25, 0x0C	; 12
    6d0c:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <_ZN3LCD14displayMessageEhPKc>
    6d10:	df 91       	pop	r29
    6d12:	cf 91       	pop	r28
    6d14:	08 95       	ret

00006d16 <_ZN3LCD18displayMaxNotesSetEv>:
    6d16:	cf 93       	push	r28
    6d18:	df 93       	push	r29
    6d1a:	ec 01       	movw	r28, r24
    6d1c:	60 e6       	ldi	r22, 0x60	; 96
    6d1e:	77 e0       	ldi	r23, 0x07	; 7
    6d20:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6d24:	fe 01       	movw	r30, r28
    6d26:	ea 59       	subi	r30, 0x9A	; 154
    6d28:	fd 4f       	sbci	r31, 0xFD	; 253
    6d2a:	60 81       	ld	r22, Z
    6d2c:	19 8a       	std	Y+17, r1	; 0x11
    6d2e:	ae 01       	movw	r20, r28
    6d30:	82 e6       	ldi	r24, 0x62	; 98
    6d32:	9c e0       	ldi	r25, 0x0C	; 12
    6d34:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <_ZN3LCD14displayMessageEhPKc>
    6d38:	66 e5       	ldi	r22, 0x56	; 86
    6d3a:	77 e0       	ldi	r23, 0x07	; 7
    6d3c:	ce 01       	movw	r24, r28
    6d3e:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6d42:	fe 01       	movw	r30, r28
    6d44:	e8 59       	subi	r30, 0x98	; 152
    6d46:	fd 4f       	sbci	r31, 0xFD	; 253
    6d48:	60 81       	ld	r22, Z
    6d4a:	19 86       	std	Y+9, r1	; 0x09
    6d4c:	ae 01       	movw	r20, r28
    6d4e:	82 e6       	ldi	r24, 0x62	; 98
    6d50:	9c e0       	ldi	r25, 0x0C	; 12
    6d52:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <_ZN3LCD14displayMessageEhPKc>
    6d56:	df 91       	pop	r29
    6d58:	cf 91       	pop	r28
    6d5a:	08 95       	ret

00006d5c <_ZN3LCD22displayPadReleaseErrorE17padReleaseError_t>:
    6d5c:	1f 93       	push	r17
    6d5e:	cf 93       	push	r28
    6d60:	df 93       	push	r29
    6d62:	ec 01       	movw	r28, r24
    6d64:	16 2f       	mov	r17, r22
    6d66:	6f ef       	ldi	r22, 0xFF	; 255
    6d68:	77 e0       	ldi	r23, 0x07	; 7
    6d6a:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6d6e:	fe 01       	movw	r30, r28
    6d70:	ea 59       	subi	r30, 0x9A	; 154
    6d72:	fd 4f       	sbci	r31, 0xFD	; 253
    6d74:	60 81       	ld	r22, Z
    6d76:	1b 8a       	std	Y+19, r1	; 0x13
    6d78:	ae 01       	movw	r20, r28
    6d7a:	82 e6       	ldi	r24, 0x62	; 98
    6d7c:	9c e0       	ldi	r25, 0x0C	; 12
    6d7e:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <_ZN3LCD14displayMessageEhPKc>
    6d82:	81 2f       	mov	r24, r17
    6d84:	90 e0       	ldi	r25, 0x00	; 0
    6d86:	87 30       	cpi	r24, 0x07	; 7
    6d88:	91 05       	cpc	r25, r1
    6d8a:	08 f0       	brcs	.+2      	; 0x6d8e <_ZN3LCD22displayPadReleaseErrorE17padReleaseError_t+0x32>
    6d8c:	42 c0       	rjmp	.+132    	; 0x6e12 <_ZN3LCD22displayPadReleaseErrorE17padReleaseError_t+0xb6>
    6d8e:	fc 01       	movw	r30, r24
    6d90:	ec 5e       	subi	r30, 0xEC	; 236
    6d92:	fe 4f       	sbci	r31, 0xFE	; 254
    6d94:	0c 94 84 82 	jmp	0x10508	; 0x10508 <__tablejump2__>
    6d98:	6e ed       	ldi	r22, 0xDE	; 222
    6d9a:	77 e0       	ldi	r23, 0x07	; 7
    6d9c:	ce 01       	movw	r24, r28
    6d9e:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6da2:	8e e0       	ldi	r24, 0x0E	; 14
    6da4:	29 c0       	rjmp	.+82     	; 0x6df8 <_ZN3LCD22displayPadReleaseErrorE17padReleaseError_t+0x9c>
    6da6:	60 ed       	ldi	r22, 0xD0	; 208
    6da8:	77 e0       	ldi	r23, 0x07	; 7
    6daa:	ce 01       	movw	r24, r28
    6dac:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6db0:	8d e0       	ldi	r24, 0x0D	; 13
    6db2:	22 c0       	rjmp	.+68     	; 0x6df8 <_ZN3LCD22displayPadReleaseErrorE17padReleaseError_t+0x9c>
    6db4:	69 eb       	ldi	r22, 0xB9	; 185
    6db6:	77 e0       	ldi	r23, 0x07	; 7
    6db8:	ce 01       	movw	r24, r28
    6dba:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6dbe:	89 e0       	ldi	r24, 0x09	; 9
    6dc0:	1b c0       	rjmp	.+54     	; 0x6df8 <_ZN3LCD22displayPadReleaseErrorE17padReleaseError_t+0x9c>
    6dc2:	69 ea       	ldi	r22, 0xA9	; 169
    6dc4:	77 e0       	ldi	r23, 0x07	; 7
    6dc6:	ce 01       	movw	r24, r28
    6dc8:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6dcc:	8f e0       	ldi	r24, 0x0F	; 15
    6dce:	14 c0       	rjmp	.+40     	; 0x6df8 <_ZN3LCD22displayPadReleaseErrorE17padReleaseError_t+0x9c>
    6dd0:	63 ec       	ldi	r22, 0xC3	; 195
    6dd2:	77 e0       	ldi	r23, 0x07	; 7
    6dd4:	ce 01       	movw	r24, r28
    6dd6:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6dda:	8c e0       	ldi	r24, 0x0C	; 12
    6ddc:	0d c0       	rjmp	.+26     	; 0x6df8 <_ZN3LCD22displayPadReleaseErrorE17padReleaseError_t+0x9c>
    6dde:	65 e9       	ldi	r22, 0x95	; 149
    6de0:	77 e0       	ldi	r23, 0x07	; 7
    6de2:	ce 01       	movw	r24, r28
    6de4:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6de8:	83 e1       	ldi	r24, 0x13	; 19
    6dea:	06 c0       	rjmp	.+12     	; 0x6df8 <_ZN3LCD22displayPadReleaseErrorE17padReleaseError_t+0x9c>
    6dec:	63 e8       	ldi	r22, 0x83	; 131
    6dee:	77 e0       	ldi	r23, 0x07	; 7
    6df0:	ce 01       	movw	r24, r28
    6df2:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6df6:	81 e1       	ldi	r24, 0x11	; 17
    6df8:	fe 01       	movw	r30, r28
    6dfa:	e8 59       	subi	r30, 0x98	; 152
    6dfc:	fd 4f       	sbci	r31, 0xFD	; 253
    6dfe:	60 81       	ld	r22, Z
    6e00:	fe 01       	movw	r30, r28
    6e02:	e8 0f       	add	r30, r24
    6e04:	f1 1d       	adc	r31, r1
    6e06:	10 82       	st	Z, r1
    6e08:	ae 01       	movw	r20, r28
    6e0a:	82 e6       	ldi	r24, 0x62	; 98
    6e0c:	9c e0       	ldi	r25, 0x0C	; 12
    6e0e:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <_ZN3LCD14displayMessageEhPKc>
    6e12:	df 91       	pop	r29
    6e14:	cf 91       	pop	r28
    6e16:	1f 91       	pop	r17
    6e18:	08 95       	ret

00006e1a <_ZN3LCD25displayEditModeNotAllowedE19padEditModeResult_t>:
    6e1a:	cf 93       	push	r28
    6e1c:	df 93       	push	r29
    6e1e:	ec 01       	movw	r28, r24
    6e20:	66 23       	and	r22, r22
    6e22:	19 f0       	breq	.+6      	; 0x6e2a <_ZN3LCD25displayEditModeNotAllowedE19padEditModeResult_t+0x10>
    6e24:	61 30       	cpi	r22, 0x01	; 1
    6e26:	f9 f0       	breq	.+62     	; 0x6e66 <_ZN3LCD25displayEditModeNotAllowedE19padEditModeResult_t+0x4c>
    6e28:	20 c0       	rjmp	.+64     	; 0x6e6a <_ZN3LCD25displayEditModeNotAllowedE19padEditModeResult_t+0x50>
    6e2a:	65 e2       	ldi	r22, 0x25	; 37
    6e2c:	78 e0       	ldi	r23, 0x08	; 8
    6e2e:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6e32:	fe 01       	movw	r30, r28
    6e34:	ea 59       	subi	r30, 0x9A	; 154
    6e36:	fd 4f       	sbci	r31, 0xFD	; 253
    6e38:	60 81       	ld	r22, Z
    6e3a:	1a 8a       	std	Y+18, r1	; 0x12
    6e3c:	ae 01       	movw	r20, r28
    6e3e:	82 e6       	ldi	r24, 0x62	; 98
    6e40:	9c e0       	ldi	r25, 0x0C	; 12
    6e42:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <_ZN3LCD14displayMessageEhPKc>
    6e46:	63 e1       	ldi	r22, 0x13	; 19
    6e48:	78 e0       	ldi	r23, 0x08	; 8
    6e4a:	ce 01       	movw	r24, r28
    6e4c:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6e50:	fe 01       	movw	r30, r28
    6e52:	e8 59       	subi	r30, 0x98	; 152
    6e54:	fd 4f       	sbci	r31, 0xFD	; 253
    6e56:	60 81       	ld	r22, Z
    6e58:	19 8a       	std	Y+17, r1	; 0x11
    6e5a:	ae 01       	movw	r20, r28
    6e5c:	82 e6       	ldi	r24, 0x62	; 98
    6e5e:	9c e0       	ldi	r25, 0x0C	; 12
    6e60:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <_ZN3LCD14displayMessageEhPKc>
    6e64:	02 c0       	rjmp	.+4      	; 0x6e6a <_ZN3LCD25displayEditModeNotAllowedE19padEditModeResult_t+0x50>
    6e66:	66 e0       	ldi	r22, 0x06	; 6
    6e68:	79 df       	rcall	.-270    	; 0x6d5c <_ZN3LCD22displayPadReleaseErrorE17padReleaseError_t>
    6e6a:	df 91       	pop	r29
    6e6c:	cf 91       	pop	r28
    6e6e:	08 95       	ret

00006e70 <_ZN3LCD35displayPadEditChangeParametersErrorEv>:
    6e70:	cf 93       	push	r28
    6e72:	df 93       	push	r29
    6e74:	ec 01       	movw	r28, r24
    6e76:	62 e7       	ldi	r22, 0x72	; 114
    6e78:	77 e0       	ldi	r23, 0x07	; 7
    6e7a:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6e7e:	fe 01       	movw	r30, r28
    6e80:	ea 59       	subi	r30, 0x9A	; 154
    6e82:	fd 4f       	sbci	r31, 0xFD	; 253
    6e84:	60 81       	ld	r22, Z
    6e86:	18 8a       	std	Y+16, r1	; 0x10
    6e88:	ae 01       	movw	r20, r28
    6e8a:	82 e6       	ldi	r24, 0x62	; 98
    6e8c:	9c e0       	ldi	r25, 0x0C	; 12
    6e8e:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <_ZN3LCD14displayMessageEhPKc>
    6e92:	6d ee       	ldi	r22, 0xED	; 237
    6e94:	77 e0       	ldi	r23, 0x07	; 7
    6e96:	ce 01       	movw	r24, r28
    6e98:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6e9c:	fe 01       	movw	r30, r28
    6e9e:	e8 59       	subi	r30, 0x98	; 152
    6ea0:	fd 4f       	sbci	r31, 0xFD	; 253
    6ea2:	60 81       	ld	r22, Z
    6ea4:	19 8a       	std	Y+17, r1	; 0x11
    6ea6:	ae 01       	movw	r20, r28
    6ea8:	82 e6       	ldi	r24, 0x62	; 98
    6eaa:	9c e0       	ldi	r25, 0x0C	; 12
    6eac:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <_ZN3LCD14displayMessageEhPKc>
    6eb0:	df 91       	pop	r29
    6eb2:	cf 91       	pop	r28
    6eb4:	08 95       	ret

00006eb6 <_ZN3LCD22displayFirmwareUpdatedEv>:
    6eb6:	4f 92       	push	r4
    6eb8:	5f 92       	push	r5
    6eba:	6f 92       	push	r6
    6ebc:	7f 92       	push	r7
    6ebe:	bf 92       	push	r11
    6ec0:	cf 92       	push	r12
    6ec2:	df 92       	push	r13
    6ec4:	ef 92       	push	r14
    6ec6:	ff 92       	push	r15
    6ec8:	0f 93       	push	r16
    6eca:	1f 93       	push	r17
    6ecc:	cf 93       	push	r28
    6ece:	df 93       	push	r29
    6ed0:	cd b7       	in	r28, 0x3d	; 61
    6ed2:	de b7       	in	r29, 0x3e	; 62
    6ed4:	27 97       	sbiw	r28, 0x07	; 7
    6ed6:	0f b6       	in	r0, 0x3f	; 63
    6ed8:	f8 94       	cli
    6eda:	de bf       	out	0x3e, r29	; 62
    6edc:	0f be       	out	0x3f, r0	; 63
    6ede:	cd bf       	out	0x3d, r28	; 61
    6ee0:	8c 01       	movw	r16, r24
    6ee2:	6c 01       	movw	r12, r24
    6ee4:	69 ee       	ldi	r22, 0xE9	; 233
    6ee6:	74 e0       	ldi	r23, 0x04	; 4
    6ee8:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6eec:	f8 01       	movw	r30, r16
    6eee:	ea 59       	subi	r30, 0x9A	; 154
    6ef0:	fd 4f       	sbci	r31, 0xFD	; 253
    6ef2:	60 81       	ld	r22, Z
    6ef4:	f8 01       	movw	r30, r16
    6ef6:	11 8a       	std	Z+17, r1	; 0x11
    6ef8:	a8 01       	movw	r20, r16
    6efa:	82 e6       	ldi	r24, 0x62	; 98
    6efc:	9c e0       	ldi	r25, 0x0C	; 12
    6efe:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <_ZN3LCD14displayMessageEhPKc>
    6f02:	67 e3       	ldi	r22, 0x37	; 55
    6f04:	77 e0       	ldi	r23, 0x07	; 7
    6f06:	c8 01       	movw	r24, r16
    6f08:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    6f0c:	80 e0       	ldi	r24, 0x00	; 0
    6f0e:	0e 94 28 7c 	call	0xf850	; 0xf850 <_Z12getSWversion11swVersion_t>
    6f12:	2c 01       	movw	r4, r24
    6f14:	09 2e       	mov	r0, r25
    6f16:	00 0c       	add	r0, r0
    6f18:	66 08       	sbc	r6, r6
    6f1a:	77 08       	sbc	r7, r7
    6f1c:	4a e0       	ldi	r20, 0x0A	; 10
    6f1e:	be 01       	movw	r22, r28
    6f20:	6f 5f       	subi	r22, 0xFF	; 255
    6f22:	7f 4f       	sbci	r23, 0xFF	; 255
    6f24:	0e 94 e1 82 	call	0x105c2	; 0x105c2 <__itoa_ncheck>
    6f28:	fa e0       	ldi	r31, 0x0A	; 10
    6f2a:	4f 16       	cp	r4, r31
    6f2c:	51 04       	cpc	r5, r1
    6f2e:	61 04       	cpc	r6, r1
    6f30:	71 04       	cpc	r7, r1
    6f32:	ac f0       	brlt	.+42     	; 0x6f5e <_ZN3LCD22displayFirmwareUpdatedEv+0xa8>
    6f34:	24 e6       	ldi	r18, 0x64	; 100
    6f36:	42 16       	cp	r4, r18
    6f38:	51 04       	cpc	r5, r1
    6f3a:	61 04       	cpc	r6, r1
    6f3c:	71 04       	cpc	r7, r1
    6f3e:	8c f0       	brlt	.+34     	; 0x6f62 <_ZN3LCD22displayFirmwareUpdatedEv+0xac>
    6f40:	38 ee       	ldi	r19, 0xE8	; 232
    6f42:	43 16       	cp	r4, r19
    6f44:	33 e0       	ldi	r19, 0x03	; 3
    6f46:	53 06       	cpc	r5, r19
    6f48:	61 04       	cpc	r6, r1
    6f4a:	71 04       	cpc	r7, r1
    6f4c:	64 f0       	brlt	.+24     	; 0x6f66 <_ZN3LCD22displayFirmwareUpdatedEv+0xb0>
    6f4e:	80 e1       	ldi	r24, 0x10	; 16
    6f50:	48 16       	cp	r4, r24
    6f52:	87 e2       	ldi	r24, 0x27	; 39
    6f54:	58 06       	cpc	r5, r24
    6f56:	61 04       	cpc	r6, r1
    6f58:	71 04       	cpc	r7, r1
    6f5a:	3c f0       	brlt	.+14     	; 0x6f6a <_ZN3LCD22displayFirmwareUpdatedEv+0xb4>
    6f5c:	08 c0       	rjmp	.+16     	; 0x6f6e <_ZN3LCD22displayFirmwareUpdatedEv+0xb8>
    6f5e:	81 e0       	ldi	r24, 0x01	; 1
    6f60:	07 c0       	rjmp	.+14     	; 0x6f70 <_ZN3LCD22displayFirmwareUpdatedEv+0xba>
    6f62:	82 e0       	ldi	r24, 0x02	; 2
    6f64:	05 c0       	rjmp	.+10     	; 0x6f70 <_ZN3LCD22displayFirmwareUpdatedEv+0xba>
    6f66:	83 e0       	ldi	r24, 0x03	; 3
    6f68:	03 c0       	rjmp	.+6      	; 0x6f70 <_ZN3LCD22displayFirmwareUpdatedEv+0xba>
    6f6a:	84 e0       	ldi	r24, 0x04	; 4
    6f6c:	01 c0       	rjmp	.+2      	; 0x6f70 <_ZN3LCD22displayFirmwareUpdatedEv+0xba>
    6f6e:	85 e0       	ldi	r24, 0x05	; 5
    6f70:	90 e0       	ldi	r25, 0x00	; 0
    6f72:	0a 96       	adiw	r24, 0x0a	; 10
    6f74:	e8 2e       	mov	r14, r24
    6f76:	77 20       	and	r7, r7
    6f78:	1c f4       	brge	.+6      	; 0x6f80 <_ZN3LCD22displayFirmwareUpdatedEv+0xca>
    6f7a:	ee 24       	eor	r14, r14
    6f7c:	e3 94       	inc	r14
    6f7e:	e8 0e       	add	r14, r24
    6f80:	be 01       	movw	r22, r28
    6f82:	6f 5f       	subi	r22, 0xFF	; 255
    6f84:	7f 4f       	sbci	r23, 0xFF	; 255
    6f86:	c8 01       	movw	r24, r16
    6f88:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
    6f8c:	f8 01       	movw	r30, r16
    6f8e:	ee 0d       	add	r30, r14
    6f90:	f1 1d       	adc	r31, r1
    6f92:	10 82       	st	Z, r1
    6f94:	f6 01       	movw	r30, r12
    6f96:	01 90       	ld	r0, Z+
    6f98:	00 20       	and	r0, r0
    6f9a:	e9 f7       	brne	.-6      	; 0x6f96 <_ZN3LCD22displayFirmwareUpdatedEv+0xe0>
    6f9c:	31 97       	sbiw	r30, 0x01	; 1
    6f9e:	8e e2       	ldi	r24, 0x2E	; 46
    6fa0:	90 e0       	ldi	r25, 0x00	; 0
    6fa2:	91 83       	std	Z+1, r25	; 0x01
    6fa4:	80 83       	st	Z, r24
    6fa6:	e3 94       	inc	r14
    6fa8:	f1 2c       	mov	r15, r1
    6faa:	f8 01       	movw	r30, r16
    6fac:	ee 0d       	add	r30, r14
    6fae:	ff 1d       	adc	r31, r15
    6fb0:	10 82       	st	Z, r1
    6fb2:	81 e0       	ldi	r24, 0x01	; 1
    6fb4:	0e 94 28 7c 	call	0xf850	; 0xf850 <_Z12getSWversion11swVersion_t>
    6fb8:	2c 01       	movw	r4, r24
    6fba:	09 2e       	mov	r0, r25
    6fbc:	00 0c       	add	r0, r0
    6fbe:	66 08       	sbc	r6, r6
    6fc0:	77 08       	sbc	r7, r7
    6fc2:	4a e0       	ldi	r20, 0x0A	; 10
    6fc4:	be 01       	movw	r22, r28
    6fc6:	6f 5f       	subi	r22, 0xFF	; 255
    6fc8:	7f 4f       	sbci	r23, 0xFF	; 255
    6fca:	0e 94 e1 82 	call	0x105c2	; 0x105c2 <__itoa_ncheck>
    6fce:	ea e0       	ldi	r30, 0x0A	; 10
    6fd0:	4e 16       	cp	r4, r30
    6fd2:	51 04       	cpc	r5, r1
    6fd4:	61 04       	cpc	r6, r1
    6fd6:	71 04       	cpc	r7, r1
    6fd8:	ac f0       	brlt	.+42     	; 0x7004 <_ZN3LCD22displayFirmwareUpdatedEv+0x14e>
    6fda:	f4 e6       	ldi	r31, 0x64	; 100
    6fdc:	4f 16       	cp	r4, r31
    6fde:	51 04       	cpc	r5, r1
    6fe0:	61 04       	cpc	r6, r1
    6fe2:	71 04       	cpc	r7, r1
    6fe4:	8c f0       	brlt	.+34     	; 0x7008 <_ZN3LCD22displayFirmwareUpdatedEv+0x152>
    6fe6:	28 ee       	ldi	r18, 0xE8	; 232
    6fe8:	42 16       	cp	r4, r18
    6fea:	23 e0       	ldi	r18, 0x03	; 3
    6fec:	52 06       	cpc	r5, r18
    6fee:	61 04       	cpc	r6, r1
    6ff0:	71 04       	cpc	r7, r1
    6ff2:	64 f0       	brlt	.+24     	; 0x700c <_ZN3LCD22displayFirmwareUpdatedEv+0x156>
    6ff4:	30 e1       	ldi	r19, 0x10	; 16
    6ff6:	43 16       	cp	r4, r19
    6ff8:	37 e2       	ldi	r19, 0x27	; 39
    6ffa:	53 06       	cpc	r5, r19
    6ffc:	61 04       	cpc	r6, r1
    6ffe:	71 04       	cpc	r7, r1
    7000:	3c f0       	brlt	.+14     	; 0x7010 <_ZN3LCD22displayFirmwareUpdatedEv+0x15a>
    7002:	08 c0       	rjmp	.+16     	; 0x7014 <_ZN3LCD22displayFirmwareUpdatedEv+0x15e>
    7004:	81 e0       	ldi	r24, 0x01	; 1
    7006:	07 c0       	rjmp	.+14     	; 0x7016 <_ZN3LCD22displayFirmwareUpdatedEv+0x160>
    7008:	82 e0       	ldi	r24, 0x02	; 2
    700a:	05 c0       	rjmp	.+10     	; 0x7016 <_ZN3LCD22displayFirmwareUpdatedEv+0x160>
    700c:	83 e0       	ldi	r24, 0x03	; 3
    700e:	03 c0       	rjmp	.+6      	; 0x7016 <_ZN3LCD22displayFirmwareUpdatedEv+0x160>
    7010:	84 e0       	ldi	r24, 0x04	; 4
    7012:	01 c0       	rjmp	.+2      	; 0x7016 <_ZN3LCD22displayFirmwareUpdatedEv+0x160>
    7014:	85 e0       	ldi	r24, 0x05	; 5
    7016:	f7 01       	movw	r30, r14
    7018:	e8 0f       	add	r30, r24
    701a:	f1 1d       	adc	r31, r1
    701c:	fe 2e       	mov	r15, r30
    701e:	77 20       	and	r7, r7
    7020:	1c f4       	brge	.+6      	; 0x7028 <_ZN3LCD22displayFirmwareUpdatedEv+0x172>
    7022:	ff 24       	eor	r15, r15
    7024:	f3 94       	inc	r15
    7026:	fe 0e       	add	r15, r30
    7028:	be 01       	movw	r22, r28
    702a:	6f 5f       	subi	r22, 0xFF	; 255
    702c:	7f 4f       	sbci	r23, 0xFF	; 255
    702e:	c8 01       	movw	r24, r16
    7030:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
    7034:	f8 01       	movw	r30, r16
    7036:	ef 0d       	add	r30, r15
    7038:	f1 1d       	adc	r31, r1
    703a:	10 82       	st	Z, r1
    703c:	f6 01       	movw	r30, r12
    703e:	01 90       	ld	r0, Z+
    7040:	00 20       	and	r0, r0
    7042:	e9 f7       	brne	.-6      	; 0x703e <_ZN3LCD22displayFirmwareUpdatedEv+0x188>
    7044:	31 97       	sbiw	r30, 0x01	; 1
    7046:	8e e2       	ldi	r24, 0x2E	; 46
    7048:	90 e0       	ldi	r25, 0x00	; 0
    704a:	91 83       	std	Z+1, r25	; 0x01
    704c:	80 83       	st	Z, r24
    704e:	f3 94       	inc	r15
    7050:	ef 2c       	mov	r14, r15
    7052:	f1 2c       	mov	r15, r1
    7054:	f8 01       	movw	r30, r16
    7056:	ee 0d       	add	r30, r14
    7058:	ff 1d       	adc	r31, r15
    705a:	10 82       	st	Z, r1
    705c:	82 e0       	ldi	r24, 0x02	; 2
    705e:	0e 94 28 7c 	call	0xf850	; 0xf850 <_Z12getSWversion11swVersion_t>
    7062:	2c 01       	movw	r4, r24
    7064:	09 2e       	mov	r0, r25
    7066:	00 0c       	add	r0, r0
    7068:	66 08       	sbc	r6, r6
    706a:	77 08       	sbc	r7, r7
    706c:	4a e0       	ldi	r20, 0x0A	; 10
    706e:	be 01       	movw	r22, r28
    7070:	6f 5f       	subi	r22, 0xFF	; 255
    7072:	7f 4f       	sbci	r23, 0xFF	; 255
    7074:	0e 94 e1 82 	call	0x105c2	; 0x105c2 <__itoa_ncheck>
    7078:	fa e0       	ldi	r31, 0x0A	; 10
    707a:	4f 16       	cp	r4, r31
    707c:	51 04       	cpc	r5, r1
    707e:	61 04       	cpc	r6, r1
    7080:	71 04       	cpc	r7, r1
    7082:	ac f0       	brlt	.+42     	; 0x70ae <_ZN3LCD22displayFirmwareUpdatedEv+0x1f8>
    7084:	24 e6       	ldi	r18, 0x64	; 100
    7086:	42 16       	cp	r4, r18
    7088:	51 04       	cpc	r5, r1
    708a:	61 04       	cpc	r6, r1
    708c:	71 04       	cpc	r7, r1
    708e:	8c f0       	brlt	.+34     	; 0x70b2 <_ZN3LCD22displayFirmwareUpdatedEv+0x1fc>
    7090:	38 ee       	ldi	r19, 0xE8	; 232
    7092:	43 16       	cp	r4, r19
    7094:	33 e0       	ldi	r19, 0x03	; 3
    7096:	53 06       	cpc	r5, r19
    7098:	61 04       	cpc	r6, r1
    709a:	71 04       	cpc	r7, r1
    709c:	64 f0       	brlt	.+24     	; 0x70b6 <_ZN3LCD22displayFirmwareUpdatedEv+0x200>
    709e:	80 e1       	ldi	r24, 0x10	; 16
    70a0:	48 16       	cp	r4, r24
    70a2:	87 e2       	ldi	r24, 0x27	; 39
    70a4:	58 06       	cpc	r5, r24
    70a6:	61 04       	cpc	r6, r1
    70a8:	71 04       	cpc	r7, r1
    70aa:	3c f0       	brlt	.+14     	; 0x70ba <_ZN3LCD22displayFirmwareUpdatedEv+0x204>
    70ac:	08 c0       	rjmp	.+16     	; 0x70be <_ZN3LCD22displayFirmwareUpdatedEv+0x208>
    70ae:	81 e0       	ldi	r24, 0x01	; 1
    70b0:	07 c0       	rjmp	.+14     	; 0x70c0 <_ZN3LCD22displayFirmwareUpdatedEv+0x20a>
    70b2:	82 e0       	ldi	r24, 0x02	; 2
    70b4:	05 c0       	rjmp	.+10     	; 0x70c0 <_ZN3LCD22displayFirmwareUpdatedEv+0x20a>
    70b6:	83 e0       	ldi	r24, 0x03	; 3
    70b8:	03 c0       	rjmp	.+6      	; 0x70c0 <_ZN3LCD22displayFirmwareUpdatedEv+0x20a>
    70ba:	84 e0       	ldi	r24, 0x04	; 4
    70bc:	01 c0       	rjmp	.+2      	; 0x70c0 <_ZN3LCD22displayFirmwareUpdatedEv+0x20a>
    70be:	85 e0       	ldi	r24, 0x05	; 5
    70c0:	e8 0e       	add	r14, r24
    70c2:	f1 1c       	adc	r15, r1
    70c4:	be 2c       	mov	r11, r14
    70c6:	77 20       	and	r7, r7
    70c8:	1c f4       	brge	.+6      	; 0x70d0 <_ZN3LCD22displayFirmwareUpdatedEv+0x21a>
    70ca:	bb 24       	eor	r11, r11
    70cc:	b3 94       	inc	r11
    70ce:	be 0c       	add	r11, r14
    70d0:	be 01       	movw	r22, r28
    70d2:	6f 5f       	subi	r22, 0xFF	; 255
    70d4:	7f 4f       	sbci	r23, 0xFF	; 255
    70d6:	c8 01       	movw	r24, r16
    70d8:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
    70dc:	f8 01       	movw	r30, r16
    70de:	eb 0d       	add	r30, r11
    70e0:	f1 1d       	adc	r31, r1
    70e2:	10 82       	st	Z, r1
    70e4:	83 e0       	ldi	r24, 0x03	; 3
    70e6:	0e 94 28 7c 	call	0xf850	; 0xf850 <_Z12getSWversion11swVersion_t>
    70ea:	89 2b       	or	r24, r25
    70ec:	71 f0       	breq	.+28     	; 0x710a <_ZN3LCD22displayFirmwareUpdatedEv+0x254>
    70ee:	b3 94       	inc	r11
    70f0:	f6 01       	movw	r30, r12
    70f2:	01 90       	ld	r0, Z+
    70f4:	00 20       	and	r0, r0
    70f6:	e9 f7       	brne	.-6      	; 0x70f2 <_ZN3LCD22displayFirmwareUpdatedEv+0x23c>
    70f8:	31 97       	sbiw	r30, 0x01	; 1
    70fa:	84 e6       	ldi	r24, 0x64	; 100
    70fc:	90 e0       	ldi	r25, 0x00	; 0
    70fe:	91 83       	std	Z+1, r25	; 0x01
    7100:	80 83       	st	Z, r24
    7102:	f8 01       	movw	r30, r16
    7104:	eb 0d       	add	r30, r11
    7106:	f1 1d       	adc	r31, r1
    7108:	10 82       	st	Z, r1
    710a:	f8 01       	movw	r30, r16
    710c:	e8 59       	subi	r30, 0x98	; 152
    710e:	fd 4f       	sbci	r31, 0xFD	; 253
    7110:	60 81       	ld	r22, Z
    7112:	f8 01       	movw	r30, r16
    7114:	eb 0d       	add	r30, r11
    7116:	f1 1d       	adc	r31, r1
    7118:	10 82       	st	Z, r1
    711a:	a8 01       	movw	r20, r16
    711c:	82 e6       	ldi	r24, 0x62	; 98
    711e:	9c e0       	ldi	r25, 0x0C	; 12
    7120:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <_ZN3LCD14displayMessageEhPKc>
    7124:	27 96       	adiw	r28, 0x07	; 7
    7126:	0f b6       	in	r0, 0x3f	; 63
    7128:	f8 94       	cli
    712a:	de bf       	out	0x3e, r29	; 62
    712c:	0f be       	out	0x3f, r0	; 63
    712e:	cd bf       	out	0x3d, r28	; 61
    7130:	df 91       	pop	r29
    7132:	cf 91       	pop	r28
    7134:	1f 91       	pop	r17
    7136:	0f 91       	pop	r16
    7138:	ff 90       	pop	r15
    713a:	ef 90       	pop	r14
    713c:	df 90       	pop	r13
    713e:	cf 90       	pop	r12
    7140:	bf 90       	pop	r11
    7142:	7f 90       	pop	r7
    7144:	6f 90       	pop	r6
    7146:	5f 90       	pop	r5
    7148:	4f 90       	pop	r4
    714a:	08 95       	ret

0000714c <_ZN3LCD22displayProgramAndScaleEhh>:
    714c:	4f 92       	push	r4
    714e:	5f 92       	push	r5
    7150:	6f 92       	push	r6
    7152:	7f 92       	push	r7
    7154:	8f 92       	push	r8
    7156:	9f 92       	push	r9
    7158:	af 92       	push	r10
    715a:	bf 92       	push	r11
    715c:	cf 92       	push	r12
    715e:	df 92       	push	r13
    7160:	ef 92       	push	r14
    7162:	ff 92       	push	r15
    7164:	0f 93       	push	r16
    7166:	1f 93       	push	r17
    7168:	cf 93       	push	r28
    716a:	df 93       	push	r29
    716c:	cd b7       	in	r28, 0x3d	; 61
    716e:	de b7       	in	r29, 0x3e	; 62
    7170:	27 97       	sbiw	r28, 0x07	; 7
    7172:	0f b6       	in	r0, 0x3f	; 63
    7174:	f8 94       	cli
    7176:	de bf       	out	0x3e, r29	; 62
    7178:	0f be       	out	0x3f, r0	; 63
    717a:	cd bf       	out	0x3d, r28	; 61
    717c:	5c 01       	movw	r10, r24
    717e:	d6 2e       	mov	r13, r22
    7180:	04 2f       	mov	r16, r20
    7182:	18 2f       	mov	r17, r24
    7184:	fb 2c       	mov	r15, r11
    7186:	6a e2       	ldi	r22, 0x2A	; 42
    7188:	75 e0       	ldi	r23, 0x05	; 5
    718a:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    718e:	4d 2c       	mov	r4, r13
    7190:	51 2c       	mov	r5, r1
    7192:	61 2c       	mov	r6, r1
    7194:	71 2c       	mov	r7, r1
    7196:	4a e0       	ldi	r20, 0x0A	; 10
    7198:	be 01       	movw	r22, r28
    719a:	6f 5f       	subi	r22, 0xFF	; 255
    719c:	7f 4f       	sbci	r23, 0xFF	; 255
    719e:	8d 2d       	mov	r24, r13
    71a0:	90 e0       	ldi	r25, 0x00	; 0
    71a2:	0e 94 e1 82 	call	0x105c2	; 0x105c2 <__itoa_ncheck>
    71a6:	2a e0       	ldi	r18, 0x0A	; 10
    71a8:	42 16       	cp	r4, r18
    71aa:	51 04       	cpc	r5, r1
    71ac:	61 04       	cpc	r6, r1
    71ae:	71 04       	cpc	r7, r1
    71b0:	3c f0       	brlt	.+14     	; 0x71c0 <_ZN3LCD22displayProgramAndScaleEhh+0x74>
    71b2:	34 e6       	ldi	r19, 0x64	; 100
    71b4:	43 16       	cp	r4, r19
    71b6:	51 04       	cpc	r5, r1
    71b8:	61 04       	cpc	r6, r1
    71ba:	71 04       	cpc	r7, r1
    71bc:	1c f0       	brlt	.+6      	; 0x71c4 <_ZN3LCD22displayProgramAndScaleEhh+0x78>
    71be:	04 c0       	rjmp	.+8      	; 0x71c8 <_ZN3LCD22displayProgramAndScaleEhh+0x7c>
    71c0:	81 e0       	ldi	r24, 0x01	; 1
    71c2:	03 c0       	rjmp	.+6      	; 0x71ca <_ZN3LCD22displayProgramAndScaleEhh+0x7e>
    71c4:	82 e0       	ldi	r24, 0x02	; 2
    71c6:	01 c0       	rjmp	.+2      	; 0x71ca <_ZN3LCD22displayProgramAndScaleEhh+0x7e>
    71c8:	83 e0       	ldi	r24, 0x03	; 3
    71ca:	c8 2e       	mov	r12, r24
    71cc:	d1 2c       	mov	r13, r1
    71ce:	8f ef       	ldi	r24, 0xFF	; 255
    71d0:	c8 1a       	sub	r12, r24
    71d2:	d8 0a       	sbc	r13, r24
    71d4:	be 01       	movw	r22, r28
    71d6:	6f 5f       	subi	r22, 0xFF	; 255
    71d8:	7f 4f       	sbci	r23, 0xFF	; 255
    71da:	c5 01       	movw	r24, r10
    71dc:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
    71e0:	f5 01       	movw	r30, r10
    71e2:	ec 0d       	add	r30, r12
    71e4:	f1 1d       	adc	r31, r1
    71e6:	80 e2       	ldi	r24, 0x20	; 32
    71e8:	80 83       	st	Z, r24
    71ea:	c3 94       	inc	r12
    71ec:	d1 2c       	mov	r13, r1
    71ee:	f5 01       	movw	r30, r10
    71f0:	ec 0d       	add	r30, r12
    71f2:	fd 1d       	adc	r31, r13
    71f4:	10 82       	st	Z, r1
    71f6:	07 30       	cpi	r16, 0x07	; 7
    71f8:	e8 f4       	brcc	.+58     	; 0x7234 <_ZN3LCD22displayProgramAndScaleEhh+0xe8>
    71fa:	80 2e       	mov	r8, r16
    71fc:	91 2c       	mov	r9, r1
    71fe:	f4 01       	movw	r30, r8
    7200:	ee 0f       	add	r30, r30
    7202:	ff 1f       	adc	r31, r31
    7204:	ed 58       	subi	r30, 0x8D	; 141
    7206:	f9 4f       	sbci	r31, 0xF9	; 249
    7208:	65 91       	lpm	r22, Z+
    720a:	74 91       	lpm	r23, Z
    720c:	35 01       	movw	r6, r10
    720e:	ef e1       	ldi	r30, 0x1F	; 31
    7210:	6e 0e       	add	r6, r30
    7212:	71 1c       	adc	r7, r1
    7214:	c3 01       	movw	r24, r6
    7216:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    721a:	f4 01       	movw	r30, r8
    721c:	e5 59       	subi	r30, 0x95	; 149
    721e:	f9 4f       	sbci	r31, 0xF9	; 249
    7220:	84 91       	lpm	r24, Z
    7222:	c8 0e       	add	r12, r24
    7224:	e4 91       	lpm	r30, Z
    7226:	4e 2f       	mov	r20, r30
    7228:	50 e0       	ldi	r21, 0x00	; 0
    722a:	b3 01       	movw	r22, r6
    722c:	c5 01       	movw	r24, r10
    722e:	0e 94 d1 82 	call	0x105a2	; 0x105a2 <strncat>
    7232:	64 c0       	rjmp	.+200    	; 0x72fc <_ZN3LCD22displayProgramAndScaleEhh+0x1b0>
    7234:	e1 e8       	ldi	r30, 0x81	; 129
    7236:	f6 e0       	ldi	r31, 0x06	; 6
    7238:	65 91       	lpm	r22, Z+
    723a:	74 91       	lpm	r23, Z
    723c:	45 01       	movw	r8, r10
    723e:	ff e1       	ldi	r31, 0x1F	; 31
    7240:	8f 0e       	add	r8, r31
    7242:	91 1c       	adc	r9, r1
    7244:	c4 01       	movw	r24, r8
    7246:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    724a:	e2 e7       	ldi	r30, 0x72	; 114
    724c:	f6 e0       	ldi	r31, 0x06	; 6
    724e:	e4 91       	lpm	r30, Z
    7250:	ce 0e       	add	r12, r30
    7252:	d1 1c       	adc	r13, r1
    7254:	b4 01       	movw	r22, r8
    7256:	c5 01       	movw	r24, r10
    7258:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
    725c:	f5 01       	movw	r30, r10
    725e:	ec 0d       	add	r30, r12
    7260:	f1 1d       	adc	r31, r1
    7262:	80 e2       	ldi	r24, 0x20	; 32
    7264:	80 83       	st	Z, r24
    7266:	c3 94       	inc	r12
    7268:	d1 2c       	mov	r13, r1
    726a:	f5 01       	movw	r30, r10
    726c:	ec 0d       	add	r30, r12
    726e:	fd 1d       	adc	r31, r13
    7270:	10 82       	st	Z, r1
    7272:	80 2f       	mov	r24, r16
    7274:	90 e0       	ldi	r25, 0x00	; 0
    7276:	06 97       	sbiw	r24, 0x06	; 6
    7278:	2c 01       	movw	r4, r24
    727a:	09 2e       	mov	r0, r25
    727c:	00 0c       	add	r0, r0
    727e:	66 08       	sbc	r6, r6
    7280:	77 08       	sbc	r7, r7
    7282:	4a e0       	ldi	r20, 0x0A	; 10
    7284:	be 01       	movw	r22, r28
    7286:	6f 5f       	subi	r22, 0xFF	; 255
    7288:	7f 4f       	sbci	r23, 0xFF	; 255
    728a:	0e 94 e1 82 	call	0x105c2	; 0x105c2 <__itoa_ncheck>
    728e:	2a e0       	ldi	r18, 0x0A	; 10
    7290:	42 16       	cp	r4, r18
    7292:	51 04       	cpc	r5, r1
    7294:	61 04       	cpc	r6, r1
    7296:	71 04       	cpc	r7, r1
    7298:	ac f0       	brlt	.+42     	; 0x72c4 <_ZN3LCD22displayProgramAndScaleEhh+0x178>
    729a:	34 e6       	ldi	r19, 0x64	; 100
    729c:	43 16       	cp	r4, r19
    729e:	51 04       	cpc	r5, r1
    72a0:	61 04       	cpc	r6, r1
    72a2:	71 04       	cpc	r7, r1
    72a4:	8c f0       	brlt	.+34     	; 0x72c8 <_ZN3LCD22displayProgramAndScaleEhh+0x17c>
    72a6:	88 ee       	ldi	r24, 0xE8	; 232
    72a8:	48 16       	cp	r4, r24
    72aa:	83 e0       	ldi	r24, 0x03	; 3
    72ac:	58 06       	cpc	r5, r24
    72ae:	61 04       	cpc	r6, r1
    72b0:	71 04       	cpc	r7, r1
    72b2:	64 f0       	brlt	.+24     	; 0x72cc <_ZN3LCD22displayProgramAndScaleEhh+0x180>
    72b4:	e0 e1       	ldi	r30, 0x10	; 16
    72b6:	4e 16       	cp	r4, r30
    72b8:	e7 e2       	ldi	r30, 0x27	; 39
    72ba:	5e 06       	cpc	r5, r30
    72bc:	61 04       	cpc	r6, r1
    72be:	71 04       	cpc	r7, r1
    72c0:	3c f0       	brlt	.+14     	; 0x72d0 <_ZN3LCD22displayProgramAndScaleEhh+0x184>
    72c2:	08 c0       	rjmp	.+16     	; 0x72d4 <_ZN3LCD22displayProgramAndScaleEhh+0x188>
    72c4:	81 e0       	ldi	r24, 0x01	; 1
    72c6:	07 c0       	rjmp	.+14     	; 0x72d6 <_ZN3LCD22displayProgramAndScaleEhh+0x18a>
    72c8:	82 e0       	ldi	r24, 0x02	; 2
    72ca:	05 c0       	rjmp	.+10     	; 0x72d6 <_ZN3LCD22displayProgramAndScaleEhh+0x18a>
    72cc:	83 e0       	ldi	r24, 0x03	; 3
    72ce:	03 c0       	rjmp	.+6      	; 0x72d6 <_ZN3LCD22displayProgramAndScaleEhh+0x18a>
    72d0:	84 e0       	ldi	r24, 0x04	; 4
    72d2:	01 c0       	rjmp	.+2      	; 0x72d6 <_ZN3LCD22displayProgramAndScaleEhh+0x18a>
    72d4:	85 e0       	ldi	r24, 0x05	; 5
    72d6:	96 01       	movw	r18, r12
    72d8:	28 0f       	add	r18, r24
    72da:	31 1d       	adc	r19, r1
    72dc:	c2 2e       	mov	r12, r18
    72de:	77 20       	and	r7, r7
    72e0:	1c f4       	brge	.+6      	; 0x72e8 <_ZN3LCD22displayProgramAndScaleEhh+0x19c>
    72e2:	cc 24       	eor	r12, r12
    72e4:	c3 94       	inc	r12
    72e6:	c2 0e       	add	r12, r18
    72e8:	be 01       	movw	r22, r28
    72ea:	6f 5f       	subi	r22, 0xFF	; 255
    72ec:	7f 4f       	sbci	r23, 0xFF	; 255
    72ee:	c5 01       	movw	r24, r10
    72f0:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
    72f4:	f5 01       	movw	r30, r10
    72f6:	ec 0d       	add	r30, r12
    72f8:	f1 1d       	adc	r31, r1
    72fa:	10 82       	st	Z, r1
    72fc:	f5 01       	movw	r30, r10
    72fe:	e0 5a       	subi	r30, 0xA0	; 160
    7300:	fd 4f       	sbci	r31, 0xFD	; 253
    7302:	60 81       	ld	r22, Z
    7304:	f5 01       	movw	r30, r10
    7306:	ec 0d       	add	r30, r12
    7308:	f1 1d       	adc	r31, r1
    730a:	10 82       	st	Z, r1
    730c:	e1 2c       	mov	r14, r1
    730e:	01 e0       	ldi	r16, 0x01	; 1
    7310:	20 e0       	ldi	r18, 0x00	; 0
    7312:	a5 01       	movw	r20, r10
    7314:	82 e6       	ldi	r24, 0x62	; 98
    7316:	9c e0       	ldi	r25, 0x0C	; 12
    7318:	0e 94 88 45 	call	0x8b10	; 0x8b10 <_ZN3LCD11displayTextEhPKchbb>
    731c:	6c e2       	ldi	r22, 0x2C	; 44
    731e:	75 e0       	ldi	r23, 0x05	; 5
    7320:	c5 01       	movw	r24, r10
    7322:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    7326:	c1 2c       	mov	r12, r1
    7328:	d1 2c       	mov	r13, r1
    732a:	45 01       	movw	r8, r10
    732c:	30 ea       	ldi	r19, 0xA0	; 160
    732e:	83 1a       	sub	r8, r19
    7330:	3d ef       	ldi	r19, 0xFD	; 253
    7332:	93 0a       	sbc	r9, r19
    7334:	f4 01       	movw	r30, r8
    7336:	80 81       	ld	r24, Z
    7338:	90 e0       	ldi	r25, 0x00	; 0
    733a:	8c 15       	cp	r24, r12
    733c:	9d 05       	cpc	r25, r13
    733e:	61 f0       	breq	.+24     	; 0x7358 <_ZN3LCD22displayProgramAndScaleEhh+0x20c>
    7340:	f5 01       	movw	r30, r10
    7342:	14 8a       	std	Z+20, r1	; 0x14
    7344:	e1 2c       	mov	r14, r1
    7346:	01 e0       	ldi	r16, 0x01	; 1
    7348:	20 e0       	ldi	r18, 0x00	; 0
    734a:	41 2f       	mov	r20, r17
    734c:	5f 2d       	mov	r21, r15
    734e:	6c 2d       	mov	r22, r12
    7350:	82 e6       	ldi	r24, 0x62	; 98
    7352:	9c e0       	ldi	r25, 0x0C	; 12
    7354:	0e 94 88 45 	call	0x8b10	; 0x8b10 <_ZN3LCD11displayTextEhPKchbb>
    7358:	ff ef       	ldi	r31, 0xFF	; 255
    735a:	cf 1a       	sub	r12, r31
    735c:	df 0a       	sbc	r13, r31
    735e:	24 e0       	ldi	r18, 0x04	; 4
    7360:	c2 16       	cp	r12, r18
    7362:	d1 04       	cpc	r13, r1
    7364:	39 f7       	brne	.-50     	; 0x7334 <_ZN3LCD22displayProgramAndScaleEhh+0x1e8>
    7366:	27 96       	adiw	r28, 0x07	; 7
    7368:	0f b6       	in	r0, 0x3f	; 63
    736a:	f8 94       	cli
    736c:	de bf       	out	0x3e, r29	; 62
    736e:	0f be       	out	0x3f, r0	; 63
    7370:	cd bf       	out	0x3d, r28	; 61
    7372:	df 91       	pop	r29
    7374:	cf 91       	pop	r28
    7376:	1f 91       	pop	r17
    7378:	0f 91       	pop	r16
    737a:	ff 90       	pop	r15
    737c:	ef 90       	pop	r14
    737e:	df 90       	pop	r13
    7380:	cf 90       	pop	r12
    7382:	bf 90       	pop	r11
    7384:	af 90       	pop	r10
    7386:	9f 90       	pop	r9
    7388:	8f 90       	pop	r8
    738a:	7f 90       	pop	r7
    738c:	6f 90       	pop	r6
    738e:	5f 90       	pop	r5
    7390:	4f 90       	pop	r4
    7392:	08 95       	ret

00007394 <_ZN3LCD15displayVelocityEh>:
    7394:	8f 92       	push	r8
    7396:	9f 92       	push	r9
    7398:	af 92       	push	r10
    739a:	bf 92       	push	r11
    739c:	cf 92       	push	r12
    739e:	df 92       	push	r13
    73a0:	ef 92       	push	r14
    73a2:	ff 92       	push	r15
    73a4:	0f 93       	push	r16
    73a6:	1f 93       	push	r17
    73a8:	cf 93       	push	r28
    73aa:	df 93       	push	r29
    73ac:	cd b7       	in	r28, 0x3d	; 61
    73ae:	de b7       	in	r29, 0x3e	; 62
    73b0:	27 97       	sbiw	r28, 0x07	; 7
    73b2:	0f b6       	in	r0, 0x3f	; 63
    73b4:	f8 94       	cli
    73b6:	de bf       	out	0x3e, r29	; 62
    73b8:	0f be       	out	0x3f, r0	; 63
    73ba:	cd bf       	out	0x3d, r28	; 61
    73bc:	6c 01       	movw	r12, r24
    73be:	f6 2e       	mov	r15, r22
    73c0:	65 e8       	ldi	r22, 0x85	; 133
    73c2:	78 e0       	ldi	r23, 0x08	; 8
    73c4:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    73c8:	8f 2c       	mov	r8, r15
    73ca:	91 2c       	mov	r9, r1
    73cc:	a1 2c       	mov	r10, r1
    73ce:	b1 2c       	mov	r11, r1
    73d0:	4a e0       	ldi	r20, 0x0A	; 10
    73d2:	be 01       	movw	r22, r28
    73d4:	6f 5f       	subi	r22, 0xFF	; 255
    73d6:	7f 4f       	sbci	r23, 0xFF	; 255
    73d8:	8f 2d       	mov	r24, r15
    73da:	90 e0       	ldi	r25, 0x00	; 0
    73dc:	0e 94 e1 82 	call	0x105c2	; 0x105c2 <__itoa_ncheck>
    73e0:	2a e0       	ldi	r18, 0x0A	; 10
    73e2:	82 16       	cp	r8, r18
    73e4:	91 04       	cpc	r9, r1
    73e6:	a1 04       	cpc	r10, r1
    73e8:	b1 04       	cpc	r11, r1
    73ea:	e4 f0       	brlt	.+56     	; 0x7424 <_ZN3LCD15displayVelocityEh+0x90>
    73ec:	84 e6       	ldi	r24, 0x64	; 100
    73ee:	88 16       	cp	r8, r24
    73f0:	91 04       	cpc	r9, r1
    73f2:	a1 04       	cpc	r10, r1
    73f4:	b1 04       	cpc	r11, r1
    73f6:	c4 f0       	brlt	.+48     	; 0x7428 <_ZN3LCD15displayVelocityEh+0x94>
    73f8:	19 c0       	rjmp	.+50     	; 0x742c <_ZN3LCD15displayVelocityEh+0x98>
    73fa:	23 e6       	ldi	r18, 0x63	; 99
    73fc:	2f 15       	cp	r18, r15
    73fe:	c8 f5       	brcc	.+114    	; 0x7472 <_ZN3LCD15displayVelocityEh+0xde>
    7400:	f6 01       	movw	r30, r12
    7402:	e7 5a       	subi	r30, 0xA7	; 167
    7404:	fd 4f       	sbci	r31, 0xFD	; 253
    7406:	20 81       	ld	r18, Z
    7408:	31 97       	sbiw	r30, 0x01	; 1
    740a:	60 81       	ld	r22, Z
    740c:	f6 01       	movw	r30, r12
    740e:	ee 0d       	add	r30, r14
    7410:	f1 1d       	adc	r31, r1
    7412:	10 82       	st	Z, r1
    7414:	e1 2c       	mov	r14, r1
    7416:	00 e0       	ldi	r16, 0x00	; 0
    7418:	a6 01       	movw	r20, r12
    741a:	82 e6       	ldi	r24, 0x62	; 98
    741c:	9c e0       	ldi	r25, 0x0C	; 12
    741e:	0e 94 88 45 	call	0x8b10	; 0x8b10 <_ZN3LCD11displayTextEhPKchbb>
    7422:	34 c0       	rjmp	.+104    	; 0x748c <_ZN3LCD15displayVelocityEh+0xf8>
    7424:	01 e0       	ldi	r16, 0x01	; 1
    7426:	03 c0       	rjmp	.+6      	; 0x742e <_ZN3LCD15displayVelocityEh+0x9a>
    7428:	02 e0       	ldi	r16, 0x02	; 2
    742a:	01 c0       	rjmp	.+2      	; 0x742e <_ZN3LCD15displayVelocityEh+0x9a>
    742c:	03 e0       	ldi	r16, 0x03	; 3
    742e:	10 e0       	ldi	r17, 0x00	; 0
    7430:	0f 5f       	subi	r16, 0xFF	; 255
    7432:	1f 4f       	sbci	r17, 0xFF	; 255
    7434:	e0 2e       	mov	r14, r16
    7436:	be 01       	movw	r22, r28
    7438:	6f 5f       	subi	r22, 0xFF	; 255
    743a:	7f 4f       	sbci	r23, 0xFF	; 255
    743c:	c6 01       	movw	r24, r12
    743e:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
    7442:	c8 01       	movw	r24, r16
    7444:	99 27       	eor	r25, r25
    7446:	f6 01       	movw	r30, r12
    7448:	e8 0f       	add	r30, r24
    744a:	f9 1f       	adc	r31, r25
    744c:	10 82       	st	Z, r1
    744e:	29 e0       	ldi	r18, 0x09	; 9
    7450:	2f 15       	cp	r18, r15
    7452:	98 f2       	brcs	.-90     	; 0x73fa <_ZN3LCD15displayVelocityEh+0x66>
    7454:	f6 01       	movw	r30, r12
    7456:	e8 0f       	add	r30, r24
    7458:	f9 1f       	adc	r31, r25
    745a:	80 e2       	ldi	r24, 0x20	; 32
    745c:	80 83       	st	Z, r24
    745e:	81 83       	std	Z+1, r24	; 0x01
    7460:	68 94       	set
    7462:	ee 24       	eor	r14, r14
    7464:	e1 f8       	bld	r14, 1
    7466:	e0 0e       	add	r14, r16
    7468:	f6 01       	movw	r30, r12
    746a:	ee 0d       	add	r30, r14
    746c:	f1 1d       	adc	r31, r1
    746e:	10 82       	st	Z, r1
    7470:	c7 cf       	rjmp	.-114    	; 0x7400 <_ZN3LCD15displayVelocityEh+0x6c>
    7472:	f6 01       	movw	r30, r12
    7474:	e8 0f       	add	r30, r24
    7476:	f9 1f       	adc	r31, r25
    7478:	20 e2       	ldi	r18, 0x20	; 32
    747a:	20 83       	st	Z, r18
    747c:	ee 24       	eor	r14, r14
    747e:	e3 94       	inc	r14
    7480:	e0 0e       	add	r14, r16
    7482:	f6 01       	movw	r30, r12
    7484:	ee 0d       	add	r30, r14
    7486:	f1 1d       	adc	r31, r1
    7488:	10 82       	st	Z, r1
    748a:	ba cf       	rjmp	.-140    	; 0x7400 <_ZN3LCD15displayVelocityEh+0x6c>
    748c:	27 96       	adiw	r28, 0x07	; 7
    748e:	0f b6       	in	r0, 0x3f	; 63
    7490:	f8 94       	cli
    7492:	de bf       	out	0x3e, r29	; 62
    7494:	0f be       	out	0x3f, r0	; 63
    7496:	cd bf       	out	0x3d, r28	; 61
    7498:	df 91       	pop	r29
    749a:	cf 91       	pop	r28
    749c:	1f 91       	pop	r17
    749e:	0f 91       	pop	r16
    74a0:	ff 90       	pop	r15
    74a2:	ef 90       	pop	r14
    74a4:	df 90       	pop	r13
    74a6:	cf 90       	pop	r12
    74a8:	bf 90       	pop	r11
    74aa:	af 90       	pop	r10
    74ac:	9f 90       	pop	r9
    74ae:	8f 90       	pop	r8
    74b0:	08 95       	ret

000074b2 <_ZN3LCD17displayAftertouchEh>:
    74b2:	8f 92       	push	r8
    74b4:	9f 92       	push	r9
    74b6:	af 92       	push	r10
    74b8:	bf 92       	push	r11
    74ba:	cf 92       	push	r12
    74bc:	df 92       	push	r13
    74be:	ef 92       	push	r14
    74c0:	ff 92       	push	r15
    74c2:	0f 93       	push	r16
    74c4:	1f 93       	push	r17
    74c6:	cf 93       	push	r28
    74c8:	df 93       	push	r29
    74ca:	cd b7       	in	r28, 0x3d	; 61
    74cc:	de b7       	in	r29, 0x3e	; 62
    74ce:	27 97       	sbiw	r28, 0x07	; 7
    74d0:	0f b6       	in	r0, 0x3f	; 63
    74d2:	f8 94       	cli
    74d4:	de bf       	out	0x3e, r29	; 62
    74d6:	0f be       	out	0x3f, r0	; 63
    74d8:	cd bf       	out	0x3d, r28	; 61
    74da:	6c 01       	movw	r12, r24
    74dc:	f6 2e       	mov	r15, r22
    74de:	67 e2       	ldi	r22, 0x27	; 39
    74e0:	75 e0       	ldi	r23, 0x05	; 5
    74e2:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    74e6:	8f 2c       	mov	r8, r15
    74e8:	91 2c       	mov	r9, r1
    74ea:	a1 2c       	mov	r10, r1
    74ec:	b1 2c       	mov	r11, r1
    74ee:	4a e0       	ldi	r20, 0x0A	; 10
    74f0:	be 01       	movw	r22, r28
    74f2:	6f 5f       	subi	r22, 0xFF	; 255
    74f4:	7f 4f       	sbci	r23, 0xFF	; 255
    74f6:	8f 2d       	mov	r24, r15
    74f8:	90 e0       	ldi	r25, 0x00	; 0
    74fa:	0e 94 e1 82 	call	0x105c2	; 0x105c2 <__itoa_ncheck>
    74fe:	2a e0       	ldi	r18, 0x0A	; 10
    7500:	82 16       	cp	r8, r18
    7502:	91 04       	cpc	r9, r1
    7504:	a1 04       	cpc	r10, r1
    7506:	b1 04       	cpc	r11, r1
    7508:	e4 f0       	brlt	.+56     	; 0x7542 <_ZN3LCD17displayAftertouchEh+0x90>
    750a:	84 e6       	ldi	r24, 0x64	; 100
    750c:	88 16       	cp	r8, r24
    750e:	91 04       	cpc	r9, r1
    7510:	a1 04       	cpc	r10, r1
    7512:	b1 04       	cpc	r11, r1
    7514:	c4 f0       	brlt	.+48     	; 0x7546 <_ZN3LCD17displayAftertouchEh+0x94>
    7516:	19 c0       	rjmp	.+50     	; 0x754a <_ZN3LCD17displayAftertouchEh+0x98>
    7518:	23 e6       	ldi	r18, 0x63	; 99
    751a:	2f 15       	cp	r18, r15
    751c:	c8 f5       	brcc	.+114    	; 0x7590 <_ZN3LCD17displayAftertouchEh+0xde>
    751e:	f6 01       	movw	r30, r12
    7520:	e5 5a       	subi	r30, 0xA5	; 165
    7522:	fd 4f       	sbci	r31, 0xFD	; 253
    7524:	20 81       	ld	r18, Z
    7526:	31 97       	sbiw	r30, 0x01	; 1
    7528:	60 81       	ld	r22, Z
    752a:	f6 01       	movw	r30, r12
    752c:	ee 0d       	add	r30, r14
    752e:	f1 1d       	adc	r31, r1
    7530:	10 82       	st	Z, r1
    7532:	e1 2c       	mov	r14, r1
    7534:	00 e0       	ldi	r16, 0x00	; 0
    7536:	a6 01       	movw	r20, r12
    7538:	82 e6       	ldi	r24, 0x62	; 98
    753a:	9c e0       	ldi	r25, 0x0C	; 12
    753c:	0e 94 88 45 	call	0x8b10	; 0x8b10 <_ZN3LCD11displayTextEhPKchbb>
    7540:	34 c0       	rjmp	.+104    	; 0x75aa <_ZN3LCD17displayAftertouchEh+0xf8>
    7542:	01 e0       	ldi	r16, 0x01	; 1
    7544:	03 c0       	rjmp	.+6      	; 0x754c <_ZN3LCD17displayAftertouchEh+0x9a>
    7546:	02 e0       	ldi	r16, 0x02	; 2
    7548:	01 c0       	rjmp	.+2      	; 0x754c <_ZN3LCD17displayAftertouchEh+0x9a>
    754a:	03 e0       	ldi	r16, 0x03	; 3
    754c:	10 e0       	ldi	r17, 0x00	; 0
    754e:	0e 5f       	subi	r16, 0xFE	; 254
    7550:	1f 4f       	sbci	r17, 0xFF	; 255
    7552:	e0 2e       	mov	r14, r16
    7554:	be 01       	movw	r22, r28
    7556:	6f 5f       	subi	r22, 0xFF	; 255
    7558:	7f 4f       	sbci	r23, 0xFF	; 255
    755a:	c6 01       	movw	r24, r12
    755c:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
    7560:	c8 01       	movw	r24, r16
    7562:	99 27       	eor	r25, r25
    7564:	f6 01       	movw	r30, r12
    7566:	e8 0f       	add	r30, r24
    7568:	f9 1f       	adc	r31, r25
    756a:	10 82       	st	Z, r1
    756c:	29 e0       	ldi	r18, 0x09	; 9
    756e:	2f 15       	cp	r18, r15
    7570:	98 f2       	brcs	.-90     	; 0x7518 <_ZN3LCD17displayAftertouchEh+0x66>
    7572:	f6 01       	movw	r30, r12
    7574:	e8 0f       	add	r30, r24
    7576:	f9 1f       	adc	r31, r25
    7578:	80 e2       	ldi	r24, 0x20	; 32
    757a:	80 83       	st	Z, r24
    757c:	81 83       	std	Z+1, r24	; 0x01
    757e:	68 94       	set
    7580:	ee 24       	eor	r14, r14
    7582:	e1 f8       	bld	r14, 1
    7584:	e0 0e       	add	r14, r16
    7586:	f6 01       	movw	r30, r12
    7588:	ee 0d       	add	r30, r14
    758a:	f1 1d       	adc	r31, r1
    758c:	10 82       	st	Z, r1
    758e:	c7 cf       	rjmp	.-114    	; 0x751e <_ZN3LCD17displayAftertouchEh+0x6c>
    7590:	f6 01       	movw	r30, r12
    7592:	e8 0f       	add	r30, r24
    7594:	f9 1f       	adc	r31, r25
    7596:	20 e2       	ldi	r18, 0x20	; 32
    7598:	20 83       	st	Z, r18
    759a:	ee 24       	eor	r14, r14
    759c:	e3 94       	inc	r14
    759e:	e0 0e       	add	r14, r16
    75a0:	f6 01       	movw	r30, r12
    75a2:	ee 0d       	add	r30, r14
    75a4:	f1 1d       	adc	r31, r1
    75a6:	10 82       	st	Z, r1
    75a8:	ba cf       	rjmp	.-140    	; 0x751e <_ZN3LCD17displayAftertouchEh+0x6c>
    75aa:	27 96       	adiw	r28, 0x07	; 7
    75ac:	0f b6       	in	r0, 0x3f	; 63
    75ae:	f8 94       	cli
    75b0:	de bf       	out	0x3e, r29	; 62
    75b2:	0f be       	out	0x3f, r0	; 63
    75b4:	cd bf       	out	0x3d, r28	; 61
    75b6:	df 91       	pop	r29
    75b8:	cf 91       	pop	r28
    75ba:	1f 91       	pop	r17
    75bc:	0f 91       	pop	r16
    75be:	ff 90       	pop	r15
    75c0:	ef 90       	pop	r14
    75c2:	df 90       	pop	r13
    75c4:	cf 90       	pop	r12
    75c6:	bf 90       	pop	r11
    75c8:	af 90       	pop	r10
    75ca:	9f 90       	pop	r9
    75cc:	8f 90       	pop	r8
    75ce:	08 95       	ret

000075d0 <_ZN3LCD17displayXYpositionEh16coordinateType_t>:
    75d0:	4f 92       	push	r4
    75d2:	5f 92       	push	r5
    75d4:	6f 92       	push	r6
    75d6:	7f 92       	push	r7
    75d8:	af 92       	push	r10
    75da:	bf 92       	push	r11
    75dc:	cf 92       	push	r12
    75de:	df 92       	push	r13
    75e0:	ef 92       	push	r14
    75e2:	ff 92       	push	r15
    75e4:	0f 93       	push	r16
    75e6:	1f 93       	push	r17
    75e8:	cf 93       	push	r28
    75ea:	df 93       	push	r29
    75ec:	cd b7       	in	r28, 0x3d	; 61
    75ee:	de b7       	in	r29, 0x3e	; 62
    75f0:	27 97       	sbiw	r28, 0x07	; 7
    75f2:	0f b6       	in	r0, 0x3f	; 63
    75f4:	f8 94       	cli
    75f6:	de bf       	out	0x3e, r29	; 62
    75f8:	0f be       	out	0x3f, r0	; 63
    75fa:	cd bf       	out	0x3d, r28	; 61
    75fc:	6c 01       	movw	r12, r24
    75fe:	f6 2e       	mov	r15, r22
    7600:	44 23       	and	r20, r20
    7602:	19 f0       	breq	.+6      	; 0x760a <_ZN3LCD17displayXYpositionEh16coordinateType_t+0x3a>
    7604:	41 30       	cpi	r20, 0x01	; 1
    7606:	61 f0       	breq	.+24     	; 0x7620 <_ZN3LCD17displayXYpositionEh16coordinateType_t+0x50>
    7608:	73 c0       	rjmp	.+230    	; 0x76f0 <_ZN3LCD17displayXYpositionEh16coordinateType_t+0x120>
    760a:	fc 01       	movw	r30, r24
    760c:	eb 5a       	subi	r30, 0xAB	; 171
    760e:	fd 4f       	sbci	r31, 0xFD	; 253
    7610:	b0 80       	ld	r11, Z
    7612:	31 97       	sbiw	r30, 0x01	; 1
    7614:	a0 80       	ld	r10, Z
    7616:	63 e9       	ldi	r22, 0x93	; 147
    7618:	75 e0       	ldi	r23, 0x05	; 5
    761a:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    761e:	0a c0       	rjmp	.+20     	; 0x7634 <_ZN3LCD17displayXYpositionEh16coordinateType_t+0x64>
    7620:	fc 01       	movw	r30, r24
    7622:	e9 5a       	subi	r30, 0xA9	; 169
    7624:	fd 4f       	sbci	r31, 0xFD	; 253
    7626:	b0 80       	ld	r11, Z
    7628:	31 97       	sbiw	r30, 0x01	; 1
    762a:	a0 80       	ld	r10, Z
    762c:	61 e9       	ldi	r22, 0x91	; 145
    762e:	75 e0       	ldi	r23, 0x05	; 5
    7630:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    7634:	4f 2c       	mov	r4, r15
    7636:	51 2c       	mov	r5, r1
    7638:	61 2c       	mov	r6, r1
    763a:	71 2c       	mov	r7, r1
    763c:	4a e0       	ldi	r20, 0x0A	; 10
    763e:	be 01       	movw	r22, r28
    7640:	6f 5f       	subi	r22, 0xFF	; 255
    7642:	7f 4f       	sbci	r23, 0xFF	; 255
    7644:	8f 2d       	mov	r24, r15
    7646:	90 e0       	ldi	r25, 0x00	; 0
    7648:	0e 94 e1 82 	call	0x105c2	; 0x105c2 <__itoa_ncheck>
    764c:	2a e0       	ldi	r18, 0x0A	; 10
    764e:	42 16       	cp	r4, r18
    7650:	51 04       	cpc	r5, r1
    7652:	61 04       	cpc	r6, r1
    7654:	71 04       	cpc	r7, r1
    7656:	c4 f0       	brlt	.+48     	; 0x7688 <_ZN3LCD17displayXYpositionEh16coordinateType_t+0xb8>
    7658:	84 e6       	ldi	r24, 0x64	; 100
    765a:	48 16       	cp	r4, r24
    765c:	51 04       	cpc	r5, r1
    765e:	61 04       	cpc	r6, r1
    7660:	71 04       	cpc	r7, r1
    7662:	a4 f0       	brlt	.+40     	; 0x768c <_ZN3LCD17displayXYpositionEh16coordinateType_t+0xbc>
    7664:	15 c0       	rjmp	.+42     	; 0x7690 <_ZN3LCD17displayXYpositionEh16coordinateType_t+0xc0>
    7666:	23 e6       	ldi	r18, 0x63	; 99
    7668:	2f 15       	cp	r18, r15
    766a:	a8 f5       	brcc	.+106    	; 0x76d6 <_ZN3LCD17displayXYpositionEh16coordinateType_t+0x106>
    766c:	f6 01       	movw	r30, r12
    766e:	ee 0d       	add	r30, r14
    7670:	f1 1d       	adc	r31, r1
    7672:	10 82       	st	Z, r1
    7674:	e1 2c       	mov	r14, r1
    7676:	00 e0       	ldi	r16, 0x00	; 0
    7678:	2b 2d       	mov	r18, r11
    767a:	a6 01       	movw	r20, r12
    767c:	6a 2d       	mov	r22, r10
    767e:	82 e6       	ldi	r24, 0x62	; 98
    7680:	9c e0       	ldi	r25, 0x0C	; 12
    7682:	0e 94 88 45 	call	0x8b10	; 0x8b10 <_ZN3LCD11displayTextEhPKchbb>
    7686:	34 c0       	rjmp	.+104    	; 0x76f0 <_ZN3LCD17displayXYpositionEh16coordinateType_t+0x120>
    7688:	01 e0       	ldi	r16, 0x01	; 1
    768a:	03 c0       	rjmp	.+6      	; 0x7692 <_ZN3LCD17displayXYpositionEh16coordinateType_t+0xc2>
    768c:	02 e0       	ldi	r16, 0x02	; 2
    768e:	01 c0       	rjmp	.+2      	; 0x7692 <_ZN3LCD17displayXYpositionEh16coordinateType_t+0xc2>
    7690:	03 e0       	ldi	r16, 0x03	; 3
    7692:	10 e0       	ldi	r17, 0x00	; 0
    7694:	0f 5f       	subi	r16, 0xFF	; 255
    7696:	1f 4f       	sbci	r17, 0xFF	; 255
    7698:	e0 2e       	mov	r14, r16
    769a:	be 01       	movw	r22, r28
    769c:	6f 5f       	subi	r22, 0xFF	; 255
    769e:	7f 4f       	sbci	r23, 0xFF	; 255
    76a0:	c6 01       	movw	r24, r12
    76a2:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
    76a6:	c8 01       	movw	r24, r16
    76a8:	99 27       	eor	r25, r25
    76aa:	f6 01       	movw	r30, r12
    76ac:	e8 0f       	add	r30, r24
    76ae:	f9 1f       	adc	r31, r25
    76b0:	10 82       	st	Z, r1
    76b2:	29 e0       	ldi	r18, 0x09	; 9
    76b4:	2f 15       	cp	r18, r15
    76b6:	b8 f2       	brcs	.-82     	; 0x7666 <_ZN3LCD17displayXYpositionEh16coordinateType_t+0x96>
    76b8:	f6 01       	movw	r30, r12
    76ba:	e8 0f       	add	r30, r24
    76bc:	f9 1f       	adc	r31, r25
    76be:	80 e2       	ldi	r24, 0x20	; 32
    76c0:	80 83       	st	Z, r24
    76c2:	81 83       	std	Z+1, r24	; 0x01
    76c4:	68 94       	set
    76c6:	ee 24       	eor	r14, r14
    76c8:	e1 f8       	bld	r14, 1
    76ca:	e0 0e       	add	r14, r16
    76cc:	f6 01       	movw	r30, r12
    76ce:	ee 0d       	add	r30, r14
    76d0:	f1 1d       	adc	r31, r1
    76d2:	10 82       	st	Z, r1
    76d4:	cb cf       	rjmp	.-106    	; 0x766c <_ZN3LCD17displayXYpositionEh16coordinateType_t+0x9c>
    76d6:	f6 01       	movw	r30, r12
    76d8:	e8 0f       	add	r30, r24
    76da:	f9 1f       	adc	r31, r25
    76dc:	20 e2       	ldi	r18, 0x20	; 32
    76de:	20 83       	st	Z, r18
    76e0:	ee 24       	eor	r14, r14
    76e2:	e3 94       	inc	r14
    76e4:	e0 0e       	add	r14, r16
    76e6:	f6 01       	movw	r30, r12
    76e8:	ee 0d       	add	r30, r14
    76ea:	f1 1d       	adc	r31, r1
    76ec:	10 82       	st	Z, r1
    76ee:	be cf       	rjmp	.-132    	; 0x766c <_ZN3LCD17displayXYpositionEh16coordinateType_t+0x9c>
    76f0:	27 96       	adiw	r28, 0x07	; 7
    76f2:	0f b6       	in	r0, 0x3f	; 63
    76f4:	f8 94       	cli
    76f6:	de bf       	out	0x3e, r29	; 62
    76f8:	0f be       	out	0x3f, r0	; 63
    76fa:	cd bf       	out	0x3d, r28	; 61
    76fc:	df 91       	pop	r29
    76fe:	cf 91       	pop	r28
    7700:	1f 91       	pop	r17
    7702:	0f 91       	pop	r16
    7704:	ff 90       	pop	r15
    7706:	ef 90       	pop	r14
    7708:	df 90       	pop	r13
    770a:	cf 90       	pop	r12
    770c:	bf 90       	pop	r11
    770e:	af 90       	pop	r10
    7710:	7f 90       	pop	r7
    7712:	6f 90       	pop	r6
    7714:	5f 90       	pop	r5
    7716:	4f 90       	pop	r4
    7718:	08 95       	ret

0000771a <_ZN3LCD11displayXYccEh16coordinateType_t>:
    771a:	4f 92       	push	r4
    771c:	5f 92       	push	r5
    771e:	6f 92       	push	r6
    7720:	7f 92       	push	r7
    7722:	af 92       	push	r10
    7724:	bf 92       	push	r11
    7726:	cf 92       	push	r12
    7728:	df 92       	push	r13
    772a:	ef 92       	push	r14
    772c:	ff 92       	push	r15
    772e:	0f 93       	push	r16
    7730:	1f 93       	push	r17
    7732:	cf 93       	push	r28
    7734:	df 93       	push	r29
    7736:	cd b7       	in	r28, 0x3d	; 61
    7738:	de b7       	in	r29, 0x3e	; 62
    773a:	27 97       	sbiw	r28, 0x07	; 7
    773c:	0f b6       	in	r0, 0x3f	; 63
    773e:	f8 94       	cli
    7740:	de bf       	out	0x3e, r29	; 62
    7742:	0f be       	out	0x3f, r0	; 63
    7744:	cd bf       	out	0x3d, r28	; 61
    7746:	6c 01       	movw	r12, r24
    7748:	f6 2e       	mov	r15, r22
    774a:	44 23       	and	r20, r20
    774c:	19 f0       	breq	.+6      	; 0x7754 <_ZN3LCD11displayXYccEh16coordinateType_t+0x3a>
    774e:	41 30       	cpi	r20, 0x01	; 1
    7750:	61 f0       	breq	.+24     	; 0x776a <_ZN3LCD11displayXYccEh16coordinateType_t+0x50>
    7752:	73 c0       	rjmp	.+230    	; 0x783a <_ZN3LCD11displayXYccEh16coordinateType_t+0x120>
    7754:	69 e9       	ldi	r22, 0x99	; 153
    7756:	75 e0       	ldi	r23, 0x05	; 5
    7758:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    775c:	f6 01       	movw	r30, r12
    775e:	ef 5a       	subi	r30, 0xAF	; 175
    7760:	fd 4f       	sbci	r31, 0xFD	; 253
    7762:	b0 80       	ld	r11, Z
    7764:	31 97       	sbiw	r30, 0x01	; 1
    7766:	a0 80       	ld	r10, Z
    7768:	0a c0       	rjmp	.+20     	; 0x777e <_ZN3LCD11displayXYccEh16coordinateType_t+0x64>
    776a:	65 e9       	ldi	r22, 0x95	; 149
    776c:	75 e0       	ldi	r23, 0x05	; 5
    776e:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    7772:	f6 01       	movw	r30, r12
    7774:	ed 5a       	subi	r30, 0xAD	; 173
    7776:	fd 4f       	sbci	r31, 0xFD	; 253
    7778:	b0 80       	ld	r11, Z
    777a:	31 97       	sbiw	r30, 0x01	; 1
    777c:	a0 80       	ld	r10, Z
    777e:	4f 2c       	mov	r4, r15
    7780:	51 2c       	mov	r5, r1
    7782:	61 2c       	mov	r6, r1
    7784:	71 2c       	mov	r7, r1
    7786:	4a e0       	ldi	r20, 0x0A	; 10
    7788:	be 01       	movw	r22, r28
    778a:	6f 5f       	subi	r22, 0xFF	; 255
    778c:	7f 4f       	sbci	r23, 0xFF	; 255
    778e:	8f 2d       	mov	r24, r15
    7790:	90 e0       	ldi	r25, 0x00	; 0
    7792:	0e 94 e1 82 	call	0x105c2	; 0x105c2 <__itoa_ncheck>
    7796:	2a e0       	ldi	r18, 0x0A	; 10
    7798:	42 16       	cp	r4, r18
    779a:	51 04       	cpc	r5, r1
    779c:	61 04       	cpc	r6, r1
    779e:	71 04       	cpc	r7, r1
    77a0:	c4 f0       	brlt	.+48     	; 0x77d2 <_ZN3LCD11displayXYccEh16coordinateType_t+0xb8>
    77a2:	84 e6       	ldi	r24, 0x64	; 100
    77a4:	48 16       	cp	r4, r24
    77a6:	51 04       	cpc	r5, r1
    77a8:	61 04       	cpc	r6, r1
    77aa:	71 04       	cpc	r7, r1
    77ac:	a4 f0       	brlt	.+40     	; 0x77d6 <_ZN3LCD11displayXYccEh16coordinateType_t+0xbc>
    77ae:	15 c0       	rjmp	.+42     	; 0x77da <_ZN3LCD11displayXYccEh16coordinateType_t+0xc0>
    77b0:	23 e6       	ldi	r18, 0x63	; 99
    77b2:	2f 15       	cp	r18, r15
    77b4:	a8 f5       	brcc	.+106    	; 0x7820 <_ZN3LCD11displayXYccEh16coordinateType_t+0x106>
    77b6:	f6 01       	movw	r30, r12
    77b8:	ee 0d       	add	r30, r14
    77ba:	f1 1d       	adc	r31, r1
    77bc:	10 82       	st	Z, r1
    77be:	e1 2c       	mov	r14, r1
    77c0:	00 e0       	ldi	r16, 0x00	; 0
    77c2:	2b 2d       	mov	r18, r11
    77c4:	a6 01       	movw	r20, r12
    77c6:	6a 2d       	mov	r22, r10
    77c8:	82 e6       	ldi	r24, 0x62	; 98
    77ca:	9c e0       	ldi	r25, 0x0C	; 12
    77cc:	0e 94 88 45 	call	0x8b10	; 0x8b10 <_ZN3LCD11displayTextEhPKchbb>
    77d0:	34 c0       	rjmp	.+104    	; 0x783a <_ZN3LCD11displayXYccEh16coordinateType_t+0x120>
    77d2:	01 e0       	ldi	r16, 0x01	; 1
    77d4:	03 c0       	rjmp	.+6      	; 0x77dc <_ZN3LCD11displayXYccEh16coordinateType_t+0xc2>
    77d6:	02 e0       	ldi	r16, 0x02	; 2
    77d8:	01 c0       	rjmp	.+2      	; 0x77dc <_ZN3LCD11displayXYccEh16coordinateType_t+0xc2>
    77da:	03 e0       	ldi	r16, 0x03	; 3
    77dc:	10 e0       	ldi	r17, 0x00	; 0
    77de:	0d 5f       	subi	r16, 0xFD	; 253
    77e0:	1f 4f       	sbci	r17, 0xFF	; 255
    77e2:	e0 2e       	mov	r14, r16
    77e4:	be 01       	movw	r22, r28
    77e6:	6f 5f       	subi	r22, 0xFF	; 255
    77e8:	7f 4f       	sbci	r23, 0xFF	; 255
    77ea:	c6 01       	movw	r24, r12
    77ec:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
    77f0:	c8 01       	movw	r24, r16
    77f2:	99 27       	eor	r25, r25
    77f4:	f6 01       	movw	r30, r12
    77f6:	e8 0f       	add	r30, r24
    77f8:	f9 1f       	adc	r31, r25
    77fa:	10 82       	st	Z, r1
    77fc:	29 e0       	ldi	r18, 0x09	; 9
    77fe:	2f 15       	cp	r18, r15
    7800:	b8 f2       	brcs	.-82     	; 0x77b0 <_ZN3LCD11displayXYccEh16coordinateType_t+0x96>
    7802:	f6 01       	movw	r30, r12
    7804:	e8 0f       	add	r30, r24
    7806:	f9 1f       	adc	r31, r25
    7808:	80 e2       	ldi	r24, 0x20	; 32
    780a:	80 83       	st	Z, r24
    780c:	81 83       	std	Z+1, r24	; 0x01
    780e:	68 94       	set
    7810:	ee 24       	eor	r14, r14
    7812:	e1 f8       	bld	r14, 1
    7814:	e0 0e       	add	r14, r16
    7816:	f6 01       	movw	r30, r12
    7818:	ee 0d       	add	r30, r14
    781a:	f1 1d       	adc	r31, r1
    781c:	10 82       	st	Z, r1
    781e:	cb cf       	rjmp	.-106    	; 0x77b6 <_ZN3LCD11displayXYccEh16coordinateType_t+0x9c>
    7820:	f6 01       	movw	r30, r12
    7822:	e8 0f       	add	r30, r24
    7824:	f9 1f       	adc	r31, r25
    7826:	20 e2       	ldi	r18, 0x20	; 32
    7828:	20 83       	st	Z, r18
    782a:	ee 24       	eor	r14, r14
    782c:	e3 94       	inc	r14
    782e:	e0 0e       	add	r14, r16
    7830:	f6 01       	movw	r30, r12
    7832:	ee 0d       	add	r30, r14
    7834:	f1 1d       	adc	r31, r1
    7836:	10 82       	st	Z, r1
    7838:	be cf       	rjmp	.-132    	; 0x77b6 <_ZN3LCD11displayXYccEh16coordinateType_t+0x9c>
    783a:	27 96       	adiw	r28, 0x07	; 7
    783c:	0f b6       	in	r0, 0x3f	; 63
    783e:	f8 94       	cli
    7840:	de bf       	out	0x3e, r29	; 62
    7842:	0f be       	out	0x3f, r0	; 63
    7844:	cd bf       	out	0x3d, r28	; 61
    7846:	df 91       	pop	r29
    7848:	cf 91       	pop	r28
    784a:	1f 91       	pop	r17
    784c:	0f 91       	pop	r16
    784e:	ff 90       	pop	r15
    7850:	ef 90       	pop	r14
    7852:	df 90       	pop	r13
    7854:	cf 90       	pop	r12
    7856:	bf 90       	pop	r11
    7858:	af 90       	pop	r10
    785a:	7f 90       	pop	r7
    785c:	6f 90       	pop	r6
    785e:	5f 90       	pop	r5
    7860:	4f 90       	pop	r4
    7862:	08 95       	ret

00007864 <_ZN3LCD21displayActivePadNotesEPhPahb>:
    7864:	2f 92       	push	r2
    7866:	3f 92       	push	r3
    7868:	4f 92       	push	r4
    786a:	5f 92       	push	r5
    786c:	6f 92       	push	r6
    786e:	7f 92       	push	r7
    7870:	8f 92       	push	r8
    7872:	9f 92       	push	r9
    7874:	af 92       	push	r10
    7876:	bf 92       	push	r11
    7878:	cf 92       	push	r12
    787a:	df 92       	push	r13
    787c:	ef 92       	push	r14
    787e:	ff 92       	push	r15
    7880:	0f 93       	push	r16
    7882:	1f 93       	push	r17
    7884:	cf 93       	push	r28
    7886:	df 93       	push	r29
    7888:	cd b7       	in	r28, 0x3d	; 61
    788a:	de b7       	in	r29, 0x3e	; 62
    788c:	2b 97       	sbiw	r28, 0x0b	; 11
    788e:	0f b6       	in	r0, 0x3f	; 63
    7890:	f8 94       	cli
    7892:	de bf       	out	0x3e, r29	; 62
    7894:	0f be       	out	0x3f, r0	; 63
    7896:	cd bf       	out	0x3d, r28	; 61
    7898:	6c 01       	movw	r12, r24
    789a:	66 2e       	mov	r6, r22
    789c:	87 2e       	mov	r8, r23
    789e:	94 2e       	mov	r9, r20
    78a0:	15 2f       	mov	r17, r21
    78a2:	a2 2e       	mov	r10, r18
    78a4:	f0 2e       	mov	r15, r16
    78a6:	8a e6       	ldi	r24, 0x6A	; 106
    78a8:	9f e0       	ldi	r25, 0x0F	; 15
    78aa:	0e 94 f1 67 	call	0xcfe2	; 0xcfe2 <_ZN4Pads14getActiveScaleEv>
    78ae:	68 2f       	mov	r22, r24
    78b0:	8a e6       	ldi	r24, 0x6A	; 106
    78b2:	9f e0       	ldi	r25, 0x0F	; 15
    78b4:	0e 94 f2 68 	call	0xd1e4	; 0xd1e4 <_ZN4Pads11isUserScaleEh>
    78b8:	88 23       	and	r24, r24
    78ba:	89 f1       	breq	.+98     	; 0x791e <_ZN3LCD21displayActivePadNotesEPhPahb+0xba>
    78bc:	6b e6       	ldi	r22, 0x6B	; 107
    78be:	78 e0       	ldi	r23, 0x08	; 8
    78c0:	c6 01       	movw	r24, r12
    78c2:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    78c6:	00 23       	and	r16, r16
    78c8:	a9 f0       	breq	.+42     	; 0x78f4 <_ZN3LCD21displayActivePadNotesEPhPahb+0x90>
    78ca:	f6 01       	movw	r30, r12
    78cc:	ee 59       	subi	r30, 0x9E	; 158
    78ce:	fd 4f       	sbci	r31, 0xFD	; 253
    78d0:	60 81       	ld	r22, Z
    78d2:	d6 01       	movw	r26, r12
    78d4:	59 96       	adiw	r26, 0x19	; 25
    78d6:	1c 92       	st	X, r1
    78d8:	ee 24       	eor	r14, r14
    78da:	e3 94       	inc	r14
    78dc:	00 e0       	ldi	r16, 0x00	; 0
    78de:	20 e0       	ldi	r18, 0x00	; 0
    78e0:	a6 01       	movw	r20, r12
    78e2:	82 e6       	ldi	r24, 0x62	; 98
    78e4:	9c e0       	ldi	r25, 0x0C	; 12
    78e6:	0e 94 88 45 	call	0x8b10	; 0x8b10 <_ZN3LCD11displayTextEhPKchbb>
    78ea:	0f 2e       	mov	r0, r31
    78ec:	f9 e1       	ldi	r31, 0x19	; 25
    78ee:	7f 2e       	mov	r7, r31
    78f0:	f0 2d       	mov	r31, r0
    78f2:	16 c0       	rjmp	.+44     	; 0x7920 <_ZN3LCD21displayActivePadNotesEPhPahb+0xbc>
    78f4:	f6 01       	movw	r30, r12
    78f6:	ed 59       	subi	r30, 0x9D	; 157
    78f8:	fd 4f       	sbci	r31, 0xFD	; 253
    78fa:	20 81       	ld	r18, Z
    78fc:	31 97       	sbiw	r30, 0x01	; 1
    78fe:	60 81       	ld	r22, Z
    7900:	f6 01       	movw	r30, r12
    7902:	11 8e       	std	Z+25, r1	; 0x19
    7904:	ee 24       	eor	r14, r14
    7906:	e3 94       	inc	r14
    7908:	00 e0       	ldi	r16, 0x00	; 0
    790a:	a6 01       	movw	r20, r12
    790c:	82 e6       	ldi	r24, 0x62	; 98
    790e:	9c e0       	ldi	r25, 0x0C	; 12
    7910:	0e 94 88 45 	call	0x8b10	; 0x8b10 <_ZN3LCD11displayTextEhPKchbb>
    7914:	0f 2e       	mov	r0, r31
    7916:	f9 e1       	ldi	r31, 0x19	; 25
    7918:	7f 2e       	mov	r7, r31
    791a:	f0 2d       	mov	r31, r0
    791c:	01 c0       	rjmp	.+2      	; 0x7920 <_ZN3LCD21displayActivePadNotesEPhPahb+0xbc>
    791e:	71 2c       	mov	r7, r1
    7920:	8a e6       	ldi	r24, 0x6A	; 106
    7922:	9f e0       	ldi	r25, 0x0F	; 15
    7924:	0e 94 8c 56 	call	0xad18	; 0xad18 <_ZN4Pads14editModeActiveEv>
    7928:	81 11       	cpse	r24, r1
    792a:	0b c0       	rjmp	.+22     	; 0x7942 <_ZN3LCD21displayActivePadNotesEPhPahb+0xde>
    792c:	f6 01       	movw	r30, r12
    792e:	ed 59       	subi	r30, 0x9D	; 157
    7930:	fd 4f       	sbci	r31, 0xFD	; 253
    7932:	40 81       	ld	r20, Z
    7934:	31 97       	sbiw	r30, 0x01	; 1
    7936:	60 81       	ld	r22, Z
    7938:	82 e6       	ldi	r24, 0x62	; 98
    793a:	9c e0       	ldi	r25, 0x0C	; 12
    793c:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <_ZN3LCD14setScrollStartEhh>
    7940:	09 c0       	rjmp	.+18     	; 0x7954 <_ZN3LCD21displayActivePadNotesEPhPahb+0xf0>
    7942:	40 e0       	ldi	r20, 0x00	; 0
    7944:	f6 01       	movw	r30, r12
    7946:	ee 59       	subi	r30, 0x9E	; 158
    7948:	fd 4f       	sbci	r31, 0xFD	; 253
    794a:	60 81       	ld	r22, Z
    794c:	82 e6       	ldi	r24, 0x62	; 98
    794e:	9c e0       	ldi	r25, 0x0C	; 12
    7950:	0e 94 3d 46 	call	0x8c7a	; 0x8c7a <_ZN3LCD14setScrollStartEhh>
    7954:	aa 20       	and	r10, r10
    7956:	09 f4       	brne	.+2      	; 0x795a <_ZN3LCD21displayActivePadNotesEPhPahb+0xf6>
    7958:	a1 c0       	rjmp	.+322    	; 0x7a9c <_ZN3LCD21displayActivePadNotesEPhPahb+0x238>
    795a:	b1 2c       	mov	r11, r1
    795c:	1a 14       	cp	r1, r10
    795e:	1b 04       	cpc	r1, r11
    7960:	0c f0       	brlt	.+2      	; 0x7964 <_ZN3LCD21displayActivePadNotesEPhPahb+0x100>
    7962:	73 c0       	rjmp	.+230    	; 0x7a4a <_ZN3LCD21displayActivePadNotesEPhPahb+0x1e6>
    7964:	e6 2c       	mov	r14, r6
    7966:	f8 2c       	mov	r15, r8
    7968:	98 86       	std	Y+8, r9	; 0x08
    796a:	19 87       	std	Y+9, r17	; 0x09
    796c:	00 e0       	ldi	r16, 0x00	; 0
    796e:	10 e0       	ldi	r17, 0x00	; 0
    7970:	c6 01       	movw	r24, r12
    7972:	4f 96       	adiw	r24, 0x1f	; 31
    7974:	9b 87       	std	Y+11, r25	; 0x0b
    7976:	8a 87       	std	Y+10, r24	; 0x0a
    7978:	45 01       	movw	r8, r10
    797a:	91 e0       	ldi	r25, 0x01	; 1
    797c:	89 1a       	sub	r8, r25
    797e:	91 08       	sbc	r9, r1
    7980:	68 94       	set
    7982:	66 24       	eor	r6, r6
    7984:	65 f8       	bld	r6, 5
    7986:	d7 01       	movw	r26, r14
    7988:	ec 91       	ld	r30, X
    798a:	f0 e0       	ldi	r31, 0x00	; 0
    798c:	ee 0f       	add	r30, r30
    798e:	ff 1f       	adc	r31, r31
    7990:	ef 5a       	subi	r30, 0xAF	; 175
    7992:	f7 4f       	sbci	r31, 0xF7	; 247
    7994:	65 91       	lpm	r22, Z+
    7996:	74 91       	lpm	r23, Z
    7998:	8a 85       	ldd	r24, Y+10	; 0x0a
    799a:	9b 85       	ldd	r25, Y+11	; 0x0b
    799c:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    79a0:	01 15       	cp	r16, r1
    79a2:	11 05       	cpc	r17, r1
    79a4:	69 f0       	breq	.+26     	; 0x79c0 <_ZN3LCD21displayActivePadNotesEPhPahb+0x15c>
    79a6:	6a 85       	ldd	r22, Y+10	; 0x0a
    79a8:	7b 85       	ldd	r23, Y+11	; 0x0b
    79aa:	c6 01       	movw	r24, r12
    79ac:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
    79b0:	d7 01       	movw	r26, r14
    79b2:	ec 91       	ld	r30, X
    79b4:	f0 e0       	ldi	r31, 0x00	; 0
    79b6:	eb 5b       	subi	r30, 0xBB	; 187
    79b8:	f7 4f       	sbci	r31, 0xF7	; 247
    79ba:	e4 91       	lpm	r30, Z
    79bc:	7e 0e       	add	r7, r30
    79be:	0b c0       	rjmp	.+22     	; 0x79d6 <_ZN3LCD21displayActivePadNotesEPhPahb+0x172>
    79c0:	6a 85       	ldd	r22, Y+10	; 0x0a
    79c2:	7b 85       	ldd	r23, Y+11	; 0x0b
    79c4:	c6 01       	movw	r24, r12
    79c6:	0e 94 ca 82 	call	0x10594	; 0x10594 <strcpy>
    79ca:	d7 01       	movw	r26, r14
    79cc:	ec 91       	ld	r30, X
    79ce:	f0 e0       	ldi	r31, 0x00	; 0
    79d0:	eb 5b       	subi	r30, 0xBB	; 187
    79d2:	f7 4f       	sbci	r31, 0xF7	; 247
    79d4:	74 90       	lpm	r7, Z
    79d6:	e8 85       	ldd	r30, Y+8	; 0x08
    79d8:	f9 85       	ldd	r31, Y+9	; 0x09
    79da:	81 91       	ld	r24, Z+
    79dc:	f9 87       	std	Y+9, r31	; 0x09
    79de:	e8 87       	std	Y+8, r30	; 0x08
    79e0:	28 2e       	mov	r2, r24
    79e2:	08 2e       	mov	r0, r24
    79e4:	00 0c       	add	r0, r0
    79e6:	33 08       	sbc	r3, r3
    79e8:	44 08       	sbc	r4, r4
    79ea:	55 08       	sbc	r5, r5
    79ec:	4a e0       	ldi	r20, 0x0A	; 10
    79ee:	be 01       	movw	r22, r28
    79f0:	6f 5f       	subi	r22, 0xFF	; 255
    79f2:	7f 4f       	sbci	r23, 0xFF	; 255
    79f4:	08 2e       	mov	r0, r24
    79f6:	00 0c       	add	r0, r0
    79f8:	99 0b       	sbc	r25, r25
    79fa:	0e 94 e1 82 	call	0x105c2	; 0x105c2 <__itoa_ncheck>
    79fe:	fa e0       	ldi	r31, 0x0A	; 10
    7a00:	2f 16       	cp	r2, r31
    7a02:	31 04       	cpc	r3, r1
    7a04:	41 04       	cpc	r4, r1
    7a06:	51 04       	cpc	r5, r1
    7a08:	3c f0       	brlt	.+14     	; 0x7a18 <_ZN3LCD21displayActivePadNotesEPhPahb+0x1b4>
    7a0a:	84 e6       	ldi	r24, 0x64	; 100
    7a0c:	28 16       	cp	r2, r24
    7a0e:	31 04       	cpc	r3, r1
    7a10:	41 04       	cpc	r4, r1
    7a12:	51 04       	cpc	r5, r1
    7a14:	1c f0       	brlt	.+6      	; 0x7a1c <_ZN3LCD21displayActivePadNotesEPhPahb+0x1b8>
    7a16:	04 c0       	rjmp	.+8      	; 0x7a20 <_ZN3LCD21displayActivePadNotesEPhPahb+0x1bc>
    7a18:	81 e0       	ldi	r24, 0x01	; 1
    7a1a:	03 c0       	rjmp	.+6      	; 0x7a22 <_ZN3LCD21displayActivePadNotesEPhPahb+0x1be>
    7a1c:	82 e0       	ldi	r24, 0x02	; 2
    7a1e:	01 c0       	rjmp	.+2      	; 0x7a22 <_ZN3LCD21displayActivePadNotesEPhPahb+0x1be>
    7a20:	83 e0       	ldi	r24, 0x03	; 3
    7a22:	90 e0       	ldi	r25, 0x00	; 0
    7a24:	87 0d       	add	r24, r7
    7a26:	91 1d       	adc	r25, r1
    7a28:	78 2e       	mov	r7, r24
    7a2a:	55 20       	and	r5, r5
    7a2c:	0c f0       	brlt	.+2      	; 0x7a30 <_ZN3LCD21displayActivePadNotesEPhPahb+0x1cc>
    7a2e:	4d c0       	rjmp	.+154    	; 0x7aca <_ZN3LCD21displayActivePadNotesEPhPahb+0x266>
    7a30:	77 24       	eor	r7, r7
    7a32:	73 94       	inc	r7
    7a34:	78 0e       	add	r7, r24
    7a36:	49 c0       	rjmp	.+146    	; 0x7aca <_ZN3LCD21displayActivePadNotesEPhPahb+0x266>
    7a38:	0f 5f       	subi	r16, 0xFF	; 255
    7a3a:	1f 4f       	sbci	r17, 0xFF	; 255
    7a3c:	9f ef       	ldi	r25, 0xFF	; 255
    7a3e:	e9 1a       	sub	r14, r25
    7a40:	f9 0a       	sbc	r15, r25
    7a42:	0a 15       	cp	r16, r10
    7a44:	1b 05       	cpc	r17, r11
    7a46:	09 f0       	breq	.+2      	; 0x7a4a <_ZN3LCD21displayActivePadNotesEPhPahb+0x1e6>
    7a48:	9e cf       	rjmp	.-196    	; 0x7986 <_ZN3LCD21displayActivePadNotesEPhPahb+0x122>
    7a4a:	8a e6       	ldi	r24, 0x6A	; 106
    7a4c:	9f e0       	ldi	r25, 0x0F	; 15
    7a4e:	0e 94 8c 56 	call	0xad18	; 0xad18 <_ZN4Pads14editModeActiveEv>
    7a52:	88 23       	and	r24, r24
    7a54:	89 f0       	breq	.+34     	; 0x7a78 <_ZN3LCD21displayActivePadNotesEPhPahb+0x214>
    7a56:	f6 01       	movw	r30, r12
    7a58:	ee 59       	subi	r30, 0x9E	; 158
    7a5a:	fd 4f       	sbci	r31, 0xFD	; 253
    7a5c:	60 81       	ld	r22, Z
    7a5e:	f6 01       	movw	r30, r12
    7a60:	e7 0d       	add	r30, r7
    7a62:	f1 1d       	adc	r31, r1
    7a64:	10 82       	st	Z, r1
    7a66:	e1 2c       	mov	r14, r1
    7a68:	01 e0       	ldi	r16, 0x01	; 1
    7a6a:	20 e0       	ldi	r18, 0x00	; 0
    7a6c:	a6 01       	movw	r20, r12
    7a6e:	82 e6       	ldi	r24, 0x62	; 98
    7a70:	9c e0       	ldi	r25, 0x0C	; 12
    7a72:	0e 94 88 45 	call	0x8b10	; 0x8b10 <_ZN3LCD11displayTextEhPKchbb>
    7a76:	43 c0       	rjmp	.+134    	; 0x7afe <_ZN3LCD21displayActivePadNotesEPhPahb+0x29a>
    7a78:	f6 01       	movw	r30, r12
    7a7a:	ed 59       	subi	r30, 0x9D	; 157
    7a7c:	fd 4f       	sbci	r31, 0xFD	; 253
    7a7e:	20 81       	ld	r18, Z
    7a80:	31 97       	sbiw	r30, 0x01	; 1
    7a82:	60 81       	ld	r22, Z
    7a84:	f6 01       	movw	r30, r12
    7a86:	e7 0d       	add	r30, r7
    7a88:	f1 1d       	adc	r31, r1
    7a8a:	10 82       	st	Z, r1
    7a8c:	e1 2c       	mov	r14, r1
    7a8e:	00 e0       	ldi	r16, 0x00	; 0
    7a90:	a6 01       	movw	r20, r12
    7a92:	82 e6       	ldi	r24, 0x62	; 98
    7a94:	9c e0       	ldi	r25, 0x0C	; 12
    7a96:	0e 94 88 45 	call	0x8b10	; 0x8b10 <_ZN3LCD11displayTextEhPKchbb>
    7a9a:	31 c0       	rjmp	.+98     	; 0x7afe <_ZN3LCD21displayActivePadNotesEPhPahb+0x29a>
    7a9c:	ff 20       	and	r15, r15
    7a9e:	79 f1       	breq	.+94     	; 0x7afe <_ZN3LCD21displayActivePadNotesEPhPahb+0x29a>
    7aa0:	60 ec       	ldi	r22, 0xC0	; 192
    7aa2:	78 e0       	ldi	r23, 0x08	; 8
    7aa4:	c6 01       	movw	r24, r12
    7aa6:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    7aaa:	f6 01       	movw	r30, r12
    7aac:	ee 59       	subi	r30, 0x9E	; 158
    7aae:	fd 4f       	sbci	r31, 0xFD	; 253
    7ab0:	60 81       	ld	r22, Z
    7ab2:	d6 01       	movw	r26, r12
    7ab4:	53 96       	adiw	r26, 0x13	; 19
    7ab6:	1c 92       	st	X, r1
    7ab8:	e1 2c       	mov	r14, r1
    7aba:	01 e0       	ldi	r16, 0x01	; 1
    7abc:	20 e0       	ldi	r18, 0x00	; 0
    7abe:	a6 01       	movw	r20, r12
    7ac0:	82 e6       	ldi	r24, 0x62	; 98
    7ac2:	9c e0       	ldi	r25, 0x0C	; 12
    7ac4:	0e 94 88 45 	call	0x8b10	; 0x8b10 <_ZN3LCD11displayTextEhPKchbb>
    7ac8:	1a c0       	rjmp	.+52     	; 0x7afe <_ZN3LCD21displayActivePadNotesEPhPahb+0x29a>
    7aca:	be 01       	movw	r22, r28
    7acc:	6f 5f       	subi	r22, 0xFF	; 255
    7ace:	7f 4f       	sbci	r23, 0xFF	; 255
    7ad0:	c6 01       	movw	r24, r12
    7ad2:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
    7ad6:	87 2d       	mov	r24, r7
    7ad8:	90 e0       	ldi	r25, 0x00	; 0
    7ada:	f6 01       	movw	r30, r12
    7adc:	e8 0f       	add	r30, r24
    7ade:	f9 1f       	adc	r31, r25
    7ae0:	10 82       	st	Z, r1
    7ae2:	80 16       	cp	r8, r16
    7ae4:	91 06       	cpc	r9, r17
    7ae6:	09 f4       	brne	.+2      	; 0x7aea <_ZN3LCD21displayActivePadNotesEPhPahb+0x286>
    7ae8:	a7 cf       	rjmp	.-178    	; 0x7a38 <_ZN3LCD21displayActivePadNotesEPhPahb+0x1d4>
    7aea:	f6 01       	movw	r30, r12
    7aec:	e8 0f       	add	r30, r24
    7aee:	f9 1f       	adc	r31, r25
    7af0:	60 82       	st	Z, r6
    7af2:	73 94       	inc	r7
    7af4:	f6 01       	movw	r30, r12
    7af6:	e7 0d       	add	r30, r7
    7af8:	f1 1d       	adc	r31, r1
    7afa:	10 82       	st	Z, r1
    7afc:	9d cf       	rjmp	.-198    	; 0x7a38 <_ZN3LCD21displayActivePadNotesEPhPahb+0x1d4>
    7afe:	2b 96       	adiw	r28, 0x0b	; 11
    7b00:	0f b6       	in	r0, 0x3f	; 63
    7b02:	f8 94       	cli
    7b04:	de bf       	out	0x3e, r29	; 62
    7b06:	0f be       	out	0x3f, r0	; 63
    7b08:	cd bf       	out	0x3d, r28	; 61
    7b0a:	df 91       	pop	r29
    7b0c:	cf 91       	pop	r28
    7b0e:	1f 91       	pop	r17
    7b10:	0f 91       	pop	r16
    7b12:	ff 90       	pop	r15
    7b14:	ef 90       	pop	r14
    7b16:	df 90       	pop	r13
    7b18:	cf 90       	pop	r12
    7b1a:	bf 90       	pop	r11
    7b1c:	af 90       	pop	r10
    7b1e:	9f 90       	pop	r9
    7b20:	8f 90       	pop	r8
    7b22:	7f 90       	pop	r7
    7b24:	6f 90       	pop	r6
    7b26:	5f 90       	pop	r5
    7b28:	4f 90       	pop	r4
    7b2a:	3f 90       	pop	r3
    7b2c:	2f 90       	pop	r2
    7b2e:	08 95       	ret

00007b30 <_ZN3LCD19displayActiveOctaveEa>:
    7b30:	8f 92       	push	r8
    7b32:	9f 92       	push	r9
    7b34:	af 92       	push	r10
    7b36:	bf 92       	push	r11
    7b38:	cf 92       	push	r12
    7b3a:	df 92       	push	r13
    7b3c:	ef 92       	push	r14
    7b3e:	0f 93       	push	r16
    7b40:	1f 93       	push	r17
    7b42:	cf 93       	push	r28
    7b44:	df 93       	push	r29
    7b46:	cd b7       	in	r28, 0x3d	; 61
    7b48:	de b7       	in	r29, 0x3e	; 62
    7b4a:	27 97       	sbiw	r28, 0x07	; 7
    7b4c:	0f b6       	in	r0, 0x3f	; 63
    7b4e:	f8 94       	cli
    7b50:	de bf       	out	0x3e, r29	; 62
    7b52:	0f be       	out	0x3f, r0	; 63
    7b54:	cd bf       	out	0x3d, r28	; 61
    7b56:	6c 01       	movw	r12, r24
    7b58:	16 2f       	mov	r17, r22
    7b5a:	61 ea       	ldi	r22, 0xA1	; 161
    7b5c:	78 e0       	ldi	r23, 0x08	; 8
    7b5e:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    7b62:	81 2e       	mov	r8, r17
    7b64:	01 2e       	mov	r0, r17
    7b66:	00 0c       	add	r0, r0
    7b68:	99 08       	sbc	r9, r9
    7b6a:	aa 08       	sbc	r10, r10
    7b6c:	bb 08       	sbc	r11, r11
    7b6e:	4a e0       	ldi	r20, 0x0A	; 10
    7b70:	be 01       	movw	r22, r28
    7b72:	6f 5f       	subi	r22, 0xFF	; 255
    7b74:	7f 4f       	sbci	r23, 0xFF	; 255
    7b76:	81 2f       	mov	r24, r17
    7b78:	11 0f       	add	r17, r17
    7b7a:	99 0b       	sbc	r25, r25
    7b7c:	0e 94 e1 82 	call	0x105c2	; 0x105c2 <__itoa_ncheck>
    7b80:	8a e0       	ldi	r24, 0x0A	; 10
    7b82:	88 16       	cp	r8, r24
    7b84:	91 04       	cpc	r9, r1
    7b86:	a1 04       	cpc	r10, r1
    7b88:	b1 04       	cpc	r11, r1
    7b8a:	3c f0       	brlt	.+14     	; 0x7b9a <_ZN3LCD19displayActiveOctaveEa+0x6a>
    7b8c:	84 e6       	ldi	r24, 0x64	; 100
    7b8e:	88 16       	cp	r8, r24
    7b90:	91 04       	cpc	r9, r1
    7b92:	a1 04       	cpc	r10, r1
    7b94:	b1 04       	cpc	r11, r1
    7b96:	1c f0       	brlt	.+6      	; 0x7b9e <_ZN3LCD19displayActiveOctaveEa+0x6e>
    7b98:	04 c0       	rjmp	.+8      	; 0x7ba2 <_ZN3LCD19displayActiveOctaveEa+0x72>
    7b9a:	81 e0       	ldi	r24, 0x01	; 1
    7b9c:	03 c0       	rjmp	.+6      	; 0x7ba4 <_ZN3LCD19displayActiveOctaveEa+0x74>
    7b9e:	82 e0       	ldi	r24, 0x02	; 2
    7ba0:	01 c0       	rjmp	.+2      	; 0x7ba4 <_ZN3LCD19displayActiveOctaveEa+0x74>
    7ba2:	83 e0       	ldi	r24, 0x03	; 3
    7ba4:	90 e0       	ldi	r25, 0x00	; 0
    7ba6:	0f 96       	adiw	r24, 0x0f	; 15
    7ba8:	18 2f       	mov	r17, r24
    7baa:	bb 20       	and	r11, r11
    7bac:	14 f4       	brge	.+4      	; 0x7bb2 <_ZN3LCD19displayActiveOctaveEa+0x82>
    7bae:	11 e0       	ldi	r17, 0x01	; 1
    7bb0:	18 0f       	add	r17, r24
    7bb2:	be 01       	movw	r22, r28
    7bb4:	6f 5f       	subi	r22, 0xFF	; 255
    7bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    7bb8:	c6 01       	movw	r24, r12
    7bba:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
    7bbe:	f6 01       	movw	r30, r12
    7bc0:	e1 0f       	add	r30, r17
    7bc2:	f1 1d       	adc	r31, r1
    7bc4:	10 82       	st	Z, r1
    7bc6:	d6 01       	movw	r26, r12
    7bc8:	ab 59       	subi	r26, 0x9B	; 155
    7bca:	bd 4f       	sbci	r27, 0xFD	; 253
    7bcc:	f6 01       	movw	r30, r12
    7bce:	ec 59       	subi	r30, 0x9C	; 156
    7bd0:	fd 4f       	sbci	r31, 0xFD	; 253
    7bd2:	e1 2c       	mov	r14, r1
    7bd4:	01 e0       	ldi	r16, 0x01	; 1
    7bd6:	2c 91       	ld	r18, X
    7bd8:	a6 01       	movw	r20, r12
    7bda:	60 81       	ld	r22, Z
    7bdc:	82 e6       	ldi	r24, 0x62	; 98
    7bde:	9c e0       	ldi	r25, 0x0C	; 12
    7be0:	97 d7       	rcall	.+3886   	; 0x8b10 <_ZN3LCD11displayTextEhPKchbb>
    7be2:	27 96       	adiw	r28, 0x07	; 7
    7be4:	0f b6       	in	r0, 0x3f	; 63
    7be6:	f8 94       	cli
    7be8:	de bf       	out	0x3e, r29	; 62
    7bea:	0f be       	out	0x3f, r0	; 63
    7bec:	cd bf       	out	0x3d, r28	; 61
    7bee:	df 91       	pop	r29
    7bf0:	cf 91       	pop	r28
    7bf2:	1f 91       	pop	r17
    7bf4:	0f 91       	pop	r16
    7bf6:	ef 90       	pop	r14
    7bf8:	df 90       	pop	r13
    7bfa:	cf 90       	pop	r12
    7bfc:	bf 90       	pop	r11
    7bfe:	af 90       	pop	r10
    7c00:	9f 90       	pop	r9
    7c02:	8f 90       	pop	r8
    7c04:	08 95       	ret

00007c06 <_ZN3LCD18displayPadEditModeEh>:
    7c06:	8f 92       	push	r8
    7c08:	9f 92       	push	r9
    7c0a:	af 92       	push	r10
    7c0c:	bf 92       	push	r11
    7c0e:	cf 92       	push	r12
    7c10:	df 92       	push	r13
    7c12:	ef 92       	push	r14
    7c14:	0f 93       	push	r16
    7c16:	1f 93       	push	r17
    7c18:	cf 93       	push	r28
    7c1a:	df 93       	push	r29
    7c1c:	cd b7       	in	r28, 0x3d	; 61
    7c1e:	de b7       	in	r29, 0x3e	; 62
    7c20:	27 97       	sbiw	r28, 0x07	; 7
    7c22:	0f b6       	in	r0, 0x3f	; 63
    7c24:	f8 94       	cli
    7c26:	de bf       	out	0x3e, r29	; 62
    7c28:	0f be       	out	0x3f, r0	; 63
    7c2a:	cd bf       	out	0x3d, r28	; 61
    7c2c:	6c 01       	movw	r12, r24
    7c2e:	16 2f       	mov	r17, r22
    7c30:	64 e0       	ldi	r22, 0x04	; 4
    7c32:	75 e0       	ldi	r23, 0x05	; 5
    7c34:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    7c38:	80 e2       	ldi	r24, 0x20	; 32
    7c3a:	f6 01       	movw	r30, r12
    7c3c:	83 87       	std	Z+11, r24	; 0x0b
    7c3e:	14 86       	std	Z+12, r1	; 0x0c
    7c40:	81 2e       	mov	r8, r17
    7c42:	91 2c       	mov	r9, r1
    7c44:	a1 2c       	mov	r10, r1
    7c46:	b1 2c       	mov	r11, r1
    7c48:	4a e0       	ldi	r20, 0x0A	; 10
    7c4a:	be 01       	movw	r22, r28
    7c4c:	6f 5f       	subi	r22, 0xFF	; 255
    7c4e:	7f 4f       	sbci	r23, 0xFF	; 255
    7c50:	81 2f       	mov	r24, r17
    7c52:	90 e0       	ldi	r25, 0x00	; 0
    7c54:	0e 94 e1 82 	call	0x105c2	; 0x105c2 <__itoa_ncheck>
    7c58:	fa e0       	ldi	r31, 0x0A	; 10
    7c5a:	8f 16       	cp	r8, r31
    7c5c:	91 04       	cpc	r9, r1
    7c5e:	a1 04       	cpc	r10, r1
    7c60:	b1 04       	cpc	r11, r1
    7c62:	3c f0       	brlt	.+14     	; 0x7c72 <_ZN3LCD18displayPadEditModeEh+0x6c>
    7c64:	84 e6       	ldi	r24, 0x64	; 100
    7c66:	88 16       	cp	r8, r24
    7c68:	91 04       	cpc	r9, r1
    7c6a:	a1 04       	cpc	r10, r1
    7c6c:	b1 04       	cpc	r11, r1
    7c6e:	1c f0       	brlt	.+6      	; 0x7c76 <_ZN3LCD18displayPadEditModeEh+0x70>
    7c70:	04 c0       	rjmp	.+8      	; 0x7c7a <_ZN3LCD18displayPadEditModeEh+0x74>
    7c72:	11 e0       	ldi	r17, 0x01	; 1
    7c74:	03 c0       	rjmp	.+6      	; 0x7c7c <_ZN3LCD18displayPadEditModeEh+0x76>
    7c76:	12 e0       	ldi	r17, 0x02	; 2
    7c78:	01 c0       	rjmp	.+2      	; 0x7c7c <_ZN3LCD18displayPadEditModeEh+0x76>
    7c7a:	13 e0       	ldi	r17, 0x03	; 3
    7c7c:	be 01       	movw	r22, r28
    7c7e:	6f 5f       	subi	r22, 0xFF	; 255
    7c80:	7f 4f       	sbci	r23, 0xFF	; 255
    7c82:	c6 01       	movw	r24, r12
    7c84:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
    7c88:	f6 01       	movw	r30, r12
    7c8a:	e1 0f       	add	r30, r17
    7c8c:	f1 1d       	adc	r31, r1
    7c8e:	14 86       	std	Z+12, r1	; 0x0c
    7c90:	e1 2c       	mov	r14, r1
    7c92:	01 e0       	ldi	r16, 0x01	; 1
    7c94:	20 e0       	ldi	r18, 0x00	; 0
    7c96:	a6 01       	movw	r20, r12
    7c98:	60 e0       	ldi	r22, 0x00	; 0
    7c9a:	82 e6       	ldi	r24, 0x62	; 98
    7c9c:	9c e0       	ldi	r25, 0x0C	; 12
    7c9e:	38 d7       	rcall	.+3696   	; 0x8b10 <_ZN3LCD11displayTextEhPKchbb>
    7ca0:	6c e2       	ldi	r22, 0x2C	; 44
    7ca2:	75 e0       	ldi	r23, 0x05	; 5
    7ca4:	c6 01       	movw	r24, r12
    7ca6:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    7caa:	f6 01       	movw	r30, r12
    7cac:	14 8a       	std	Z+20, r1	; 0x14
    7cae:	20 e0       	ldi	r18, 0x00	; 0
    7cb0:	a6 01       	movw	r20, r12
    7cb2:	61 e0       	ldi	r22, 0x01	; 1
    7cb4:	82 e6       	ldi	r24, 0x62	; 98
    7cb6:	9c e0       	ldi	r25, 0x0C	; 12
    7cb8:	2b d7       	rcall	.+3670   	; 0x8b10 <_ZN3LCD11displayTextEhPKchbb>
    7cba:	f6 01       	movw	r30, r12
    7cbc:	14 8a       	std	Z+20, r1	; 0x14
    7cbe:	20 e0       	ldi	r18, 0x00	; 0
    7cc0:	a6 01       	movw	r20, r12
    7cc2:	62 e0       	ldi	r22, 0x02	; 2
    7cc4:	82 e6       	ldi	r24, 0x62	; 98
    7cc6:	9c e0       	ldi	r25, 0x0C	; 12
    7cc8:	23 d7       	rcall	.+3654   	; 0x8b10 <_ZN3LCD11displayTextEhPKchbb>
    7cca:	f6 01       	movw	r30, r12
    7ccc:	14 8a       	std	Z+20, r1	; 0x14
    7cce:	20 e0       	ldi	r18, 0x00	; 0
    7cd0:	a6 01       	movw	r20, r12
    7cd2:	63 e0       	ldi	r22, 0x03	; 3
    7cd4:	82 e6       	ldi	r24, 0x62	; 98
    7cd6:	9c e0       	ldi	r25, 0x0C	; 12
    7cd8:	1b d7       	rcall	.+3638   	; 0x8b10 <_ZN3LCD11displayTextEhPKchbb>
    7cda:	27 96       	adiw	r28, 0x07	; 7
    7cdc:	0f b6       	in	r0, 0x3f	; 63
    7cde:	f8 94       	cli
    7ce0:	de bf       	out	0x3e, r29	; 62
    7ce2:	0f be       	out	0x3f, r0	; 63
    7ce4:	cd bf       	out	0x3d, r28	; 61
    7ce6:	df 91       	pop	r29
    7ce8:	cf 91       	pop	r28
    7cea:	1f 91       	pop	r17
    7cec:	0f 91       	pop	r16
    7cee:	ef 90       	pop	r14
    7cf0:	df 90       	pop	r13
    7cf2:	cf 90       	pop	r12
    7cf4:	bf 90       	pop	r11
    7cf6:	af 90       	pop	r10
    7cf8:	9f 90       	pop	r9
    7cfa:	8f 90       	pop	r8
    7cfc:	08 95       	ret

00007cfe <_ZN3LCD10displayPadEh>:
    7cfe:	8f 92       	push	r8
    7d00:	9f 92       	push	r9
    7d02:	af 92       	push	r10
    7d04:	bf 92       	push	r11
    7d06:	cf 92       	push	r12
    7d08:	df 92       	push	r13
    7d0a:	ef 92       	push	r14
    7d0c:	0f 93       	push	r16
    7d0e:	1f 93       	push	r17
    7d10:	cf 93       	push	r28
    7d12:	df 93       	push	r29
    7d14:	cd b7       	in	r28, 0x3d	; 61
    7d16:	de b7       	in	r29, 0x3e	; 62
    7d18:	27 97       	sbiw	r28, 0x07	; 7
    7d1a:	0f b6       	in	r0, 0x3f	; 63
    7d1c:	f8 94       	cli
    7d1e:	de bf       	out	0x3e, r29	; 62
    7d20:	0f be       	out	0x3f, r0	; 63
    7d22:	cd bf       	out	0x3d, r28	; 61
    7d24:	6c 01       	movw	r12, r24
    7d26:	16 2f       	mov	r17, r22
    7d28:	6a e4       	ldi	r22, 0x4A	; 74
    7d2a:	75 e0       	ldi	r23, 0x05	; 5
    7d2c:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    7d30:	81 2e       	mov	r8, r17
    7d32:	91 2c       	mov	r9, r1
    7d34:	a1 2c       	mov	r10, r1
    7d36:	b1 2c       	mov	r11, r1
    7d38:	4a e0       	ldi	r20, 0x0A	; 10
    7d3a:	be 01       	movw	r22, r28
    7d3c:	6f 5f       	subi	r22, 0xFF	; 255
    7d3e:	7f 4f       	sbci	r23, 0xFF	; 255
    7d40:	81 2f       	mov	r24, r17
    7d42:	90 e0       	ldi	r25, 0x00	; 0
    7d44:	0e 94 e1 82 	call	0x105c2	; 0x105c2 <__itoa_ncheck>
    7d48:	8a e0       	ldi	r24, 0x0A	; 10
    7d4a:	88 16       	cp	r8, r24
    7d4c:	91 04       	cpc	r9, r1
    7d4e:	a1 04       	cpc	r10, r1
    7d50:	b1 04       	cpc	r11, r1
    7d52:	3c f0       	brlt	.+14     	; 0x7d62 <_ZN3LCD10displayPadEh+0x64>
    7d54:	84 e6       	ldi	r24, 0x64	; 100
    7d56:	88 16       	cp	r8, r24
    7d58:	91 04       	cpc	r9, r1
    7d5a:	a1 04       	cpc	r10, r1
    7d5c:	b1 04       	cpc	r11, r1
    7d5e:	1c f0       	brlt	.+6      	; 0x7d66 <_ZN3LCD10displayPadEh+0x68>
    7d60:	04 c0       	rjmp	.+8      	; 0x7d6a <_ZN3LCD10displayPadEh+0x6c>
    7d62:	11 e0       	ldi	r17, 0x01	; 1
    7d64:	03 c0       	rjmp	.+6      	; 0x7d6c <_ZN3LCD10displayPadEh+0x6e>
    7d66:	12 e0       	ldi	r17, 0x02	; 2
    7d68:	01 c0       	rjmp	.+2      	; 0x7d6c <_ZN3LCD10displayPadEh+0x6e>
    7d6a:	13 e0       	ldi	r17, 0x03	; 3
    7d6c:	be 01       	movw	r22, r28
    7d6e:	6f 5f       	subi	r22, 0xFF	; 255
    7d70:	7f 4f       	sbci	r23, 0xFF	; 255
    7d72:	c6 01       	movw	r24, r12
    7d74:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
    7d78:	f6 01       	movw	r30, r12
    7d7a:	e1 0f       	add	r30, r17
    7d7c:	f1 1d       	adc	r31, r1
    7d7e:	13 82       	std	Z+3, r1	; 0x03
    7d80:	d6 01       	movw	r26, r12
    7d82:	a3 5a       	subi	r26, 0xA3	; 163
    7d84:	bd 4f       	sbci	r27, 0xFD	; 253
    7d86:	f6 01       	movw	r30, r12
    7d88:	e4 5a       	subi	r30, 0xA4	; 164
    7d8a:	fd 4f       	sbci	r31, 0xFD	; 253
    7d8c:	e1 2c       	mov	r14, r1
    7d8e:	00 e0       	ldi	r16, 0x00	; 0
    7d90:	2c 91       	ld	r18, X
    7d92:	a6 01       	movw	r20, r12
    7d94:	60 81       	ld	r22, Z
    7d96:	82 e6       	ldi	r24, 0x62	; 98
    7d98:	9c e0       	ldi	r25, 0x0C	; 12
    7d9a:	ba d6       	rcall	.+3444   	; 0x8b10 <_ZN3LCD11displayTextEhPKchbb>
    7d9c:	27 96       	adiw	r28, 0x07	; 7
    7d9e:	0f b6       	in	r0, 0x3f	; 63
    7da0:	f8 94       	cli
    7da2:	de bf       	out	0x3e, r29	; 62
    7da4:	0f be       	out	0x3f, r0	; 63
    7da6:	cd bf       	out	0x3d, r28	; 61
    7da8:	df 91       	pop	r29
    7daa:	cf 91       	pop	r28
    7dac:	1f 91       	pop	r17
    7dae:	0f 91       	pop	r16
    7db0:	ef 90       	pop	r14
    7db2:	df 90       	pop	r13
    7db4:	cf 90       	pop	r12
    7db6:	bf 90       	pop	r11
    7db8:	af 90       	pop	r10
    7dba:	9f 90       	pop	r9
    7dbc:	8f 90       	pop	r8
    7dbe:	08 95       	ret

00007dc0 <_ZN3LCD18displayMIDIchannelEh>:
    7dc0:	8f 92       	push	r8
    7dc2:	9f 92       	push	r9
    7dc4:	af 92       	push	r10
    7dc6:	bf 92       	push	r11
    7dc8:	cf 92       	push	r12
    7dca:	df 92       	push	r13
    7dcc:	ef 92       	push	r14
    7dce:	ff 92       	push	r15
    7dd0:	0f 93       	push	r16
    7dd2:	1f 93       	push	r17
    7dd4:	cf 93       	push	r28
    7dd6:	df 93       	push	r29
    7dd8:	cd b7       	in	r28, 0x3d	; 61
    7dda:	de b7       	in	r29, 0x3e	; 62
    7ddc:	27 97       	sbiw	r28, 0x07	; 7
    7dde:	0f b6       	in	r0, 0x3f	; 63
    7de0:	f8 94       	cli
    7de2:	de bf       	out	0x3e, r29	; 62
    7de4:	0f be       	out	0x3f, r0	; 63
    7de6:	cd bf       	out	0x3d, r28	; 61
    7de8:	6c 01       	movw	r12, r24
    7dea:	f6 2e       	mov	r15, r22
    7dec:	6b ef       	ldi	r22, 0xFB	; 251
    7dee:	74 e0       	ldi	r23, 0x04	; 4
    7df0:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    7df4:	8f 2c       	mov	r8, r15
    7df6:	91 2c       	mov	r9, r1
    7df8:	a1 2c       	mov	r10, r1
    7dfa:	b1 2c       	mov	r11, r1
    7dfc:	4a e0       	ldi	r20, 0x0A	; 10
    7dfe:	be 01       	movw	r22, r28
    7e00:	6f 5f       	subi	r22, 0xFF	; 255
    7e02:	7f 4f       	sbci	r23, 0xFF	; 255
    7e04:	8f 2d       	mov	r24, r15
    7e06:	90 e0       	ldi	r25, 0x00	; 0
    7e08:	0e 94 e1 82 	call	0x105c2	; 0x105c2 <__itoa_ncheck>
    7e0c:	2a e0       	ldi	r18, 0x0A	; 10
    7e0e:	82 16       	cp	r8, r18
    7e10:	91 04       	cpc	r9, r1
    7e12:	a1 04       	cpc	r10, r1
    7e14:	b1 04       	cpc	r11, r1
    7e16:	c4 f0       	brlt	.+48     	; 0x7e48 <_ZN3LCD18displayMIDIchannelEh+0x88>
    7e18:	84 e6       	ldi	r24, 0x64	; 100
    7e1a:	88 16       	cp	r8, r24
    7e1c:	91 04       	cpc	r9, r1
    7e1e:	a1 04       	cpc	r10, r1
    7e20:	b1 04       	cpc	r11, r1
    7e22:	a4 f0       	brlt	.+40     	; 0x7e4c <_ZN3LCD18displayMIDIchannelEh+0x8c>
    7e24:	15 c0       	rjmp	.+42     	; 0x7e50 <_ZN3LCD18displayMIDIchannelEh+0x90>
    7e26:	f6 01       	movw	r30, r12
    7e28:	e1 5a       	subi	r30, 0xA1	; 161
    7e2a:	fd 4f       	sbci	r31, 0xFD	; 253
    7e2c:	20 81       	ld	r18, Z
    7e2e:	31 97       	sbiw	r30, 0x01	; 1
    7e30:	60 81       	ld	r22, Z
    7e32:	f6 01       	movw	r30, r12
    7e34:	ee 0d       	add	r30, r14
    7e36:	f1 1d       	adc	r31, r1
    7e38:	10 82       	st	Z, r1
    7e3a:	e1 2c       	mov	r14, r1
    7e3c:	00 e0       	ldi	r16, 0x00	; 0
    7e3e:	a6 01       	movw	r20, r12
    7e40:	82 e6       	ldi	r24, 0x62	; 98
    7e42:	9c e0       	ldi	r25, 0x0C	; 12
    7e44:	65 d6       	rcall	.+3274   	; 0x8b10 <_ZN3LCD11displayTextEhPKchbb>
    7e46:	25 c0       	rjmp	.+74     	; 0x7e92 <_ZN3LCD18displayMIDIchannelEh+0xd2>
    7e48:	01 e0       	ldi	r16, 0x01	; 1
    7e4a:	03 c0       	rjmp	.+6      	; 0x7e52 <_ZN3LCD18displayMIDIchannelEh+0x92>
    7e4c:	02 e0       	ldi	r16, 0x02	; 2
    7e4e:	01 c0       	rjmp	.+2      	; 0x7e52 <_ZN3LCD18displayMIDIchannelEh+0x92>
    7e50:	03 e0       	ldi	r16, 0x03	; 3
    7e52:	10 e0       	ldi	r17, 0x00	; 0
    7e54:	0e 5f       	subi	r16, 0xFE	; 254
    7e56:	1f 4f       	sbci	r17, 0xFF	; 255
    7e58:	e0 2e       	mov	r14, r16
    7e5a:	be 01       	movw	r22, r28
    7e5c:	6f 5f       	subi	r22, 0xFF	; 255
    7e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    7e60:	c6 01       	movw	r24, r12
    7e62:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
    7e66:	c8 01       	movw	r24, r16
    7e68:	99 27       	eor	r25, r25
    7e6a:	f6 01       	movw	r30, r12
    7e6c:	e8 0f       	add	r30, r24
    7e6e:	f9 1f       	adc	r31, r25
    7e70:	10 82       	st	Z, r1
    7e72:	29 e0       	ldi	r18, 0x09	; 9
    7e74:	2f 15       	cp	r18, r15
    7e76:	b8 f2       	brcs	.-82     	; 0x7e26 <_ZN3LCD18displayMIDIchannelEh+0x66>
    7e78:	f6 01       	movw	r30, r12
    7e7a:	e8 0f       	add	r30, r24
    7e7c:	f9 1f       	adc	r31, r25
    7e7e:	20 e2       	ldi	r18, 0x20	; 32
    7e80:	20 83       	st	Z, r18
    7e82:	ee 24       	eor	r14, r14
    7e84:	e3 94       	inc	r14
    7e86:	e0 0e       	add	r14, r16
    7e88:	f6 01       	movw	r30, r12
    7e8a:	ee 0d       	add	r30, r14
    7e8c:	f1 1d       	adc	r31, r1
    7e8e:	10 82       	st	Z, r1
    7e90:	ca cf       	rjmp	.-108    	; 0x7e26 <_ZN3LCD18displayMIDIchannelEh+0x66>
    7e92:	27 96       	adiw	r28, 0x07	; 7
    7e94:	0f b6       	in	r0, 0x3f	; 63
    7e96:	f8 94       	cli
    7e98:	de bf       	out	0x3e, r29	; 62
    7e9a:	0f be       	out	0x3f, r0	; 63
    7e9c:	cd bf       	out	0x3d, r28	; 61
    7e9e:	df 91       	pop	r29
    7ea0:	cf 91       	pop	r28
    7ea2:	1f 91       	pop	r17
    7ea4:	0f 91       	pop	r16
    7ea6:	ff 90       	pop	r15
    7ea8:	ef 90       	pop	r14
    7eaa:	df 90       	pop	r13
    7eac:	cf 90       	pop	r12
    7eae:	bf 90       	pop	r11
    7eb0:	af 90       	pop	r10
    7eb2:	9f 90       	pop	r9
    7eb4:	8f 90       	pop	r8
    7eb6:	08 95       	ret

00007eb8 <_ZN3LCD15clearAftertouchEv>:
    7eb8:	ef 92       	push	r14
    7eba:	0f 93       	push	r16
    7ebc:	cf 93       	push	r28
    7ebe:	df 93       	push	r29
    7ec0:	ec 01       	movw	r28, r24
    7ec2:	6e ef       	ldi	r22, 0xFE	; 254
    7ec4:	74 e0       	ldi	r23, 0x04	; 4
    7ec6:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    7eca:	fe 01       	movw	r30, r28
    7ecc:	e5 5a       	subi	r30, 0xA5	; 165
    7ece:	fd 4f       	sbci	r31, 0xFD	; 253
    7ed0:	20 81       	ld	r18, Z
    7ed2:	31 97       	sbiw	r30, 0x01	; 1
    7ed4:	60 81       	ld	r22, Z
    7ed6:	1d 82       	std	Y+5, r1	; 0x05
    7ed8:	e1 2c       	mov	r14, r1
    7eda:	00 e0       	ldi	r16, 0x00	; 0
    7edc:	ae 01       	movw	r20, r28
    7ede:	82 e6       	ldi	r24, 0x62	; 98
    7ee0:	9c e0       	ldi	r25, 0x0C	; 12
    7ee2:	16 d6       	rcall	.+3116   	; 0x8b10 <_ZN3LCD11displayTextEhPKchbb>
    7ee4:	df 91       	pop	r29
    7ee6:	cf 91       	pop	r28
    7ee8:	0f 91       	pop	r16
    7eea:	ef 90       	pop	r14
    7eec:	08 95       	ret

00007eee <_ZN3LCD15clearXYpositionE16coordinateType_t>:
    7eee:	ef 92       	push	r14
    7ef0:	0f 93       	push	r16
    7ef2:	1f 93       	push	r17
    7ef4:	cf 93       	push	r28
    7ef6:	df 93       	push	r29
    7ef8:	ec 01       	movw	r28, r24
    7efa:	16 2f       	mov	r17, r22
    7efc:	6c e8       	ldi	r22, 0x8C	; 140
    7efe:	75 e0       	ldi	r23, 0x05	; 5
    7f00:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    7f04:	11 23       	and	r17, r17
    7f06:	19 f0       	breq	.+6      	; 0x7f0e <_ZN3LCD15clearXYpositionE16coordinateType_t+0x20>
    7f08:	11 30       	cpi	r17, 0x01	; 1
    7f0a:	79 f0       	breq	.+30     	; 0x7f2a <_ZN3LCD15clearXYpositionE16coordinateType_t+0x3c>
    7f0c:	1b c0       	rjmp	.+54     	; 0x7f44 <_ZN3LCD15clearXYpositionE16coordinateType_t+0x56>
    7f0e:	fe 01       	movw	r30, r28
    7f10:	eb 5a       	subi	r30, 0xAB	; 171
    7f12:	fd 4f       	sbci	r31, 0xFD	; 253
    7f14:	20 81       	ld	r18, Z
    7f16:	31 97       	sbiw	r30, 0x01	; 1
    7f18:	60 81       	ld	r22, Z
    7f1a:	1c 82       	std	Y+4, r1	; 0x04
    7f1c:	e1 2c       	mov	r14, r1
    7f1e:	00 e0       	ldi	r16, 0x00	; 0
    7f20:	ae 01       	movw	r20, r28
    7f22:	82 e6       	ldi	r24, 0x62	; 98
    7f24:	9c e0       	ldi	r25, 0x0C	; 12
    7f26:	f4 d5       	rcall	.+3048   	; 0x8b10 <_ZN3LCD11displayTextEhPKchbb>
    7f28:	0d c0       	rjmp	.+26     	; 0x7f44 <_ZN3LCD15clearXYpositionE16coordinateType_t+0x56>
    7f2a:	fe 01       	movw	r30, r28
    7f2c:	e9 5a       	subi	r30, 0xA9	; 169
    7f2e:	fd 4f       	sbci	r31, 0xFD	; 253
    7f30:	20 81       	ld	r18, Z
    7f32:	31 97       	sbiw	r30, 0x01	; 1
    7f34:	60 81       	ld	r22, Z
    7f36:	1c 82       	std	Y+4, r1	; 0x04
    7f38:	e1 2c       	mov	r14, r1
    7f3a:	00 e0       	ldi	r16, 0x00	; 0
    7f3c:	ae 01       	movw	r20, r28
    7f3e:	82 e6       	ldi	r24, 0x62	; 98
    7f40:	9c e0       	ldi	r25, 0x0C	; 12
    7f42:	e6 d5       	rcall	.+3020   	; 0x8b10 <_ZN3LCD11displayTextEhPKchbb>
    7f44:	df 91       	pop	r29
    7f46:	cf 91       	pop	r28
    7f48:	1f 91       	pop	r17
    7f4a:	0f 91       	pop	r16
    7f4c:	ef 90       	pop	r14
    7f4e:	08 95       	ret

00007f50 <_ZN3LCD9clearXYccE16coordinateType_t>:
    7f50:	ef 92       	push	r14
    7f52:	0f 93       	push	r16
    7f54:	1f 93       	push	r17
    7f56:	cf 93       	push	r28
    7f58:	df 93       	push	r29
    7f5a:	ec 01       	movw	r28, r24
    7f5c:	16 2f       	mov	r17, r22
    7f5e:	65 e8       	ldi	r22, 0x85	; 133
    7f60:	75 e0       	ldi	r23, 0x05	; 5
    7f62:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    7f66:	11 23       	and	r17, r17
    7f68:	19 f0       	breq	.+6      	; 0x7f70 <_ZN3LCD9clearXYccE16coordinateType_t+0x20>
    7f6a:	11 30       	cpi	r17, 0x01	; 1
    7f6c:	79 f0       	breq	.+30     	; 0x7f8c <_ZN3LCD9clearXYccE16coordinateType_t+0x3c>
    7f6e:	1b c0       	rjmp	.+54     	; 0x7fa6 <_ZN3LCD9clearXYccE16coordinateType_t+0x56>
    7f70:	fe 01       	movw	r30, r28
    7f72:	ef 5a       	subi	r30, 0xAF	; 175
    7f74:	fd 4f       	sbci	r31, 0xFD	; 253
    7f76:	20 81       	ld	r18, Z
    7f78:	31 97       	sbiw	r30, 0x01	; 1
    7f7a:	60 81       	ld	r22, Z
    7f7c:	1e 82       	std	Y+6, r1	; 0x06
    7f7e:	e1 2c       	mov	r14, r1
    7f80:	00 e0       	ldi	r16, 0x00	; 0
    7f82:	ae 01       	movw	r20, r28
    7f84:	82 e6       	ldi	r24, 0x62	; 98
    7f86:	9c e0       	ldi	r25, 0x0C	; 12
    7f88:	c3 d5       	rcall	.+2950   	; 0x8b10 <_ZN3LCD11displayTextEhPKchbb>
    7f8a:	0d c0       	rjmp	.+26     	; 0x7fa6 <_ZN3LCD9clearXYccE16coordinateType_t+0x56>
    7f8c:	fe 01       	movw	r30, r28
    7f8e:	ed 5a       	subi	r30, 0xAD	; 173
    7f90:	fd 4f       	sbci	r31, 0xFD	; 253
    7f92:	20 81       	ld	r18, Z
    7f94:	31 97       	sbiw	r30, 0x01	; 1
    7f96:	60 81       	ld	r22, Z
    7f98:	1e 82       	std	Y+6, r1	; 0x06
    7f9a:	e1 2c       	mov	r14, r1
    7f9c:	00 e0       	ldi	r16, 0x00	; 0
    7f9e:	ae 01       	movw	r20, r28
    7fa0:	82 e6       	ldi	r24, 0x62	; 98
    7fa2:	9c e0       	ldi	r25, 0x0C	; 12
    7fa4:	b5 d5       	rcall	.+2922   	; 0x8b10 <_ZN3LCD11displayTextEhPKchbb>
    7fa6:	df 91       	pop	r29
    7fa8:	cf 91       	pop	r28
    7faa:	1f 91       	pop	r17
    7fac:	0f 91       	pop	r16
    7fae:	ef 90       	pop	r14
    7fb0:	08 95       	ret

00007fb2 <_ZN3LCD16clearPadEditModeEv>:
    7fb2:	cf 92       	push	r12
    7fb4:	df 92       	push	r13
    7fb6:	ef 92       	push	r14
    7fb8:	0f 93       	push	r16
    7fba:	1f 93       	push	r17
    7fbc:	cf 93       	push	r28
    7fbe:	df 93       	push	r29
    7fc0:	6c 01       	movw	r12, r24
    7fc2:	18 2f       	mov	r17, r24
    7fc4:	dd 2d       	mov	r29, r13
    7fc6:	6c e2       	ldi	r22, 0x2C	; 44
    7fc8:	75 e0       	ldi	r23, 0x05	; 5
    7fca:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    7fce:	c0 e0       	ldi	r28, 0x00	; 0
    7fd0:	f6 01       	movw	r30, r12
    7fd2:	14 8a       	std	Z+20, r1	; 0x14
    7fd4:	e1 2c       	mov	r14, r1
    7fd6:	01 e0       	ldi	r16, 0x01	; 1
    7fd8:	20 e0       	ldi	r18, 0x00	; 0
    7fda:	41 2f       	mov	r20, r17
    7fdc:	5d 2f       	mov	r21, r29
    7fde:	6c 2f       	mov	r22, r28
    7fe0:	82 e6       	ldi	r24, 0x62	; 98
    7fe2:	9c e0       	ldi	r25, 0x0C	; 12
    7fe4:	95 d5       	rcall	.+2858   	; 0x8b10 <_ZN3LCD11displayTextEhPKchbb>
    7fe6:	cf 5f       	subi	r28, 0xFF	; 255
    7fe8:	c4 30       	cpi	r28, 0x04	; 4
    7fea:	91 f7       	brne	.-28     	; 0x7fd0 <_ZN3LCD16clearPadEditModeEv+0x1e>
    7fec:	df 91       	pop	r29
    7fee:	cf 91       	pop	r28
    7ff0:	1f 91       	pop	r17
    7ff2:	0f 91       	pop	r16
    7ff4:	ef 90       	pop	r14
    7ff6:	df 90       	pop	r13
    7ff8:	cf 90       	pop	r12
    7ffa:	08 95       	ret

00007ffc <_ZN3LCD12clearPadDataEv>:
    7ffc:	cf 92       	push	r12
    7ffe:	df 92       	push	r13
    8000:	ef 92       	push	r14
    8002:	0f 93       	push	r16
    8004:	1f 93       	push	r17
    8006:	cf 93       	push	r28
    8008:	df 93       	push	r29
    800a:	6c 01       	movw	r12, r24
    800c:	18 2f       	mov	r17, r24
    800e:	dd 2d       	mov	r29, r13
    8010:	6c e2       	ldi	r22, 0x2C	; 44
    8012:	75 e0       	ldi	r23, 0x05	; 5
    8014:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    8018:	c1 e0       	ldi	r28, 0x01	; 1
    801a:	f6 01       	movw	r30, r12
    801c:	14 8a       	std	Z+20, r1	; 0x14
    801e:	e1 2c       	mov	r14, r1
    8020:	01 e0       	ldi	r16, 0x01	; 1
    8022:	20 e0       	ldi	r18, 0x00	; 0
    8024:	41 2f       	mov	r20, r17
    8026:	5d 2f       	mov	r21, r29
    8028:	6c 2f       	mov	r22, r28
    802a:	82 e6       	ldi	r24, 0x62	; 98
    802c:	9c e0       	ldi	r25, 0x0C	; 12
    802e:	70 d5       	rcall	.+2784   	; 0x8b10 <_ZN3LCD11displayTextEhPKchbb>
    8030:	cf 5f       	subi	r28, 0xFF	; 255
    8032:	c4 30       	cpi	r28, 0x04	; 4
    8034:	91 f7       	brne	.-28     	; 0x801a <_ZN3LCD12clearPadDataEv+0x1e>
    8036:	df 91       	pop	r29
    8038:	cf 91       	pop	r28
    803a:	1f 91       	pop	r17
    803c:	0f 91       	pop	r16
    803e:	ef 90       	pop	r14
    8040:	df 90       	pop	r13
    8042:	cf 90       	pop	r12
    8044:	08 95       	ret

00008046 <_ZN3LCD9clearLineEh>:

void LCD::clearLine(uint8_t row)    {
    8046:	ef 92       	push	r14
    8048:	0f 93       	push	r16
    804a:	1f 93       	push	r17
    804c:	cf 93       	push	r28
    804e:	df 93       	push	r29
    8050:	ec 01       	movw	r28, r24
    8052:	16 2f       	mov	r17, r22

    strcpy_P(stringBuffer, emptyLine_string);
    8054:	6c e2       	ldi	r22, 0x2C	; 44
    8056:	75 e0       	ldi	r23, 0x05	; 5
    8058:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>

//lcd update

void LCD::updateDisplay(uint8_t row, lcdTextType type, uint8_t startIndex, bool overwrite, uint8_t size, bool endOfLine)    {

    stringBuffer[size] = '\0'; //just a precaution
    805c:	1c 8a       	std	Y+20, r1	; 0x14

    switch(type)    {

        case text:
        display.displayText(row, stringBuffer, startIndex, overwrite, endOfLine);
    805e:	e1 2c       	mov	r14, r1
    8060:	01 e0       	ldi	r16, 0x01	; 1
    8062:	20 e0       	ldi	r18, 0x00	; 0
    8064:	ae 01       	movw	r20, r28
    8066:	61 2f       	mov	r22, r17
    8068:	82 e6       	ldi	r24, 0x62	; 98
    806a:	9c e0       	ldi	r25, 0x0C	; 12
    806c:	51 d5       	rcall	.+2722   	; 0x8b10 <_ZN3LCD11displayTextEhPKchbb>

    strcpy_P(stringBuffer, emptyLine_string);
    uint8_t size = progmemCharArraySize(emptyLine_string);
    updateDisplay(row, text, 0, true, size);

}
    806e:	df 91       	pop	r29
    8070:	cf 91       	pop	r28
    8072:	1f 91       	pop	r17
    8074:	0f 91       	pop	r16
    8076:	ef 90       	pop	r14
    8078:	08 95       	ret

0000807a <_ZN3LCD17displayDeviceInfoEv>:

void LCD::displayDeviceInfo()   {
    807a:	4f 92       	push	r4
    807c:	5f 92       	push	r5
    807e:	6f 92       	push	r6
    8080:	7f 92       	push	r7
    8082:	af 92       	push	r10
    8084:	bf 92       	push	r11
    8086:	cf 92       	push	r12
    8088:	df 92       	push	r13
    808a:	ef 92       	push	r14
    808c:	ff 92       	push	r15
    808e:	0f 93       	push	r16
    8090:	1f 93       	push	r17
    8092:	cf 93       	push	r28
    8094:	df 93       	push	r29
    8096:	cd b7       	in	r28, 0x3d	; 61
    8098:	de b7       	in	r29, 0x3e	; 62
    809a:	27 97       	sbiw	r28, 0x07	; 7
    809c:	0f b6       	in	r0, 0x3f	; 63
    809e:	f8 94       	cli
    80a0:	de bf       	out	0x3e, r29	; 62
    80a2:	0f be       	out	0x3f, r0	; 63
    80a4:	cd bf       	out	0x3d, r28	; 61
    80a6:	6c 01       	movw	r12, r24

    uint8_t size = 0;
    strcpy_P(stringBuffer, deviceInfo_swVersion_string);
    80a8:	5c 01       	movw	r10, r24
    80aa:	67 e3       	ldi	r22, 0x37	; 55
    80ac:	77 e0       	ldi	r23, 0x07	; 7
    80ae:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    size += progmemCharArraySize(deviceInfo_swVersion_string);
    addNumberToCharArray(getSWversion(swVersion_major), size);
    80b2:	80 e0       	ldi	r24, 0x00	; 0
    80b4:	0e 94 28 7c 	call	0xf850	; 0xf850 <_Z12getSWversion11swVersion_t>
    80b8:	2c 01       	movw	r4, r24
    80ba:	09 2e       	mov	r0, r25
    80bc:	00 0c       	add	r0, r0
    80be:	66 08       	sbc	r6, r6
    80c0:	77 08       	sbc	r7, r7
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    80c2:	4a e0       	ldi	r20, 0x0A	; 10
    80c4:	be 01       	movw	r22, r28
    80c6:	6f 5f       	subi	r22, 0xFF	; 255
    80c8:	7f 4f       	sbci	r23, 0xFF	; 255
    80ca:	0e 94 e1 82 	call	0x105c2	; 0x105c2 <__itoa_ncheck>
    void displayFactoryResetWarning();
    void displayNoteShiftLevel(int8_t level);

    inline uint8_t getNumberOfDigits(int32_t number)  {

        if (number < 10)            return 1;
    80ce:	2a e0       	ldi	r18, 0x0A	; 10
    80d0:	42 16       	cp	r4, r18
    80d2:	51 04       	cpc	r5, r1
    80d4:	61 04       	cpc	r6, r1
    80d6:	71 04       	cpc	r7, r1
    80d8:	ac f0       	brlt	.+42     	; 0x8104 <_ZN3LCD17displayDeviceInfoEv+0x8a>
        if (number < 100)           return 2;
    80da:	34 e6       	ldi	r19, 0x64	; 100
    80dc:	43 16       	cp	r4, r19
    80de:	51 04       	cpc	r5, r1
    80e0:	61 04       	cpc	r6, r1
    80e2:	71 04       	cpc	r7, r1
    80e4:	8c f0       	brlt	.+34     	; 0x8108 <_ZN3LCD17displayDeviceInfoEv+0x8e>
        if (number < 1000)          return 3;
    80e6:	88 ee       	ldi	r24, 0xE8	; 232
    80e8:	48 16       	cp	r4, r24
    80ea:	83 e0       	ldi	r24, 0x03	; 3
    80ec:	58 06       	cpc	r5, r24
    80ee:	61 04       	cpc	r6, r1
    80f0:	71 04       	cpc	r7, r1
    80f2:	64 f0       	brlt	.+24     	; 0x810c <_ZN3LCD17displayDeviceInfoEv+0x92>
        if (number < 10000)         return 4;
    80f4:	e0 e1       	ldi	r30, 0x10	; 16
    80f6:	4e 16       	cp	r4, r30
    80f8:	e7 e2       	ldi	r30, 0x27	; 39
    80fa:	5e 06       	cpc	r5, r30
    80fc:	61 04       	cpc	r6, r1
    80fe:	71 04       	cpc	r7, r1
    8100:	3c f0       	brlt	.+14     	; 0x8110 <_ZN3LCD17displayDeviceInfoEv+0x96>
    8102:	08 c0       	rjmp	.+16     	; 0x8114 <_ZN3LCD17displayDeviceInfoEv+0x9a>
    void displayFactoryResetWarning();
    void displayNoteShiftLevel(int8_t level);

    inline uint8_t getNumberOfDigits(int32_t number)  {

        if (number < 10)            return 1;
    8104:	81 e0       	ldi	r24, 0x01	; 1
    8106:	07 c0       	rjmp	.+14     	; 0x8116 <_ZN3LCD17displayDeviceInfoEv+0x9c>
        if (number < 100)           return 2;
    8108:	82 e0       	ldi	r24, 0x02	; 2
    810a:	05 c0       	rjmp	.+10     	; 0x8116 <_ZN3LCD17displayDeviceInfoEv+0x9c>
        if (number < 1000)          return 3;
    810c:	83 e0       	ldi	r24, 0x03	; 3
    810e:	03 c0       	rjmp	.+6      	; 0x8116 <_ZN3LCD17displayDeviceInfoEv+0x9c>
        if (number < 10000)         return 4;
    8110:	84 e0       	ldi	r24, 0x04	; 4
    8112:	01 c0       	rjmp	.+2      	; 0x8116 <_ZN3LCD17displayDeviceInfoEv+0x9c>
        if (number < 100000)        return 5;
    8114:	85 e0       	ldi	r24, 0x05	; 5
    //string manipulation
    inline void addNumberToCharArray(int32_t number, uint8_t &stringSize)  {

        char intToCharArray[7];
        itoa(number, intToCharArray, 10);
        stringSize += getNumberOfDigits(number);
    8116:	90 e0       	ldi	r25, 0x00	; 0
    8118:	0a 96       	adiw	r24, 0x0a	; 10
    811a:	08 2f       	mov	r16, r24
        if (number < 0) stringSize++;
    811c:	77 20       	and	r7, r7
    811e:	14 f4       	brge	.+4      	; 0x8124 <_ZN3LCD17displayDeviceInfoEv+0xaa>
    8120:	01 e0       	ldi	r16, 0x01	; 1
    8122:	08 0f       	add	r16, r24
        strcat(stringBuffer, intToCharArray);
    8124:	be 01       	movw	r22, r28
    8126:	6f 5f       	subi	r22, 0xFF	; 255
    8128:	7f 4f       	sbci	r23, 0xFF	; 255
    812a:	c6 01       	movw	r24, r12
    812c:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
        stringBuffer[stringSize] = '\0';
    8130:	f6 01       	movw	r30, r12
    8132:	e0 0f       	add	r30, r16
    8134:	f1 1d       	adc	r31, r1
    8136:	10 82       	st	Z, r1
    }

    inline void appendText(const char *text, uint8_t &stringSize) {

        stringSize += strlen(text);
        strcat(stringBuffer, text);
    8138:	f5 01       	movw	r30, r10
    813a:	01 90       	ld	r0, Z+
    813c:	00 20       	and	r0, r0
    813e:	e9 f7       	brne	.-6      	; 0x813a <_ZN3LCD17displayDeviceInfoEv+0xc0>
    8140:	31 97       	sbiw	r30, 0x01	; 1
    8142:	8e e2       	ldi	r24, 0x2E	; 46
    8144:	90 e0       	ldi	r25, 0x00	; 0
    8146:	91 83       	std	Z+1, r25	; 0x01
    8148:	80 83       	st	Z, r24

    }

    inline void appendText(const char *text, uint8_t &stringSize) {

        stringSize += strlen(text);
    814a:	0f 5f       	subi	r16, 0xFF	; 255
        strcat(stringBuffer, text);
        stringBuffer[stringSize] = '\0';
    814c:	10 e0       	ldi	r17, 0x00	; 0
    814e:	f6 01       	movw	r30, r12
    8150:	e0 0f       	add	r30, r16
    8152:	f1 1f       	adc	r31, r17
    8154:	10 82       	st	Z, r1
    appendText(".", size);
    addNumberToCharArray(getSWversion(swVersion_minor), size);
    8156:	81 e0       	ldi	r24, 0x01	; 1
    8158:	0e 94 28 7c 	call	0xf850	; 0xf850 <_Z12getSWversion11swVersion_t>
    815c:	2c 01       	movw	r4, r24
    815e:	09 2e       	mov	r0, r25
    8160:	00 0c       	add	r0, r0
    8162:	66 08       	sbc	r6, r6
    8164:	77 08       	sbc	r7, r7
    8166:	4a e0       	ldi	r20, 0x0A	; 10
    8168:	be 01       	movw	r22, r28
    816a:	6f 5f       	subi	r22, 0xFF	; 255
    816c:	7f 4f       	sbci	r23, 0xFF	; 255
    816e:	0e 94 e1 82 	call	0x105c2	; 0x105c2 <__itoa_ncheck>
    void displayFactoryResetWarning();
    void displayNoteShiftLevel(int8_t level);

    inline uint8_t getNumberOfDigits(int32_t number)  {

        if (number < 10)            return 1;
    8172:	fa e0       	ldi	r31, 0x0A	; 10
    8174:	4f 16       	cp	r4, r31
    8176:	51 04       	cpc	r5, r1
    8178:	61 04       	cpc	r6, r1
    817a:	71 04       	cpc	r7, r1
    817c:	ac f0       	brlt	.+42     	; 0x81a8 <_ZN3LCD17displayDeviceInfoEv+0x12e>
        if (number < 100)           return 2;
    817e:	24 e6       	ldi	r18, 0x64	; 100
    8180:	42 16       	cp	r4, r18
    8182:	51 04       	cpc	r5, r1
    8184:	61 04       	cpc	r6, r1
    8186:	71 04       	cpc	r7, r1
    8188:	8c f0       	brlt	.+34     	; 0x81ac <_ZN3LCD17displayDeviceInfoEv+0x132>
        if (number < 1000)          return 3;
    818a:	38 ee       	ldi	r19, 0xE8	; 232
    818c:	43 16       	cp	r4, r19
    818e:	33 e0       	ldi	r19, 0x03	; 3
    8190:	53 06       	cpc	r5, r19
    8192:	61 04       	cpc	r6, r1
    8194:	71 04       	cpc	r7, r1
    8196:	64 f0       	brlt	.+24     	; 0x81b0 <_ZN3LCD17displayDeviceInfoEv+0x136>
        if (number < 10000)         return 4;
    8198:	80 e1       	ldi	r24, 0x10	; 16
    819a:	48 16       	cp	r4, r24
    819c:	87 e2       	ldi	r24, 0x27	; 39
    819e:	58 06       	cpc	r5, r24
    81a0:	61 04       	cpc	r6, r1
    81a2:	71 04       	cpc	r7, r1
    81a4:	3c f0       	brlt	.+14     	; 0x81b4 <_ZN3LCD17displayDeviceInfoEv+0x13a>
    81a6:	08 c0       	rjmp	.+16     	; 0x81b8 <_ZN3LCD17displayDeviceInfoEv+0x13e>
    void displayFactoryResetWarning();
    void displayNoteShiftLevel(int8_t level);

    inline uint8_t getNumberOfDigits(int32_t number)  {

        if (number < 10)            return 1;
    81a8:	81 e0       	ldi	r24, 0x01	; 1
    81aa:	07 c0       	rjmp	.+14     	; 0x81ba <_ZN3LCD17displayDeviceInfoEv+0x140>
        if (number < 100)           return 2;
    81ac:	82 e0       	ldi	r24, 0x02	; 2
    81ae:	05 c0       	rjmp	.+10     	; 0x81ba <_ZN3LCD17displayDeviceInfoEv+0x140>
        if (number < 1000)          return 3;
    81b0:	83 e0       	ldi	r24, 0x03	; 3
    81b2:	03 c0       	rjmp	.+6      	; 0x81ba <_ZN3LCD17displayDeviceInfoEv+0x140>
        if (number < 10000)         return 4;
    81b4:	84 e0       	ldi	r24, 0x04	; 4
    81b6:	01 c0       	rjmp	.+2      	; 0x81ba <_ZN3LCD17displayDeviceInfoEv+0x140>
        if (number < 100000)        return 5;
    81b8:	85 e0       	ldi	r24, 0x05	; 5
    //string manipulation
    inline void addNumberToCharArray(int32_t number, uint8_t &stringSize)  {

        char intToCharArray[7];
        itoa(number, intToCharArray, 10);
        stringSize += getNumberOfDigits(number);
    81ba:	f8 01       	movw	r30, r16
    81bc:	e8 0f       	add	r30, r24
    81be:	f1 1d       	adc	r31, r1
    81c0:	1e 2f       	mov	r17, r30
        if (number < 0) stringSize++;
    81c2:	77 20       	and	r7, r7
    81c4:	14 f4       	brge	.+4      	; 0x81ca <_ZN3LCD17displayDeviceInfoEv+0x150>
    81c6:	11 e0       	ldi	r17, 0x01	; 1
    81c8:	1e 0f       	add	r17, r30
        strcat(stringBuffer, intToCharArray);
    81ca:	be 01       	movw	r22, r28
    81cc:	6f 5f       	subi	r22, 0xFF	; 255
    81ce:	7f 4f       	sbci	r23, 0xFF	; 255
    81d0:	c6 01       	movw	r24, r12
    81d2:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
        stringBuffer[stringSize] = '\0';
    81d6:	f6 01       	movw	r30, r12
    81d8:	e1 0f       	add	r30, r17
    81da:	f1 1d       	adc	r31, r1
    81dc:	10 82       	st	Z, r1
    }

    inline void appendText(const char *text, uint8_t &stringSize) {

        stringSize += strlen(text);
        strcat(stringBuffer, text);
    81de:	f5 01       	movw	r30, r10
    81e0:	01 90       	ld	r0, Z+
    81e2:	00 20       	and	r0, r0
    81e4:	e9 f7       	brne	.-6      	; 0x81e0 <_ZN3LCD17displayDeviceInfoEv+0x166>
    81e6:	31 97       	sbiw	r30, 0x01	; 1
    81e8:	8e e2       	ldi	r24, 0x2E	; 46
    81ea:	90 e0       	ldi	r25, 0x00	; 0
    81ec:	91 83       	std	Z+1, r25	; 0x01
    81ee:	80 83       	st	Z, r24

    }

    inline void appendText(const char *text, uint8_t &stringSize) {

        stringSize += strlen(text);
    81f0:	1f 5f       	subi	r17, 0xFF	; 255
        strcat(stringBuffer, text);
        stringBuffer[stringSize] = '\0';
    81f2:	01 2f       	mov	r16, r17
    81f4:	10 e0       	ldi	r17, 0x00	; 0
    81f6:	f6 01       	movw	r30, r12
    81f8:	e0 0f       	add	r30, r16
    81fa:	f1 1f       	adc	r31, r17
    81fc:	10 82       	st	Z, r1
    appendText(".", size);
    addNumberToCharArray(getSWversion(swVersion_revision), size);
    81fe:	82 e0       	ldi	r24, 0x02	; 2
    8200:	0e 94 28 7c 	call	0xf850	; 0xf850 <_Z12getSWversion11swVersion_t>
    8204:	2c 01       	movw	r4, r24
    8206:	09 2e       	mov	r0, r25
    8208:	00 0c       	add	r0, r0
    820a:	66 08       	sbc	r6, r6
    820c:	77 08       	sbc	r7, r7
    820e:	4a e0       	ldi	r20, 0x0A	; 10
    8210:	be 01       	movw	r22, r28
    8212:	6f 5f       	subi	r22, 0xFF	; 255
    8214:	7f 4f       	sbci	r23, 0xFF	; 255
    8216:	0e 94 e1 82 	call	0x105c2	; 0x105c2 <__itoa_ncheck>
    void displayFactoryResetWarning();
    void displayNoteShiftLevel(int8_t level);

    inline uint8_t getNumberOfDigits(int32_t number)  {

        if (number < 10)            return 1;
    821a:	fa e0       	ldi	r31, 0x0A	; 10
    821c:	4f 16       	cp	r4, r31
    821e:	51 04       	cpc	r5, r1
    8220:	61 04       	cpc	r6, r1
    8222:	71 04       	cpc	r7, r1
    8224:	ac f0       	brlt	.+42     	; 0x8250 <_ZN3LCD17displayDeviceInfoEv+0x1d6>
        if (number < 100)           return 2;
    8226:	24 e6       	ldi	r18, 0x64	; 100
    8228:	42 16       	cp	r4, r18
    822a:	51 04       	cpc	r5, r1
    822c:	61 04       	cpc	r6, r1
    822e:	71 04       	cpc	r7, r1
    8230:	8c f0       	brlt	.+34     	; 0x8254 <_ZN3LCD17displayDeviceInfoEv+0x1da>
        if (number < 1000)          return 3;
    8232:	38 ee       	ldi	r19, 0xE8	; 232
    8234:	43 16       	cp	r4, r19
    8236:	33 e0       	ldi	r19, 0x03	; 3
    8238:	53 06       	cpc	r5, r19
    823a:	61 04       	cpc	r6, r1
    823c:	71 04       	cpc	r7, r1
    823e:	64 f0       	brlt	.+24     	; 0x8258 <_ZN3LCD17displayDeviceInfoEv+0x1de>
        if (number < 10000)         return 4;
    8240:	80 e1       	ldi	r24, 0x10	; 16
    8242:	48 16       	cp	r4, r24
    8244:	87 e2       	ldi	r24, 0x27	; 39
    8246:	58 06       	cpc	r5, r24
    8248:	61 04       	cpc	r6, r1
    824a:	71 04       	cpc	r7, r1
    824c:	3c f0       	brlt	.+14     	; 0x825c <_ZN3LCD17displayDeviceInfoEv+0x1e2>
    824e:	08 c0       	rjmp	.+16     	; 0x8260 <_ZN3LCD17displayDeviceInfoEv+0x1e6>
    void displayFactoryResetWarning();
    void displayNoteShiftLevel(int8_t level);

    inline uint8_t getNumberOfDigits(int32_t number)  {

        if (number < 10)            return 1;
    8250:	81 e0       	ldi	r24, 0x01	; 1
    8252:	07 c0       	rjmp	.+14     	; 0x8262 <_ZN3LCD17displayDeviceInfoEv+0x1e8>
        if (number < 100)           return 2;
    8254:	82 e0       	ldi	r24, 0x02	; 2
    8256:	05 c0       	rjmp	.+10     	; 0x8262 <_ZN3LCD17displayDeviceInfoEv+0x1e8>
        if (number < 1000)          return 3;
    8258:	83 e0       	ldi	r24, 0x03	; 3
    825a:	03 c0       	rjmp	.+6      	; 0x8262 <_ZN3LCD17displayDeviceInfoEv+0x1e8>
        if (number < 10000)         return 4;
    825c:	84 e0       	ldi	r24, 0x04	; 4
    825e:	01 c0       	rjmp	.+2      	; 0x8262 <_ZN3LCD17displayDeviceInfoEv+0x1e8>
        if (number < 100000)        return 5;
    8260:	85 e0       	ldi	r24, 0x05	; 5
    //string manipulation
    inline void addNumberToCharArray(int32_t number, uint8_t &stringSize)  {

        char intToCharArray[7];
        itoa(number, intToCharArray, 10);
        stringSize += getNumberOfDigits(number);
    8262:	08 0f       	add	r16, r24
    8264:	11 1d       	adc	r17, r1
    8266:	f0 2e       	mov	r15, r16
        if (number < 0) stringSize++;
    8268:	77 20       	and	r7, r7
    826a:	1c f4       	brge	.+6      	; 0x8272 <_ZN3LCD17displayDeviceInfoEv+0x1f8>
    826c:	ff 24       	eor	r15, r15
    826e:	f3 94       	inc	r15
    8270:	f0 0e       	add	r15, r16
        strcat(stringBuffer, intToCharArray);
    8272:	be 01       	movw	r22, r28
    8274:	6f 5f       	subi	r22, 0xFF	; 255
    8276:	7f 4f       	sbci	r23, 0xFF	; 255
    8278:	c6 01       	movw	r24, r12
    827a:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
        stringBuffer[stringSize] = '\0';
    827e:	f6 01       	movw	r30, r12
    8280:	ef 0d       	add	r30, r15
    8282:	f1 1d       	adc	r31, r1
    8284:	10 82       	st	Z, r1
    if (getSWversion(swVersion_development))
    8286:	83 e0       	ldi	r24, 0x03	; 3
    8288:	0e 94 28 7c 	call	0xf850	; 0xf850 <_Z12getSWversion11swVersion_t>
    828c:	89 2b       	or	r24, r25
    828e:	71 f0       	breq	.+28     	; 0x82ac <_ZN3LCD17displayDeviceInfoEv+0x232>

    }

    inline void appendText(const char *text, uint8_t &stringSize) {

        stringSize += strlen(text);
    8290:	f3 94       	inc	r15
        strcat(stringBuffer, text);
    8292:	f5 01       	movw	r30, r10
    8294:	01 90       	ld	r0, Z+
    8296:	00 20       	and	r0, r0
    8298:	e9 f7       	brne	.-6      	; 0x8294 <_ZN3LCD17displayDeviceInfoEv+0x21a>
    829a:	31 97       	sbiw	r30, 0x01	; 1
    829c:	84 e6       	ldi	r24, 0x64	; 100
    829e:	90 e0       	ldi	r25, 0x00	; 0
    82a0:	91 83       	std	Z+1, r25	; 0x01
    82a2:	80 83       	st	Z, r24
        stringBuffer[stringSize] = '\0';
    82a4:	f6 01       	movw	r30, r12
    82a6:	ef 0d       	add	r30, r15
    82a8:	f1 1d       	adc	r31, r1
    82aa:	10 82       	st	Z, r1

//lcd update

void LCD::updateDisplay(uint8_t row, lcdTextType type, uint8_t startIndex, bool overwrite, uint8_t size, bool endOfLine)    {

    stringBuffer[size] = '\0'; //just a precaution
    82ac:	f6 01       	movw	r30, r12
    82ae:	ef 0d       	add	r30, r15
    82b0:	f1 1d       	adc	r31, r1
    82b2:	10 82       	st	Z, r1

    switch(type)    {

        case text:
        display.displayText(row, stringBuffer, startIndex, overwrite, endOfLine);
    82b4:	e1 2c       	mov	r14, r1
    82b6:	01 e0       	ldi	r16, 0x01	; 1
    82b8:	20 e0       	ldi	r18, 0x00	; 0
    82ba:	a6 01       	movw	r20, r12
    82bc:	61 e0       	ldi	r22, 0x01	; 1
    82be:	82 e6       	ldi	r24, 0x62	; 98
    82c0:	9c e0       	ldi	r25, 0x0C	; 12
    82c2:	26 d4       	rcall	.+2124   	; 0x8b10 <_ZN3LCD11displayTextEhPKchbb>
    if (getSWversion(swVersion_development))
        appendText("d", size);
    updateDisplay(1, text, 0, true, size);

    size = 0;
    strcpy_P(stringBuffer, deviceInfo_hwVersion_string);
    82c4:	6c e2       	ldi	r22, 0x2C	; 44
    82c6:	77 e0       	ldi	r23, 0x07	; 7
    82c8:	c6 01       	movw	r24, r12
    82ca:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    82ce:	4a e0       	ldi	r20, 0x0A	; 10
    82d0:	be 01       	movw	r22, r28
    82d2:	6f 5f       	subi	r22, 0xFF	; 255
    82d4:	7f 4f       	sbci	r23, 0xFF	; 255
    82d6:	82 e0       	ldi	r24, 0x02	; 2
    82d8:	90 e0       	ldi	r25, 0x00	; 0
    82da:	0e 94 e1 82 	call	0x105c2	; 0x105c2 <__itoa_ncheck>

        char intToCharArray[7];
        itoa(number, intToCharArray, 10);
        stringSize += getNumberOfDigits(number);
        if (number < 0) stringSize++;
        strcat(stringBuffer, intToCharArray);
    82de:	be 01       	movw	r22, r28
    82e0:	6f 5f       	subi	r22, 0xFF	; 255
    82e2:	7f 4f       	sbci	r23, 0xFF	; 255
    82e4:	c6 01       	movw	r24, r12
    82e6:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
        stringBuffer[stringSize] = '\0';
    82ea:	f6 01       	movw	r30, r12
    82ec:	13 86       	std	Z+11, r1	; 0x0b
    }

    inline void appendText(const char *text, uint8_t &stringSize) {

        stringSize += strlen(text);
        strcat(stringBuffer, text);
    82ee:	f5 01       	movw	r30, r10
    82f0:	01 90       	ld	r0, Z+
    82f2:	00 20       	and	r0, r0
    82f4:	e9 f7       	brne	.-6      	; 0x82f0 <_ZN3LCD17displayDeviceInfoEv+0x276>
    82f6:	31 97       	sbiw	r30, 0x01	; 1
    82f8:	0e e2       	ldi	r16, 0x2E	; 46
    82fa:	10 e0       	ldi	r17, 0x00	; 0
    82fc:	11 83       	std	Z+1, r17	; 0x01
    82fe:	00 83       	st	Z, r16
        stringBuffer[stringSize] = '\0';
    8300:	f6 01       	movw	r30, r12
    8302:	14 86       	std	Z+12, r1	; 0x0c
    8304:	4a e0       	ldi	r20, 0x0A	; 10
    8306:	be 01       	movw	r22, r28
    8308:	6f 5f       	subi	r22, 0xFF	; 255
    830a:	7f 4f       	sbci	r23, 0xFF	; 255
    830c:	80 e0       	ldi	r24, 0x00	; 0
    830e:	90 e0       	ldi	r25, 0x00	; 0
    8310:	0e 94 e1 82 	call	0x105c2	; 0x105c2 <__itoa_ncheck>

        char intToCharArray[7];
        itoa(number, intToCharArray, 10);
        stringSize += getNumberOfDigits(number);
        if (number < 0) stringSize++;
        strcat(stringBuffer, intToCharArray);
    8314:	be 01       	movw	r22, r28
    8316:	6f 5f       	subi	r22, 0xFF	; 255
    8318:	7f 4f       	sbci	r23, 0xFF	; 255
    831a:	c6 01       	movw	r24, r12
    831c:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
        stringBuffer[stringSize] = '\0';
    8320:	f6 01       	movw	r30, r12
    8322:	15 86       	std	Z+13, r1	; 0x0d
    }

    inline void appendText(const char *text, uint8_t &stringSize) {

        stringSize += strlen(text);
        strcat(stringBuffer, text);
    8324:	f5 01       	movw	r30, r10
    8326:	01 90       	ld	r0, Z+
    8328:	00 20       	and	r0, r0
    832a:	e9 f7       	brne	.-6      	; 0x8326 <_ZN3LCD17displayDeviceInfoEv+0x2ac>
    832c:	31 97       	sbiw	r30, 0x01	; 1
    832e:	11 83       	std	Z+1, r17	; 0x01
    8330:	00 83       	st	Z, r16
        stringBuffer[stringSize] = '\0';
    8332:	f6 01       	movw	r30, r12
    8334:	16 86       	std	Z+14, r1	; 0x0e
    8336:	4a e0       	ldi	r20, 0x0A	; 10
    8338:	be 01       	movw	r22, r28
    833a:	6f 5f       	subi	r22, 0xFF	; 255
    833c:	7f 4f       	sbci	r23, 0xFF	; 255
    833e:	80 e0       	ldi	r24, 0x00	; 0
    8340:	90 e0       	ldi	r25, 0x00	; 0
    8342:	0e 94 e1 82 	call	0x105c2	; 0x105c2 <__itoa_ncheck>

        char intToCharArray[7];
        itoa(number, intToCharArray, 10);
        stringSize += getNumberOfDigits(number);
        if (number < 0) stringSize++;
        strcat(stringBuffer, intToCharArray);
    8346:	be 01       	movw	r22, r28
    8348:	6f 5f       	subi	r22, 0xFF	; 255
    834a:	7f 4f       	sbci	r23, 0xFF	; 255
    834c:	c6 01       	movw	r24, r12
    834e:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
        stringBuffer[stringSize] = '\0';
    8352:	f6 01       	movw	r30, r12
    8354:	17 86       	std	Z+15, r1	; 0x0f
    stringBuffer[size] = '\0'; //just a precaution

    switch(type)    {

        case text:
        display.displayText(row, stringBuffer, startIndex, overwrite, endOfLine);
    8356:	01 e0       	ldi	r16, 0x01	; 1
    8358:	20 e0       	ldi	r18, 0x00	; 0
    835a:	a6 01       	movw	r20, r12
    835c:	62 e0       	ldi	r22, 0x02	; 2
    835e:	82 e6       	ldi	r24, 0x62	; 98
    8360:	9c e0       	ldi	r25, 0x0C	; 12
    8362:	d6 d3       	rcall	.+1964   	; 0x8b10 <_ZN3LCD11displayTextEhPKchbb>
    addNumberToCharArray(hardwareVersion.minor, size);
    appendText(".", size);
    addNumberToCharArray(hardwareVersion.revision, size);
    updateDisplay(2, text, 0, true, size);

    strcpy_P(stringBuffer, emptyLine_string);
    8364:	6c e2       	ldi	r22, 0x2C	; 44
    8366:	75 e0       	ldi	r23, 0x05	; 5
    8368:	c6 01       	movw	r24, r12
    836a:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>

//lcd update

void LCD::updateDisplay(uint8_t row, lcdTextType type, uint8_t startIndex, bool overwrite, uint8_t size, bool endOfLine)    {

    stringBuffer[size] = '\0'; //just a precaution
    836e:	10 92 76 0c 	sts	0x0C76, r1

    switch(type)    {

        case text:
        display.displayText(row, stringBuffer, startIndex, overwrite, endOfLine);
    8372:	20 e0       	ldi	r18, 0x00	; 0
    8374:	42 e6       	ldi	r20, 0x62	; 98
    8376:	5c e0       	ldi	r21, 0x0C	; 12
    8378:	63 e0       	ldi	r22, 0x03	; 3
    837a:	ca 01       	movw	r24, r20
    837c:	c9 d3       	rcall	.+1938   	; 0x8b10 <_ZN3LCD11displayTextEhPKchbb>
    strcpy_P(stringBuffer, emptyLine_string);
    size = progmemCharArraySize(emptyLine_string);

    display.updateDisplay(3, text, 0, true, size);

}
    837e:	27 96       	adiw	r28, 0x07	; 7
    8380:	0f b6       	in	r0, 0x3f	; 63
    8382:	f8 94       	cli
    8384:	de bf       	out	0x3e, r29	; 62
    8386:	0f be       	out	0x3f, r0	; 63
    8388:	cd bf       	out	0x3d, r28	; 61
    838a:	df 91       	pop	r29
    838c:	cf 91       	pop	r28
    838e:	1f 91       	pop	r17
    8390:	0f 91       	pop	r16
    8392:	ff 90       	pop	r15
    8394:	ef 90       	pop	r14
    8396:	df 90       	pop	r13
    8398:	cf 90       	pop	r12
    839a:	bf 90       	pop	r11
    839c:	af 90       	pop	r10
    839e:	7f 90       	pop	r7
    83a0:	6f 90       	pop	r6
    83a2:	5f 90       	pop	r5
    83a4:	4f 90       	pop	r4
    83a6:	08 95       	ret

000083a8 <_ZN3LCD26displayFactoryResetWarningEv>:

void LCD::displayFactoryResetWarning()   {
    83a8:	cf 93       	push	r28
    83aa:	df 93       	push	r29
    83ac:	ec 01       	movw	r28, r24

    //write directly to screen

    lcd_clrscr();
    83ae:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_Z10lcd_clrscrv>

    lcd_gotoxy(0, 0);
    83b2:	60 e0       	ldi	r22, 0x00	; 0
    83b4:	80 e0       	ldi	r24, 0x00	; 0
    83b6:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_Z10lcd_gotoxyhh>

    strcpy_P(stringBuffer, menuOption_factoryReset_caps_string);
    83ba:	62 e4       	ldi	r22, 0x42	; 66
    83bc:	77 e0       	ldi	r23, 0x07	; 7
    83be:	ce 01       	movw	r24, r28
    83c0:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    lcd_puts(stringBuffer);
    83c4:	ce 01       	movw	r24, r28
    83c6:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <_Z8lcd_putsPKc>
    strcpy(lastLCDLine[0], stringBuffer);
    83ca:	be 01       	movw	r22, r28
    83cc:	ce 01       	movw	r24, r28
    83ce:	88 5a       	subi	r24, 0xA8	; 168
    83d0:	9e 4f       	sbci	r25, 0xFE	; 254
    83d2:	0e 94 ca 82 	call	0x10594	; 0x10594 <strcpy>

    lcd_gotoxy(0, 1);
    83d6:	61 e0       	ldi	r22, 0x01	; 1
    83d8:	80 e0       	ldi	r24, 0x00	; 0
    83da:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_Z10lcd_gotoxyhh>
    strcpy_P(stringBuffer, factory_reset_warning_1_string);
    83de:	68 e1       	ldi	r22, 0x18	; 24
    83e0:	77 e0       	ldi	r23, 0x07	; 7
    83e2:	ce 01       	movw	r24, r28
    83e4:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    lcd_puts(stringBuffer);
    83e8:	ce 01       	movw	r24, r28
    83ea:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <_Z8lcd_putsPKc>
    strcpy(lastLCDLine[1], stringBuffer);
    83ee:	be 01       	movw	r22, r28
    83f0:	ce 01       	movw	r24, r28
    83f2:	89 58       	subi	r24, 0x89	; 137
    83f4:	9e 4f       	sbci	r25, 0xFE	; 254
    83f6:	0e 94 ca 82 	call	0x10594	; 0x10594 <strcpy>

    lcd_gotoxy(0, 2);
    83fa:	62 e0       	ldi	r22, 0x02	; 2
    83fc:	80 e0       	ldi	r24, 0x00	; 0
    83fe:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_Z10lcd_gotoxyhh>
    strcpy_P(stringBuffer, factory_reset_warning_2_string);
    8402:	64 e0       	ldi	r22, 0x04	; 4
    8404:	77 e0       	ldi	r23, 0x07	; 7
    8406:	ce 01       	movw	r24, r28
    8408:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    lcd_puts(stringBuffer);
    840c:	ce 01       	movw	r24, r28
    840e:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <_Z8lcd_putsPKc>
    strcpy(lastLCDLine[2], stringBuffer);
    8412:	be 01       	movw	r22, r28
    8414:	ce 01       	movw	r24, r28
    8416:	8a 56       	subi	r24, 0x6A	; 106
    8418:	9e 4f       	sbci	r25, 0xFE	; 254
    841a:	0e 94 ca 82 	call	0x10594	; 0x10594 <strcpy>

    lcd_gotoxy(0, 3);
    841e:	63 e0       	ldi	r22, 0x03	; 3
    8420:	80 e0       	ldi	r24, 0x00	; 0
    8422:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_Z10lcd_gotoxyhh>
    strcpy_P(stringBuffer, factory_reset_warning_3_string);
    8426:	61 ef       	ldi	r22, 0xF1	; 241
    8428:	76 e0       	ldi	r23, 0x06	; 6
    842a:	ce 01       	movw	r24, r28
    842c:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    lcd_puts(stringBuffer);
    8430:	ce 01       	movw	r24, r28
    8432:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <_Z8lcd_putsPKc>
    strcpy(lastLCDLine[3], stringBuffer);
    8436:	be 01       	movw	r22, r28
    8438:	ce 01       	movw	r24, r28
    843a:	8b 54       	subi	r24, 0x4B	; 75
    843c:	9e 4f       	sbci	r25, 0xFE	; 254
    843e:	0e 94 ca 82 	call	0x10594	; 0x10594 <strcpy>

}
    8442:	df 91       	pop	r29
    8444:	cf 91       	pop	r28
    8446:	08 95       	ret

00008448 <_ZN3LCD21displayNoteShiftLevelEa>:

void LCD::displayNoteShiftLevel(int8_t level)   {
    8448:	8f 92       	push	r8
    844a:	9f 92       	push	r9
    844c:	af 92       	push	r10
    844e:	bf 92       	push	r11
    8450:	cf 92       	push	r12
    8452:	df 92       	push	r13
    8454:	ef 92       	push	r14
    8456:	0f 93       	push	r16
    8458:	1f 93       	push	r17
    845a:	cf 93       	push	r28
    845c:	df 93       	push	r29
    845e:	cd b7       	in	r28, 0x3d	; 61
    8460:	de b7       	in	r29, 0x3e	; 62
    8462:	27 97       	sbiw	r28, 0x07	; 7
    8464:	0f b6       	in	r0, 0x3f	; 63
    8466:	f8 94       	cli
    8468:	de bf       	out	0x3e, r29	; 62
    846a:	0f be       	out	0x3f, r0	; 63
    846c:	cd bf       	out	0x3d, r28	; 61
    846e:	6c 01       	movw	r12, r24
    8470:	16 2f       	mov	r17, r22

    uint8_t size = 0;
    strcpy_P(stringBuffer, noteShift_string);
    8472:	69 e6       	ldi	r22, 0x69	; 105
    8474:	78 e0       	ldi	r23, 0x08	; 8
    8476:	0e 94 af 82 	call	0x1055e	; 0x1055e <strcpy_P>
    size += progmemCharArraySize(noteShift_string);
    addNumberToCharArray(level, size);
    847a:	81 2e       	mov	r8, r17
    847c:	01 2e       	mov	r0, r17
    847e:	00 0c       	add	r0, r0
    8480:	99 08       	sbc	r9, r9
    8482:	aa 08       	sbc	r10, r10
    8484:	bb 08       	sbc	r11, r11
    8486:	4a e0       	ldi	r20, 0x0A	; 10
    8488:	be 01       	movw	r22, r28
    848a:	6f 5f       	subi	r22, 0xFF	; 255
    848c:	7f 4f       	sbci	r23, 0xFF	; 255
    848e:	81 2f       	mov	r24, r17
    8490:	11 0f       	add	r17, r17
    8492:	99 0b       	sbc	r25, r25
    8494:	0e 94 e1 82 	call	0x105c2	; 0x105c2 <__itoa_ncheck>
    void displayFactoryResetWarning();
    void displayNoteShiftLevel(int8_t level);

    inline uint8_t getNumberOfDigits(int32_t number)  {

        if (number < 10)            return 1;
    8498:	8a e0       	ldi	r24, 0x0A	; 10
    849a:	88 16       	cp	r8, r24
    849c:	91 04       	cpc	r9, r1
    849e:	a1 04       	cpc	r10, r1
    84a0:	b1 04       	cpc	r11, r1
    84a2:	3c f0       	brlt	.+14     	; 0x84b2 <_ZN3LCD21displayNoteShiftLevelEa+0x6a>
        if (number < 100)           return 2;
    84a4:	84 e6       	ldi	r24, 0x64	; 100
    84a6:	88 16       	cp	r8, r24
    84a8:	91 04       	cpc	r9, r1
    84aa:	a1 04       	cpc	r10, r1
    84ac:	b1 04       	cpc	r11, r1
    84ae:	1c f0       	brlt	.+6      	; 0x84b6 <_ZN3LCD21displayNoteShiftLevelEa+0x6e>
    84b0:	04 c0       	rjmp	.+8      	; 0x84ba <_ZN3LCD21displayNoteShiftLevelEa+0x72>
    void displayFactoryResetWarning();
    void displayNoteShiftLevel(int8_t level);

    inline uint8_t getNumberOfDigits(int32_t number)  {

        if (number < 10)            return 1;
    84b2:	81 e0       	ldi	r24, 0x01	; 1
    84b4:	03 c0       	rjmp	.+6      	; 0x84bc <_ZN3LCD21displayNoteShiftLevelEa+0x74>
        if (number < 100)           return 2;
    84b6:	82 e0       	ldi	r24, 0x02	; 2
    84b8:	01 c0       	rjmp	.+2      	; 0x84bc <_ZN3LCD21displayNoteShiftLevelEa+0x74>
        if (number < 1000)          return 3;
    84ba:	83 e0       	ldi	r24, 0x03	; 3
    //string manipulation
    inline void addNumberToCharArray(int32_t number, uint8_t &stringSize)  {

        char intToCharArray[7];
        itoa(number, intToCharArray, 10);
        stringSize += getNumberOfDigits(number);
    84bc:	90 e0       	ldi	r25, 0x00	; 0
    84be:	01 96       	adiw	r24, 0x01	; 1
    84c0:	18 2f       	mov	r17, r24
        if (number < 0) stringSize++;
    84c2:	bb 20       	and	r11, r11
    84c4:	14 f4       	brge	.+4      	; 0x84ca <_ZN3LCD21displayNoteShiftLevelEa+0x82>
    84c6:	11 e0       	ldi	r17, 0x01	; 1
    84c8:	18 0f       	add	r17, r24
        strcat(stringBuffer, intToCharArray);
    84ca:	be 01       	movw	r22, r28
    84cc:	6f 5f       	subi	r22, 0xFF	; 255
    84ce:	7f 4f       	sbci	r23, 0xFF	; 255
    84d0:	c6 01       	movw	r24, r12
    84d2:	0e 94 bf 82 	call	0x1057e	; 0x1057e <strcat>
        stringBuffer[stringSize] = '\0';
    84d6:	f6 01       	movw	r30, r12
    84d8:	e1 0f       	add	r30, r17
    84da:	f1 1d       	adc	r31, r1
    84dc:	10 82       	st	Z, r1
    updateDisplay(lcdElements.noteShiftLevel.row, text, lcdElements.noteShiftLevel.startIndex, false, size);
    84de:	d6 01       	movw	r26, r12
    84e0:	a3 59       	subi	r26, 0x93	; 147
    84e2:	bd 4f       	sbci	r27, 0xFD	; 253
    84e4:	f6 01       	movw	r30, r12
    84e6:	e4 59       	subi	r30, 0x94	; 148
    84e8:	fd 4f       	sbci	r31, 0xFD	; 253
    stringBuffer[size] = '\0'; //just a precaution

    switch(type)    {

        case text:
        display.displayText(row, stringBuffer, startIndex, overwrite, endOfLine);
    84ea:	e1 2c       	mov	r14, r1
    84ec:	00 e0       	ldi	r16, 0x00	; 0
    84ee:	2c 91       	ld	r18, X
    84f0:	a6 01       	movw	r20, r12
    84f2:	60 81       	ld	r22, Z
    84f4:	82 e6       	ldi	r24, 0x62	; 98
    84f6:	9c e0       	ldi	r25, 0x0C	; 12
    84f8:	0b d3       	rcall	.+1558   	; 0x8b10 <_ZN3LCD11displayTextEhPKchbb>
    strcpy_P(stringBuffer, noteShift_string);
    size += progmemCharArraySize(noteShift_string);
    addNumberToCharArray(level, size);
    updateDisplay(lcdElements.noteShiftLevel.row, text, lcdElements.noteShiftLevel.startIndex, false, size);

}
    84fa:	27 96       	adiw	r28, 0x07	; 7
    84fc:	0f b6       	in	r0, 0x3f	; 63
    84fe:	f8 94       	cli
    8500:	de bf       	out	0x3e, r29	; 62
    8502:	0f be       	out	0x3f, r0	; 63
    8504:	cd bf       	out	0x3d, r28	; 61
    8506:	df 91       	pop	r29
    8508:	cf 91       	pop	r28
    850a:	1f 91       	pop	r17
    850c:	0f 91       	pop	r16
    850e:	ef 90       	pop	r14
    8510:	df 90       	pop	r13
    8512:	cf 90       	pop	r12
    8514:	bf 90       	pop	r11
    8516:	af 90       	pop	r10
    8518:	9f 90       	pop	r9
    851a:	8f 90       	pop	r8
    851c:	08 95       	ret

0000851e <_ZN3LCD13updateDisplayEh11lcdTextTypehbhb>:

//lcd update

void LCD::updateDisplay(uint8_t row, lcdTextType type, uint8_t startIndex, bool overwrite, uint8_t size, bool endOfLine)    {
    851e:	cf 92       	push	r12
    8520:	ef 92       	push	r14
    8522:	0f 93       	push	r16

    stringBuffer[size] = '\0'; //just a precaution
    8524:	fc 01       	movw	r30, r24
    8526:	ee 0d       	add	r30, r14
    8528:	f1 1d       	adc	r31, r1
    852a:	10 82       	st	Z, r1

    switch(type)    {
    852c:	44 23       	and	r20, r20
    852e:	19 f0       	breq	.+6      	; 0x8536 <_ZN3LCD13updateDisplayEh11lcdTextTypehbhb+0x18>
    8530:	41 30       	cpi	r20, 0x01	; 1
    8532:	39 f0       	breq	.+14     	; 0x8542 <_ZN3LCD13updateDisplayEh11lcdTextTypehbhb+0x24>
    8534:	0a c0       	rjmp	.+20     	; 0x854a <_ZN3LCD13updateDisplayEh11lcdTextTypehbhb+0x2c>

        case text:
        display.displayText(row, stringBuffer, startIndex, overwrite, endOfLine);
    8536:	ec 2c       	mov	r14, r12
    8538:	ac 01       	movw	r20, r24
    853a:	82 e6       	ldi	r24, 0x62	; 98
    853c:	9c e0       	ldi	r25, 0x0C	; 12
    853e:	e8 d2       	rcall	.+1488   	; 0x8b10 <_ZN3LCD11displayTextEhPKchbb>
        break;
    8540:	04 c0       	rjmp	.+8      	; 0x854a <_ZN3LCD13updateDisplayEh11lcdTextTypehbhb+0x2c>

        case message:
        display.displayMessage(row, stringBuffer);
    8542:	ac 01       	movw	r20, r24
    8544:	82 e6       	ldi	r24, 0x62	; 98
    8546:	9c e0       	ldi	r25, 0x0C	; 12
    8548:	c7 d2       	rcall	.+1422   	; 0x8ad8 <_ZN3LCD14displayMessageEhPKc>
        default:
        break;

    }

}
    854a:	0f 91       	pop	r16
    854c:	ef 90       	pop	r14
    854e:	cf 90       	pop	r12
    8550:	08 95       	ret

00008552 <_ZN3LCDC1Ev>:
#ifdef LCD_H_
#include <util/delay.h>

#define SCROLL_LINE_LENGTH  (NUMBER_OF_LCD_COLUMNS-5)

LCD::LCD()  {
    8552:	cf 93       	push	r28
    8554:	df 93       	push	r29
    8556:	ec 01       	movw	r28, r24

    displayMessage_var = false;
    8558:	fc 01       	movw	r30, r24
    855a:	e6 5b       	subi	r30, 0xB6	; 182
    855c:	ff 4f       	sbci	r31, 0xFF	; 255
    855e:	10 82       	st	Z, r1
    messageDisplayTime = 0;
    8560:	3c 97       	sbiw	r30, 0x0c	; 12
    8562:	10 82       	st	Z, r1
    8564:	11 82       	std	Z+1, r1	; 0x01
    8566:	12 82       	std	Z+2, r1	; 0x02
    8568:	13 82       	std	Z+3, r1	; 0x03
    #ifdef MODULE_LCD
        lcd_init(LCD_DISP_ON);
    856a:	8c e0       	ldi	r24, 0x0C	; 12
    856c:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <_Z8lcd_inith>
    #endif

    setupLCDlayout();
    8570:	ce 01       	movw	r24, r28
    8572:	0e 94 24 29 	call	0x5248	; 0x5248 <_ZN3LCD14setupLCDlayoutEv>

}
    8576:	df 91       	pop	r29
    8578:	cf 91       	pop	r28
    857a:	08 95       	ret

0000857c <_ZN3LCD4initEv>:

void LCD::init()    {
    857c:	ef 92       	push	r14
    857e:	ff 92       	push	r15
    8580:	1f 93       	push	r17
    8582:	cf 93       	push	r28
    8584:	df 93       	push	r29
    8586:	7c 01       	movw	r14, r24

    lcd_clrscr();
    8588:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <_Z10lcd_clrscrv>
    858c:	b7 01       	movw	r22, r14
    858e:	65 5b       	subi	r22, 0xB5	; 181
    8590:	7f 4f       	sbci	r23, 0xFF	; 255
    8592:	a7 01       	movw	r20, r14
    8594:	41 5b       	subi	r20, 0xB1	; 177
    8596:	5f 4f       	sbci	r21, 0xFF	; 255
    8598:	97 01       	movw	r18, r14
    859a:	2d 5a       	subi	r18, 0xAD	; 173
    859c:	3f 4f       	sbci	r19, 0xFF	; 255
    859e:	d7 01       	movw	r26, r14
    85a0:	a4 5a       	subi	r26, 0xA4	; 164
    85a2:	bf 4f       	sbci	r27, 0xFF	; 255
    85a4:	c7 01       	movw	r24, r14
    85a6:	88 5a       	subi	r24, 0xA8	; 168
    85a8:	9f 4f       	sbci	r25, 0xFF	; 255
    85aa:	f7 01       	movw	r30, r14
    85ac:	e0 5a       	subi	r30, 0xA0	; 160
    85ae:	ff 4f       	sbci	r31, 0xFF	; 255

    for (int i=0; i<NUMBER_OF_LCD_ROWS; i++) {

        lineChange[i] = false;
        scrollEnabled[i] = false;
        scrollDirection[i] = true;
    85b0:	11 e0       	ldi	r17, 0x01	; 1

    lcd_clrscr();

    for (int i=0; i<NUMBER_OF_LCD_ROWS; i++) {

        lineChange[i] = false;
    85b2:	eb 01       	movw	r28, r22
    85b4:	19 92       	st	Y+, r1
    85b6:	be 01       	movw	r22, r28
        scrollEnabled[i] = false;
    85b8:	ea 01       	movw	r28, r20
    85ba:	19 92       	st	Y+, r1
    85bc:	ae 01       	movw	r20, r28
        scrollDirection[i] = true;
    85be:	e9 01       	movw	r28, r18
    85c0:	19 93       	st	Y+, r17
    85c2:	9e 01       	movw	r18, r28
        scrollStartIndex[i] = 0;
    85c4:	1d 92       	st	X+, r1
        scrollIndex[i] = 0;
    85c6:	ec 01       	movw	r28, r24
    85c8:	19 92       	st	Y+, r1
    85ca:	ce 01       	movw	r24, r28

void LCD::init()    {

    lcd_clrscr();

    for (int i=0; i<NUMBER_OF_LCD_ROWS; i++) {
    85cc:	ae 17       	cp	r26, r30
    85ce:	bf 07       	cpc	r27, r31
    85d0:	81 f7       	brne	.-32     	; 0x85b2 <_ZN3LCD4initEv+0x36>
    85d2:	c7 01       	movw	r24, r14
    85d4:	84 52       	subi	r24, 0x24	; 36
    85d6:	9f 4f       	sbci	r25, 0xFF	; 255
    }

    //init char arrays
    for (int i=0; i<NUMBER_OF_LCD_ROWS; i++) {

        lcdLine[i][0] = '\0';
    85d8:	10 82       	st	Z, r1
    85da:	df 01       	movw	r26, r30
    85dc:	a4 58       	subi	r26, 0x84	; 132
    85de:	bf 4f       	sbci	r27, 0xFF	; 255
        lcdLineMessage[i][0] = '\0';
    85e0:	1c 92       	st	X, r1
    85e2:	a4 58       	subi	r26, 0x84	; 132
    85e4:	bf 4f       	sbci	r27, 0xFF	; 255
        lastLCDLine[i][0] = '\0';
    85e6:	1c 92       	st	X, r1
    85e8:	a4 58       	subi	r26, 0x84	; 132
    85ea:	bf 4f       	sbci	r27, 0xFF	; 255
        lcdLineScroll[i][0] = '\0';
    85ec:	1c 92       	st	X, r1
    85ee:	7f 96       	adiw	r30, 0x1f	; 31
        scrollIndex[i] = 0;

    }

    //init char arrays
    for (int i=0; i<NUMBER_OF_LCD_ROWS; i++) {
    85f0:	e8 17       	cp	r30, r24
    85f2:	f9 07       	cpc	r31, r25
    85f4:	89 f7       	brne	.-30     	; 0x85d8 <_ZN3LCD4initEv+0x5c>
        lastLCDLine[i][0] = '\0';
        lcdLineScroll[i][0] = '\0';

    }

   lastScrollTime = 0;
    85f6:	f7 01       	movw	r30, r14
    85f8:	ee 5b       	subi	r30, 0xBE	; 190
    85fa:	ff 4f       	sbci	r31, 0xFF	; 255
    85fc:	10 82       	st	Z, r1
    85fe:	11 82       	std	Z+1, r1	; 0x01
    8600:	12 82       	std	Z+2, r1	; 0x02
    8602:	13 82       	std	Z+3, r1	; 0x03
   displayMessage_var = false;
    8604:	e7 01       	movw	r28, r14
    8606:	c6 5b       	subi	r28, 0xB6	; 182
    8608:	df 4f       	sbci	r29, 0xFF	; 255
    860a:	18 82       	st	Y, r1
    860c:	df ef       	ldi	r29, 0xFF	; 255
    860e:	21 ee       	ldi	r18, 0xE1	; 225
    8610:	84 e0       	ldi	r24, 0x04	; 4
    8612:	d1 50       	subi	r29, 0x01	; 1
    8614:	20 40       	sbci	r18, 0x00	; 0
    8616:	80 40       	sbci	r24, 0x00	; 0
    8618:	e1 f7       	brne	.-8      	; 0x8612 <_ZN3LCD4initEv+0x96>
    861a:	00 c0       	rjmp	.+0      	; 0x861c <_ZN3LCD4initEv+0xa0>
    861c:	00 00       	nop

   _delay_ms(100);
   lcd_gotoxy(0,0);
    861e:	60 e0       	ldi	r22, 0x00	; 0
    8620:	80 e0       	ldi	r24, 0x00	; 0
    8622:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_Z10lcd_gotoxyhh>

}
    8626:	df 91       	pop	r29
    8628:	cf 91       	pop	r28
    862a:	1f 91       	pop	r17
    862c:	ff 90       	pop	r15
    862e:	ef 90       	pop	r14
    8630:	08 95       	ret

00008632 <_ZN3LCD16getMessageStatusEv>:

    lastLCDupdateTime = rTimeMillis();

}

messageStatus_t LCD::getMessageStatus()    {
    8632:	0f 93       	push	r16
    8634:	1f 93       	push	r17
    8636:	cf 93       	push	r28
    8638:	df 93       	push	r29

    if (displayMessage_var)   {
    863a:	fc 01       	movw	r30, r24
    863c:	e6 5b       	subi	r30, 0xB6	; 182
    863e:	ff 4f       	sbci	r31, 0xFF	; 255
    8640:	20 81       	ld	r18, Z
    8642:	22 23       	and	r18, r18
    8644:	79 f0       	breq	.+30     	; 0x8664 <_ZN3LCD16getMessageStatusEv+0x32>

        for (int i=0; i<NUMBER_OF_LCD_ROWS; i++) lineChange[i] = true;
    8646:	31 96       	adiw	r30, 0x01	; 1
    8648:	21 e0       	ldi	r18, 0x01	; 1
    864a:	20 83       	st	Z, r18
    864c:	31 96       	adiw	r30, 0x01	; 1
    864e:	20 83       	st	Z, r18
    8650:	31 96       	adiw	r30, 0x01	; 1
    8652:	20 83       	st	Z, r18
    8654:	31 96       	adiw	r30, 0x01	; 1
    8656:	20 83       	st	Z, r18

        displayMessage_var = false;
    8658:	34 97       	sbiw	r30, 0x04	; 4
    865a:	10 82       	st	Z, r1
        messageActivated = true;
    865c:	3d 96       	adiw	r30, 0x0d	; 13
    865e:	20 83       	st	Z, r18

        return showMessage;
    8660:	81 e0       	ldi	r24, 0x01	; 1
    8662:	3b c0       	rjmp	.+118    	; 0x86da <_ZN3LCD16getMessageStatusEv+0xa8>

    }

    if (messageActivated)   {
    8664:	fc 01       	movw	r30, r24
    8666:	e9 5a       	subi	r30, 0xA9	; 169
    8668:	ff 4f       	sbci	r31, 0xFF	; 255
    866a:	20 81       	ld	r18, Z
    866c:	22 23       	and	r18, r18
    866e:	81 f1       	breq	.+96     	; 0x86d0 <_ZN3LCD16getMessageStatusEv+0x9e>
    8670:	ec 01       	movw	r28, r24

        if (!((rTimeMillis() - messageDisplayTime) > LCD_MESSAGE_DURATION)) return messageDisplayed;
    8672:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z11rTimeMillisv>
    8676:	fe 01       	movw	r30, r28
    8678:	fe 96       	adiw	r30, 0x3e	; 62
    867a:	00 81       	ld	r16, Z
    867c:	11 81       	ldd	r17, Z+1	; 0x01
    867e:	22 81       	ldd	r18, Z+2	; 0x02
    8680:	33 81       	ldd	r19, Z+3	; 0x03
    8682:	dc 01       	movw	r26, r24
    8684:	cb 01       	movw	r24, r22
    8686:	80 1b       	sub	r24, r16
    8688:	91 0b       	sbc	r25, r17
    868a:	a2 0b       	sbc	r26, r18
    868c:	b3 0b       	sbc	r27, r19
    868e:	8d 3d       	cpi	r24, 0xDD	; 221
    8690:	95 40       	sbci	r25, 0x05	; 5
    8692:	a1 05       	cpc	r26, r1
    8694:	b1 05       	cpc	r27, r1
    8696:	f0 f0       	brcs	.+60     	; 0x86d4 <_ZN3LCD16getMessageStatusEv+0xa2>

        messageActivated = false;
    8698:	79 96       	adiw	r30, 0x19	; 25
    869a:	10 82       	st	Z, r1
    869c:	de 01       	movw	r26, r28
    869e:	a0 51       	subi	r26, 0x10	; 16
    86a0:	bf 4f       	sbci	r27, 0xFF	; 255
    86a2:	9e 01       	movw	r18, r28
    86a4:	25 5b       	subi	r18, 0xB5	; 181
    86a6:	3f 4f       	sbci	r19, 0xFF	; 255
    86a8:	c4 59       	subi	r28, 0x94	; 148
    86aa:	de 4f       	sbci	r29, 0xFE	; 254

        for (int i=0; i<NUMBER_OF_LCD_ROWS; i++)    {

            for (int j=0; j<NUMBER_OF_LCD_COLUMNS; j++)
            lcdLineMessage[i][j] = ' ';
    86ac:	90 e2       	ldi	r25, 0x20	; 32
            lcdLineMessage[i][NUMBER_OF_LCD_COLUMNS] = '\0';
            lineChange[i] = true;
    86ae:	81 e0       	ldi	r24, 0x01	; 1
    86b0:	0c c0       	rjmp	.+24     	; 0x86ca <_ZN3LCD16getMessageStatusEv+0x98>
        messageActivated = false;

        for (int i=0; i<NUMBER_OF_LCD_ROWS; i++)    {

            for (int j=0; j<NUMBER_OF_LCD_COLUMNS; j++)
            lcdLineMessage[i][j] = ' ';
    86b2:	91 93       	st	Z+, r25

        messageActivated = false;

        for (int i=0; i<NUMBER_OF_LCD_ROWS; i++)    {

            for (int j=0; j<NUMBER_OF_LCD_COLUMNS; j++)
    86b4:	ea 17       	cp	r30, r26
    86b6:	fb 07       	cpc	r31, r27
    86b8:	e1 f7       	brne	.-8      	; 0x86b2 <_ZN3LCD16getMessageStatusEv+0x80>
            lcdLineMessage[i][j] = ' ';
            lcdLineMessage[i][NUMBER_OF_LCD_COLUMNS] = '\0';
    86ba:	1c 92       	st	X, r1
            lineChange[i] = true;
    86bc:	f9 01       	movw	r30, r18
    86be:	81 93       	st	Z+, r24
    86c0:	9f 01       	movw	r18, r30
    86c2:	5f 96       	adiw	r26, 0x1f	; 31

        if (!((rTimeMillis() - messageDisplayTime) > LCD_MESSAGE_DURATION)) return messageDisplayed;

        messageActivated = false;

        for (int i=0; i<NUMBER_OF_LCD_ROWS; i++)    {
    86c4:	ac 17       	cp	r26, r28
    86c6:	bd 07       	cpc	r27, r29
    86c8:	39 f0       	breq	.+14     	; 0x86d8 <_ZN3LCD16getMessageStatusEv+0xa6>
    86ca:	fd 01       	movw	r30, r26
    86cc:	74 97       	sbiw	r30, 0x14	; 20
    86ce:	f1 cf       	rjmp	.-30     	; 0x86b2 <_ZN3LCD16getMessageStatusEv+0x80>

        return clearMessage;

    }

    return noMessage;
    86d0:	80 e0       	ldi	r24, 0x00	; 0
    86d2:	03 c0       	rjmp	.+6      	; 0x86da <_ZN3LCD16getMessageStatusEv+0xa8>

    }

    if (messageActivated)   {

        if (!((rTimeMillis() - messageDisplayTime) > LCD_MESSAGE_DURATION)) return messageDisplayed;
    86d4:	82 e0       	ldi	r24, 0x02	; 2
    86d6:	01 c0       	rjmp	.+2      	; 0x86da <_ZN3LCD16getMessageStatusEv+0xa8>
            lcdLineMessage[i][NUMBER_OF_LCD_COLUMNS] = '\0';
            lineChange[i] = true;

        }

        return clearMessage;
    86d8:	83 e0       	ldi	r24, 0x03	; 3

    }

    return noMessage;

}
    86da:	df 91       	pop	r29
    86dc:	cf 91       	pop	r28
    86de:	1f 91       	pop	r17
    86e0:	0f 91       	pop	r16
    86e2:	08 95       	ret

000086e4 <_ZN3LCD11checkScrollEh>:

void LCD::checkScroll(uint8_t row) {
    86e4:	8f 92       	push	r8
    86e6:	9f 92       	push	r9
    86e8:	af 92       	push	r10
    86ea:	bf 92       	push	r11
    86ec:	ff 92       	push	r15
    86ee:	0f 93       	push	r16
    86f0:	1f 93       	push	r17
    86f2:	cf 93       	push	r28
    86f4:	df 93       	push	r29

    if (!scrollEnabled[row]) return;
    86f6:	06 2f       	mov	r16, r22
    86f8:	10 e0       	ldi	r17, 0x00	; 0
    86fa:	fc 01       	movw	r30, r24
    86fc:	e0 0f       	add	r30, r16
    86fe:	f1 1f       	adc	r31, r17
    8700:	e1 5b       	subi	r30, 0xB1	; 177
    8702:	ff 4f       	sbci	r31, 0xFF	; 255
    8704:	20 81       	ld	r18, Z
    8706:	22 23       	and	r18, r18
    8708:	09 f4       	brne	.+2      	; 0x870c <_ZN3LCD11checkScrollEh+0x28>
    870a:	c7 c0       	rjmp	.+398    	; 0x889a <_ZN3LCD11checkScrollEh+0x1b6>
    870c:	f6 2e       	mov	r15, r22
    870e:	ec 01       	movw	r28, r24

    if ((rTimeMillis() - lastScrollTime) < LCD_SCROLL_TIME) return;
    8710:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z11rTimeMillisv>
    8714:	fe 01       	movw	r30, r28
    8716:	ee 5b       	subi	r30, 0xBE	; 190
    8718:	ff 4f       	sbci	r31, 0xFF	; 255
    871a:	80 80       	ld	r8, Z
    871c:	91 80       	ldd	r9, Z+1	; 0x01
    871e:	a2 80       	ldd	r10, Z+2	; 0x02
    8720:	b3 80       	ldd	r11, Z+3	; 0x03
    8722:	dc 01       	movw	r26, r24
    8724:	cb 01       	movw	r24, r22
    8726:	88 19       	sub	r24, r8
    8728:	99 09       	sbc	r25, r9
    872a:	aa 09       	sbc	r26, r10
    872c:	bb 09       	sbc	r27, r11
    872e:	8c 32       	cpi	r24, 0x2C	; 44
    8730:	91 40       	sbci	r25, 0x01	; 1
    8732:	a1 05       	cpc	r26, r1
    8734:	b1 05       	cpc	r27, r1
    8736:	08 f4       	brcc	.+2      	; 0x873a <_ZN3LCD11checkScrollEh+0x56>
    8738:	b0 c0       	rjmp	.+352    	; 0x889a <_ZN3LCD11checkScrollEh+0x1b6>

    //copy string up to scrollStartIndex
    for (int i=0; i<scrollStartIndex[row]; i++)
    873a:	fe 01       	movw	r30, r28
    873c:	e0 0f       	add	r30, r16
    873e:	f1 1f       	adc	r31, r17
    8740:	e4 5a       	subi	r30, 0xA4	; 164
    8742:	ff 4f       	sbci	r31, 0xFF	; 255
    8744:	50 81       	ld	r21, Z
    8746:	85 2f       	mov	r24, r21
    8748:	90 e0       	ldi	r25, 0x00	; 0
    874a:	18 16       	cp	r1, r24
    874c:	19 06       	cpc	r1, r25
    874e:	b4 f4       	brge	.+44     	; 0x877c <_ZN3LCD11checkScrollEh+0x98>
    8750:	ef e1       	ldi	r30, 0x1F	; 31
    8752:	0e 9f       	mul	r16, r30
    8754:	d0 01       	movw	r26, r0
    8756:	11 24       	eor	r1, r1
    8758:	fd 01       	movw	r30, r26
    875a:	e0 5a       	subi	r30, 0xA0	; 160
    875c:	ff 4f       	sbci	r31, 0xFF	; 255
    875e:	ec 0f       	add	r30, r28
    8760:	fd 1f       	adc	r31, r29
    8762:	ac 52       	subi	r26, 0x2C	; 44
    8764:	be 4f       	sbci	r27, 0xFE	; 254
    8766:	ac 0f       	add	r26, r28
    8768:	bd 1f       	adc	r27, r29
    876a:	20 e0       	ldi	r18, 0x00	; 0
    876c:	30 e0       	ldi	r19, 0x00	; 0
        lcdLineScroll[row][i] = lcdLine[row][i];
    876e:	41 91       	ld	r20, Z+
    8770:	4d 93       	st	X+, r20
    if (!scrollEnabled[row]) return;

    if ((rTimeMillis() - lastScrollTime) < LCD_SCROLL_TIME) return;

    //copy string up to scrollStartIndex
    for (int i=0; i<scrollStartIndex[row]; i++)
    8772:	2f 5f       	subi	r18, 0xFF	; 255
    8774:	3f 4f       	sbci	r19, 0xFF	; 255
    8776:	28 17       	cp	r18, r24
    8778:	39 07       	cpc	r19, r25
    877a:	cc f3       	brlt	.-14     	; 0x876e <_ZN3LCD11checkScrollEh+0x8a>
        lcdLineScroll[row][i] = lcdLine[row][i];

    //scrollIndex is validated below
    for (int i=scrollStartIndex[row]; i<NUMBER_OF_LCD_COLUMNS; i++)
    877c:	84 31       	cpi	r24, 0x14	; 20
    877e:	91 05       	cpc	r25, r1
    8780:	3c f5       	brge	.+78     	; 0x87d0 <_ZN3LCD11checkScrollEh+0xec>
    8782:	e5 2f       	mov	r30, r21
    8784:	f0 e0       	ldi	r31, 0x00	; 0
    8786:	2f e1       	ldi	r18, 0x1F	; 31
    8788:	f2 9e       	mul	r15, r18
    878a:	a0 01       	movw	r20, r0
    878c:	11 24       	eor	r1, r1
        lcdLineScroll[row][i] = lcdLine[row][i+scrollIndex[row]];
    878e:	de 01       	movw	r26, r28
    8790:	a0 0f       	add	r26, r16
    8792:	b1 1f       	adc	r27, r17
    8794:	a8 5a       	subi	r26, 0xA8	; 168
    8796:	bf 4f       	sbci	r27, 0xFF	; 255
    8798:	2c 91       	ld	r18, X
    879a:	da 01       	movw	r26, r20
    879c:	a2 0f       	add	r26, r18
    879e:	b1 1d       	adc	r27, r1
    87a0:	27 fd       	sbrc	r18, 7
    87a2:	ba 95       	dec	r27
    87a4:	a0 5a       	subi	r26, 0xA0	; 160
    87a6:	bf 4f       	sbci	r27, 0xFF	; 255
    87a8:	ae 0f       	add	r26, r30
    87aa:	bf 1f       	adc	r27, r31
    87ac:	ac 0f       	add	r26, r28
    87ae:	bd 1f       	adc	r27, r29
    87b0:	9a 01       	movw	r18, r20
    87b2:	2c 52       	subi	r18, 0x2C	; 44
    87b4:	3e 4f       	sbci	r19, 0xFE	; 254
    87b6:	e2 0f       	add	r30, r18
    87b8:	f3 1f       	adc	r31, r19
    87ba:	ec 0f       	add	r30, r28
    87bc:	fd 1f       	adc	r31, r29
    87be:	48 51       	subi	r20, 0x18	; 24
    87c0:	5e 4f       	sbci	r21, 0xFE	; 254
    87c2:	4c 0f       	add	r20, r28
    87c4:	5d 1f       	adc	r21, r29
    87c6:	2d 91       	ld	r18, X+
    87c8:	21 93       	st	Z+, r18
    //copy string up to scrollStartIndex
    for (int i=0; i<scrollStartIndex[row]; i++)
        lcdLineScroll[row][i] = lcdLine[row][i];

    //scrollIndex is validated below
    for (int i=scrollStartIndex[row]; i<NUMBER_OF_LCD_COLUMNS; i++)
    87ca:	e4 17       	cp	r30, r20
    87cc:	f5 07       	cpc	r31, r21
    87ce:	d9 f7       	brne	.-10     	; 0x87c6 <_ZN3LCD11checkScrollEh+0xe2>
        lcdLineScroll[row][i] = lcdLine[row][i+scrollIndex[row]];

    if (scrollDirection[row])    {
    87d0:	fe 01       	movw	r30, r28
    87d2:	e0 0f       	add	r30, r16
    87d4:	f1 1f       	adc	r31, r17
    87d6:	ed 5a       	subi	r30, 0xAD	; 173
    87d8:	ff 4f       	sbci	r31, 0xFF	; 255
    87da:	20 81       	ld	r18, Z
    87dc:	22 23       	and	r18, r18
    87de:	d1 f1       	breq	.+116    	; 0x8854 <_ZN3LCD11checkScrollEh+0x170>

        if (((int8_t)strlen(lcdLine[row]) - 1 - scrollStartIndex[row] - scrollIndex[row]) > (NUMBER_OF_LCD_COLUMNS - scrollStartIndex[row] - 1)) {
    87e0:	2f e1       	ldi	r18, 0x1F	; 31
    87e2:	20 9f       	mul	r18, r16
    87e4:	d0 01       	movw	r26, r0
    87e6:	21 9f       	mul	r18, r17
    87e8:	b0 0d       	add	r27, r0
    87ea:	11 24       	eor	r1, r1
    87ec:	a0 5a       	subi	r26, 0xA0	; 160
    87ee:	bf 4f       	sbci	r27, 0xFF	; 255
    87f0:	ac 0f       	add	r26, r28
    87f2:	bd 1f       	adc	r27, r29
    87f4:	fd 01       	movw	r30, r26
    87f6:	01 90       	ld	r0, Z+
    87f8:	00 20       	and	r0, r0
    87fa:	e9 f7       	brne	.-6      	; 0x87f6 <_ZN3LCD11checkScrollEh+0x112>
    87fc:	31 97       	sbiw	r30, 0x01	; 1
    87fe:	9f 01       	movw	r18, r30
    8800:	2a 1b       	sub	r18, r26
    8802:	3b 0b       	sbc	r19, r27
    8804:	fe 01       	movw	r30, r28
    8806:	e0 0f       	add	r30, r16
    8808:	f1 1f       	adc	r31, r17
    880a:	e8 5a       	subi	r30, 0xA8	; 168
    880c:	ff 4f       	sbci	r31, 0xFF	; 255
    880e:	60 81       	ld	r22, Z
    8810:	02 2e       	mov	r0, r18
    8812:	00 0c       	add	r0, r0
    8814:	33 0b       	sbc	r19, r19
    8816:	21 50       	subi	r18, 0x01	; 1
    8818:	31 09       	sbc	r19, r1
    881a:	28 1b       	sub	r18, r24
    881c:	39 0b       	sbc	r19, r25
    881e:	26 1b       	sub	r18, r22
    8820:	31 09       	sbc	r19, r1
    8822:	67 fd       	sbrc	r22, 7
    8824:	33 95       	inc	r19
    8826:	43 e1       	ldi	r20, 0x13	; 19
    8828:	50 e0       	ldi	r21, 0x00	; 0
    882a:	fa 01       	movw	r30, r20
    882c:	e8 1b       	sub	r30, r24
    882e:	f9 0b       	sbc	r31, r25
    8830:	e2 17       	cp	r30, r18
    8832:	f3 07       	cpc	r31, r19
    8834:	44 f4       	brge	.+16     	; 0x8846 <_ZN3LCD11checkScrollEh+0x162>

            scrollIndex[row]++;
    8836:	fe 01       	movw	r30, r28
    8838:	e0 0f       	add	r30, r16
    883a:	f1 1f       	adc	r31, r17
    883c:	e8 5a       	subi	r30, 0xA8	; 168
    883e:	ff 4f       	sbci	r31, 0xFF	; 255
    8840:	6f 5f       	subi	r22, 0xFF	; 255
    8842:	60 83       	st	Z, r22
    8844:	1b c0       	rjmp	.+54     	; 0x887c <_ZN3LCD11checkScrollEh+0x198>

        }   else scrollDirection[row] = false;
    8846:	fe 01       	movw	r30, r28
    8848:	e0 0f       	add	r30, r16
    884a:	f1 1f       	adc	r31, r17
    884c:	ed 5a       	subi	r30, 0xAD	; 173
    884e:	ff 4f       	sbci	r31, 0xFF	; 255
    8850:	10 82       	st	Z, r1
    8852:	14 c0       	rjmp	.+40     	; 0x887c <_ZN3LCD11checkScrollEh+0x198>

    }   else {

        scrollIndex[row]--;
    8854:	fe 01       	movw	r30, r28
    8856:	e0 0f       	add	r30, r16
    8858:	f1 1f       	adc	r31, r17
    885a:	e8 5a       	subi	r30, 0xA8	; 168
    885c:	ff 4f       	sbci	r31, 0xFF	; 255
    885e:	80 81       	ld	r24, Z
    8860:	81 50       	subi	r24, 0x01	; 1
    8862:	80 83       	st	Z, r24
        if (scrollIndex[row] < 0) { scrollDirection[row] = true; scrollIndex[row] = 0; }
    8864:	88 23       	and	r24, r24
    8866:	54 f4       	brge	.+20     	; 0x887c <_ZN3LCD11checkScrollEh+0x198>
    8868:	ce 01       	movw	r24, r28
    886a:	80 0f       	add	r24, r16
    886c:	91 1f       	adc	r25, r17
    886e:	fc 01       	movw	r30, r24
    8870:	ed 5a       	subi	r30, 0xAD	; 173
    8872:	ff 4f       	sbci	r31, 0xFF	; 255
    8874:	21 e0       	ldi	r18, 0x01	; 1
    8876:	20 83       	st	Z, r18
    8878:	35 96       	adiw	r30, 0x05	; 5
    887a:	10 82       	st	Z, r1

    }

    lineChange[row] = true;
    887c:	0c 0f       	add	r16, r28
    887e:	1d 1f       	adc	r17, r29
    8880:	f8 01       	movw	r30, r16
    8882:	e5 5b       	subi	r30, 0xB5	; 181
    8884:	ff 4f       	sbci	r31, 0xFF	; 255
    8886:	81 e0       	ldi	r24, 0x01	; 1
    8888:	80 83       	st	Z, r24

    lastScrollTime = rTimeMillis();
    888a:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z11rTimeMillisv>
    888e:	ce 5b       	subi	r28, 0xBE	; 190
    8890:	df 4f       	sbci	r29, 0xFF	; 255
    8892:	68 83       	st	Y, r22
    8894:	79 83       	std	Y+1, r23	; 0x01
    8896:	8a 83       	std	Y+2, r24	; 0x02
    8898:	9b 83       	std	Y+3, r25	; 0x03

}
    889a:	df 91       	pop	r29
    889c:	cf 91       	pop	r28
    889e:	1f 91       	pop	r17
    88a0:	0f 91       	pop	r16
    88a2:	ff 90       	pop	r15
    88a4:	bf 90       	pop	r11
    88a6:	af 90       	pop	r10
    88a8:	9f 90       	pop	r9
    88aa:	8f 90       	pop	r8
    88ac:	08 95       	ret

000088ae <_ZN3LCD6updateEv>:
   _delay_ms(100);
   lcd_gotoxy(0,0);

}

void LCD::update()  {
    88ae:	2f 92       	push	r2
    88b0:	3f 92       	push	r3
    88b2:	4f 92       	push	r4
    88b4:	5f 92       	push	r5
    88b6:	6f 92       	push	r6
    88b8:	7f 92       	push	r7
    88ba:	8f 92       	push	r8
    88bc:	9f 92       	push	r9
    88be:	af 92       	push	r10
    88c0:	bf 92       	push	r11
    88c2:	cf 92       	push	r12
    88c4:	df 92       	push	r13
    88c6:	ef 92       	push	r14
    88c8:	ff 92       	push	r15
    88ca:	0f 93       	push	r16
    88cc:	1f 93       	push	r17
    88ce:	cf 93       	push	r28
    88d0:	df 93       	push	r29
    88d2:	cd b7       	in	r28, 0x3d	; 61
    88d4:	de b7       	in	r29, 0x3e	; 62
    88d6:	2b 97       	sbiw	r28, 0x0b	; 11
    88d8:	0f b6       	in	r0, 0x3f	; 63
    88da:	f8 94       	cli
    88dc:	de bf       	out	0x3e, r29	; 62
    88de:	0f be       	out	0x3f, r0	; 63
    88e0:	cd bf       	out	0x3d, r28	; 61
    88e2:	9c 01       	movw	r18, r24

    if (bitRead(ADCSRA, ADSC)) return;  //don't mess with LCD while ADC conversion is in progress
    88e4:	90 91 7a 00 	lds	r25, 0x007A
    88e8:	89 2f       	mov	r24, r25
    88ea:	80 74       	andi	r24, 0x40	; 64
    88ec:	58 2e       	mov	r5, r24
    88ee:	96 fd       	sbrc	r25, 6
    88f0:	da c0       	rjmp	.+436    	; 0x8aa6 <_ZN3LCD6updateEv+0x1f8>
    88f2:	19 01       	movw	r2, r18
    if ((rTimeMillis() - lastLCDupdateTime) < LCD_REFRESH_TIME) return; //we don't need to update lcd in real time
    88f4:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z11rTimeMillisv>
    88f8:	f1 01       	movw	r30, r2
    88fa:	ea 5b       	subi	r30, 0xBA	; 186
    88fc:	ff 4f       	sbci	r31, 0xFF	; 255
    88fe:	00 81       	ld	r16, Z
    8900:	11 81       	ldd	r17, Z+1	; 0x01
    8902:	22 81       	ldd	r18, Z+2	; 0x02
    8904:	33 81       	ldd	r19, Z+3	; 0x03
    8906:	dc 01       	movw	r26, r24
    8908:	cb 01       	movw	r24, r22
    890a:	80 1b       	sub	r24, r16
    890c:	91 0b       	sbc	r25, r17
    890e:	a2 0b       	sbc	r26, r18
    8910:	b3 0b       	sbc	r27, r19
    8912:	44 97       	sbiw	r24, 0x14	; 20
    8914:	a1 05       	cpc	r26, r1
    8916:	b1 05       	cpc	r27, r1
    8918:	08 f4       	brcc	.+2      	; 0x891c <_ZN3LCD6updateEv+0x6e>
    891a:	c5 c0       	rjmp	.+394    	; 0x8aa6 <_ZN3LCD6updateEv+0x1f8>

    //get message status to determine what to print
    messageStatus_t messageStatus = getMessageStatus();
    891c:	c1 01       	movw	r24, r2
    891e:	89 de       	rcall	.-750    	; 0x8632 <_ZN3LCD16getMessageStatusEv>
    8920:	8f 83       	std	Y+7, r24	; 0x07
    8922:	31 01       	movw	r6, r2
    8924:	9b e4       	ldi	r25, 0x4B	; 75
    8926:	69 0e       	add	r6, r25
    8928:	71 1c       	adc	r7, r1
    892a:	51 01       	movw	r10, r2
    892c:	e8 ea       	ldi	r30, 0xA8	; 168
    892e:	ae 1a       	sub	r10, r30
    8930:	ee ef       	ldi	r30, 0xFE	; 254
    8932:	be 0a       	sbc	r11, r30
    8934:	81 01       	movw	r16, r2
    8936:	01 5b       	subi	r16, 0xB1	; 177
    8938:	1f 4f       	sbci	r17, 0xFF	; 255
        uint8_t characters = strlen(charPointer);
        uint8_t last_characters = strlen(lastLCDLine[i]);

        if (characters >= NUMBER_OF_LCD_COLUMNS) characters = NUMBER_OF_LCD_COLUMNS;

        for (int j=0; j<characters; j++) {
    893a:	41 2c       	mov	r4, r1
    893c:	3a 82       	std	Y+2, r3	; 0x02
    893e:	29 82       	std	Y+1, r2	; 0x01
    8940:	18 01       	movw	r2, r16

    //checkPadDataClear();

    for (int i=0; i<NUMBER_OF_LCD_ROWS; i++)    {

        checkScroll(i);
    8942:	65 2d       	mov	r22, r5
    8944:	89 81       	ldd	r24, Y+1	; 0x01
    8946:	9a 81       	ldd	r25, Y+2	; 0x02
    8948:	cd de       	rcall	.-614    	; 0x86e4 <_ZN3LCD11checkScrollEh>
    894a:	7e 82       	std	Y+6, r7	; 0x06
    894c:	6d 82       	std	Y+5, r6	; 0x05

        if (!lineChange[i]) continue;
    894e:	f3 01       	movw	r30, r6
    8950:	80 81       	ld	r24, Z
    8952:	88 23       	and	r24, r24
    8954:	09 f4       	brne	.+2      	; 0x8958 <_ZN3LCD6updateEv+0xaa>
    8956:	8f c0       	rjmp	.+286    	; 0x8a76 <_ZN3LCD6updateEv+0x1c8>

        switch(messageStatus)   {
    8958:	ff 81       	ldd	r31, Y+7	; 0x07
    895a:	f1 30       	cpi	r31, 0x01	; 1
    895c:	21 f0       	breq	.+8      	; 0x8966 <_ZN3LCD6updateEv+0xb8>
    895e:	f2 30       	cpi	r31, 0x02	; 2
    8960:	09 f4       	brne	.+2      	; 0x8964 <_ZN3LCD6updateEv+0xb6>
    8962:	a1 c0       	rjmp	.+322    	; 0x8aa6 <_ZN3LCD6updateEv+0x1f8>
    8964:	06 c0       	rjmp	.+12     	; 0x8972 <_ZN3LCD6updateEv+0xc4>
    8966:	c5 01       	movw	r24, r10
    8968:	8c 57       	subi	r24, 0x7C	; 124
    896a:	91 09       	sbc	r25, r1
    896c:	9c 83       	std	Y+4, r25	; 0x04
    896e:	8b 83       	std	Y+3, r24	; 0x03

            case showMessage:
            charPointer = lcdLineMessage[i];
            break;
    8970:	0f c0       	rjmp	.+30     	; 0x8990 <_ZN3LCD6updateEv+0xe2>

            case messageDisplayed:
            return; //line change + message shown = wait

            default:
            if (scrollEnabled[i])   charPointer = lcdLineScroll[i];
    8972:	f1 01       	movw	r30, r2
    8974:	80 81       	ld	r24, Z
    8976:	88 23       	and	r24, r24
    8978:	31 f0       	breq	.+12     	; 0x8986 <_ZN3LCD6updateEv+0xd8>
    897a:	c5 01       	movw	r24, r10
    897c:	84 58       	subi	r24, 0x84	; 132
    897e:	9f 4f       	sbci	r25, 0xFF	; 255
    8980:	9c 83       	std	Y+4, r25	; 0x04
    8982:	8b 83       	std	Y+3, r24	; 0x03
    8984:	05 c0       	rjmp	.+10     	; 0x8990 <_ZN3LCD6updateEv+0xe2>
    8986:	f5 01       	movw	r30, r10
    8988:	e8 5f       	subi	r30, 0xF8	; 248
    898a:	f1 09       	sbc	r31, r1
    898c:	fc 83       	std	Y+4, r31	; 0x04
    898e:	eb 83       	std	Y+3, r30	; 0x03

        }

        //this is to avoid buffer overflow when comparing current and previous
        //lines and current is longer than previous
        uint8_t characters = strlen(charPointer);
    8990:	ab 81       	ldd	r26, Y+3	; 0x03
    8992:	bc 81       	ldd	r27, Y+4	; 0x04
    8994:	0d 90       	ld	r0, X+
    8996:	00 20       	and	r0, r0
    8998:	e9 f7       	brne	.-6      	; 0x8994 <_ZN3LCD6updateEv+0xe6>
    899a:	11 97       	sbiw	r26, 0x01	; 1
    899c:	8b 81       	ldd	r24, Y+3	; 0x03
    899e:	9c 81       	ldd	r25, Y+4	; 0x04
    89a0:	a8 1b       	sub	r26, r24
    89a2:	b9 0b       	sbc	r27, r25
        uint8_t last_characters = strlen(lastLCDLine[i]);
    89a4:	a8 86       	std	Y+8, r10	; 0x08
    89a6:	b9 86       	std	Y+9, r11	; 0x09
    89a8:	f5 01       	movw	r30, r10
    89aa:	01 90       	ld	r0, Z+
    89ac:	00 20       	and	r0, r0
    89ae:	e9 f7       	brne	.-6      	; 0x89aa <_ZN3LCD6updateEv+0xfc>
    89b0:	31 97       	sbiw	r30, 0x01	; 1
    89b2:	6f 01       	movw	r12, r30
    89b4:	ca 18       	sub	r12, r10
    89b6:	db 08       	sbc	r13, r11

        if (characters >= NUMBER_OF_LCD_COLUMNS) characters = NUMBER_OF_LCD_COLUMNS;
    89b8:	a4 31       	cpi	r26, 0x14	; 20
    89ba:	40 f4       	brcc	.+16     	; 0x89cc <_ZN3LCD6updateEv+0x11e>
    89bc:	fd 01       	movw	r30, r26
    89be:	ff 27       	eor	r31, r31
    89c0:	fb 87       	std	Y+11, r31	; 0x0b
    89c2:	ea 87       	std	Y+10, r30	; 0x0a

        for (int j=0; j<characters; j++) {
    89c4:	1e 16       	cp	r1, r30
    89c6:	1f 06       	cpc	r1, r31
    89c8:	24 f0       	brlt	.+8      	; 0x89d2 <_ZN3LCD6updateEv+0x124>
    89ca:	3a c0       	rjmp	.+116    	; 0x8a40 <_ZN3LCD6updateEv+0x192>
    89cc:	f4 e1       	ldi	r31, 0x14	; 20
    89ce:	fa 87       	std	Y+10, r31	; 0x0a
    89d0:	1b 86       	std	Y+11, r1	; 0x0b
    89d2:	eb 80       	ldd	r14, Y+3	; 0x03
    89d4:	fc 80       	ldd	r15, Y+4	; 0x04
    89d6:	45 01       	movw	r8, r10
    89d8:	00 e0       	ldi	r16, 0x00	; 0
    89da:	14 2d       	mov	r17, r4
    89dc:	dd 24       	eor	r13, r13
    89de:	8a 85       	ldd	r24, Y+10	; 0x0a
    89e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    89e2:	fb 86       	std	Y+11, r15	; 0x0b
    89e4:	ea 86       	std	Y+10, r14	; 0x0a
    89e6:	7c 01       	movw	r14, r24

            if (j < last_characters)    {
    89e8:	0c 15       	cp	r16, r12
    89ea:	1d 05       	cpc	r17, r13
    89ec:	8c f4       	brge	.+34     	; 0x8a10 <_ZN3LCD6updateEv+0x162>

                if (charPointer[j] != lastLCDLine[i][j])  {
    89ee:	ea 85       	ldd	r30, Y+10	; 0x0a
    89f0:	fb 85       	ldd	r31, Y+11	; 0x0b
    89f2:	90 81       	ld	r25, Z
    89f4:	f4 01       	movw	r30, r8
    89f6:	80 81       	ld	r24, Z
    89f8:	98 17       	cp	r25, r24
    89fa:	99 f0       	breq	.+38     	; 0x8a22 <_ZN3LCD6updateEv+0x174>

                    lcd_gotoxy(j, i);
    89fc:	65 2d       	mov	r22, r5
    89fe:	80 2f       	mov	r24, r16
    8a00:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_Z10lcd_gotoxyhh>
                    lcd_putc(charPointer[j]);
    8a04:	ea 85       	ldd	r30, Y+10	; 0x0a
    8a06:	fb 85       	ldd	r31, Y+11	; 0x0b
    8a08:	80 81       	ld	r24, Z
    8a0a:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <_Z8lcd_putcc>
    8a0e:	09 c0       	rjmp	.+18     	; 0x8a22 <_ZN3LCD6updateEv+0x174>

                }

            }   else { //this index is longer then previous line, just print

                lcd_gotoxy(j, i);
    8a10:	65 2d       	mov	r22, r5
    8a12:	80 2f       	mov	r24, r16
    8a14:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_Z10lcd_gotoxyhh>
                lcd_putc(charPointer[j]);
    8a18:	ea 85       	ldd	r30, Y+10	; 0x0a
    8a1a:	fb 85       	ldd	r31, Y+11	; 0x0b
    8a1c:	80 81       	ld	r24, Z
    8a1e:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <_Z8lcd_putcc>
        uint8_t characters = strlen(charPointer);
        uint8_t last_characters = strlen(lastLCDLine[i]);

        if (characters >= NUMBER_OF_LCD_COLUMNS) characters = NUMBER_OF_LCD_COLUMNS;

        for (int j=0; j<characters; j++) {
    8a22:	0f 5f       	subi	r16, 0xFF	; 255
    8a24:	1f 4f       	sbci	r17, 0xFF	; 255
    8a26:	8a 85       	ldd	r24, Y+10	; 0x0a
    8a28:	9b 85       	ldd	r25, Y+11	; 0x0b
    8a2a:	01 96       	adiw	r24, 0x01	; 1
    8a2c:	9b 87       	std	Y+11, r25	; 0x0b
    8a2e:	8a 87       	std	Y+10, r24	; 0x0a
    8a30:	9f ef       	ldi	r25, 0xFF	; 255
    8a32:	89 1a       	sub	r8, r25
    8a34:	99 0a       	sbc	r9, r25
    8a36:	0e 15       	cp	r16, r14
    8a38:	1f 05       	cpc	r17, r15
    8a3a:	b4 f2       	brlt	.-84     	; 0x89e8 <_ZN3LCD6updateEv+0x13a>
    8a3c:	fb 86       	std	Y+11, r15	; 0x0b
    8a3e:	ea 86       	std	Y+10, r14	; 0x0a
            }

        }

        //now fill remaining columns with spaces
        for (int j=characters; j<NUMBER_OF_LCD_COLUMNS; j++)    {
    8a40:	ea 85       	ldd	r30, Y+10	; 0x0a
    8a42:	fb 85       	ldd	r31, Y+11	; 0x0b
    8a44:	e4 31       	cpi	r30, 0x14	; 20
    8a46:	f1 05       	cpc	r31, r1
    8a48:	6c f4       	brge	.+26     	; 0x8a64 <_ZN3LCD6updateEv+0x1b6>
    8a4a:	8f 01       	movw	r16, r30

            lcd_gotoxy(j, i);
    8a4c:	65 2d       	mov	r22, r5
    8a4e:	80 2f       	mov	r24, r16
    8a50:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <_Z10lcd_gotoxyhh>
            lcd_putc(SPACE_CHAR);
    8a54:	80 e2       	ldi	r24, 0x20	; 32
    8a56:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <_Z8lcd_putcc>
            }

        }

        //now fill remaining columns with spaces
        for (int j=characters; j<NUMBER_OF_LCD_COLUMNS; j++)    {
    8a5a:	0f 5f       	subi	r16, 0xFF	; 255
    8a5c:	1f 4f       	sbci	r17, 0xFF	; 255
    8a5e:	04 31       	cpi	r16, 0x14	; 20
    8a60:	11 05       	cpc	r17, r1
    8a62:	a1 f7       	brne	.-24     	; 0x8a4c <_ZN3LCD6updateEv+0x19e>

        }

        //lastLCDLine doesn't need to be null-terminated
        //because of other checks
        strcpy(lastLCDLine[i], charPointer);
    8a64:	6b 81       	ldd	r22, Y+3	; 0x03
    8a66:	7c 81       	ldd	r23, Y+4	; 0x04
    8a68:	88 85       	ldd	r24, Y+8	; 0x08
    8a6a:	99 85       	ldd	r25, Y+9	; 0x09
    8a6c:	0e 94 ca 82 	call	0x10594	; 0x10594 <strcpy>
        lineChange[i] = false;
    8a70:	ed 81       	ldd	r30, Y+5	; 0x05
    8a72:	fe 81       	ldd	r31, Y+6	; 0x06
    8a74:	10 82       	st	Z, r1
    8a76:	53 94       	inc	r5
    8a78:	ff ef       	ldi	r31, 0xFF	; 255
    8a7a:	6f 1a       	sub	r6, r31
    8a7c:	7f 0a       	sbc	r7, r31
    8a7e:	8f e1       	ldi	r24, 0x1F	; 31
    8a80:	a8 0e       	add	r10, r24
    8a82:	b1 1c       	adc	r11, r1
    8a84:	9f ef       	ldi	r25, 0xFF	; 255
    8a86:	29 1a       	sub	r2, r25
    8a88:	39 0a       	sbc	r3, r25
    //use char pointer to point to line we're going to print
    char *charPointer;

    //checkPadDataClear();

    for (int i=0; i<NUMBER_OF_LCD_ROWS; i++)    {
    8a8a:	e4 e0       	ldi	r30, 0x04	; 4
    8a8c:	5e 12       	cpse	r5, r30
    8a8e:	59 cf       	rjmp	.-334    	; 0x8942 <_ZN3LCD6updateEv+0x94>
    8a90:	29 80       	ldd	r2, Y+1	; 0x01
    8a92:	3a 80       	ldd	r3, Y+2	; 0x02
        strcpy(lastLCDLine[i], charPointer);
        lineChange[i] = false;

    }

    lastLCDupdateTime = rTimeMillis();
    8a94:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z11rTimeMillisv>
    8a98:	f1 01       	movw	r30, r2
    8a9a:	ea 5b       	subi	r30, 0xBA	; 186
    8a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    8a9e:	60 83       	st	Z, r22
    8aa0:	71 83       	std	Z+1, r23	; 0x01
    8aa2:	82 83       	std	Z+2, r24	; 0x02
    8aa4:	93 83       	std	Z+3, r25	; 0x03

}
    8aa6:	2b 96       	adiw	r28, 0x0b	; 11
    8aa8:	0f b6       	in	r0, 0x3f	; 63
    8aaa:	f8 94       	cli
    8aac:	de bf       	out	0x3e, r29	; 62
    8aae:	0f be       	out	0x3f, r0	; 63
    8ab0:	cd bf       	out	0x3d, r28	; 61
    8ab2:	df 91       	pop	r29
    8ab4:	cf 91       	pop	r28
    8ab6:	1f 91       	pop	r17
    8ab8:	0f 91       	pop	r16
    8aba:	ff 90       	pop	r15
    8abc:	ef 90       	pop	r14
    8abe:	df 90       	pop	r13
    8ac0:	cf 90       	pop	r12
    8ac2:	bf 90       	pop	r11
    8ac4:	af 90       	pop	r10
    8ac6:	9f 90       	pop	r9
    8ac8:	8f 90       	pop	r8
    8aca:	7f 90       	pop	r7
    8acc:	6f 90       	pop	r6
    8ace:	5f 90       	pop	r5
    8ad0:	4f 90       	pop	r4
    8ad2:	3f 90       	pop	r3
    8ad4:	2f 90       	pop	r2
    8ad6:	08 95       	ret

00008ad8 <_ZN3LCD14displayMessageEhPKc>:

    lastScrollTime = rTimeMillis();

}

void LCD::displayMessage(uint8_t row, const char *message)  {
    8ad8:	cf 93       	push	r28
    8ada:	df 93       	push	r29
    8adc:	ec 01       	movw	r28, r24

    strcpy(lcdLineMessage[row], message);
    8ade:	2f e1       	ldi	r18, 0x1F	; 31
    8ae0:	62 9f       	mul	r22, r18
    8ae2:	80 0d       	add	r24, r0
    8ae4:	91 1d       	adc	r25, r1
    8ae6:	11 24       	eor	r1, r1
    8ae8:	ba 01       	movw	r22, r20
    8aea:	84 52       	subi	r24, 0x24	; 36
    8aec:	9f 4f       	sbci	r25, 0xFF	; 255
    8aee:	0e 94 ca 82 	call	0x10594	; 0x10594 <strcpy>

    messageDisplayTime = rTimeMillis();
    8af2:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z11rTimeMillisv>
    8af6:	fe 01       	movw	r30, r28
    8af8:	fe 96       	adiw	r30, 0x3e	; 62
    8afa:	60 83       	st	Z, r22
    8afc:	71 83       	std	Z+1, r23	; 0x01
    8afe:	82 83       	std	Z+2, r24	; 0x02
    8b00:	93 83       	std	Z+3, r25	; 0x03
    displayMessage_var = true;
    8b02:	c6 5b       	subi	r28, 0xB6	; 182
    8b04:	df 4f       	sbci	r29, 0xFF	; 255
    8b06:	81 e0       	ldi	r24, 0x01	; 1
    8b08:	88 83       	st	Y, r24

}
    8b0a:	df 91       	pop	r29
    8b0c:	cf 91       	pop	r28
    8b0e:	08 95       	ret

00008b10 <_ZN3LCD11displayTextEhPKchbb>:

void LCD::displayText(uint8_t row, const char *text, uint8_t startIndex, bool overwrite, bool endOfLine)    {
    8b10:	8f 92       	push	r8
    8b12:	9f 92       	push	r9
    8b14:	af 92       	push	r10
    8b16:	bf 92       	push	r11
    8b18:	cf 92       	push	r12
    8b1a:	df 92       	push	r13
    8b1c:	ef 92       	push	r14
    8b1e:	ff 92       	push	r15
    8b20:	0f 93       	push	r16
    8b22:	1f 93       	push	r17
    8b24:	cf 93       	push	r28
    8b26:	df 93       	push	r29
    8b28:	5c 01       	movw	r10, r24
    8b2a:	c6 2f       	mov	r28, r22

    uint8_t size = strlen(text);
    8b2c:	fa 01       	movw	r30, r20
    8b2e:	01 90       	ld	r0, Z+
    8b30:	00 20       	and	r0, r0
    8b32:	e9 f7       	brne	.-6      	; 0x8b2e <_ZN3LCD11displayTextEhPKchbb+0x1e>
    8b34:	31 97       	sbiw	r30, 0x01	; 1
    8b36:	6f 01       	movw	r12, r30
    8b38:	c4 1a       	sub	r12, r20
    8b3a:	d5 0a       	sbc	r13, r21
    8b3c:	fc 2c       	mov	r15, r12

    if (overwrite) {
    8b3e:	00 23       	and	r16, r16
    8b40:	59 f0       	breq	.+22     	; 0x8b58 <_ZN3LCD11displayTextEhPKchbb+0x48>

        //overwrite current text on selected line
        strcpy(lcdLine[row], text);
    8b42:	ba 01       	movw	r22, r20
    8b44:	2f e1       	ldi	r18, 0x1F	; 31
    8b46:	c2 9f       	mul	r28, r18
    8b48:	80 0d       	add	r24, r0
    8b4a:	91 1d       	adc	r25, r1
    8b4c:	11 24       	eor	r1, r1
    8b4e:	80 5a       	subi	r24, 0xA0	; 160
    8b50:	9f 4f       	sbci	r25, 0xFF	; 255
    8b52:	0e 94 ca 82 	call	0x10594	; 0x10594 <strcpy>
    8b56:	63 c0       	rjmp	.+198    	; 0x8c1e <_ZN3LCD11displayTextEhPKchbb+0x10e>

    } else {

        //append characters
        //we need to find out current string size
        uint8_t currentStringSize = strlen(lcdLine[row]);
    8b58:	86 2e       	mov	r8, r22
    8b5a:	91 2c       	mov	r9, r1
    8b5c:	3f e1       	ldi	r19, 0x1F	; 31
    8b5e:	63 9f       	mul	r22, r19
    8b60:	80 0d       	add	r24, r0
    8b62:	91 1d       	adc	r25, r1
    8b64:	11 24       	eor	r1, r1
    8b66:	80 5a       	subi	r24, 0xA0	; 160
    8b68:	9f 4f       	sbci	r25, 0xFF	; 255
    8b6a:	fc 01       	movw	r30, r24
    8b6c:	01 90       	ld	r0, Z+
    8b6e:	00 20       	and	r0, r0
    8b70:	e9 f7       	brne	.-6      	; 0x8b6c <_ZN3LCD11displayTextEhPKchbb+0x5c>
    8b72:	31 97       	sbiw	r30, 0x01	; 1
    8b74:	8f 01       	movw	r16, r30
    8b76:	08 1b       	sub	r16, r24
    8b78:	19 0b       	sbc	r17, r25

        //now, we append the characters
        uint8_t charArrayIndex = 0;
        while (charArrayIndex < size)   { //make sure EOL isn't copied
    8b7a:	cc 20       	and	r12, r12
    8b7c:	e9 f0       	breq	.+58     	; 0x8bb8 <_ZN3LCD11displayTextEhPKchbb+0xa8>
    8b7e:	da 01       	movw	r26, r20
    8b80:	42 2f       	mov	r20, r18
    8b82:	50 e0       	ldi	r21, 0x00	; 0
    8b84:	3f e1       	ldi	r19, 0x1F	; 31
    8b86:	63 9f       	mul	r22, r19
    8b88:	b0 01       	movw	r22, r0
    8b8a:	11 24       	eor	r1, r1
    8b8c:	fa 01       	movw	r30, r20
    8b8e:	e0 5a       	subi	r30, 0xA0	; 160
    8b90:	ff 4f       	sbci	r31, 0xFF	; 255
    8b92:	e6 0f       	add	r30, r22
    8b94:	f7 1f       	adc	r31, r23
    8b96:	ea 0d       	add	r30, r10
    8b98:	fb 1d       	adc	r31, r11
    8b9a:	4f 59       	subi	r20, 0x9F	; 159
    8b9c:	5f 4f       	sbci	r21, 0xFF	; 255
    8b9e:	46 0f       	add	r20, r22
    8ba0:	57 1f       	adc	r21, r23
    8ba2:	3f ef       	ldi	r19, 0xFF	; 255
    8ba4:	3c 0d       	add	r19, r12
    8ba6:	43 0f       	add	r20, r19
    8ba8:	51 1d       	adc	r21, r1
    8baa:	4a 0d       	add	r20, r10
    8bac:	5b 1d       	adc	r21, r11

            lcdLine[row][startIndex+charArrayIndex] = text[charArrayIndex];
    8bae:	3d 91       	ld	r19, X+
    8bb0:	31 93       	st	Z+, r19
        //we need to find out current string size
        uint8_t currentStringSize = strlen(lcdLine[row]);

        //now, we append the characters
        uint8_t charArrayIndex = 0;
        while (charArrayIndex < size)   { //make sure EOL isn't copied
    8bb2:	e4 17       	cp	r30, r20
    8bb4:	f5 07       	cpc	r31, r21
    8bb6:	d9 f7       	brne	.-10     	; 0x8bae <_ZN3LCD11displayTextEhPKchbb+0x9e>
            lcdLine[row][startIndex+charArrayIndex] = text[charArrayIndex];
            charArrayIndex++;

        }

        if (endOfLine)  {
    8bb8:	ee 20       	and	r14, r14
    8bba:	71 f0       	breq	.+28     	; 0x8bd8 <_ZN3LCD11displayTextEhPKchbb+0xc8>

            lcdLine[row][startIndex] = '\0';
    8bbc:	3f e1       	ldi	r19, 0x1F	; 31
    8bbe:	38 9d       	mul	r19, r8
    8bc0:	f0 01       	movw	r30, r0
    8bc2:	39 9d       	mul	r19, r9
    8bc4:	f0 0d       	add	r31, r0
    8bc6:	11 24       	eor	r1, r1
    8bc8:	ea 0d       	add	r30, r10
    8bca:	fb 1d       	adc	r31, r11
    8bcc:	e2 0f       	add	r30, r18
    8bce:	f1 1d       	adc	r31, r1
    8bd0:	e0 5a       	subi	r30, 0xA0	; 160
    8bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    8bd4:	10 82       	st	Z, r1
    8bd6:	1c c0       	rjmp	.+56     	; 0x8c10 <_ZN3LCD11displayTextEhPKchbb+0x100>

        }   else {

            //we need to determine whether we need to change current EOL index
            bool changeEOLindex = (size+startIndex) > currentStringSize;
    8bd8:	30 e0       	ldi	r19, 0x00	; 0
    8bda:	2c 0d       	add	r18, r12
    8bdc:	31 1d       	adc	r19, r1
    8bde:	11 27       	eor	r17, r17
    8be0:	41 e0       	ldi	r20, 0x01	; 1
    8be2:	50 e0       	ldi	r21, 0x00	; 0
    8be4:	02 17       	cp	r16, r18
    8be6:	13 07       	cpc	r17, r19
    8be8:	14 f0       	brlt	.+4      	; 0x8bee <_ZN3LCD11displayTextEhPKchbb+0xde>
    8bea:	40 e0       	ldi	r20, 0x00	; 0
    8bec:	50 e0       	ldi	r21, 0x00	; 0

            switch(changeEOLindex)  {
    8bee:	41 30       	cpi	r20, 0x01	; 1
    8bf0:	51 05       	cpc	r21, r1
    8bf2:	71 f4       	brne	.+28     	; 0x8c10 <_ZN3LCD11displayTextEhPKchbb+0x100>
                case false:
                break;

                case true:
                //we need to set EOL char to a new position
                lcdLine[row][startIndex+size] = '\0';
    8bf4:	4f e1       	ldi	r20, 0x1F	; 31
    8bf6:	48 9d       	mul	r20, r8
    8bf8:	f0 01       	movw	r30, r0
    8bfa:	49 9d       	mul	r20, r9
    8bfc:	f0 0d       	add	r31, r0
    8bfe:	11 24       	eor	r1, r1
    8c00:	ea 0d       	add	r30, r10
    8c02:	fb 1d       	adc	r31, r11
    8c04:	2e 0f       	add	r18, r30
    8c06:	3f 1f       	adc	r19, r31
    8c08:	f9 01       	movw	r30, r18
    8c0a:	e0 5a       	subi	r30, 0xA0	; 160
    8c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    8c0e:	10 82       	st	Z, r1

            }

        }

        size = strlen(lcdLine[row]);
    8c10:	fc 01       	movw	r30, r24
    8c12:	01 90       	ld	r0, Z+
    8c14:	00 20       	and	r0, r0
    8c16:	e9 f7       	brne	.-6      	; 0x8c12 <_ZN3LCD11displayTextEhPKchbb+0x102>
    8c18:	31 97       	sbiw	r30, 0x01	; 1
    8c1a:	fe 2e       	mov	r15, r30
    8c1c:	f8 1a       	sub	r15, r24

    }

    lineChange[row] = true;
    8c1e:	d0 e0       	ldi	r29, 0x00	; 0
    8c20:	f5 01       	movw	r30, r10
    8c22:	ec 0f       	add	r30, r28
    8c24:	fd 1f       	adc	r31, r29
    8c26:	e5 5b       	subi	r30, 0xB5	; 181
    8c28:	ff 4f       	sbci	r31, 0xFF	; 255
    8c2a:	81 e0       	ldi	r24, 0x01	; 1
    8c2c:	80 83       	st	Z, r24

    if (size > NUMBER_OF_LCD_COLUMNS) {
    8c2e:	84 e1       	ldi	r24, 0x14	; 20
    8c30:	8f 15       	cp	r24, r15
    8c32:	68 f4       	brcc	.+26     	; 0x8c4e <_ZN3LCD11displayTextEhPKchbb+0x13e>

        scrollEnabled[row] = true;
    8c34:	ca 0d       	add	r28, r10
    8c36:	db 1d       	adc	r29, r11
    8c38:	fe 01       	movw	r30, r28
    8c3a:	e1 5b       	subi	r30, 0xB1	; 177
    8c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    8c3e:	81 e0       	ldi	r24, 0x01	; 1
    8c40:	80 83       	st	Z, r24
        scrollDirection[row] = true;
    8c42:	34 96       	adiw	r30, 0x04	; 4
    8c44:	80 83       	st	Z, r24
        scrollIndex[row] = 0;
    8c46:	c8 5a       	subi	r28, 0xA8	; 168
    8c48:	df 4f       	sbci	r29, 0xFF	; 255
    8c4a:	18 82       	st	Y, r1
    8c4c:	09 c0       	rjmp	.+18     	; 0x8c60 <_ZN3LCD11displayTextEhPKchbb+0x150>

    }   else {

        scrollEnabled[row] = false;
    8c4e:	ca 0d       	add	r28, r10
    8c50:	db 1d       	adc	r29, r11
    8c52:	fe 01       	movw	r30, r28
    8c54:	e1 5b       	subi	r30, 0xB1	; 177
    8c56:	ff 4f       	sbci	r31, 0xFF	; 255
    8c58:	10 82       	st	Z, r1
        scrollIndex[row] = 0;
    8c5a:	c8 5a       	subi	r28, 0xA8	; 168
    8c5c:	df 4f       	sbci	r29, 0xFF	; 255
    8c5e:	18 82       	st	Y, r1

    }

}
    8c60:	df 91       	pop	r29
    8c62:	cf 91       	pop	r28
    8c64:	1f 91       	pop	r17
    8c66:	0f 91       	pop	r16
    8c68:	ff 90       	pop	r15
    8c6a:	ef 90       	pop	r14
    8c6c:	df 90       	pop	r13
    8c6e:	cf 90       	pop	r12
    8c70:	bf 90       	pop	r11
    8c72:	af 90       	pop	r10
    8c74:	9f 90       	pop	r9
    8c76:	8f 90       	pop	r8
    8c78:	08 95       	ret

00008c7a <_ZN3LCD14setScrollStartEhh>:

void LCD::setScrollStart(uint8_t row, uint8_t index)    {

    scrollStartIndex[row] = index;
    8c7a:	86 0f       	add	r24, r22
    8c7c:	91 1d       	adc	r25, r1
    8c7e:	fc 01       	movw	r30, r24
    8c80:	e4 5a       	subi	r30, 0xA4	; 164
    8c82:	ff 4f       	sbci	r31, 0xFF	; 255
    8c84:	40 83       	st	Z, r20
    8c86:	08 95       	ret

00008c88 <_GLOBAL__sub_I__ZN3LCDC2Ev>:

}

LCD display;
    8c88:	82 e6       	ldi	r24, 0x62	; 98
    8c8a:	9c e0       	ldi	r25, 0x0C	; 12
    8c8c:	62 cc       	rjmp	.-1852   	; 0x8552 <_ZN3LCDC1Ev>
    8c8e:	08 95       	ret

00008c90 <_ZN4LEDs4initEv>:

ledState_t LEDs::getTonicLEDstate(note_t note)   {

    return timers.getLEDstate(getLEDnumberFromTonic(note));

}
    8c90:	24 9a       	sbi	0x04, 4	; 4
    8c92:	25 9a       	sbi	0x04, 5	; 4
    8c94:	26 9a       	sbi	0x04, 6	; 4
    8c96:	2c 98       	cbi	0x05, 4	; 5
    8c98:	2d 98       	cbi	0x05, 5	; 5
    8c9a:	2e 98       	cbi	0x05, 6	; 5
    8c9c:	21 9a       	sbi	0x04, 1	; 4
    8c9e:	22 9a       	sbi	0x04, 2	; 4
    8ca0:	23 9a       	sbi	0x04, 3	; 4
    8ca2:	29 9a       	sbi	0x05, 1	; 5
    8ca4:	2a 9a       	sbi	0x05, 2	; 5
    8ca6:	2b 9a       	sbi	0x05, 3	; 5
    8ca8:	08 95       	ret

00008caa <_ZN4LEDs10allLEDsOffEv>:
    8caa:	cf 93       	push	r28
    8cac:	c0 e0       	ldi	r28, 0x00	; 0
    8cae:	40 e0       	ldi	r20, 0x00	; 0
    8cb0:	6c 2f       	mov	r22, r28
    8cb2:	88 e1       	ldi	r24, 0x18	; 24
    8cb4:	97 e0       	ldi	r25, 0x07	; 7
    8cb6:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <_ZN11TimerObject11setLEDstateEh10ledState_t>
    8cba:	cf 5f       	subi	r28, 0xFF	; 255
    8cbc:	c8 31       	cpi	r28, 0x18	; 24
    8cbe:	b9 f7       	brne	.-18     	; 0x8cae <_ZN4LEDs10allLEDsOffEv+0x4>
    8cc0:	cf 91       	pop	r28
    8cc2:	08 95       	ret

00008cc4 <_ZN4LEDs9allLEDsOnEv>:
    8cc4:	cf 93       	push	r28
    8cc6:	c0 e0       	ldi	r28, 0x00	; 0
    8cc8:	42 e0       	ldi	r20, 0x02	; 2
    8cca:	6c 2f       	mov	r22, r28
    8ccc:	88 e1       	ldi	r24, 0x18	; 24
    8cce:	97 e0       	ldi	r25, 0x07	; 7
    8cd0:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <_ZN11TimerObject11setLEDstateEh10ledState_t>
    8cd4:	cf 5f       	subi	r28, 0xFF	; 255
    8cd6:	c8 31       	cpi	r28, 0x18	; 24
    8cd8:	b9 f7       	brne	.-18     	; 0x8cc8 <_ZN4LEDs9allLEDsOnEv+0x4>
    8cda:	cf 91       	pop	r28
    8cdc:	08 95       	ret

00008cde <_ZN4LEDs11setLEDstateEh10ledState_t>:
    8cde:	88 e1       	ldi	r24, 0x18	; 24
    8ce0:	97 e0       	ldi	r25, 0x07	; 7
    8ce2:	0c 94 ae 17 	jmp	0x2f5c	; 0x2f5c <_ZN11TimerObject11setLEDstateEh10ledState_t>
    8ce6:	08 95       	ret

00008ce8 <_ZN4LEDs11getLEDstateEh>:
    8ce8:	88 e1       	ldi	r24, 0x18	; 24
    8cea:	97 e0       	ldi	r25, 0x07	; 7
    8cec:	0c 94 8a 17 	jmp	0x2f14	; 0x2f14 <_ZN11TimerObject11getLEDstateEh>
    8cf0:	08 95       	ret

00008cf2 <_ZN4LEDs12setFadeSpeedEh>:
    8cf2:	88 e1       	ldi	r24, 0x18	; 24
    8cf4:	97 e0       	ldi	r25, 0x07	; 7
    8cf6:	0c 94 65 19 	jmp	0x32ca	; 0x32ca <_ZN11TimerObject11setPWMstepsEh>
    8cfa:	08 95       	ret

00008cfc <_ZN4LEDs12tonicLEDsOffEv>:
    8cfc:	0f 93       	push	r16
    8cfe:	1f 93       	push	r17
    8d00:	cf 93       	push	r28
    8d02:	df 93       	push	r29
    8d04:	c9 ec       	ldi	r28, 0xC9	; 201
    8d06:	d1 e0       	ldi	r29, 0x01	; 1
    8d08:	05 ed       	ldi	r16, 0xD5	; 213
    8d0a:	11 e0       	ldi	r17, 0x01	; 1
    8d0c:	69 91       	ld	r22, Y+
    8d0e:	40 e0       	ldi	r20, 0x00	; 0
    8d10:	88 e1       	ldi	r24, 0x18	; 24
    8d12:	97 e0       	ldi	r25, 0x07	; 7
    8d14:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <_ZN11TimerObject11setLEDstateEh10ledState_t>
    8d18:	c0 17       	cp	r28, r16
    8d1a:	d1 07       	cpc	r29, r17
    8d1c:	b9 f7       	brne	.-18     	; 0x8d0c <_ZN4LEDs12tonicLEDsOffEv+0x10>
    8d1e:	df 91       	pop	r29
    8d20:	cf 91       	pop	r28
    8d22:	1f 91       	pop	r17
    8d24:	0f 91       	pop	r16
    8d26:	08 95       	ret

00008d28 <_ZN4LEDs15setNoteLEDstateE6note_t10ledState_t>:
    8d28:	e6 2f       	mov	r30, r22
    8d2a:	f0 e0       	ldi	r31, 0x00	; 0
    8d2c:	e7 53       	subi	r30, 0x37	; 55
    8d2e:	fe 4f       	sbci	r31, 0xFE	; 254
    8d30:	60 81       	ld	r22, Z
    8d32:	88 e1       	ldi	r24, 0x18	; 24
    8d34:	97 e0       	ldi	r25, 0x07	; 7
    8d36:	0c 94 ae 17 	jmp	0x2f5c	; 0x2f5c <_ZN11TimerObject11setLEDstateEh10ledState_t>
    8d3a:	08 95       	ret

00008d3c <_ZN4LEDs21displayActiveNoteLEDsEbh>:

void LEDs::displayActiveNoteLEDs(bool padEditMode, uint8_t pad) {
    8d3c:	8f 92       	push	r8
    8d3e:	9f 92       	push	r9
    8d40:	af 92       	push	r10
    8d42:	bf 92       	push	r11
    8d44:	cf 92       	push	r12
    8d46:	df 92       	push	r13
    8d48:	ef 92       	push	r14
    8d4a:	ff 92       	push	r15
    8d4c:	0f 93       	push	r16
    8d4e:	1f 93       	push	r17
    8d50:	cf 93       	push	r28
    8d52:	df 93       	push	r29
    8d54:	cd b7       	in	r28, 0x3d	; 61
    8d56:	de b7       	in	r29, 0x3e	; 62
    8d58:	2e 97       	sbiw	r28, 0x0e	; 14
    8d5a:	0f b6       	in	r0, 0x3f	; 63
    8d5c:	f8 94       	cli
    8d5e:	de bf       	out	0x3e, r29	; 62
    8d60:	0f be       	out	0x3f, r0	; 63
    8d62:	cd bf       	out	0x3d, r28	; 61
    8d64:	7c 01       	movw	r14, r24
    8d66:	c4 2e       	mov	r12, r20
    uint8_t tonicArray[NOTES_PER_PAD],
            octaveArray[NOTES_PER_PAD],
            padNote,
            noteCounter = 0;

    switch(padEditMode) {
    8d68:	61 30       	cpi	r22, 0x01	; 1
    8d6a:	09 f0       	breq	.+2      	; 0x8d6e <_ZN4LEDs21displayActiveNoteLEDsEbh+0x32>
    8d6c:	61 c0       	rjmp	.+194    	; 0x8e30 <_ZN4LEDs21displayActiveNoteLEDsEbh+0xf4>
    8d6e:	10 e0       	ldi	r17, 0x00	; 0
    8d70:	00 e0       	ldi	r16, 0x00	; 0

        case true:
        //indicate assigned notes in pad edit mode using note leds
        for (uint8_t i=0; i<NOTES_PER_PAD; i++) {

            padNote = pads.getPadNote(pad, i);
    8d72:	41 2f       	mov	r20, r17
    8d74:	6c 2d       	mov	r22, r12
    8d76:	8a e6       	ldi	r24, 0x6A	; 106
    8d78:	9f e0       	ldi	r25, 0x0F	; 15
    8d7a:	0e 94 fc 68 	call	0xd1f8	; 0xd1f8 <_ZN4Pads10getPadNoteEhh>
    8d7e:	d8 2e       	mov	r13, r24
            if (padNote == BLANK_NOTE) continue;
    8d80:	80 e8       	ldi	r24, 0x80	; 128
    8d82:	d8 16       	cp	r13, r24
    8d84:	d9 f0       	breq	.+54     	; 0x8dbc <_ZN4LEDs21displayActiveNoteLEDsEbh+0x80>

            tonicArray[noteCounter] = pads.getTonicFromNote(padNote);
    8d86:	a0 2e       	mov	r10, r16
    8d88:	b1 2c       	mov	r11, r1
    8d8a:	6d 2d       	mov	r22, r13
    8d8c:	8a e6       	ldi	r24, 0x6A	; 106
    8d8e:	9f e0       	ldi	r25, 0x0F	; 15
    8d90:	0e 94 43 69 	call	0xd286	; 0xd286 <_ZN4Pads16getTonicFromNoteEh>
    8d94:	e8 e0       	ldi	r30, 0x08	; 8
    8d96:	f0 e0       	ldi	r31, 0x00	; 0
    8d98:	ec 0f       	add	r30, r28
    8d9a:	fd 1f       	adc	r31, r29
    8d9c:	ea 0d       	add	r30, r10
    8d9e:	fb 1d       	adc	r31, r11
    8da0:	80 83       	st	Z, r24
            octaveArray[noteCounter] = pads.getOctaveFromNote(padNote);
    8da2:	6d 2d       	mov	r22, r13
    8da4:	8a e6       	ldi	r24, 0x6A	; 106
    8da6:	9f e0       	ldi	r25, 0x0F	; 15
    8da8:	0e 94 56 69 	call	0xd2ac	; 0xd2ac <_ZN4Pads17getOctaveFromNoteEh>
    8dac:	e1 e0       	ldi	r30, 0x01	; 1
    8dae:	f0 e0       	ldi	r31, 0x00	; 0
    8db0:	ec 0f       	add	r30, r28
    8db2:	fd 1f       	adc	r31, r29
    8db4:	ea 0d       	add	r30, r10
    8db6:	fb 1d       	adc	r31, r11
    8db8:	80 83       	st	Z, r24
            noteCounter++;
    8dba:	0f 5f       	subi	r16, 0xFF	; 255

    switch(padEditMode) {

        case true:
        //indicate assigned notes in pad edit mode using note leds
        for (uint8_t i=0; i<NOTES_PER_PAD; i++) {
    8dbc:	1f 5f       	subi	r17, 0xFF	; 255
    8dbe:	17 30       	cpi	r17, 0x07	; 7
    8dc0:	c1 f6       	brne	.-80     	; 0x8d72 <_ZN4LEDs21displayActiveNoteLEDsEbh+0x36>
    8dc2:	48 c0       	rjmp	.+144    	; 0x8e54 <_ZN4LEDs21displayActiveNoteLEDsEbh+0x118>

        }

        //turn off all LEDs
        for (int i=0; i<MIDI_NOTES; i++)
            setNoteLEDstate((note_t)i, ledStateOff);
    8dc4:	40 e0       	ldi	r20, 0x00	; 0
    8dc6:	61 2f       	mov	r22, r17
    8dc8:	c7 01       	movw	r24, r14
    8dca:	ae df       	rcall	.-164    	; 0x8d28 <_ZN4LEDs15setNoteLEDstateE6note_t10ledState_t>
    8dcc:	1f 5f       	subi	r17, 0xFF	; 255
            noteCounter++;

        }

        //turn off all LEDs
        for (int i=0; i<MIDI_NOTES; i++)
    8dce:	1c 30       	cpi	r17, 0x0C	; 12
    8dd0:	c9 f7       	brne	.-14     	; 0x8dc4 <_ZN4LEDs21displayActiveNoteLEDsEbh+0x88>
            setNoteLEDstate((note_t)i, ledStateOff);

        //set dim led state for assigned notes on current pad
        for (int i=0; i<noteCounter; i++)
    8dd2:	00 23       	and	r16, r16
    8dd4:	09 f4       	brne	.+2      	; 0x8dd8 <_ZN4LEDs21displayActiveNoteLEDsEbh+0x9c>
    8dd6:	40 c0       	rjmp	.+128    	; 0x8e58 <_ZN4LEDs21displayActiveNoteLEDsEbh+0x11c>
    8dd8:	6e 01       	movw	r12, r28
    8dda:	98 e0       	ldi	r25, 0x08	; 8
    8ddc:	c9 0e       	add	r12, r25
    8dde:	d1 1c       	adc	r13, r1
    8de0:	10 e0       	ldi	r17, 0x00	; 0
    8de2:	46 01       	movw	r8, r12
    8de4:	80 0e       	add	r8, r16
    8de6:	91 1e       	adc	r9, r17
    8de8:	56 01       	movw	r10, r12
            setNoteLEDstate((note_t)tonicArray[i], ledStateDim);
    8dea:	f5 01       	movw	r30, r10
    8dec:	61 91       	ld	r22, Z+
    8dee:	5f 01       	movw	r10, r30
    8df0:	41 e0       	ldi	r20, 0x01	; 1
    8df2:	c7 01       	movw	r24, r14
    8df4:	99 df       	rcall	.-206    	; 0x8d28 <_ZN4LEDs15setNoteLEDstateE6note_t10ledState_t>
        //turn off all LEDs
        for (int i=0; i<MIDI_NOTES; i++)
            setNoteLEDstate((note_t)i, ledStateOff);

        //set dim led state for assigned notes on current pad
        for (int i=0; i<noteCounter; i++)
    8df6:	a8 14       	cp	r10, r8
    8df8:	b9 04       	cpc	r11, r9
    8dfa:	b9 f7       	brne	.-18     	; 0x8dea <_ZN4LEDs21displayActiveNoteLEDsEbh+0xae>
    8dfc:	ce 01       	movw	r24, r28
    8dfe:	01 96       	adiw	r24, 0x01	; 1
    8e00:	5c 01       	movw	r10, r24
    8e02:	08 0f       	add	r16, r24
    8e04:	19 1f       	adc	r17, r25
            setNoteLEDstate((note_t)tonicArray[i], ledStateDim);

        //set full led state for assigned notes on current pad if note matches current octave
        for (int i=0; i<noteCounter; i++) {

            if (octaveArray[i] == pads.getActiveOctave())
    8e06:	f5 01       	movw	r30, r10
    8e08:	91 90       	ld	r9, Z+
    8e0a:	5f 01       	movw	r10, r30
    8e0c:	8a e6       	ldi	r24, 0x6A	; 106
    8e0e:	9f e0       	ldi	r25, 0x0F	; 15
    8e10:	0e 94 4e 68 	call	0xd09c	; 0xd09c <_ZN4Pads15getActiveOctaveEv>
    8e14:	98 12       	cpse	r9, r24
    8e16:	05 c0       	rjmp	.+10     	; 0x8e22 <_ZN4LEDs21displayActiveNoteLEDsEbh+0xe6>
                setNoteLEDstate((note_t)tonicArray[i], ledStateFull);
    8e18:	42 e0       	ldi	r20, 0x02	; 2
    8e1a:	f6 01       	movw	r30, r12
    8e1c:	60 81       	ld	r22, Z
    8e1e:	c7 01       	movw	r24, r14
    8e20:	83 df       	rcall	.-250    	; 0x8d28 <_ZN4LEDs15setNoteLEDstateE6note_t10ledState_t>
    8e22:	ff ef       	ldi	r31, 0xFF	; 255
    8e24:	cf 1a       	sub	r12, r31
    8e26:	df 0a       	sbc	r13, r31
        //set dim led state for assigned notes on current pad
        for (int i=0; i<noteCounter; i++)
            setNoteLEDstate((note_t)tonicArray[i], ledStateDim);

        //set full led state for assigned notes on current pad if note matches current octave
        for (int i=0; i<noteCounter; i++) {
    8e28:	a0 16       	cp	r10, r16
    8e2a:	b1 06       	cpc	r11, r17
    8e2c:	61 f7       	brne	.-40     	; 0x8e06 <_ZN4LEDs21displayActiveNoteLEDsEbh+0xca>
    8e2e:	14 c0       	rjmp	.+40     	; 0x8e58 <_ZN4LEDs21displayActiveNoteLEDsEbh+0x11c>
        }
        break;

        case false:
        //first, turn off all tonic LEDs
        tonicLEDsOff();
    8e30:	65 df       	rcall	.-310    	; 0x8cfc <_ZN4LEDs12tonicLEDsOffEv>
    8e32:	10 e0       	ldi	r17, 0x00	; 0
        for (int i=0; i<MIDI_NOTES; i++)  {

            //turn tonic LED on only if corresponding note is active
            if (pads.noteActive((note_t)i))
    8e34:	61 2f       	mov	r22, r17
    8e36:	8a e6       	ldi	r24, 0x6A	; 106
    8e38:	9f e0       	ldi	r25, 0x0F	; 15
    8e3a:	0e 94 10 69 	call	0xd220	; 0xd220 <_ZN4Pads10noteActiveE6note_t>
    8e3e:	88 23       	and	r24, r24
    8e40:	29 f0       	breq	.+10     	; 0x8e4c <_ZN4LEDs21displayActiveNoteLEDsEbh+0x110>
                leds.setNoteLEDstate((note_t)i, ledStateDim);
    8e42:	41 e0       	ldi	r20, 0x01	; 1
    8e44:	61 2f       	mov	r22, r17
    8e46:	80 ed       	ldi	r24, 0xD0	; 208
    8e48:	9e e0       	ldi	r25, 0x0E	; 14
    8e4a:	6e df       	rcall	.-292    	; 0x8d28 <_ZN4LEDs15setNoteLEDstateE6note_t10ledState_t>
    8e4c:	1f 5f       	subi	r17, 0xFF	; 255
        break;

        case false:
        //first, turn off all tonic LEDs
        tonicLEDsOff();
        for (int i=0; i<MIDI_NOTES; i++)  {
    8e4e:	1c 30       	cpi	r17, 0x0C	; 12
    8e50:	89 f7       	brne	.-30     	; 0x8e34 <_ZN4LEDs21displayActiveNoteLEDsEbh+0xf8>
    8e52:	02 c0       	rjmp	.+4      	; 0x8e58 <_ZN4LEDs21displayActiveNoteLEDsEbh+0x11c>

    switch(padEditMode) {

        case true:
        //indicate assigned notes in pad edit mode using note leds
        for (uint8_t i=0; i<NOTES_PER_PAD; i++) {
    8e54:	10 e0       	ldi	r17, 0x00	; 0
    8e56:	b6 cf       	rjmp	.-148    	; 0x8dc4 <_ZN4LEDs21displayActiveNoteLEDsEbh+0x88>
        }
        break;

    }

}
    8e58:	2e 96       	adiw	r28, 0x0e	; 14
    8e5a:	0f b6       	in	r0, 0x3f	; 63
    8e5c:	f8 94       	cli
    8e5e:	de bf       	out	0x3e, r29	; 62
    8e60:	0f be       	out	0x3f, r0	; 63
    8e62:	cd bf       	out	0x3d, r28	; 61
    8e64:	df 91       	pop	r29
    8e66:	cf 91       	pop	r28
    8e68:	1f 91       	pop	r17
    8e6a:	0f 91       	pop	r16
    8e6c:	ff 90       	pop	r15
    8e6e:	ef 90       	pop	r14
    8e70:	df 90       	pop	r13
    8e72:	cf 90       	pop	r12
    8e74:	bf 90       	pop	r11
    8e76:	af 90       	pop	r10
    8e78:	9f 90       	pop	r9
    8e7a:	8f 90       	pop	r8
    8e7c:	08 95       	ret

00008e7e <_Z4biasdd>:
#include <avr/pgmspace.h>
#include <math.h>

#define LOG_05      (double)log((double)0.5)

double bias(double b, double x)    {
    8e7e:	cf 92       	push	r12
    8e80:	df 92       	push	r13
    8e82:	ef 92       	push	r14
    8e84:	ff 92       	push	r15
    8e86:	69 01       	movw	r12, r18
    8e88:	7a 01       	movw	r14, r20

    return pow(x, log(b)/LOG_05);
    8e8a:	0e 94 39 80 	call	0x10072	; 0x10072 <log>
    8e8e:	28 e1       	ldi	r18, 0x18	; 24
    8e90:	32 e7       	ldi	r19, 0x72	; 114
    8e92:	41 e3       	ldi	r20, 0x31	; 49
    8e94:	5f eb       	ldi	r21, 0xBF	; 191
    8e96:	0e 94 ee 7e 	call	0xfddc	; 0xfddc <__divsf3>
    8e9a:	9b 01       	movw	r18, r22
    8e9c:	ac 01       	movw	r20, r24
    8e9e:	c7 01       	movw	r24, r14
    8ea0:	b6 01       	movw	r22, r12
    8ea2:	0e 94 dc 80 	call	0x101b8	; 0x101b8 <pow>

}
    8ea6:	ff 90       	pop	r15
    8ea8:	ef 90       	pop	r14
    8eaa:	df 90       	pop	r13
    8eac:	cf 90       	pop	r12
    8eae:	08 95       	ret

00008eb0 <_Z4gaindd>:

double gain(double g, double x)    {
    8eb0:	8f 92       	push	r8
    8eb2:	9f 92       	push	r9
    8eb4:	af 92       	push	r10
    8eb6:	bf 92       	push	r11
    8eb8:	cf 92       	push	r12
    8eba:	df 92       	push	r13
    8ebc:	ef 92       	push	r14
    8ebe:	ff 92       	push	r15
    8ec0:	4b 01       	movw	r8, r22
    8ec2:	5c 01       	movw	r10, r24
    8ec4:	69 01       	movw	r12, r18
    8ec6:	7a 01       	movw	r14, r20

    if (x < 0.5)
    8ec8:	20 e0       	ldi	r18, 0x00	; 0
    8eca:	30 e0       	ldi	r19, 0x00	; 0
    8ecc:	40 e0       	ldi	r20, 0x00	; 0
    8ece:	5f e3       	ldi	r21, 0x3F	; 63
    8ed0:	c7 01       	movw	r24, r14
    8ed2:	b6 01       	movw	r22, r12
    8ed4:	0e 94 ea 7e 	call	0xfdd4	; 0xfdd4 <__cmpsf2>
    8ed8:	88 23       	and	r24, r24
    8eda:	d4 f4       	brge	.+52     	; 0x8f10 <_Z4gaindd+0x60>
        return bias(1-g, 2*x)/2;
    8edc:	a7 01       	movw	r20, r14
    8ede:	96 01       	movw	r18, r12
    8ee0:	c7 01       	movw	r24, r14
    8ee2:	b6 01       	movw	r22, r12
    8ee4:	0e 94 86 7e 	call	0xfd0c	; 0xfd0c <__addsf3>
    8ee8:	6b 01       	movw	r12, r22
    8eea:	7c 01       	movw	r14, r24
    8eec:	a5 01       	movw	r20, r10
    8eee:	94 01       	movw	r18, r8
    8ef0:	60 e0       	ldi	r22, 0x00	; 0
    8ef2:	70 e0       	ldi	r23, 0x00	; 0
    8ef4:	80 e8       	ldi	r24, 0x80	; 128
    8ef6:	9f e3       	ldi	r25, 0x3F	; 63
    8ef8:	0e 94 85 7e 	call	0xfd0a	; 0xfd0a <__subsf3>
    8efc:	a7 01       	movw	r20, r14
    8efe:	96 01       	movw	r18, r12
    8f00:	be df       	rcall	.-132    	; 0x8e7e <_Z4biasdd>
    8f02:	20 e0       	ldi	r18, 0x00	; 0
    8f04:	30 e0       	ldi	r19, 0x00	; 0
    8f06:	40 e0       	ldi	r20, 0x00	; 0
    8f08:	5f e3       	ldi	r21, 0x3F	; 63
    8f0a:	0e 94 79 80 	call	0x100f2	; 0x100f2 <__mulsf3>
    8f0e:	29 c0       	rjmp	.+82     	; 0x8f62 <_Z4gaindd+0xb2>
    else return 1 - bias(1-g,2 - 2*x)/2;
    8f10:	a7 01       	movw	r20, r14
    8f12:	96 01       	movw	r18, r12
    8f14:	c7 01       	movw	r24, r14
    8f16:	b6 01       	movw	r22, r12
    8f18:	0e 94 86 7e 	call	0xfd0c	; 0xfd0c <__addsf3>
    8f1c:	9b 01       	movw	r18, r22
    8f1e:	ac 01       	movw	r20, r24
    8f20:	60 e0       	ldi	r22, 0x00	; 0
    8f22:	70 e0       	ldi	r23, 0x00	; 0
    8f24:	80 e0       	ldi	r24, 0x00	; 0
    8f26:	90 e4       	ldi	r25, 0x40	; 64
    8f28:	0e 94 85 7e 	call	0xfd0a	; 0xfd0a <__subsf3>
    8f2c:	6b 01       	movw	r12, r22
    8f2e:	7c 01       	movw	r14, r24
    8f30:	a5 01       	movw	r20, r10
    8f32:	94 01       	movw	r18, r8
    8f34:	60 e0       	ldi	r22, 0x00	; 0
    8f36:	70 e0       	ldi	r23, 0x00	; 0
    8f38:	80 e8       	ldi	r24, 0x80	; 128
    8f3a:	9f e3       	ldi	r25, 0x3F	; 63
    8f3c:	0e 94 85 7e 	call	0xfd0a	; 0xfd0a <__subsf3>
    8f40:	a7 01       	movw	r20, r14
    8f42:	96 01       	movw	r18, r12
    8f44:	9c df       	rcall	.-200    	; 0x8e7e <_Z4biasdd>
    8f46:	20 e0       	ldi	r18, 0x00	; 0
    8f48:	30 e0       	ldi	r19, 0x00	; 0
    8f4a:	40 e0       	ldi	r20, 0x00	; 0
    8f4c:	5f e3       	ldi	r21, 0x3F	; 63
    8f4e:	0e 94 79 80 	call	0x100f2	; 0x100f2 <__mulsf3>
    8f52:	9b 01       	movw	r18, r22
    8f54:	ac 01       	movw	r20, r24
    8f56:	60 e0       	ldi	r22, 0x00	; 0
    8f58:	70 e0       	ldi	r23, 0x00	; 0
    8f5a:	80 e8       	ldi	r24, 0x80	; 128
    8f5c:	9f e3       	ldi	r25, 0x3F	; 63
    8f5e:	0e 94 85 7e 	call	0xfd0a	; 0xfd0a <__subsf3>

}
    8f62:	ff 90       	pop	r15
    8f64:	ef 90       	pop	r14
    8f66:	df 90       	pop	r13
    8f68:	cf 90       	pop	r12
    8f6a:	bf 90       	pop	r11
    8f6c:	af 90       	pop	r10
    8f6e:	9f 90       	pop	r9
    8f70:	8f 90       	pop	r8
    8f72:	08 95       	ret

00008f74 <_ZN6CurvesC1Ev>:
Curves::Curves()    {

    //def const
    for (int i=0; i<2; i++) {

        lastGain[i] = curveTypeLinear;
    8f74:	fc 01       	movw	r30, r24
    8f76:	e0 58       	subi	r30, 0x80	; 128
    8f78:	ff 4f       	sbci	r31, 0xFF	; 255
    8f7a:	35 e0       	ldi	r19, 0x05	; 5
    8f7c:	30 83       	st	Z, r19
        lastMin[i] = 0;
    8f7e:	32 96       	adiw	r30, 0x02	; 2
    8f80:	10 82       	st	Z, r1
        lastMax[i] = 127;
    8f82:	32 96       	adiw	r30, 0x02	; 2
    8f84:	2f e7       	ldi	r18, 0x7F	; 127
    8f86:	20 83       	st	Z, r18
Curves::Curves()    {

    //def const
    for (int i=0; i<2; i++) {

        lastGain[i] = curveTypeLinear;
    8f88:	33 97       	sbiw	r30, 0x03	; 3
    8f8a:	30 83       	st	Z, r19
        lastMin[i] = 0;
    8f8c:	32 96       	adiw	r30, 0x02	; 2
    8f8e:	10 82       	st	Z, r1
        lastMax[i] = 127;
    8f90:	32 96       	adiw	r30, 0x02	; 2
    8f92:	20 83       	st	Z, r18

    }

    //set linear scale by default
    memcpy_P(scale, (uint8_t*)pgm_read_word(&(scaleArray[(uint8_t)curveTypeLinear-1])), 128);
    8f94:	e9 ef       	ldi	r30, 0xF9	; 249
    8f96:	f8 e0       	ldi	r31, 0x08	; 8
    8f98:	65 91       	lpm	r22, Z+
    8f9a:	74 91       	lpm	r23, Z
    8f9c:	40 e8       	ldi	r20, 0x80	; 128
    8f9e:	50 e0       	ldi	r21, 0x00	; 0
    8fa0:	0c 94 a6 82 	jmp	0x1054c	; 0x1054c <memcpy_P>
    8fa4:	08 95       	ret

00008fa6 <_ZN6Curves10setupCurveEhhh>:

}

void Curves::setupCurve(uint8_t curveGain, uint8_t min, uint8_t max)   {
    8fa6:	2f 92       	push	r2
    8fa8:	3f 92       	push	r3
    8faa:	4f 92       	push	r4
    8fac:	5f 92       	push	r5
    8fae:	6f 92       	push	r6
    8fb0:	7f 92       	push	r7
    8fb2:	8f 92       	push	r8
    8fb4:	9f 92       	push	r9
    8fb6:	af 92       	push	r10
    8fb8:	bf 92       	push	r11
    8fba:	cf 92       	push	r12
    8fbc:	df 92       	push	r13
    8fbe:	ef 92       	push	r14
    8fc0:	ff 92       	push	r15
    8fc2:	0f 93       	push	r16
    8fc4:	1f 93       	push	r17
    8fc6:	cf 93       	push	r28
    8fc8:	df 93       	push	r29
    8fca:	cd b7       	in	r28, 0x3d	; 61
    8fcc:	de b7       	in	r29, 0x3e	; 62
    8fce:	66 97       	sbiw	r28, 0x16	; 22
    8fd0:	0f b6       	in	r0, 0x3f	; 63
    8fd2:	f8 94       	cli
    8fd4:	de bf       	out	0x3e, r29	; 62
    8fd6:	0f be       	out	0x3f, r0	; 63
    8fd8:	cd bf       	out	0x3d, r28	; 61
    8fda:	9e 83       	std	Y+6, r25	; 0x06
    8fdc:	8d 83       	std	Y+5, r24	; 0x05
    8fde:	4a 8b       	std	Y+18, r20	; 0x12
    8fe0:	29 8b       	std	Y+17, r18	; 0x11
        //for (int i=0; i<=numberOfValues; i++)
            //printf("%d\n", scale[i]);

    }

}
    8fe2:	2d b7       	in	r18, 0x3d	; 61
    8fe4:	3e b7       	in	r19, 0x3e	; 62
    8fe6:	3c 8b       	std	Y+20, r19	; 0x14
    8fe8:	2b 8b       	std	Y+19, r18	; 0x13

}

void Curves::setupCurve(uint8_t curveGain, uint8_t min, uint8_t max)   {

    if (curveGain == 5)    {
    8fea:	65 30       	cpi	r22, 0x05	; 5
    8fec:	71 f4       	brne	.+28     	; 0x900a <_ZN6Curves10setupCurveEhhh+0x64>
    8fee:	9d 81       	ldd	r25, Y+5	; 0x05
    8ff0:	2d 81       	ldd	r18, Y+5	; 0x05
    8ff2:	3e 81       	ldd	r19, Y+6	; 0x06
    8ff4:	20 58       	subi	r18, 0x80	; 128
    8ff6:	3f 4f       	sbci	r19, 0xFF	; 255
    8ff8:	e9 2f       	mov	r30, r25
    8ffa:	fe 81       	ldd	r31, Y+6	; 0x06
    8ffc:	8e 2f       	mov	r24, r30
    8ffe:	89 1b       	sub	r24, r25
        //normally, gain 0.5 produces linear scale
        //however, we are converting decimal numbers to int so there is slight error
        //in this case, setup curve manually

        for (int i=0; i<128; i++)
            scale[i] = i;
    9000:	81 93       	st	Z+, r24

        //normally, gain 0.5 produces linear scale
        //however, we are converting decimal numbers to int so there is slight error
        //in this case, setup curve manually

        for (int i=0; i<128; i++)
    9002:	e2 17       	cp	r30, r18
    9004:	f3 07       	cpc	r31, r19
    9006:	d1 f7       	brne	.-12     	; 0x8ffc <_ZN6Curves10setupCurveEhhh+0x56>
    9008:	f4 c0       	rjmp	.+488    	; 0x91f2 <_ZN6Curves10setupCurveEhhh+0x24c>

    }   else {

        //printf("Curve scaling updated. Min: %d, max: %d\n", min, max);

        double curveGain_double = curveGain/10.0; //scale gain value 0-1
    900a:	70 e0       	ldi	r23, 0x00	; 0
    900c:	80 e0       	ldi	r24, 0x00	; 0
    900e:	90 e0       	ldi	r25, 0x00	; 0
    9010:	0e 94 84 7f 	call	0xff08	; 0xff08 <__floatsisf>
    9014:	20 e0       	ldi	r18, 0x00	; 0
    9016:	30 e0       	ldi	r19, 0x00	; 0
    9018:	40 e2       	ldi	r20, 0x20	; 32
    901a:	51 e4       	ldi	r21, 0x41	; 65
    901c:	0e 94 ee 7e 	call	0xfddc	; 0xfddc <__divsf3>
    9020:	6d 87       	std	Y+13, r22	; 0x0d
    9022:	7e 87       	std	Y+14, r23	; 0x0e
    9024:	8f 87       	std	Y+15, r24	; 0x0f
    9026:	98 8b       	std	Y+16, r25	; 0x10
        uint8_t numberOfValues = max-min;
    9028:	39 89       	ldd	r19, Y+17	; 0x11
    902a:	8a 89       	ldd	r24, Y+18	; 0x12
    902c:	38 1b       	sub	r19, r24
    902e:	3b 87       	std	Y+11, r19	; 0x0b
        double step, stepValue = 0.0;

        //scale range
        step = 1.0/(double)numberOfValues;
    9030:	63 2f       	mov	r22, r19
    9032:	70 e0       	ldi	r23, 0x00	; 0
    9034:	80 e0       	ldi	r24, 0x00	; 0
    9036:	90 e0       	ldi	r25, 0x00	; 0
    9038:	0e 94 82 7f 	call	0xff04	; 0xff04 <__floatunsisf>
    903c:	9b 01       	movw	r18, r22
    903e:	ac 01       	movw	r20, r24
    9040:	60 e0       	ldi	r22, 0x00	; 0
    9042:	70 e0       	ldi	r23, 0x00	; 0
    9044:	80 e8       	ldi	r24, 0x80	; 128
    9046:	9f e3       	ldi	r25, 0x3F	; 63
    9048:	0e 94 ee 7e 	call	0xfddc	; 0xfddc <__divsf3>
    904c:	69 83       	std	Y+1, r22	; 0x01
    904e:	7a 83       	std	Y+2, r23	; 0x02
    9050:	8b 83       	std	Y+3, r24	; 0x03
    9052:	9c 83       	std	Y+4, r25	; 0x04

        for (int i=0; i<=numberOfValues; i++)   {
    9054:	9b 85       	ldd	r25, Y+11	; 0x0b
    9056:	29 2e       	mov	r2, r25
    9058:	31 2c       	mov	r3, r1
    905a:	6d 80       	ldd	r6, Y+5	; 0x05
    905c:	7e 80       	ldd	r7, Y+6	; 0x06
    905e:	83 01       	movw	r16, r6
    9060:	41 2c       	mov	r4, r1
    9062:	51 2c       	mov	r5, r1
    9064:	c1 2c       	mov	r12, r1
    9066:	d1 2c       	mov	r13, r1
    9068:	76 01       	movw	r14, r12

            //make sure that curve extremes are correct
            if (!i) scale[i] = 0;
            else if (i == numberOfValues) scale[i] = numberOfValues;
            else scale[i] = round(gain(curveGain_double, stepValue) * numberOfValues); //round up
    906a:	41 01       	movw	r8, r2
    906c:	03 2c       	mov	r0, r3
    906e:	00 0c       	add	r0, r0
    9070:	aa 08       	sbc	r10, r10
    9072:	bb 08       	sbc	r11, r11
        step = 1.0/(double)numberOfValues;

        for (int i=0; i<=numberOfValues; i++)   {

            //make sure that curve extremes are correct
            if (!i) scale[i] = 0;
    9074:	41 14       	cp	r4, r1
    9076:	51 04       	cpc	r5, r1
    9078:	21 f4       	brne	.+8      	; 0x9082 <_ZN6Curves10setupCurveEhhh+0xdc>
    907a:	ad 81       	ldd	r26, Y+5	; 0x05
    907c:	be 81       	ldd	r27, Y+6	; 0x06
    907e:	1c 92       	st	X, r1
    9080:	24 c0       	rjmp	.+72     	; 0x90ca <_ZN6Curves10setupCurveEhhh+0x124>
            else if (i == numberOfValues) scale[i] = numberOfValues;
    9082:	24 14       	cp	r2, r4
    9084:	35 04       	cpc	r3, r5
    9086:	21 f4       	brne	.+8      	; 0x9090 <_ZN6Curves10setupCurveEhhh+0xea>
    9088:	2b 85       	ldd	r18, Y+11	; 0x0b
    908a:	f8 01       	movw	r30, r16
    908c:	20 83       	st	Z, r18
    908e:	1d c0       	rjmp	.+58     	; 0x90ca <_ZN6Curves10setupCurveEhhh+0x124>
            else scale[i] = round(gain(curveGain_double, stepValue) * numberOfValues); //round up
    9090:	a7 01       	movw	r20, r14
    9092:	96 01       	movw	r18, r12
    9094:	6d 85       	ldd	r22, Y+13	; 0x0d
    9096:	7e 85       	ldd	r23, Y+14	; 0x0e
    9098:	8f 85       	ldd	r24, Y+15	; 0x0f
    909a:	98 89       	ldd	r25, Y+16	; 0x10
    909c:	09 df       	rcall	.-494    	; 0x8eb0 <_Z4gaindd>
    909e:	6f 83       	std	Y+7, r22	; 0x07
    90a0:	78 87       	std	Y+8, r23	; 0x08
    90a2:	89 87       	std	Y+9, r24	; 0x09
    90a4:	9a 87       	std	Y+10, r25	; 0x0a
    90a6:	c5 01       	movw	r24, r10
    90a8:	b4 01       	movw	r22, r8
    90aa:	0e 94 84 7f 	call	0xff08	; 0xff08 <__floatsisf>
    90ae:	9b 01       	movw	r18, r22
    90b0:	ac 01       	movw	r20, r24
    90b2:	6f 81       	ldd	r22, Y+7	; 0x07
    90b4:	78 85       	ldd	r23, Y+8	; 0x08
    90b6:	89 85       	ldd	r24, Y+9	; 0x09
    90b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    90ba:	0e 94 79 80 	call	0x100f2	; 0x100f2 <__mulsf3>
    90be:	0e 94 28 81 	call	0x10250	; 0x10250 <round>
    90c2:	0e 94 56 7f 	call	0xfeac	; 0xfeac <__fixunssfsi>
    90c6:	d8 01       	movw	r26, r16
    90c8:	6c 93       	st	X, r22
            stepValue += step;
    90ca:	29 81       	ldd	r18, Y+1	; 0x01
    90cc:	3a 81       	ldd	r19, Y+2	; 0x02
    90ce:	4b 81       	ldd	r20, Y+3	; 0x03
    90d0:	5c 81       	ldd	r21, Y+4	; 0x04
    90d2:	c7 01       	movw	r24, r14
    90d4:	b6 01       	movw	r22, r12
    90d6:	0e 94 86 7e 	call	0xfd0c	; 0xfd0c <__addsf3>
    90da:	6b 01       	movw	r12, r22
    90dc:	7c 01       	movw	r14, r24
        double step, stepValue = 0.0;

        //scale range
        step = 1.0/(double)numberOfValues;

        for (int i=0; i<=numberOfValues; i++)   {
    90de:	bf ef       	ldi	r27, 0xFF	; 255
    90e0:	4b 1a       	sub	r4, r27
    90e2:	5b 0a       	sbc	r5, r27
    90e4:	0f 5f       	subi	r16, 0xFF	; 255
    90e6:	1f 4f       	sbci	r17, 0xFF	; 255
    90e8:	24 14       	cp	r2, r4
    90ea:	35 04       	cpc	r3, r5
    90ec:	1c f6       	brge	.-122    	; 0x9074 <_ZN6Curves10setupCurveEhhh+0xce>
    90ee:	7e c0       	rjmp	.+252    	; 0x91ec <_ZN6Curves10setupCurveEhhh+0x246>

            //if min value is zero, curve is already scaled
            uint8_t tempArray[numberOfValues+1];

            for (int i=0; i<=numberOfValues; i++)
                tempArray[i] = scale[i];
    90f0:	2d 91       	ld	r18, X+
    90f2:	21 93       	st	Z+, r18
        if (min > 0)   {

            //if min value is zero, curve is already scaled
            uint8_t tempArray[numberOfValues+1];

            for (int i=0; i<=numberOfValues; i++)
    90f4:	01 96       	adiw	r24, 0x01	; 1
    90f6:	28 16       	cp	r2, r24
    90f8:	39 06       	cpc	r3, r25
    90fa:	d4 f7       	brge	.-12     	; 0x90f0 <_ZN6Curves10setupCurveEhhh+0x14a>
    90fc:	61 2c       	mov	r6, r1
    90fe:	71 2c       	mov	r7, r1
                tempArray[i] = scale[i];

            for (int i=0; i<=numberOfValues; i++)   {

                if (!i) scale[i] = min;
                else if (i == max) scale[i] = max;
    9100:	e9 89       	ldd	r30, Y+17	; 0x11
    9102:	4e 2e       	mov	r4, r30
    9104:	51 2c       	mov	r5, r1
                else scale[i] = pads.map(tempArray[i], 0, numberOfValues, min, max);
    9106:	9a 89       	ldd	r25, Y+18	; 0x12
    9108:	89 2f       	mov	r24, r25
    910a:	90 e0       	ldi	r25, 0x00	; 0
    910c:	a0 e0       	ldi	r26, 0x00	; 0
    910e:	b0 e0       	ldi	r27, 0x00	; 0
    9110:	89 83       	std	Y+1, r24	; 0x01
    9112:	9a 83       	std	Y+2, r25	; 0x02
    9114:	ab 83       	std	Y+3, r26	; 0x03
    9116:	bc 83       	std	Y+4, r27	; 0x04
    9118:	9b 85       	ldd	r25, Y+11	; 0x0b
    911a:	89 2f       	mov	r24, r25
    911c:	90 e0       	ldi	r25, 0x00	; 0
    911e:	a0 e0       	ldi	r26, 0x00	; 0
    9120:	b0 e0       	ldi	r27, 0x00	; 0
    9122:	8f 83       	std	Y+7, r24	; 0x07
    9124:	98 87       	std	Y+8, r25	; 0x08
    9126:	a9 87       	std	Y+9, r26	; 0x09
    9128:	ba 87       	std	Y+10, r27	; 0x0a
                tempArray[i] = scale[i];

            for (int i=0; i<=numberOfValues; i++)   {

                if (!i) scale[i] = min;
                else if (i == max) scale[i] = max;
    912a:	ad 81       	ldd	r26, Y+5	; 0x05
    912c:	be 81       	ldd	r27, Y+6	; 0x06
    912e:	a4 0d       	add	r26, r4
    9130:	b5 1d       	adc	r27, r5
    9132:	bc 87       	std	Y+12, r27	; 0x0c
    9134:	ab 87       	std	Y+11, r26	; 0x0b
            for (int i=0; i<=numberOfValues; i++)
                tempArray[i] = scale[i];

            for (int i=0; i<=numberOfValues; i++)   {

                if (!i) scale[i] = min;
    9136:	61 14       	cp	r6, r1
    9138:	71 04       	cpc	r7, r1
    913a:	29 f4       	brne	.+10     	; 0x9146 <_ZN6Curves10setupCurveEhhh+0x1a0>
    913c:	2a 89       	ldd	r18, Y+18	; 0x12
    913e:	ed 81       	ldd	r30, Y+5	; 0x05
    9140:	fe 81       	ldd	r31, Y+6	; 0x06
    9142:	20 83       	st	Z, r18
    9144:	2d c0       	rjmp	.+90     	; 0x91a0 <_ZN6Curves10setupCurveEhhh+0x1fa>
                else if (i == max) scale[i] = max;
    9146:	46 14       	cp	r4, r6
    9148:	57 04       	cpc	r5, r7
    914a:	29 f4       	brne	.+10     	; 0x9156 <_ZN6Curves10setupCurveEhhh+0x1b0>
    914c:	e9 89       	ldd	r30, Y+17	; 0x11
    914e:	ab 85       	ldd	r26, Y+11	; 0x0b
    9150:	bc 85       	ldd	r27, Y+12	; 0x0c
    9152:	ec 93       	st	X, r30
    9154:	25 c0       	rjmp	.+74     	; 0x91a0 <_ZN6Curves10setupCurveEhhh+0x1fa>
    9156:	ed 85       	ldd	r30, Y+13	; 0x0d
    9158:	fe 85       	ldd	r31, Y+14	; 0x0e
    915a:	e6 0d       	add	r30, r6
    915c:	f7 1d       	adc	r31, r7
                else scale[i] = pads.map(tempArray[i], 0, numberOfValues, min, max);
    915e:	40 81       	ld	r20, Z
    9160:	50 e0       	ldi	r21, 0x00	; 0
    9162:	60 e0       	ldi	r22, 0x00	; 0
    9164:	70 e0       	ldi	r23, 0x00	; 0
    9166:	1f 92       	push	r1
    9168:	1f 92       	push	r1
    916a:	1f 92       	push	r1
    916c:	f9 89       	ldd	r31, Y+17	; 0x11
    916e:	ff 93       	push	r31
    9170:	89 80       	ldd	r8, Y+1	; 0x01
    9172:	9a 80       	ldd	r9, Y+2	; 0x02
    9174:	ab 80       	ldd	r10, Y+3	; 0x03
    9176:	bc 80       	ldd	r11, Y+4	; 0x04
    9178:	cf 80       	ldd	r12, Y+7	; 0x07
    917a:	d8 84       	ldd	r13, Y+8	; 0x08
    917c:	e9 84       	ldd	r14, Y+9	; 0x09
    917e:	fa 84       	ldd	r15, Y+10	; 0x0a
    9180:	00 e0       	ldi	r16, 0x00	; 0
    9182:	10 e0       	ldi	r17, 0x00	; 0
    9184:	98 01       	movw	r18, r16
    9186:	8a e6       	ldi	r24, 0x6A	; 106
    9188:	9f e0       	ldi	r25, 0x0F	; 15
    918a:	0e 94 44 6b 	call	0xd688	; 0xd688 <_ZN4Pads3mapEmmmmm>
    918e:	ed 81       	ldd	r30, Y+5	; 0x05
    9190:	fe 81       	ldd	r31, Y+6	; 0x06
    9192:	e6 0d       	add	r30, r6
    9194:	f7 1d       	adc	r31, r7
    9196:	60 83       	st	Z, r22
    9198:	0f 90       	pop	r0
    919a:	0f 90       	pop	r0
    919c:	0f 90       	pop	r0
    919e:	0f 90       	pop	r0
            uint8_t tempArray[numberOfValues+1];

            for (int i=0; i<=numberOfValues; i++)
                tempArray[i] = scale[i];

            for (int i=0; i<=numberOfValues; i++)   {
    91a0:	2f ef       	ldi	r18, 0xFF	; 255
    91a2:	62 1a       	sub	r6, r18
    91a4:	72 0a       	sbc	r7, r18
    91a6:	26 14       	cp	r2, r6
    91a8:	37 04       	cpc	r3, r7
    91aa:	2c f6       	brge	.-118    	; 0x9136 <_ZN6Curves10setupCurveEhhh+0x190>
    91ac:	8d 89       	ldd	r24, Y+21	; 0x15
    91ae:	9e 89       	ldd	r25, Y+22	; 0x16
    91b0:	0f b6       	in	r0, 0x3f	; 63
    91b2:	f8 94       	cli
    91b4:	9e bf       	out	0x3e, r25	; 62
    91b6:	0f be       	out	0x3f, r0	; 63
    91b8:	8d bf       	out	0x3d, r24	; 61
    91ba:	1b c0       	rjmp	.+54     	; 0x91f2 <_ZN6Curves10setupCurveEhhh+0x24c>
    91bc:	ad b7       	in	r26, 0x3d	; 61
    91be:	be b7       	in	r27, 0x3e	; 62
    91c0:	be 8b       	std	Y+22, r27	; 0x16
    91c2:	ad 8b       	std	Y+21, r26	; 0x15
        }

        if (min > 0)   {

            //if min value is zero, curve is already scaled
            uint8_t tempArray[numberOfValues+1];
    91c4:	bb 85       	ldd	r27, Y+11	; 0x0b
    91c6:	8b 2f       	mov	r24, r27
    91c8:	90 e0       	ldi	r25, 0x00	; 0
    91ca:	01 96       	adiw	r24, 0x01	; 1
    91cc:	ed b7       	in	r30, 0x3d	; 61
    91ce:	fe b7       	in	r31, 0x3e	; 62
    91d0:	e8 1b       	sub	r30, r24
    91d2:	f9 0b       	sbc	r31, r25
    91d4:	0f b6       	in	r0, 0x3f	; 63
    91d6:	f8 94       	cli
    91d8:	fe bf       	out	0x3e, r31	; 62
    91da:	0f be       	out	0x3f, r0	; 63
    91dc:	ed bf       	out	0x3d, r30	; 61
    91de:	31 96       	adiw	r30, 0x01	; 1
    91e0:	fe 87       	std	Y+14, r31	; 0x0e
    91e2:	ed 87       	std	Y+13, r30	; 0x0d
    91e4:	80 e0       	ldi	r24, 0x00	; 0
    91e6:	90 e0       	ldi	r25, 0x00	; 0
    91e8:	d3 01       	movw	r26, r6
    91ea:	82 cf       	rjmp	.-252    	; 0x90f0 <_ZN6Curves10setupCurveEhhh+0x14a>
            else scale[i] = round(gain(curveGain_double, stepValue) * numberOfValues); //round up
            stepValue += step;

        }

        if (min > 0)   {
    91ec:	fa 89       	ldd	r31, Y+18	; 0x12
    91ee:	f1 11       	cpse	r31, r1
    91f0:	e5 cf       	rjmp	.-54     	; 0x91bc <_ZN6Curves10setupCurveEhhh+0x216>
        //for (int i=0; i<=numberOfValues; i++)
            //printf("%d\n", scale[i]);

    }

}
    91f2:	2b 89       	ldd	r18, Y+19	; 0x13
    91f4:	3c 89       	ldd	r19, Y+20	; 0x14
    91f6:	0f b6       	in	r0, 0x3f	; 63
    91f8:	f8 94       	cli
    91fa:	3e bf       	out	0x3e, r19	; 62
    91fc:	0f be       	out	0x3f, r0	; 63
    91fe:	2d bf       	out	0x3d, r18	; 61
    9200:	66 96       	adiw	r28, 0x16	; 22
    9202:	0f b6       	in	r0, 0x3f	; 63
    9204:	f8 94       	cli
    9206:	de bf       	out	0x3e, r29	; 62
    9208:	0f be       	out	0x3f, r0	; 63
    920a:	cd bf       	out	0x3d, r28	; 61
    920c:	df 91       	pop	r29
    920e:	cf 91       	pop	r28
    9210:	1f 91       	pop	r17
    9212:	0f 91       	pop	r16
    9214:	ff 90       	pop	r15
    9216:	ef 90       	pop	r14
    9218:	df 90       	pop	r13
    921a:	cf 90       	pop	r12
    921c:	bf 90       	pop	r11
    921e:	af 90       	pop	r10
    9220:	9f 90       	pop	r9
    9222:	8f 90       	pop	r8
    9224:	7f 90       	pop	r7
    9226:	6f 90       	pop	r6
    9228:	5f 90       	pop	r5
    922a:	4f 90       	pop	r4
    922c:	3f 90       	pop	r3
    922e:	2f 90       	pop	r2
    9230:	08 95       	ret

00009232 <_ZN6Curves13getCurveValueE16coordinateType_thhhh>:

uint8_t Curves::getCurveValue(coordinateType_t coordinate, uint8_t curveGain, uint8_t index, uint8_t min, uint8_t max)    {
    9232:	cf 92       	push	r12
    9234:	df 92       	push	r13
    9236:	ef 92       	push	r14
    9238:	ff 92       	push	r15
    923a:	0f 93       	push	r16
    923c:	1f 93       	push	r17
    923e:	cf 93       	push	r28
    9240:	df 93       	push	r29
    9242:	6c 01       	movw	r12, r24
    9244:	14 2f       	mov	r17, r20
    9246:	f2 2e       	mov	r15, r18

    if (curveGain != lastGain[(uint8_t)coordinate])   {
    9248:	e4 2f       	mov	r30, r20
    924a:	f0 e0       	ldi	r31, 0x00	; 0
    924c:	c6 2f       	mov	r28, r22
    924e:	d0 e0       	ldi	r29, 0x00	; 0
    9250:	dc 01       	movw	r26, r24
    9252:	ac 0f       	add	r26, r28
    9254:	bd 1f       	adc	r27, r29
    9256:	a0 58       	subi	r26, 0x80	; 128
    9258:	bf 4f       	sbci	r27, 0xFF	; 255
    925a:	8c 91       	ld	r24, X
    925c:	08 2e       	mov	r0, r24
    925e:	00 0c       	add	r0, r0
    9260:	99 0b       	sbc	r25, r25
    9262:	e8 17       	cp	r30, r24
    9264:	f9 07       	cpc	r31, r25
    9266:	89 f0       	breq	.+34     	; 0x928a <_ZN6Curves13getCurveValueE16coordinateType_thhhh+0x58>

        //only copy bytes from flash if received gain differs from last one
        memcpy_P(scale, (uint8_t*)pgm_read_word(&(scaleArray[curveGain-1])), 128);
    9268:	ee 0f       	add	r30, r30
    926a:	ff 1f       	adc	r31, r31
    926c:	e1 51       	subi	r30, 0x11	; 17
    926e:	f7 4f       	sbci	r31, 0xF7	; 247
    9270:	65 91       	lpm	r22, Z+
    9272:	74 91       	lpm	r23, Z
    9274:	40 e8       	ldi	r20, 0x80	; 128
    9276:	50 e0       	ldi	r21, 0x00	; 0
    9278:	c6 01       	movw	r24, r12
    927a:	0e 94 a6 82 	call	0x1054c	; 0x1054c <memcpy_P>

        lastGain[(uint8_t)coordinate] = curveGain;
    927e:	f6 01       	movw	r30, r12
    9280:	ec 0f       	add	r30, r28
    9282:	fd 1f       	adc	r31, r29
    9284:	e0 58       	subi	r30, 0x80	; 128
    9286:	ff 4f       	sbci	r31, 0xFF	; 255
    9288:	10 83       	st	Z, r17
                //printf("%d\n", scale[i]);
        //#endif

    }

    if ((min != 0) || (max != 127))    {
    928a:	01 11       	cpse	r16, r1
    928c:	03 c0       	rjmp	.+6      	; 0x9294 <_ZN6Curves13getCurveValueE16coordinateType_thhhh+0x62>
    928e:	8f e7       	ldi	r24, 0x7F	; 127
    9290:	e8 16       	cp	r14, r24
    9292:	51 f1       	breq	.+84     	; 0x92e8 <_ZN6Curves13getCurveValueE16coordinateType_thhhh+0xb6>

        if ((lastMin[(uint8_t)coordinate] != min) || (lastMax[(uint8_t)coordinate] != max))   {
    9294:	f6 01       	movw	r30, r12
    9296:	ec 0f       	add	r30, r28
    9298:	fd 1f       	adc	r31, r29
    929a:	ee 57       	subi	r30, 0x7E	; 126
    929c:	ff 4f       	sbci	r31, 0xFF	; 255
    929e:	80 81       	ld	r24, Z
    92a0:	08 2e       	mov	r0, r24
    92a2:	00 0c       	add	r0, r0
    92a4:	99 0b       	sbc	r25, r25
    92a6:	20 2f       	mov	r18, r16
    92a8:	30 e0       	ldi	r19, 0x00	; 0
    92aa:	82 17       	cp	r24, r18
    92ac:	93 07       	cpc	r25, r19
    92ae:	71 f4       	brne	.+28     	; 0x92cc <_ZN6Curves13getCurveValueE16coordinateType_thhhh+0x9a>
    92b0:	f6 01       	movw	r30, r12
    92b2:	ec 0f       	add	r30, r28
    92b4:	fd 1f       	adc	r31, r29
    92b6:	ec 57       	subi	r30, 0x7C	; 124
    92b8:	ff 4f       	sbci	r31, 0xFF	; 255
    92ba:	80 81       	ld	r24, Z
    92bc:	08 2e       	mov	r0, r24
    92be:	00 0c       	add	r0, r0
    92c0:	99 0b       	sbc	r25, r25
    92c2:	2e 2d       	mov	r18, r14
    92c4:	30 e0       	ldi	r19, 0x00	; 0
    92c6:	82 17       	cp	r24, r18
    92c8:	93 07       	cpc	r25, r19
    92ca:	71 f0       	breq	.+28     	; 0x92e8 <_ZN6Curves13getCurveValueE16coordinateType_thhhh+0xb6>

            lastMin[(uint8_t)coordinate] = min;
    92cc:	cc 0d       	add	r28, r12
    92ce:	dd 1d       	adc	r29, r13
    92d0:	fe 01       	movw	r30, r28
    92d2:	ee 57       	subi	r30, 0x7E	; 126
    92d4:	ff 4f       	sbci	r31, 0xFF	; 255
    92d6:	00 83       	st	Z, r16
            lastMax[(uint8_t)coordinate] = max;
    92d8:	cc 57       	subi	r28, 0x7C	; 124
    92da:	df 4f       	sbci	r29, 0xFF	; 255
    92dc:	e8 82       	st	Y, r14

            //in this case, we are setting up curve manually
            setupCurve(curveGain, min, max);
    92de:	2e 2d       	mov	r18, r14
    92e0:	40 2f       	mov	r20, r16
    92e2:	61 2f       	mov	r22, r17
    92e4:	c6 01       	movw	r24, r12
    92e6:	5f de       	rcall	.-834    	; 0x8fa6 <_ZN6Curves10setupCurveEhhh>

        }

    }

    return scale[index];
    92e8:	f6 01       	movw	r30, r12
    92ea:	ef 0d       	add	r30, r15
    92ec:	f1 1d       	adc	r31, r1

}
    92ee:	80 81       	ld	r24, Z
    92f0:	df 91       	pop	r29
    92f2:	cf 91       	pop	r28
    92f4:	1f 91       	pop	r17
    92f6:	0f 91       	pop	r16
    92f8:	ff 90       	pop	r15
    92fa:	ef 90       	pop	r14
    92fc:	df 90       	pop	r13
    92fe:	cf 90       	pop	r12
    9300:	08 95       	ret

00009302 <_GLOBAL__sub_I__Z4biasdd>:

    9302:	81 ed       	ldi	r24, 0xD1	; 209
    9304:	9e e0       	ldi	r25, 0x0E	; 14
    9306:	36 ce       	rjmp	.-916    	; 0x8f74 <_ZN6CurvesC1Ev>
    9308:	08 95       	ret

0000930a <_ZN4Pads5sendXEh>:
#include "Pads.h"

void Pads::sendX(uint8_t pad)  {
    930a:	cf 93       	push	r28
    930c:	df 93       	push	r29
    #if MODE_SERIAL > 0
        printf("X for pad %d: ", pad);
        printf("%d\n", lastXMIDIvalue[pad]);
        printf("X CC: %d\n", ccXPad[pad]);
    #else
        midi.sendControlChange(midiChannel[pad], ccXPad[pad], lastXMIDIvalue[pad]);
    930e:	86 0f       	add	r24, r22
    9310:	91 1d       	adc	r25, r1
    9312:	dc 01       	movw	r26, r24
    9314:	ad 5a       	subi	r26, 0xAD	; 173
    9316:	bf 4f       	sbci	r27, 0xFF	; 255
    9318:	fc 01       	movw	r30, r24
    931a:	e2 57       	subi	r30, 0x72	; 114
    931c:	fe 4f       	sbci	r31, 0xFE	; 254
    931e:	ec 01       	movw	r28, r24
    9320:	28 81       	ld	r18, Y
    9322:	4c 91       	ld	r20, X
    9324:	60 81       	ld	r22, Z
    9326:	87 ec       	ldi	r24, 0xC7	; 199
    9328:	93 e1       	ldi	r25, 0x13	; 19
    932a:	0e 94 a3 7d 	call	0xfb46	; 0xfb46 <_ZN4MIDI17sendControlChangeEhhh>
    #endif

}
    932e:	df 91       	pop	r29
    9330:	cf 91       	pop	r28
    9332:	08 95       	ret

00009334 <_ZN4Pads5sendYEh>:

void Pads::sendY(uint8_t pad)  {
    9334:	cf 93       	push	r28
    9336:	df 93       	push	r29
    #if MODE_SERIAL > 0
        printf("Y for pad %d: ", pad);
        printf("%d\n", lastYMIDIvalue[pad]);
        printf("Y CC: %d\n", ccYPad[pad]);
    #else
        midi.sendControlChange(midiChannel[pad], ccYPad[pad], lastYMIDIvalue[pad]);
    9338:	86 0f       	add	r24, r22
    933a:	91 1d       	adc	r25, r1
    933c:	dc 01       	movw	r26, r24
    933e:	a4 5a       	subi	r26, 0xA4	; 164
    9340:	bf 4f       	sbci	r27, 0xFF	; 255
    9342:	fc 01       	movw	r30, r24
    9344:	e2 57       	subi	r30, 0x72	; 114
    9346:	fe 4f       	sbci	r31, 0xFE	; 254
    9348:	ec 01       	movw	r28, r24
    934a:	29 85       	ldd	r18, Y+9	; 0x09
    934c:	4c 91       	ld	r20, X
    934e:	60 81       	ld	r22, Z
    9350:	87 ec       	ldi	r24, 0xC7	; 199
    9352:	93 e1       	ldi	r25, 0x13	; 19
    9354:	0e 94 a3 7d 	call	0xfb46	; 0xfb46 <_ZN4MIDI17sendControlChangeEhhh>
    #endif

}
    9358:	df 91       	pop	r29
    935a:	cf 91       	pop	r28
    935c:	08 95       	ret

0000935e <_ZN4Pads14sendAftertouchEh>:

    handleNoteLEDs(pad, state);

}

void Pads::sendAftertouch(uint8_t pad)  {
    935e:	9f 92       	push	r9
    9360:	af 92       	push	r10
    9362:	bf 92       	push	r11
    9364:	cf 92       	push	r12
    9366:	df 92       	push	r13
    9368:	ef 92       	push	r14
    936a:	ff 92       	push	r15
    936c:	0f 93       	push	r16
    936e:	1f 93       	push	r17
    9370:	cf 93       	push	r28
    9372:	df 93       	push	r29
    9374:	7c 01       	movw	r14, r24

    #if MODE_SERIAL < 1
        uint8_t aftertouchValue = lastMIDInoteState[pad] ? lastAftertouchValue[pad] : 0;
    9376:	06 2f       	mov	r16, r22
    9378:	10 e0       	ldi	r17, 0x00	; 0
    937a:	fc 01       	movw	r30, r24
    937c:	e0 0f       	add	r30, r16
    937e:	f1 1f       	adc	r31, r17
    9380:	84 a1       	ldd	r24, Z+36	; 0x24
    9382:	88 23       	and	r24, r24
    9384:	09 f4       	brne	.+2      	; 0x9388 <_ZN4Pads14sendAftertouchEh+0x2a>
    9386:	4e c0       	rjmp	.+156    	; 0x9424 <_ZN4Pads14sendAftertouchEh+0xc6>
    9388:	f7 01       	movw	r30, r14
    938a:	e0 0f       	add	r30, r16
    938c:	f1 1f       	adc	r31, r17
    938e:	93 8c       	ldd	r9, Z+27	; 0x1b
    #endif

    switch(aftertouchType)  {
    9390:	f7 01       	movw	r30, r14
    9392:	e9 56       	subi	r30, 0x69	; 105
    9394:	fe 4f       	sbci	r31, 0xFE	; 254
    9396:	80 81       	ld	r24, Z
    9398:	88 23       	and	r24, r24
    939a:	49 f1       	breq	.+82     	; 0x93ee <_ZN4Pads14sendAftertouchEh+0x90>
    939c:	81 30       	cpi	r24, 0x01	; 1
    939e:	11 f0       	breq	.+4      	; 0x93a4 <_ZN4Pads14sendAftertouchEh+0x46>
    93a0:	4b c0       	rjmp	.+150    	; 0x9438 <_ZN4Pads14sendAftertouchEh+0xda>
}

void Pads::sendAftertouch(uint8_t pad)  {

    #if MODE_SERIAL < 1
        uint8_t aftertouchValue = lastMIDInoteState[pad] ? lastAftertouchValue[pad] : 0;
    93a2:	91 2c       	mov	r9, r1
    93a4:	87 e0       	ldi	r24, 0x07	; 7
    93a6:	68 9f       	mul	r22, r24
    93a8:	b0 01       	movw	r22, r0
    93aa:	11 24       	eor	r1, r1
    93ac:	eb 01       	movw	r28, r22
    93ae:	c1 5b       	subi	r28, 0xB1	; 177
    93b0:	de 4f       	sbci	r29, 0xFE	; 254
    93b2:	ce 0d       	add	r28, r14
    93b4:	df 1d       	adc	r29, r15
    93b6:	6b 01       	movw	r12, r22
    93b8:	ea ea       	ldi	r30, 0xAA	; 170
    93ba:	ce 1a       	sub	r12, r30
    93bc:	ee ef       	ldi	r30, 0xFE	; 254
    93be:	de 0a       	sbc	r13, r30
    93c0:	ce 0c       	add	r12, r14
    93c2:	df 1c       	adc	r13, r15
            printf("Sending key aftertouch, pad %d: %d\n", pad, lastAftertouchValue[pad]);
        #else
            for (int i=0; i<NOTES_PER_PAD; i++) {

                if (padNote[pad][i] != BLANK_NOTE)
                    midi.sendKeyAftertouch(midiChannel[pad], padNote[pad][i], aftertouchValue);
    93c4:	57 01       	movw	r10, r14
    93c6:	a0 0e       	add	r10, r16
    93c8:	b1 1e       	adc	r11, r17
    93ca:	f2 e7       	ldi	r31, 0x72	; 114
    93cc:	af 1a       	sub	r10, r31
    93ce:	fe ef       	ldi	r31, 0xFE	; 254
    93d0:	bf 0a       	sbc	r11, r31
        #if MODE_SERIAL > 0
            printf("Sending key aftertouch, pad %d: %d\n", pad, lastAftertouchValue[pad]);
        #else
            for (int i=0; i<NOTES_PER_PAD; i++) {

                if (padNote[pad][i] != BLANK_NOTE)
    93d2:	49 91       	ld	r20, Y+
    93d4:	40 38       	cpi	r20, 0x80	; 128
    93d6:	39 f0       	breq	.+14     	; 0x93e6 <_ZN4Pads14sendAftertouchEh+0x88>
                    midi.sendKeyAftertouch(midiChannel[pad], padNote[pad][i], aftertouchValue);
    93d8:	29 2d       	mov	r18, r9
    93da:	f5 01       	movw	r30, r10
    93dc:	60 81       	ld	r22, Z
    93de:	87 ec       	ldi	r24, 0xC7	; 199
    93e0:	93 e1       	ldi	r25, 0x13	; 19
    93e2:	0e 94 d4 7d 	call	0xfba8	; 0xfba8 <_ZN4MIDI17sendKeyAftertouchEhhh>

        case aftertouchPoly:
        #if MODE_SERIAL > 0
            printf("Sending key aftertouch, pad %d: %d\n", pad, lastAftertouchValue[pad]);
        #else
            for (int i=0; i<NOTES_PER_PAD; i++) {
    93e6:	cc 15       	cp	r28, r12
    93e8:	dd 05       	cpc	r29, r13
    93ea:	99 f7       	brne	.-26     	; 0x93d2 <_ZN4Pads14sendAftertouchEh+0x74>
    93ec:	0e c0       	rjmp	.+28     	; 0x940a <_ZN4Pads14sendAftertouchEh+0xac>

        case aftertouchChannel:
        #if MODE_SERIAL > 0
            printf("Sending channel aftertouch: %d\n", maxAftertouchValue);
        #else
            midi.sendChannelAftertouch(midiChannel[pad], maxAftertouchValue);
    93ee:	f7 01       	movw	r30, r14
    93f0:	e0 0f       	add	r30, r16
    93f2:	f1 1f       	adc	r31, r17
    93f4:	e2 57       	subi	r30, 0x72	; 114
    93f6:	fe 4f       	sbci	r31, 0xFE	; 254
    93f8:	d7 01       	movw	r26, r14
    93fa:	a8 56       	subi	r26, 0x68	; 104
    93fc:	be 4f       	sbci	r27, 0xFE	; 254
    93fe:	4c 91       	ld	r20, X
    9400:	60 81       	ld	r22, Z
    9402:	87 ec       	ldi	r24, 0xC7	; 199
    9404:	93 e1       	ldi	r25, 0x13	; 19
    9406:	0e 94 bf 7d 	call	0xfb7e	; 0xfb7e <_ZN4MIDI21sendChannelAftertouchEhh>
        #endif
        break;

        }

    if (!lastMIDInoteState[pad]) aftertouchActivated[pad] = false;
    940a:	f7 01       	movw	r30, r14
    940c:	e0 0f       	add	r30, r16
    940e:	f1 1f       	adc	r31, r17
    9410:	84 a1       	ldd	r24, Z+36	; 0x24
    9412:	81 11       	cpse	r24, r1
    9414:	11 c0       	rjmp	.+34     	; 0x9438 <_ZN4Pads14sendAftertouchEh+0xda>
    9416:	0e 0d       	add	r16, r14
    9418:	1f 1d       	adc	r17, r15
    941a:	f8 01       	movw	r30, r16
    941c:	e0 55       	subi	r30, 0x50	; 80
    941e:	fe 4f       	sbci	r31, 0xFE	; 254
    9420:	10 82       	st	Z, r1
    9422:	0a c0       	rjmp	.+20     	; 0x9438 <_ZN4Pads14sendAftertouchEh+0xda>

    #if MODE_SERIAL < 1
        uint8_t aftertouchValue = lastMIDInoteState[pad] ? lastAftertouchValue[pad] : 0;
    #endif

    switch(aftertouchType)  {
    9424:	f7 01       	movw	r30, r14
    9426:	e9 56       	subi	r30, 0x69	; 105
    9428:	fe 4f       	sbci	r31, 0xFE	; 254
    942a:	80 81       	ld	r24, Z
    942c:	88 23       	and	r24, r24
    942e:	f9 f2       	breq	.-66     	; 0x93ee <_ZN4Pads14sendAftertouchEh+0x90>
    9430:	81 30       	cpi	r24, 0x01	; 1
    9432:	09 f4       	brne	.+2      	; 0x9436 <_ZN4Pads14sendAftertouchEh+0xd8>
    9434:	b6 cf       	rjmp	.-148    	; 0x93a2 <_ZN4Pads14sendAftertouchEh+0x44>
    9436:	ef cf       	rjmp	.-34     	; 0x9416 <_ZN4Pads14sendAftertouchEh+0xb8>

        }

    if (!lastMIDInoteState[pad]) aftertouchActivated[pad] = false;

}
    9438:	df 91       	pop	r29
    943a:	cf 91       	pop	r28
    943c:	1f 91       	pop	r17
    943e:	0f 91       	pop	r16
    9440:	ff 90       	pop	r15
    9442:	ef 90       	pop	r14
    9444:	df 90       	pop	r13
    9446:	cf 90       	pop	r12
    9448:	bf 90       	pop	r11
    944a:	af 90       	pop	r10
    944c:	9f 90       	pop	r9
    944e:	08 95       	ret

00009450 <_ZN4Pads14handleNoteLEDsEhb>:

void Pads::handleNoteLEDs(uint8_t pad, bool state)  {
    9450:	2f 92       	push	r2
    9452:	3f 92       	push	r3
    9454:	4f 92       	push	r4
    9456:	5f 92       	push	r5
    9458:	6f 92       	push	r6
    945a:	7f 92       	push	r7
    945c:	8f 92       	push	r8
    945e:	9f 92       	push	r9
    9460:	af 92       	push	r10
    9462:	bf 92       	push	r11
    9464:	cf 92       	push	r12
    9466:	df 92       	push	r13
    9468:	ef 92       	push	r14
    946a:	ff 92       	push	r15
    946c:	0f 93       	push	r16
    946e:	1f 93       	push	r17
    9470:	cf 93       	push	r28
    9472:	df 93       	push	r29
    9474:	cd b7       	in	r28, 0x3d	; 61
    9476:	de b7       	in	r29, 0x3e	; 62
    9478:	2b 97       	sbiw	r28, 0x0b	; 11
    947a:	0f b6       	in	r0, 0x3f	; 63
    947c:	f8 94       	cli
    947e:	de bf       	out	0x3e, r29	; 62
    9480:	0f be       	out	0x3f, r0	; 63
    9482:	cd bf       	out	0x3d, r28	; 61
    9484:	7c 01       	movw	r14, r24
    9486:	27 e0       	ldi	r18, 0x07	; 7
    9488:	62 9f       	mul	r22, r18
    948a:	c0 01       	movw	r24, r0
    948c:	11 24       	eor	r1, r1
    948e:	fc 01       	movw	r30, r24
    9490:	e1 5b       	subi	r30, 0xB1	; 177
    9492:	fe 4f       	sbci	r31, 0xFE	; 254
    9494:	ee 0d       	add	r30, r14
    9496:	ff 1d       	adc	r31, r15
    9498:	9c 01       	movw	r18, r24
    949a:	2a 5a       	subi	r18, 0xAA	; 170
    949c:	3e 4f       	sbci	r19, 0xFE	; 254
    949e:	2e 0d       	add	r18, r14
    94a0:	3f 1d       	adc	r19, r15

    uint8_t noteArray[NOTES_PER_PAD],
            noteCounter = 0;
    94a2:	90 e0       	ldi	r25, 0x00	; 0

    for (int i=0; i<NOTES_PER_PAD; i++) {

        if (padNote[pad][i] != BLANK_NOTE)  {
    94a4:	70 e0       	ldi	r23, 0x00	; 0
    94a6:	3b 01       	movw	r6, r22
    94a8:	81 91       	ld	r24, Z+
    94aa:	80 38       	cpi	r24, 0x80	; 128
    94ac:	41 f0       	breq	.+16     	; 0x94be <_ZN4Pads14handleNoteLEDsEhb+0x6e>

            noteArray[noteCounter] = padNote[pad][i];
    94ae:	a1 e0       	ldi	r26, 0x01	; 1
    94b0:	b0 e0       	ldi	r27, 0x00	; 0
    94b2:	ac 0f       	add	r26, r28
    94b4:	bd 1f       	adc	r27, r29
    94b6:	a9 0f       	add	r26, r25
    94b8:	b1 1d       	adc	r27, r1
    94ba:	8c 93       	st	X, r24
            noteCounter++;
    94bc:	9f 5f       	subi	r25, 0xFF	; 255
void Pads::handleNoteLEDs(uint8_t pad, bool state)  {

    uint8_t noteArray[NOTES_PER_PAD],
            noteCounter = 0;

    for (int i=0; i<NOTES_PER_PAD; i++) {
    94be:	e2 17       	cp	r30, r18
    94c0:	f3 07       	cpc	r31, r19
    94c2:	89 f7       	brne	.-30     	; 0x94a6 <_ZN4Pads14handleNoteLEDsEhb+0x56>

        }

    }

    switch(state)   {
    94c4:	41 30       	cpi	r20, 0x01	; 1
    94c6:	19 f4       	brne	.+6      	; 0x94ce <_ZN4Pads14handleNoteLEDsEhb+0x7e>

        case true:
        //note on
        uint8_t tonicArray[NOTES_PER_PAD];

        for (int i=0; i<noteCounter; i++) {
    94c8:	91 11       	cpse	r25, r1
    94ca:	15 c0       	rjmp	.+42     	; 0x94f6 <_ZN4Pads14handleNoteLEDsEhb+0xa6>
    94cc:	6b c0       	rjmp	.+214    	; 0x95a4 <_ZN4Pads14handleNoteLEDsEhb+0x154>
        //we need to set LEDs back to dim states for released pad, but only if
        //some other pad with same active note isn't already pressed

        bool noteActive;

        for (int z=0; z<noteCounter; z++) {
    94ce:	99 23       	and	r25, r25
    94d0:	09 f4       	brne	.+2      	; 0x94d4 <_ZN4Pads14handleNoteLEDsEhb+0x84>
    94d2:	68 c0       	rjmp	.+208    	; 0x95a4 <_ZN4Pads14handleNoteLEDsEhb+0x154>
    94d4:	fe 01       	movw	r30, r28
    94d6:	31 96       	adiw	r30, 0x01	; 1
    94d8:	4f 01       	movw	r8, r30
    94da:	9f 01       	movw	r18, r30
    94dc:	29 0f       	add	r18, r25
    94de:	31 1d       	adc	r19, r1
    94e0:	39 87       	std	Y+9, r19	; 0x09
    94e2:	28 87       	std	Y+8, r18	; 0x08
    94e4:	c7 01       	movw	r24, r14
    94e6:	8a 5a       	subi	r24, 0xAA	; 170
    94e8:	9e 4f       	sbci	r25, 0xFE	; 254
    94ea:	9b 87       	std	Y+11, r25	; 0x0b
    94ec:	8a 87       	std	Y+10, r24	; 0x0a
}

void Pads::handleNoteLEDs(uint8_t pad, bool state)  {

    uint8_t noteArray[NOTES_PER_PAD],
            noteCounter = 0;
    94ee:	21 2c       	mov	r2, r1

                for (int j=0; j<NOTES_PER_PAD; j++) {

                    if (getTonicFromNote(padNote[i][j]) == getTonicFromNote(noteArray[z])) {

                        noteActive = true;
    94f0:	33 24       	eor	r3, r3
    94f2:	33 94       	inc	r3
    94f4:	51 c0       	rjmp	.+162    	; 0x9598 <_ZN4Pads14handleNoteLEDsEhb+0x148>
    94f6:	8e 01       	movw	r16, r28
    94f8:	0f 5f       	subi	r16, 0xFF	; 255
    94fa:	1f 4f       	sbci	r17, 0xFF	; 255
    94fc:	68 01       	movw	r12, r16
    94fe:	c9 0e       	add	r12, r25
    9500:	d1 1c       	adc	r13, r1
        //note on
        uint8_t tonicArray[NOTES_PER_PAD];

        for (int i=0; i<noteCounter; i++) {

            tonicArray[i] = (uint8_t)getTonicFromNote(noteArray[i]);
    9502:	f8 01       	movw	r30, r16
    9504:	61 91       	ld	r22, Z+
    9506:	8f 01       	movw	r16, r30
    9508:	c7 01       	movw	r24, r14
    950a:	0e 94 43 69 	call	0xd286	; 0xd286 <_ZN4Pads16getTonicFromNoteEh>
            #ifdef MODULE_LEDS
                leds.setNoteLEDstate((note_t)tonicArray[i], ledStateFull);
    950e:	42 e0       	ldi	r20, 0x02	; 2
    9510:	68 2f       	mov	r22, r24
    9512:	80 ed       	ldi	r24, 0xD0	; 208
    9514:	9e e0       	ldi	r25, 0x0E	; 14
    9516:	08 dc       	rcall	.-2032   	; 0x8d28 <_ZN4LEDs15setNoteLEDstateE6note_t10ledState_t>

        case true:
        //note on
        uint8_t tonicArray[NOTES_PER_PAD];

        for (int i=0; i<noteCounter; i++) {
    9518:	0c 15       	cp	r16, r12
    951a:	1d 05       	cpc	r17, r13
    951c:	91 f7       	brne	.-28     	; 0x9502 <_ZN4Pads14handleNoteLEDsEhb+0xb2>
    951e:	42 c0       	rjmp	.+132    	; 0x95a4 <_ZN4Pads14handleNoteLEDsEhb+0x154>

            noteActive = false;

            for (int i=0; i<MAX_PADS; i++)    {

                if (!isPadPressed(i)) continue; //skip released pad
    9520:	6a 2d       	mov	r22, r10
    9522:	c7 01       	movw	r24, r14
    9524:	0e 94 62 69 	call	0xd2c4	; 0xd2c4 <_ZN4Pads12isPadPressedEh>
    9528:	88 23       	and	r24, r24
    952a:	c1 f0       	breq	.+48     	; 0x955c <_ZN4Pads14handleNoteLEDsEhb+0x10c>
                if (i == pad) continue; //skip current pad
    952c:	6a 14       	cp	r6, r10
    952e:	7b 04       	cpc	r7, r11
    9530:	a9 f0       	breq	.+42     	; 0x955c <_ZN4Pads14handleNoteLEDsEhb+0x10c>
    9532:	86 01       	movw	r16, r12
    9534:	07 50       	subi	r16, 0x07	; 7
    9536:	11 09       	sbc	r17, r1

                for (int j=0; j<NOTES_PER_PAD; j++) {

                    if (getTonicFromNote(padNote[i][j]) == getTonicFromNote(noteArray[z])) {
    9538:	f8 01       	movw	r30, r16
    953a:	61 91       	ld	r22, Z+
    953c:	8f 01       	movw	r16, r30
    953e:	c7 01       	movw	r24, r14
    9540:	0e 94 43 69 	call	0xd286	; 0xd286 <_ZN4Pads16getTonicFromNoteEh>
    9544:	58 2e       	mov	r5, r24
    9546:	f4 01       	movw	r30, r8
    9548:	60 81       	ld	r22, Z
    954a:	c7 01       	movw	r24, r14
    954c:	0e 94 43 69 	call	0xd286	; 0xd286 <_ZN4Pads16getTonicFromNoteEh>
    9550:	58 12       	cpse	r5, r24
    9552:	01 c0       	rjmp	.+2      	; 0x9556 <_ZN4Pads14handleNoteLEDsEhb+0x106>

                        noteActive = true;
    9554:	43 2c       	mov	r4, r3
            for (int i=0; i<MAX_PADS; i++)    {

                if (!isPadPressed(i)) continue; //skip released pad
                if (i == pad) continue; //skip current pad

                for (int j=0; j<NOTES_PER_PAD; j++) {
    9556:	0c 15       	cp	r16, r12
    9558:	1d 05       	cpc	r17, r13
    955a:	71 f7       	brne	.-36     	; 0x9538 <_ZN4Pads14handleNoteLEDsEhb+0xe8>

            //iterate over every note on released pad

            noteActive = false;

            for (int i=0; i<MAX_PADS; i++)    {
    955c:	ff ef       	ldi	r31, 0xFF	; 255
    955e:	af 1a       	sub	r10, r31
    9560:	bf 0a       	sbc	r11, r31
    9562:	27 e0       	ldi	r18, 0x07	; 7
    9564:	c2 0e       	add	r12, r18
    9566:	d1 1c       	adc	r13, r1
    9568:	39 e0       	ldi	r19, 0x09	; 9
    956a:	a3 16       	cp	r10, r19
    956c:	b1 04       	cpc	r11, r1
    956e:	c1 f6       	brne	.-80     	; 0x9520 <_ZN4Pads14handleNoteLEDsEhb+0xd0>

                    }

                }

            }   if (!noteActive)    {
    9570:	41 10       	cpse	r4, r1
    9572:	0a c0       	rjmp	.+20     	; 0x9588 <_ZN4Pads14handleNoteLEDsEhb+0x138>

                    #ifdef MODULE_LEDS
                        leds.setNoteLEDstate(getTonicFromNote((note_t)noteArray[z]), ledStateDim);
    9574:	f4 01       	movw	r30, r8
    9576:	60 81       	ld	r22, Z
    9578:	c7 01       	movw	r24, r14
    957a:	0e 94 43 69 	call	0xd286	; 0xd286 <_ZN4Pads16getTonicFromNoteEh>
    957e:	41 e0       	ldi	r20, 0x01	; 1
    9580:	68 2f       	mov	r22, r24
    9582:	80 ed       	ldi	r24, 0xD0	; 208
    9584:	9e e0       	ldi	r25, 0x0E	; 14
    9586:	d0 db       	rcall	.-2144   	; 0x8d28 <_ZN4LEDs15setNoteLEDstateE6note_t10ledState_t>
    9588:	ff ef       	ldi	r31, 0xFF	; 255
    958a:	8f 1a       	sub	r8, r31
    958c:	9f 0a       	sbc	r9, r31
        //we need to set LEDs back to dim states for released pad, but only if
        //some other pad with same active note isn't already pressed

        bool noteActive;

        for (int z=0; z<noteCounter; z++) {
    958e:	28 85       	ldd	r18, Y+8	; 0x08
    9590:	39 85       	ldd	r19, Y+9	; 0x09
    9592:	82 16       	cp	r8, r18
    9594:	93 06       	cpc	r9, r19
    9596:	31 f0       	breq	.+12     	; 0x95a4 <_ZN4Pads14handleNoteLEDsEhb+0x154>
    9598:	ca 84       	ldd	r12, Y+10	; 0x0a
    959a:	db 84       	ldd	r13, Y+11	; 0x0b
}

void Pads::handleNoteLEDs(uint8_t pad, bool state)  {

    uint8_t noteArray[NOTES_PER_PAD],
            noteCounter = 0;
    959c:	a2 2c       	mov	r10, r2
    959e:	b1 2c       	mov	r11, r1
    95a0:	41 2c       	mov	r4, r1
    95a2:	be cf       	rjmp	.-132    	; 0x9520 <_ZN4Pads14handleNoteLEDsEhb+0xd0>
        }
        break;

    }

}
    95a4:	2b 96       	adiw	r28, 0x0b	; 11
    95a6:	0f b6       	in	r0, 0x3f	; 63
    95a8:	f8 94       	cli
    95aa:	de bf       	out	0x3e, r29	; 62
    95ac:	0f be       	out	0x3f, r0	; 63
    95ae:	cd bf       	out	0x3d, r28	; 61
    95b0:	df 91       	pop	r29
    95b2:	cf 91       	pop	r28
    95b4:	1f 91       	pop	r17
    95b6:	0f 91       	pop	r16
    95b8:	ff 90       	pop	r15
    95ba:	ef 90       	pop	r14
    95bc:	df 90       	pop	r13
    95be:	cf 90       	pop	r12
    95c0:	bf 90       	pop	r11
    95c2:	af 90       	pop	r10
    95c4:	9f 90       	pop	r9
    95c6:	8f 90       	pop	r8
    95c8:	7f 90       	pop	r7
    95ca:	6f 90       	pop	r6
    95cc:	5f 90       	pop	r5
    95ce:	4f 90       	pop	r4
    95d0:	3f 90       	pop	r3
    95d2:	2f 90       	pop	r2
    95d4:	08 95       	ret

000095d6 <_ZN4Pads9sendNotesEhhb>:
        midi.sendControlChange(midiChannel[pad], ccYPad[pad], lastYMIDIvalue[pad]);
    #endif

}

void Pads::sendNotes(uint8_t pad, uint8_t velocity, bool state)   {
    95d6:	2f 92       	push	r2
    95d8:	3f 92       	push	r3
    95da:	4f 92       	push	r4
    95dc:	5f 92       	push	r5
    95de:	6f 92       	push	r6
    95e0:	7f 92       	push	r7
    95e2:	8f 92       	push	r8
    95e4:	9f 92       	push	r9
    95e6:	af 92       	push	r10
    95e8:	bf 92       	push	r11
    95ea:	cf 92       	push	r12
    95ec:	df 92       	push	r13
    95ee:	ef 92       	push	r14
    95f0:	ff 92       	push	r15
    95f2:	0f 93       	push	r16
    95f4:	1f 93       	push	r17
    95f6:	cf 93       	push	r28
    95f8:	df 93       	push	r29
    95fa:	cd b7       	in	r28, 0x3d	; 61
    95fc:	de b7       	in	r29, 0x3e	; 62
    95fe:	28 97       	sbiw	r28, 0x08	; 8
    9600:	0f b6       	in	r0, 0x3f	; 63
    9602:	f8 94       	cli
    9604:	de bf       	out	0x3e, r29	; 62
    9606:	0f be       	out	0x3f, r0	; 63
    9608:	cd bf       	out	0x3d, r28	; 61
    960a:	6c 01       	movw	r12, r24
    960c:	69 83       	std	Y+1, r22	; 0x01
    960e:	b4 2e       	mov	r11, r20
    9610:	2c 83       	std	Y+4, r18	; 0x04

    bool sendOff;

    switch(state)   {
    9612:	21 30       	cpi	r18, 0x01	; 1
    9614:	31 f5       	brne	.+76     	; 0x9662 <_ZN4Pads9sendNotesEhhb+0x8c>
    9616:	27 e0       	ldi	r18, 0x07	; 7
    9618:	62 9f       	mul	r22, r18
    961a:	80 01       	movw	r16, r0
    961c:	11 24       	eor	r1, r1
    961e:	48 01       	movw	r8, r16
    9620:	31 eb       	ldi	r19, 0xB1	; 177
    9622:	83 1a       	sub	r8, r19
    9624:	3e ef       	ldi	r19, 0xFE	; 254
    9626:	93 0a       	sbc	r9, r19
    9628:	88 0e       	add	r8, r24
    962a:	99 1e       	adc	r9, r25
    962c:	0a 5a       	subi	r16, 0xAA	; 170
    962e:	1e 4f       	sbci	r17, 0xFE	; 254
    9630:	08 0f       	add	r16, r24
    9632:	19 1f       	adc	r17, r25
            if (padNote[pad][i] == BLANK_NOTE) continue;

            #if MODE_SERIAL > 0
                printf("%d\n", padNote[pad][i]);
            #else
                midi.sendNoteOn(midiChannel[pad], padNote[pad][i], velocity);
    9634:	7c 01       	movw	r14, r24
    9636:	e6 0e       	add	r14, r22
    9638:	f1 1c       	adc	r15, r1
    963a:	92 e7       	ldi	r25, 0x72	; 114
    963c:	e9 1a       	sub	r14, r25
    963e:	9e ef       	ldi	r25, 0xFE	; 254
    9640:	f9 0a       	sbc	r15, r25
            printf("Pad %d pressed. Notes:\n", pad);
        #endif

        for (int i=0; i<NOTES_PER_PAD; i++) {

            if (padNote[pad][i] == BLANK_NOTE) continue;
    9642:	f4 01       	movw	r30, r8
    9644:	41 91       	ld	r20, Z+
    9646:	4f 01       	movw	r8, r30
    9648:	40 38       	cpi	r20, 0x80	; 128
    964a:	39 f0       	breq	.+14     	; 0x965a <_ZN4Pads9sendNotesEhhb+0x84>

            #if MODE_SERIAL > 0
                printf("%d\n", padNote[pad][i]);
            #else
                midi.sendNoteOn(midiChannel[pad], padNote[pad][i], velocity);
    964c:	2b 2d       	mov	r18, r11
    964e:	f7 01       	movw	r30, r14
    9650:	60 81       	ld	r22, Z
    9652:	87 ec       	ldi	r24, 0xC7	; 199
    9654:	93 e1       	ldi	r25, 0x13	; 19
    9656:	0e 94 64 7d 	call	0xfac8	; 0xfac8 <_ZN4MIDI10sendNoteOnEhhh>
        //note on
        #if MODE_SERIAL > 0
            printf("Pad %d pressed. Notes:\n", pad);
        #endif

        for (int i=0; i<NOTES_PER_PAD; i++) {
    965a:	80 16       	cp	r8, r16
    965c:	91 06       	cpc	r9, r17
    965e:	89 f7       	brne	.-30     	; 0x9642 <_ZN4Pads9sendNotesEhhb+0x6c>
    9660:	5e c0       	rjmp	.+188    	; 0x971e <_ZN4Pads9sendNotesEhhb+0x148>
    9662:	29 81       	ldd	r18, Y+1	; 0x01
    9664:	f7 e0       	ldi	r31, 0x07	; 7
    9666:	2f 9f       	mul	r18, r31
    9668:	10 01       	movw	r2, r0
    966a:	11 24       	eor	r1, r1
    966c:	41 01       	movw	r8, r2
    966e:	31 eb       	ldi	r19, 0xB1	; 177
    9670:	83 1a       	sub	r8, r19
    9672:	3e ef       	ldi	r19, 0xFE	; 254
    9674:	93 0a       	sbc	r9, r19
    9676:	88 0e       	add	r8, r24
    9678:	99 1e       	adc	r9, r25
    967a:	2c 01       	movw	r4, r24
    967c:	81 eb       	ldi	r24, 0xB1	; 177
    967e:	48 1a       	sub	r4, r24
    9680:	8e ef       	ldi	r24, 0xFE	; 254
    9682:	58 0a       	sbc	r5, r24
    9684:	9a ea       	ldi	r25, 0xAA	; 170
    9686:	29 1a       	sub	r2, r25
    9688:	9e ef       	ldi	r25, 0xFE	; 254
    968a:	39 0a       	sbc	r3, r25
    968c:	2c 0c       	add	r2, r12
    968e:	3d 1c       	adc	r3, r13
            //some special considerations here
            for (int i=0; i<NOTES_PER_PAD; i++)    {

                sendOff = true;

                if (padNote[pad][i] == BLANK_NOTE) continue;
    9690:	a2 2e       	mov	r10, r18
    9692:	b1 2c       	mov	r11, r1
    9694:	f6 01       	movw	r30, r12
    9696:	e5 56       	subi	r30, 0x65	; 101
    9698:	ff 4f       	sbci	r31, 0xFF	; 255
    969a:	fb 83       	std	Y+3, r31	; 0x03
    969c:	ea 83       	std	Y+2, r30	; 0x02

                    #if MODE_SERIAL > 0
                        printf("%d\n", padNote[pad][i]);
                    #else
                        uint8_t velocity_ = 0;
                        midi.sendNoteOff(midiChannel[pad], padNote[pad][i], velocity_);
    969e:	c6 01       	movw	r24, r12
    96a0:	8a 0d       	add	r24, r10
    96a2:	9b 1d       	adc	r25, r11
    96a4:	9c 01       	movw	r18, r24
    96a6:	22 57       	subi	r18, 0x72	; 114
    96a8:	3e 4f       	sbci	r19, 0xFE	; 254
    96aa:	3e 83       	std	Y+6, r19	; 0x06
    96ac:	2d 83       	std	Y+5, r18	; 0x05
    96ae:	34 01       	movw	r6, r8
            //some special considerations here
            for (int i=0; i<NOTES_PER_PAD; i++)    {

                sendOff = true;

                if (padNote[pad][i] == BLANK_NOTE) continue;
    96b0:	f4 01       	movw	r30, r8
    96b2:	80 81       	ld	r24, Z
    96b4:	80 38       	cpi	r24, 0x80	; 128
    96b6:	51 f1       	breq	.+84     	; 0x970c <_ZN4Pads9sendNotesEhhb+0x136>
    96b8:	0a 81       	ldd	r16, Y+2	; 0x02
    96ba:	1b 81       	ldd	r17, Y+3	; 0x03
    96bc:	72 01       	movw	r14, r4
    96be:	1f 82       	std	Y+7, r1	; 0x07
    96c0:	18 86       	std	Y+8, r1	; 0x08

                for (int j=0; j<MAX_PADS; j++) {

                    //don't check current pad
                    if (j == pad) continue;
    96c2:	2f 81       	ldd	r18, Y+7	; 0x07
    96c4:	38 85       	ldd	r19, Y+8	; 0x08
    96c6:	2a 15       	cp	r18, r10
    96c8:	3b 05       	cpc	r19, r11
    96ca:	81 f0       	breq	.+32     	; 0x96ec <_ZN4Pads9sendNotesEhhb+0x116>

                    //don't check released pads
                    if (!isPadPressed(j)) continue;
    96cc:	6f 81       	ldd	r22, Y+7	; 0x07
    96ce:	c6 01       	movw	r24, r12
    96d0:	0e 94 62 69 	call	0xd2c4	; 0xd2c4 <_ZN4Pads12isPadPressedEh>
    96d4:	88 23       	and	r24, r24
    96d6:	51 f0       	breq	.+20     	; 0x96ec <_ZN4Pads9sendNotesEhhb+0x116>

                    //don't check pad if noteSend is disabled
                    if (!noteSendEnabled[j]) continue;
    96d8:	f8 01       	movw	r30, r16
    96da:	80 81       	ld	r24, Z
    96dc:	88 23       	and	r24, r24
    96de:	31 f0       	breq	.+12     	; 0x96ec <_ZN4Pads9sendNotesEhhb+0x116>

                    //only send note off if the same note isn't active on some other pad already
                    if (padNote[j][i] == padNote[pad][i])    {
    96e0:	f7 01       	movw	r30, r14
    96e2:	90 81       	ld	r25, Z
    96e4:	f3 01       	movw	r30, r6
    96e6:	80 81       	ld	r24, Z
    96e8:	98 17       	cp	r25, r24
    96ea:	81 f0       	breq	.+32     	; 0x970c <_ZN4Pads9sendNotesEhhb+0x136>

                sendOff = true;

                if (padNote[pad][i] == BLANK_NOTE) continue;

                for (int j=0; j<MAX_PADS; j++) {
    96ec:	2f 81       	ldd	r18, Y+7	; 0x07
    96ee:	38 85       	ldd	r19, Y+8	; 0x08
    96f0:	2f 5f       	subi	r18, 0xFF	; 255
    96f2:	3f 4f       	sbci	r19, 0xFF	; 255
    96f4:	38 87       	std	Y+8, r19	; 0x08
    96f6:	2f 83       	std	Y+7, r18	; 0x07
    96f8:	0f 5f       	subi	r16, 0xFF	; 255
    96fa:	1f 4f       	sbci	r17, 0xFF	; 255
    96fc:	37 e0       	ldi	r19, 0x07	; 7
    96fe:	e3 0e       	add	r14, r19
    9700:	f1 1c       	adc	r15, r1
    9702:	8f 81       	ldd	r24, Y+7	; 0x07
    9704:	98 85       	ldd	r25, Y+8	; 0x08
    9706:	09 97       	sbiw	r24, 0x09	; 9
    9708:	e1 f6       	brne	.-72     	; 0x96c2 <_ZN4Pads9sendNotesEhhb+0xec>
    970a:	0e c0       	rjmp	.+28     	; 0x9728 <_ZN4Pads9sendNotesEhhb+0x152>
    970c:	9f ef       	ldi	r25, 0xFF	; 255
    970e:	89 1a       	sub	r8, r25
    9710:	99 0a       	sbc	r9, r25
    9712:	ef ef       	ldi	r30, 0xFF	; 255
    9714:	4e 1a       	sub	r4, r30
    9716:	5e 0a       	sbc	r5, r30
        //note off
        #if MODE_SERIAL > 0
            printf("Pad %d released. Notes: \n", pad);
        #endif
            //some special considerations here
            for (int i=0; i<NOTES_PER_PAD; i++)    {
    9718:	82 14       	cp	r8, r2
    971a:	93 04       	cpc	r9, r3
    971c:	41 f6       	brne	.-112    	; 0x96ae <_ZN4Pads9sendNotesEhhb+0xd8>

        break;

    }

    handleNoteLEDs(pad, state);
    971e:	4c 81       	ldd	r20, Y+4	; 0x04
    9720:	69 81       	ldd	r22, Y+1	; 0x01
    9722:	c6 01       	movw	r24, r12
    9724:	95 de       	rcall	.-726    	; 0x9450 <_ZN4Pads14handleNoteLEDsEhb>
    9726:	0b c0       	rjmp	.+22     	; 0x973e <_ZN4Pads9sendNotesEhhb+0x168>

                    #if MODE_SERIAL > 0
                        printf("%d\n", padNote[pad][i]);
                    #else
                        uint8_t velocity_ = 0;
                        midi.sendNoteOff(midiChannel[pad], padNote[pad][i], velocity_);
    9728:	20 e0       	ldi	r18, 0x00	; 0
    972a:	f3 01       	movw	r30, r6
    972c:	40 81       	ld	r20, Z
    972e:	ed 81       	ldd	r30, Y+5	; 0x05
    9730:	fe 81       	ldd	r31, Y+6	; 0x06
    9732:	60 81       	ld	r22, Z
    9734:	87 ec       	ldi	r24, 0xC7	; 199
    9736:	93 e1       	ldi	r25, 0x13	; 19
    9738:	0e 94 80 7d 	call	0xfb00	; 0xfb00 <_ZN4MIDI11sendNoteOffEhhh>
    973c:	e7 cf       	rjmp	.-50     	; 0x970c <_ZN4Pads9sendNotesEhhb+0x136>

    }

    handleNoteLEDs(pad, state);

}
    973e:	28 96       	adiw	r28, 0x08	; 8
    9740:	0f b6       	in	r0, 0x3f	; 63
    9742:	f8 94       	cli
    9744:	de bf       	out	0x3e, r29	; 62
    9746:	0f be       	out	0x3f, r0	; 63
    9748:	cd bf       	out	0x3d, r28	; 61
    974a:	df 91       	pop	r29
    974c:	cf 91       	pop	r28
    974e:	1f 91       	pop	r17
    9750:	0f 91       	pop	r16
    9752:	ff 90       	pop	r15
    9754:	ef 90       	pop	r14
    9756:	df 90       	pop	r13
    9758:	cf 90       	pop	r12
    975a:	bf 90       	pop	r11
    975c:	af 90       	pop	r10
    975e:	9f 90       	pop	r9
    9760:	8f 90       	pop	r8
    9762:	7f 90       	pop	r7
    9764:	6f 90       	pop	r6
    9766:	5f 90       	pop	r5
    9768:	4f 90       	pop	r4
    976a:	3f 90       	pop	r3
    976c:	2f 90       	pop	r2
    976e:	08 95       	ret

00009770 <_ZN4Pads13handleNoteLCDEhhb>:

    }

}

void Pads::handleNoteLCD(uint8_t pad, uint8_t velocity, bool state)    {
    9770:	5f 92       	push	r5
    9772:	6f 92       	push	r6
    9774:	7f 92       	push	r7
    9776:	8f 92       	push	r8
    9778:	9f 92       	push	r9
    977a:	af 92       	push	r10
    977c:	bf 92       	push	r11
    977e:	cf 92       	push	r12
    9780:	df 92       	push	r13
    9782:	ef 92       	push	r14
    9784:	ff 92       	push	r15
    9786:	0f 93       	push	r16
    9788:	1f 93       	push	r17
    978a:	cf 93       	push	r28
    978c:	df 93       	push	r29
    978e:	cd b7       	in	r28, 0x3d	; 61
    9790:	de b7       	in	r29, 0x3e	; 62
    9792:	65 97       	sbiw	r28, 0x15	; 21
    9794:	0f b6       	in	r0, 0x3f	; 63
    9796:	f8 94       	cli
    9798:	de bf       	out	0x3e, r29	; 62
    979a:	0f be       	out	0x3f, r0	; 63
    979c:	cd bf       	out	0x3d, r28	; 61
    979e:	7c 01       	movw	r14, r24
    97a0:	64 2e       	mov	r6, r20
    97a2:	87 e0       	ldi	r24, 0x07	; 7
    97a4:	68 9f       	mul	r22, r24
    97a6:	a0 01       	movw	r20, r0
    97a8:	11 24       	eor	r1, r1
    97aa:	fa 01       	movw	r30, r20
    97ac:	e1 5b       	subi	r30, 0xB1	; 177
    97ae:	fe 4f       	sbci	r31, 0xFE	; 254
    97b0:	ee 0d       	add	r30, r14
    97b2:	ff 1d       	adc	r31, r15
    97b4:	4a 5a       	subi	r20, 0xAA	; 170
    97b6:	5e 4f       	sbci	r21, 0xFE	; 254
    97b8:	4e 0d       	add	r20, r14
    97ba:	5f 1d       	adc	r21, r15

    uint8_t noteArray[NOTES_PER_PAD],
            noteCounter = 0;
    97bc:	71 2c       	mov	r7, r1

    for (int i=0; i<NOTES_PER_PAD; i++) {

        if (padNote[pad][i] != BLANK_NOTE)  {
    97be:	70 e0       	ldi	r23, 0x00	; 0
    97c0:	8b 01       	movw	r16, r22
    97c2:	91 91       	ld	r25, Z+
    97c4:	90 38       	cpi	r25, 0x80	; 128
    97c6:	41 f0       	breq	.+16     	; 0x97d8 <_ZN4Pads13handleNoteLCDEhhb+0x68>

            noteArray[noteCounter] = padNote[pad][i];
    97c8:	af e0       	ldi	r26, 0x0F	; 15
    97ca:	b0 e0       	ldi	r27, 0x00	; 0
    97cc:	ac 0f       	add	r26, r28
    97ce:	bd 1f       	adc	r27, r29
    97d0:	a7 0d       	add	r26, r7
    97d2:	b1 1d       	adc	r27, r1
    97d4:	9c 93       	st	X, r25
            noteCounter++;
    97d6:	73 94       	inc	r7
void Pads::handleNoteLCD(uint8_t pad, uint8_t velocity, bool state)    {

    uint8_t noteArray[NOTES_PER_PAD],
            noteCounter = 0;

    for (int i=0; i<NOTES_PER_PAD; i++) {
    97d8:	e4 17       	cp	r30, r20
    97da:	f5 07       	cpc	r31, r21
    97dc:	89 f7       	brne	.-30     	; 0x97c0 <_ZN4Pads13handleNoteLCDEhhb+0x50>

        }

    }

    switch(state)   {
    97de:	21 30       	cpi	r18, 0x01	; 1
    97e0:	09 f0       	breq	.+2      	; 0x97e4 <_ZN4Pads13handleNoteLCDEhhb+0x74>
    97e2:	65 c0       	rjmp	.+202    	; 0x98ae <_ZN4Pads13handleNoteLCDEhhb+0x13e>

        case true:
        if (!noteCounter || !noteSendEnabled[pad])  {
    97e4:	77 20       	and	r7, r7
    97e6:	59 f0       	breq	.+22     	; 0x97fe <_ZN4Pads13handleNoteLCDEhhb+0x8e>
    97e8:	0e 0d       	add	r16, r14
    97ea:	1f 1d       	adc	r17, r15
    97ec:	f8 01       	movw	r30, r16
    97ee:	e5 56       	subi	r30, 0x65	; 101
    97f0:	ff 4f       	sbci	r31, 0xFF	; 255
    97f2:	80 81       	ld	r24, Z
    97f4:	88 23       	and	r24, r24
    97f6:	19 f0       	breq	.+6      	; 0x97fe <_ZN4Pads13handleNoteLCDEhhb+0x8e>
        }
        //note on
        uint8_t tonicArray[NOTES_PER_PAD];
        int8_t octaveArray[NOTES_PER_PAD];

        for (int i=0; i<noteCounter; i++) {
    97f8:	71 10       	cpse	r7, r1
    97fa:	0f c0       	rjmp	.+30     	; 0x981a <_ZN4Pads13handleNoteLCDEhhb+0xaa>
    97fc:	30 c0       	rjmp	.+96     	; 0x985e <_ZN4Pads13handleNoteLCDEhhb+0xee>

        case true:
        if (!noteCounter || !noteSendEnabled[pad])  {

            #ifdef MODULE_LCD
                display.displayActivePadNotes(0, 0, 0, editModeActive());
    97fe:	c7 01       	movw	r24, r14
    9800:	0e 94 8c 56 	call	0xad18	; 0xad18 <_ZN4Pads14editModeActiveEv>
    9804:	08 2f       	mov	r16, r24
    9806:	20 e0       	ldi	r18, 0x00	; 0
    9808:	40 e0       	ldi	r20, 0x00	; 0
    980a:	50 e0       	ldi	r21, 0x00	; 0
    980c:	60 e0       	ldi	r22, 0x00	; 0
    980e:	70 e0       	ldi	r23, 0x00	; 0
    9810:	82 e6       	ldi	r24, 0x62	; 98
    9812:	9c e0       	ldi	r25, 0x0C	; 12
    9814:	0e 94 32 3c 	call	0x7864	; 0x7864 <_ZN3LCD21displayActivePadNotesEPhPahb>
    9818:	57 c0       	rjmp	.+174    	; 0x98c8 <_ZN4Pads13handleNoteLCDEhhb+0x158>
    981a:	8e 01       	movw	r16, r28
    981c:	01 5f       	subi	r16, 0xF1	; 241
    981e:	1f 4f       	sbci	r17, 0xFF	; 255
    9820:	5e 01       	movw	r10, r28
    9822:	98 e0       	ldi	r25, 0x08	; 8
    9824:	a9 0e       	add	r10, r25
    9826:	b1 1c       	adc	r11, r1
    9828:	fe 01       	movw	r30, r28
    982a:	31 96       	adiw	r30, 0x01	; 1
    982c:	6f 01       	movw	r12, r30
    982e:	48 01       	movw	r8, r16
    9830:	87 0c       	add	r8, r7
    9832:	91 1c       	adc	r9, r1
        uint8_t tonicArray[NOTES_PER_PAD];
        int8_t octaveArray[NOTES_PER_PAD];

        for (int i=0; i<noteCounter; i++) {

            tonicArray[i] = (uint8_t)getTonicFromNote(noteArray[i]);
    9834:	f8 01       	movw	r30, r16
    9836:	51 90       	ld	r5, Z+
    9838:	8f 01       	movw	r16, r30
    983a:	65 2d       	mov	r22, r5
    983c:	c7 01       	movw	r24, r14
    983e:	0e 94 43 69 	call	0xd286	; 0xd286 <_ZN4Pads16getTonicFromNoteEh>
    9842:	f5 01       	movw	r30, r10
    9844:	81 93       	st	Z+, r24
    9846:	5f 01       	movw	r10, r30
            octaveArray[i] = normalizeOctave(getOctaveFromNote(noteArray[i]));
    9848:	65 2d       	mov	r22, r5
    984a:	c7 01       	movw	r24, r14
    984c:	0e 94 56 69 	call	0xd2ac	; 0xd2ac <_ZN4Pads17getOctaveFromNoteEh>
    9850:	82 50       	subi	r24, 0x02	; 2
    9852:	f6 01       	movw	r30, r12
    9854:	81 93       	st	Z+, r24
    9856:	6f 01       	movw	r12, r30
        }
        //note on
        uint8_t tonicArray[NOTES_PER_PAD];
        int8_t octaveArray[NOTES_PER_PAD];

        for (int i=0; i<noteCounter; i++) {
    9858:	08 15       	cp	r16, r8
    985a:	19 05       	cpc	r17, r9
    985c:	59 f7       	brne	.-42     	; 0x9834 <_ZN4Pads13handleNoteLCDEhhb+0xc4>
            octaveArray[i] = normalizeOctave(getOctaveFromNote(noteArray[i]));

        }

        #ifdef MODULE_LCD
            display.displayActivePadNotes(tonicArray, octaveArray, noteCounter, editModeActive());
    985e:	c7 01       	movw	r24, r14
    9860:	0e 94 8c 56 	call	0xad18	; 0xad18 <_ZN4Pads14editModeActiveEv>
    9864:	08 2f       	mov	r16, r24
    9866:	27 2d       	mov	r18, r7
    9868:	ae 01       	movw	r20, r28
    986a:	4f 5f       	subi	r20, 0xFF	; 255
    986c:	5f 4f       	sbci	r21, 0xFF	; 255
    986e:	be 01       	movw	r22, r28
    9870:	68 5f       	subi	r22, 0xF8	; 248
    9872:	7f 4f       	sbci	r23, 0xFF	; 255
    9874:	82 e6       	ldi	r24, 0x62	; 98
    9876:	9c e0       	ldi	r25, 0x0C	; 12
    9878:	0e 94 32 3c 	call	0x7864	; 0x7864 <_ZN3LCD21displayActivePadNotesEPhPahb>
            display.displayVelocity(velocity);
    987c:	66 2d       	mov	r22, r6
    987e:	82 e6       	ldi	r24, 0x62	; 98
    9880:	9c e0       	ldi	r25, 0x0C	; 12
    9882:	0e 94 ca 39 	call	0x7394	; 0x7394 <_ZN3LCD15displayVelocityEh>
            if (isPredefinedScale(getActiveScale()))
    9886:	c7 01       	movw	r24, r14
    9888:	0e 94 f1 67 	call	0xcfe2	; 0xcfe2 <_ZN4Pads14getActiveScaleEv>
    988c:	68 2f       	mov	r22, r24
    988e:	c7 01       	movw	r24, r14
    9890:	0e 94 f7 68 	call	0xd1ee	; 0xd1ee <_ZN4Pads17isPredefinedScaleEh>
    9894:	88 23       	and	r24, r24
    9896:	c1 f0       	breq	.+48     	; 0x98c8 <_ZN4Pads13handleNoteLCDEhhb+0x158>
                if (noteShiftLevel != 0)
    9898:	f7 01       	movw	r30, r14
    989a:	e5 56       	subi	r30, 0x65	; 101
    989c:	fe 4f       	sbci	r31, 0xFE	; 254
    989e:	60 81       	ld	r22, Z
    98a0:	66 23       	and	r22, r22
    98a2:	91 f0       	breq	.+36     	; 0x98c8 <_ZN4Pads13handleNoteLCDEhhb+0x158>
                    display.displayNoteShiftLevel(noteShiftLevel);
    98a4:	82 e6       	ldi	r24, 0x62	; 98
    98a6:	9c e0       	ldi	r25, 0x0C	; 12
    98a8:	0e 94 24 42 	call	0x8448	; 0x8448 <_ZN3LCD21displayNoteShiftLevelEa>
    98ac:	0d c0       	rjmp	.+26     	; 0x98c8 <_ZN4Pads13handleNoteLCDEhhb+0x158>
        break;

        case false:
            //note off
            #ifdef MODULE_LCD
            display.displayActivePadNotes(0, 0, 0, editModeActive());
    98ae:	c7 01       	movw	r24, r14
    98b0:	0e 94 8c 56 	call	0xad18	; 0xad18 <_ZN4Pads14editModeActiveEv>
    98b4:	08 2f       	mov	r16, r24
    98b6:	20 e0       	ldi	r18, 0x00	; 0
    98b8:	40 e0       	ldi	r20, 0x00	; 0
    98ba:	50 e0       	ldi	r21, 0x00	; 0
    98bc:	60 e0       	ldi	r22, 0x00	; 0
    98be:	70 e0       	ldi	r23, 0x00	; 0
    98c0:	82 e6       	ldi	r24, 0x62	; 98
    98c2:	9c e0       	ldi	r25, 0x0C	; 12
    98c4:	0e 94 32 3c 	call	0x7864	; 0x7864 <_ZN3LCD21displayActivePadNotesEPhPahb>
            #endif
        break;

    }

    98c8:	65 96       	adiw	r28, 0x15	; 21
    98ca:	0f b6       	in	r0, 0x3f	; 63
    98cc:	f8 94       	cli
    98ce:	de bf       	out	0x3e, r29	; 62
    98d0:	0f be       	out	0x3f, r0	; 63
    98d2:	cd bf       	out	0x3d, r28	; 61
    98d4:	df 91       	pop	r29
    98d6:	cf 91       	pop	r28
    98d8:	1f 91       	pop	r17
    98da:	0f 91       	pop	r16
    98dc:	ff 90       	pop	r15
    98de:	ef 90       	pop	r14
    98e0:	df 90       	pop	r13
    98e2:	cf 90       	pop	r12
    98e4:	bf 90       	pop	r11
    98e6:	af 90       	pop	r10
    98e8:	9f 90       	pop	r9
    98ea:	8f 90       	pop	r8
    98ec:	7f 90       	pop	r7
    98ee:	6f 90       	pop	r6
    98f0:	5f 90       	pop	r5
    98f2:	08 95       	ret

000098f4 <_ZN4Pads17getMedianValueXYZE16coordinateType_t>:

bool Pads::pressureSampled()   {

    return (sampleCounterPressure == NUMBER_OF_SAMPLES);

}
    98f4:	61 30       	cpi	r22, 0x01	; 1
    98f6:	a1 f1       	breq	.+104    	; 0x9960 <_ZN4Pads17getMedianValueXYZE16coordinateType_t+0x6c>
    98f8:	20 f0       	brcs	.+8      	; 0x9902 <_ZN4Pads17getMedianValueXYZE16coordinateType_t+0xe>
    98fa:	62 30       	cpi	r22, 0x02	; 2
    98fc:	09 f4       	brne	.+2      	; 0x9900 <_ZN4Pads17getMedianValueXYZE16coordinateType_t+0xc>
    98fe:	5e c0       	rjmp	.+188    	; 0x99bc <_ZN4Pads17getMedianValueXYZE16coordinateType_t+0xc8>
    9900:	8a c0       	rjmp	.+276    	; 0x9a16 <_ZN4Pads17getMedianValueXYZE16coordinateType_t+0x122>
    9902:	fc 01       	movw	r30, r24
    9904:	ff 96       	adiw	r30, 0x3f	; 63
    9906:	40 81       	ld	r20, Z
    9908:	51 81       	ldd	r21, Z+1	; 0x01
    990a:	32 96       	adiw	r30, 0x02	; 2
    990c:	60 81       	ld	r22, Z
    990e:	71 81       	ldd	r23, Z+1	; 0x01
    9910:	64 17       	cp	r22, r20
    9912:	75 07       	cpc	r23, r21
    9914:	84 f0       	brlt	.+32     	; 0x9936 <_ZN4Pads17getMedianValueXYZE16coordinateType_t+0x42>
    9916:	32 96       	adiw	r30, 0x02	; 2
    9918:	20 81       	ld	r18, Z
    991a:	31 81       	ldd	r19, Z+1	; 0x01
    991c:	24 17       	cp	r18, r20
    991e:	35 07       	cpc	r19, r21
    9920:	3c f0       	brlt	.+14     	; 0x9930 <_ZN4Pads17getMedianValueXYZE16coordinateType_t+0x3c>
    9922:	c9 01       	movw	r24, r18
    9924:	62 17       	cp	r22, r18
    9926:	73 07       	cpc	r23, r19
    9928:	0c f0       	brlt	.+2      	; 0x992c <_ZN4Pads17getMedianValueXYZE16coordinateType_t+0x38>
    992a:	77 c0       	rjmp	.+238    	; 0x9a1a <_ZN4Pads17getMedianValueXYZE16coordinateType_t+0x126>
    992c:	cb 01       	movw	r24, r22
    992e:	08 95       	ret
    9930:	46 17       	cp	r20, r22
    9932:	57 07       	cpc	r21, r23
    9934:	74 f0       	brlt	.+28     	; 0x9952 <_ZN4Pads17getMedianValueXYZE16coordinateType_t+0x5e>
    9936:	fc 01       	movw	r30, r24
    9938:	ed 5b       	subi	r30, 0xBD	; 189
    993a:	ff 4f       	sbci	r31, 0xFF	; 255
    993c:	80 81       	ld	r24, Z
    993e:	91 81       	ldd	r25, Z+1	; 0x01
    9940:	86 17       	cp	r24, r22
    9942:	97 07       	cpc	r25, r23
    9944:	34 f0       	brlt	.+12     	; 0x9952 <_ZN4Pads17getMedianValueXYZE16coordinateType_t+0x5e>
    9946:	48 17       	cp	r20, r24
    9948:	59 07       	cpc	r21, r25
    994a:	0c f0       	brlt	.+2      	; 0x994e <_ZN4Pads17getMedianValueXYZE16coordinateType_t+0x5a>
    994c:	66 c0       	rjmp	.+204    	; 0x9a1a <_ZN4Pads17getMedianValueXYZE16coordinateType_t+0x126>
    994e:	ca 01       	movw	r24, r20
    9950:	08 95       	ret
    9952:	cb 01       	movw	r24, r22
    9954:	46 17       	cp	r20, r22
    9956:	57 07       	cpc	r21, r23
    9958:	0c f0       	brlt	.+2      	; 0x995c <_ZN4Pads17getMedianValueXYZE16coordinateType_t+0x68>
    995a:	5f c0       	rjmp	.+190    	; 0x9a1a <_ZN4Pads17getMedianValueXYZE16coordinateType_t+0x126>
    995c:	ca 01       	movw	r24, r20
    995e:	08 95       	ret
    9960:	fc 01       	movw	r30, r24
    9962:	eb 5b       	subi	r30, 0xBB	; 187
    9964:	ff 4f       	sbci	r31, 0xFF	; 255
    9966:	40 81       	ld	r20, Z
    9968:	51 81       	ldd	r21, Z+1	; 0x01
    996a:	32 96       	adiw	r30, 0x02	; 2
    996c:	60 81       	ld	r22, Z
    996e:	71 81       	ldd	r23, Z+1	; 0x01
    9970:	64 17       	cp	r22, r20
    9972:	75 07       	cpc	r23, r21
    9974:	84 f0       	brlt	.+32     	; 0x9996 <_ZN4Pads17getMedianValueXYZE16coordinateType_t+0xa2>
    9976:	32 96       	adiw	r30, 0x02	; 2
    9978:	20 81       	ld	r18, Z
    997a:	31 81       	ldd	r19, Z+1	; 0x01
    997c:	24 17       	cp	r18, r20
    997e:	35 07       	cpc	r19, r21
    9980:	3c f0       	brlt	.+14     	; 0x9990 <_ZN4Pads17getMedianValueXYZE16coordinateType_t+0x9c>
    9982:	c9 01       	movw	r24, r18
    9984:	62 17       	cp	r22, r18
    9986:	73 07       	cpc	r23, r19
    9988:	0c f0       	brlt	.+2      	; 0x998c <_ZN4Pads17getMedianValueXYZE16coordinateType_t+0x98>
    998a:	47 c0       	rjmp	.+142    	; 0x9a1a <_ZN4Pads17getMedianValueXYZE16coordinateType_t+0x126>
    998c:	cb 01       	movw	r24, r22
    998e:	08 95       	ret
    9990:	46 17       	cp	r20, r22
    9992:	57 07       	cpc	r21, r23
    9994:	6c f0       	brlt	.+26     	; 0x99b0 <_ZN4Pads17getMedianValueXYZE16coordinateType_t+0xbc>
    9996:	fc 01       	movw	r30, r24
    9998:	e7 5b       	subi	r30, 0xB7	; 183
    999a:	ff 4f       	sbci	r31, 0xFF	; 255
    999c:	80 81       	ld	r24, Z
    999e:	91 81       	ldd	r25, Z+1	; 0x01
    99a0:	86 17       	cp	r24, r22
    99a2:	97 07       	cpc	r25, r23
    99a4:	2c f0       	brlt	.+10     	; 0x99b0 <_ZN4Pads17getMedianValueXYZE16coordinateType_t+0xbc>
    99a6:	48 17       	cp	r20, r24
    99a8:	59 07       	cpc	r21, r25
    99aa:	bc f5       	brge	.+110    	; 0x9a1a <_ZN4Pads17getMedianValueXYZE16coordinateType_t+0x126>
    99ac:	ca 01       	movw	r24, r20
    99ae:	08 95       	ret
    99b0:	cb 01       	movw	r24, r22
    99b2:	46 17       	cp	r20, r22
    99b4:	57 07       	cpc	r21, r23
    99b6:	8c f5       	brge	.+98     	; 0x9a1a <_ZN4Pads17getMedianValueXYZE16coordinateType_t+0x126>
    99b8:	ca 01       	movw	r24, r20
    99ba:	08 95       	ret
    99bc:	fc 01       	movw	r30, r24
    99be:	e5 5b       	subi	r30, 0xB5	; 181
    99c0:	ff 4f       	sbci	r31, 0xFF	; 255
    99c2:	40 81       	ld	r20, Z
    99c4:	51 81       	ldd	r21, Z+1	; 0x01
    99c6:	32 96       	adiw	r30, 0x02	; 2
    99c8:	60 81       	ld	r22, Z
    99ca:	71 81       	ldd	r23, Z+1	; 0x01
    99cc:	64 17       	cp	r22, r20
    99ce:	75 07       	cpc	r23, r21
    99d0:	7c f0       	brlt	.+30     	; 0x99f0 <_ZN4Pads17getMedianValueXYZE16coordinateType_t+0xfc>
    99d2:	32 96       	adiw	r30, 0x02	; 2
    99d4:	20 81       	ld	r18, Z
    99d6:	31 81       	ldd	r19, Z+1	; 0x01
    99d8:	24 17       	cp	r18, r20
    99da:	35 07       	cpc	r19, r21
    99dc:	34 f0       	brlt	.+12     	; 0x99ea <_ZN4Pads17getMedianValueXYZE16coordinateType_t+0xf6>
    99de:	c9 01       	movw	r24, r18
    99e0:	62 17       	cp	r22, r18
    99e2:	73 07       	cpc	r23, r19
    99e4:	d4 f4       	brge	.+52     	; 0x9a1a <_ZN4Pads17getMedianValueXYZE16coordinateType_t+0x126>
    99e6:	cb 01       	movw	r24, r22
    99e8:	08 95       	ret
    99ea:	46 17       	cp	r20, r22
    99ec:	57 07       	cpc	r21, r23
    99ee:	6c f0       	brlt	.+26     	; 0x9a0a <_ZN4Pads17getMedianValueXYZE16coordinateType_t+0x116>
    99f0:	fc 01       	movw	r30, r24
    99f2:	e1 5b       	subi	r30, 0xB1	; 177
    99f4:	ff 4f       	sbci	r31, 0xFF	; 255
    99f6:	80 81       	ld	r24, Z
    99f8:	91 81       	ldd	r25, Z+1	; 0x01
    99fa:	86 17       	cp	r24, r22
    99fc:	97 07       	cpc	r25, r23
    99fe:	2c f0       	brlt	.+10     	; 0x9a0a <_ZN4Pads17getMedianValueXYZE16coordinateType_t+0x116>
    9a00:	48 17       	cp	r20, r24
    9a02:	59 07       	cpc	r21, r25
    9a04:	54 f4       	brge	.+20     	; 0x9a1a <_ZN4Pads17getMedianValueXYZE16coordinateType_t+0x126>
    9a06:	ca 01       	movw	r24, r20
    9a08:	08 95       	ret
    9a0a:	cb 01       	movw	r24, r22
    9a0c:	46 17       	cp	r20, r22
    9a0e:	57 07       	cpc	r21, r23
    9a10:	24 f4       	brge	.+8      	; 0x9a1a <_ZN4Pads17getMedianValueXYZE16coordinateType_t+0x126>
    9a12:	ca 01       	movw	r24, r20
    9a14:	08 95       	ret
    9a16:	80 e0       	ldi	r24, 0x00	; 0
    9a18:	90 e0       	ldi	r25, 0x00	; 0
    9a1a:	08 95       	ret

00009a1c <_ZN4Pads6checkXEh>:
    9a1c:	8f 92       	push	r8
    9a1e:	9f 92       	push	r9
    9a20:	af 92       	push	r10
    9a22:	bf 92       	push	r11
    9a24:	cf 92       	push	r12
    9a26:	df 92       	push	r13
    9a28:	ef 92       	push	r14
    9a2a:	ff 92       	push	r15
    9a2c:	0f 93       	push	r16
    9a2e:	1f 93       	push	r17
    9a30:	cf 93       	push	r28
    9a32:	df 93       	push	r29
    9a34:	6c 01       	movw	r12, r24
    9a36:	c6 2f       	mov	r28, r22
    9a38:	60 e0       	ldi	r22, 0x00	; 0
    9a3a:	5c df       	rcall	.-328    	; 0x98f4 <_ZN4Pads17getMedianValueXYZE16coordinateType_t>
    9a3c:	20 e0       	ldi	r18, 0x00	; 0
    9a3e:	ac 01       	movw	r20, r24
    9a40:	6c 2f       	mov	r22, r28
    9a42:	c6 01       	movw	r24, r12
    9a44:	0e 94 0e 6c 	call	0xd81c	; 0xd81c <_ZN4Pads7scaleXYEhi16coordinateType_t>
    9a48:	d0 e0       	ldi	r29, 0x00	; 0
    9a4a:	a6 01       	movw	r20, r12
    9a4c:	4c 0f       	add	r20, r28
    9a4e:	5d 1f       	adc	r21, r29
    9a50:	9a 01       	movw	r18, r20
    9a52:	22 59       	subi	r18, 0x92	; 146
    9a54:	3f 4f       	sbci	r19, 0xFF	; 255
    9a56:	da 01       	movw	r26, r20
    9a58:	ab 59       	subi	r26, 0x9B	; 155
    9a5a:	bf 4f       	sbci	r27, 0xFF	; 255
    9a5c:	43 55       	subi	r20, 0x53	; 83
    9a5e:	5f 4f       	sbci	r21, 0xFF	; 255
    9a60:	f9 01       	movw	r30, r18
    9a62:	e0 80       	ld	r14, Z
    9a64:	0c 91       	ld	r16, X
    9a66:	28 2f       	mov	r18, r24
    9a68:	fa 01       	movw	r30, r20
    9a6a:	40 81       	ld	r20, Z
    9a6c:	60 e0       	ldi	r22, 0x00	; 0
    9a6e:	81 ed       	ldi	r24, 0xD1	; 209
    9a70:	9e e0       	ldi	r25, 0x0E	; 14
    9a72:	df db       	rcall	.-2114   	; 0x9232 <_ZN6Curves13getCurveValueE16coordinateType_thhhh>
    9a74:	f8 2e       	mov	r15, r24
    9a76:	08 2f       	mov	r16, r24
    9a78:	10 e0       	ldi	r17, 0x00	; 0
    9a7a:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z11rTimeMillisv>
    9a7e:	fe 01       	movw	r30, r28
    9a80:	ee 0f       	add	r30, r30
    9a82:	ff 1f       	adc	r31, r31
    9a84:	ee 0f       	add	r30, r30
    9a86:	ff 1f       	adc	r31, r31
    9a88:	ec 0d       	add	r30, r12
    9a8a:	fd 1d       	adc	r31, r13
    9a8c:	ef 5f       	subi	r30, 0xFF	; 255
    9a8e:	fd 4f       	sbci	r31, 0xFD	; 253
    9a90:	80 80       	ld	r8, Z
    9a92:	91 80       	ldd	r9, Z+1	; 0x01
    9a94:	a2 80       	ldd	r10, Z+2	; 0x02
    9a96:	b3 80       	ldd	r11, Z+3	; 0x03
    9a98:	dc 01       	movw	r26, r24
    9a9a:	cb 01       	movw	r24, r22
    9a9c:	88 19       	sub	r24, r8
    9a9e:	99 09       	sbc	r25, r9
    9aa0:	aa 09       	sbc	r26, r10
    9aa2:	bb 09       	sbc	r27, r11
    9aa4:	4f 97       	sbiw	r24, 0x1f	; 31
    9aa6:	a1 05       	cpc	r26, r1
    9aa8:	b1 05       	cpc	r27, r1
    9aaa:	90 f0       	brcs	.+36     	; 0x9ad0 <_ZN4Pads6checkXEh+0xb4>
    9aac:	f6 01       	movw	r30, r12
    9aae:	ec 0f       	add	r30, r28
    9ab0:	fd 1f       	adc	r31, r29
    9ab2:	80 81       	ld	r24, Z
    9ab4:	08 1b       	sub	r16, r24
    9ab6:	11 09       	sbc	r17, r1
    9ab8:	98 01       	movw	r18, r16
    9aba:	22 f4       	brpl	.+8      	; 0x9ac4 <_ZN4Pads6checkXEh+0xa8>
    9abc:	22 27       	eor	r18, r18
    9abe:	33 27       	eor	r19, r19
    9ac0:	20 1b       	sub	r18, r16
    9ac2:	31 0b       	sbc	r19, r17
    9ac4:	81 e0       	ldi	r24, 0x01	; 1
    9ac6:	24 30       	cpi	r18, 0x04	; 4
    9ac8:	31 05       	cpc	r19, r1
    9aca:	44 f5       	brge	.+80     	; 0x9b1c <_ZN4Pads6checkXEh+0x100>
    9acc:	80 e0       	ldi	r24, 0x00	; 0
    9ace:	26 c0       	rjmp	.+76     	; 0x9b1c <_ZN4Pads6checkXEh+0x100>
    9ad0:	f6 01       	movw	r30, r12
    9ad2:	ec 0f       	add	r30, r28
    9ad4:	fd 1f       	adc	r31, r29
    9ad6:	80 81       	ld	r24, Z
    9ad8:	90 e0       	ldi	r25, 0x00	; 0
    9ada:	80 17       	cp	r24, r16
    9adc:	91 07       	cpc	r25, r17
    9ade:	e9 f0       	breq	.+58     	; 0x9b1a <_ZN4Pads6checkXEh+0xfe>
    9ae0:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z11rTimeMillisv>
    9ae4:	fe 01       	movw	r30, r28
    9ae6:	ee 0f       	add	r30, r30
    9ae8:	ff 1f       	adc	r31, r31
    9aea:	ee 0f       	add	r30, r30
    9aec:	ff 1f       	adc	r31, r31
    9aee:	ec 0d       	add	r30, r12
    9af0:	fd 1d       	adc	r31, r13
    9af2:	ef 5f       	subi	r30, 0xFF	; 255
    9af4:	fd 4f       	sbci	r31, 0xFD	; 253
    9af6:	00 81       	ld	r16, Z
    9af8:	11 81       	ldd	r17, Z+1	; 0x01
    9afa:	22 81       	ldd	r18, Z+2	; 0x02
    9afc:	33 81       	ldd	r19, Z+3	; 0x03
    9afe:	ab 01       	movw	r20, r22
    9b00:	bc 01       	movw	r22, r24
    9b02:	40 1b       	sub	r20, r16
    9b04:	51 0b       	sbc	r21, r17
    9b06:	62 0b       	sbc	r22, r18
    9b08:	73 0b       	sbc	r23, r19
    9b0a:	81 e0       	ldi	r24, 0x01	; 1
    9b0c:	4b 30       	cpi	r20, 0x0B	; 11
    9b0e:	51 05       	cpc	r21, r1
    9b10:	61 05       	cpc	r22, r1
    9b12:	71 05       	cpc	r23, r1
    9b14:	18 f4       	brcc	.+6      	; 0x9b1c <_ZN4Pads6checkXEh+0x100>
    9b16:	80 e0       	ldi	r24, 0x00	; 0
    9b18:	01 c0       	rjmp	.+2      	; 0x9b1c <_ZN4Pads6checkXEh+0x100>
    9b1a:	80 e0       	ldi	r24, 0x00	; 0
    9b1c:	88 23       	and	r24, r24
    9b1e:	e9 f0       	breq	.+58     	; 0x9b5a <_ZN4Pads6checkXEh+0x13e>
    9b20:	f6 01       	movw	r30, r12
    9b22:	ec 0f       	add	r30, r28
    9b24:	fd 1f       	adc	r31, r29
    9b26:	f0 82       	st	Z, r15
    9b28:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z11rTimeMillisv>
    9b2c:	cc 0f       	add	r28, r28
    9b2e:	dd 1f       	adc	r29, r29
    9b30:	cc 0f       	add	r28, r28
    9b32:	dd 1f       	adc	r29, r29
    9b34:	cc 0d       	add	r28, r12
    9b36:	dd 1d       	adc	r29, r13
    9b38:	fe 01       	movw	r30, r28
    9b3a:	ef 5f       	subi	r30, 0xFF	; 255
    9b3c:	fd 4f       	sbci	r31, 0xFD	; 253
    9b3e:	60 83       	st	Z, r22
    9b40:	71 83       	std	Z+1, r23	; 0x01
    9b42:	82 83       	std	Z+2, r24	; 0x02
    9b44:	93 83       	std	Z+3, r25	; 0x03
    9b46:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z11rTimeMillisv>
    9b4a:	c7 54       	subi	r28, 0x47	; 71
    9b4c:	de 4f       	sbci	r29, 0xFE	; 254
    9b4e:	68 83       	st	Y, r22
    9b50:	79 83       	std	Y+1, r23	; 0x01
    9b52:	8a 83       	std	Y+2, r24	; 0x02
    9b54:	9b 83       	std	Y+3, r25	; 0x03
    9b56:	81 e0       	ldi	r24, 0x01	; 1
    9b58:	01 c0       	rjmp	.+2      	; 0x9b5c <_ZN4Pads6checkXEh+0x140>
    9b5a:	80 e0       	ldi	r24, 0x00	; 0
    9b5c:	df 91       	pop	r29
    9b5e:	cf 91       	pop	r28
    9b60:	1f 91       	pop	r17
    9b62:	0f 91       	pop	r16
    9b64:	ff 90       	pop	r15
    9b66:	ef 90       	pop	r14
    9b68:	df 90       	pop	r13
    9b6a:	cf 90       	pop	r12
    9b6c:	bf 90       	pop	r11
    9b6e:	af 90       	pop	r10
    9b70:	9f 90       	pop	r9
    9b72:	8f 90       	pop	r8
    9b74:	08 95       	ret

00009b76 <_ZN4Pads6checkYEh>:
    9b76:	4f 92       	push	r4
    9b78:	5f 92       	push	r5
    9b7a:	6f 92       	push	r6
    9b7c:	7f 92       	push	r7
    9b7e:	af 92       	push	r10
    9b80:	bf 92       	push	r11
    9b82:	cf 92       	push	r12
    9b84:	df 92       	push	r13
    9b86:	ef 92       	push	r14
    9b88:	0f 93       	push	r16
    9b8a:	1f 93       	push	r17
    9b8c:	cf 93       	push	r28
    9b8e:	df 93       	push	r29
    9b90:	6c 01       	movw	r12, r24
    9b92:	c6 2f       	mov	r28, r22
    9b94:	61 e0       	ldi	r22, 0x01	; 1
    9b96:	ae de       	rcall	.-676    	; 0x98f4 <_ZN4Pads17getMedianValueXYZE16coordinateType_t>
    9b98:	21 e0       	ldi	r18, 0x01	; 1
    9b9a:	ac 01       	movw	r20, r24
    9b9c:	6c 2f       	mov	r22, r28
    9b9e:	c6 01       	movw	r24, r12
    9ba0:	0e 94 0e 6c 	call	0xd81c	; 0xd81c <_ZN4Pads7scaleXYEhi16coordinateType_t>
    9ba4:	18 2f       	mov	r17, r24
    9ba6:	a8 2e       	mov	r10, r24
    9ba8:	b1 2c       	mov	r11, r1
    9baa:	d0 e0       	ldi	r29, 0x00	; 0
    9bac:	a6 01       	movw	r20, r12
    9bae:	4c 0f       	add	r20, r28
    9bb0:	5d 1f       	adc	r21, r29
    9bb2:	ca 01       	movw	r24, r20
    9bb4:	80 58       	subi	r24, 0x80	; 128
    9bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    9bb8:	da 01       	movw	r26, r20
    9bba:	a9 58       	subi	r26, 0x89	; 137
    9bbc:	bf 4f       	sbci	r27, 0xFF	; 255
    9bbe:	4a 54       	subi	r20, 0x4A	; 74
    9bc0:	5f 4f       	sbci	r21, 0xFF	; 255
    9bc2:	fc 01       	movw	r30, r24
    9bc4:	e0 80       	ld	r14, Z
    9bc6:	0c 91       	ld	r16, X
    9bc8:	21 2f       	mov	r18, r17
    9bca:	fa 01       	movw	r30, r20
    9bcc:	40 81       	ld	r20, Z
    9bce:	61 e0       	ldi	r22, 0x01	; 1
    9bd0:	81 ed       	ldi	r24, 0xD1	; 209
    9bd2:	9e e0       	ldi	r25, 0x0E	; 14
    9bd4:	2e db       	rcall	.-2468   	; 0x9232 <_ZN6Curves13getCurveValueE16coordinateType_thhhh>
    9bd6:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z11rTimeMillisv>
    9bda:	fe 01       	movw	r30, r28
    9bdc:	ee 0f       	add	r30, r30
    9bde:	ff 1f       	adc	r31, r31
    9be0:	ee 0f       	add	r30, r30
    9be2:	ff 1f       	adc	r31, r31
    9be4:	ec 0d       	add	r30, r12
    9be6:	fd 1d       	adc	r31, r13
    9be8:	eb 5d       	subi	r30, 0xDB	; 219
    9bea:	fd 4f       	sbci	r31, 0xFD	; 253
    9bec:	40 80       	ld	r4, Z
    9bee:	51 80       	ldd	r5, Z+1	; 0x01
    9bf0:	62 80       	ldd	r6, Z+2	; 0x02
    9bf2:	73 80       	ldd	r7, Z+3	; 0x03
    9bf4:	dc 01       	movw	r26, r24
    9bf6:	cb 01       	movw	r24, r22
    9bf8:	84 19       	sub	r24, r4
    9bfa:	95 09       	sbc	r25, r5
    9bfc:	a6 09       	sbc	r26, r6
    9bfe:	b7 09       	sbc	r27, r7
    9c00:	4f 97       	sbiw	r24, 0x1f	; 31
    9c02:	a1 05       	cpc	r26, r1
    9c04:	b1 05       	cpc	r27, r1
    9c06:	90 f0       	brcs	.+36     	; 0x9c2c <_ZN4Pads6checkYEh+0xb6>
    9c08:	f6 01       	movw	r30, r12
    9c0a:	ec 0f       	add	r30, r28
    9c0c:	fd 1f       	adc	r31, r29
    9c0e:	81 85       	ldd	r24, Z+9	; 0x09
    9c10:	a8 1a       	sub	r10, r24
    9c12:	b1 08       	sbc	r11, r1
    9c14:	95 01       	movw	r18, r10
    9c16:	22 f4       	brpl	.+8      	; 0x9c20 <_ZN4Pads6checkYEh+0xaa>
    9c18:	22 27       	eor	r18, r18
    9c1a:	33 27       	eor	r19, r19
    9c1c:	2a 19       	sub	r18, r10
    9c1e:	3b 09       	sbc	r19, r11
    9c20:	81 e0       	ldi	r24, 0x01	; 1
    9c22:	24 30       	cpi	r18, 0x04	; 4
    9c24:	31 05       	cpc	r19, r1
    9c26:	44 f5       	brge	.+80     	; 0x9c78 <_ZN4Pads6checkYEh+0x102>
    9c28:	80 e0       	ldi	r24, 0x00	; 0
    9c2a:	26 c0       	rjmp	.+76     	; 0x9c78 <_ZN4Pads6checkYEh+0x102>
    9c2c:	f6 01       	movw	r30, r12
    9c2e:	ec 0f       	add	r30, r28
    9c30:	fd 1f       	adc	r31, r29
    9c32:	81 85       	ldd	r24, Z+9	; 0x09
    9c34:	90 e0       	ldi	r25, 0x00	; 0
    9c36:	8a 15       	cp	r24, r10
    9c38:	9b 05       	cpc	r25, r11
    9c3a:	e9 f0       	breq	.+58     	; 0x9c76 <_ZN4Pads6checkYEh+0x100>
    9c3c:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z11rTimeMillisv>
    9c40:	fe 01       	movw	r30, r28
    9c42:	ee 0f       	add	r30, r30
    9c44:	ff 1f       	adc	r31, r31
    9c46:	ee 0f       	add	r30, r30
    9c48:	ff 1f       	adc	r31, r31
    9c4a:	ec 0d       	add	r30, r12
    9c4c:	fd 1d       	adc	r31, r13
    9c4e:	eb 5d       	subi	r30, 0xDB	; 219
    9c50:	fd 4f       	sbci	r31, 0xFD	; 253
    9c52:	40 80       	ld	r4, Z
    9c54:	51 80       	ldd	r5, Z+1	; 0x01
    9c56:	62 80       	ldd	r6, Z+2	; 0x02
    9c58:	73 80       	ldd	r7, Z+3	; 0x03
    9c5a:	ab 01       	movw	r20, r22
    9c5c:	bc 01       	movw	r22, r24
    9c5e:	44 19       	sub	r20, r4
    9c60:	55 09       	sbc	r21, r5
    9c62:	66 09       	sbc	r22, r6
    9c64:	77 09       	sbc	r23, r7
    9c66:	81 e0       	ldi	r24, 0x01	; 1
    9c68:	4b 30       	cpi	r20, 0x0B	; 11
    9c6a:	51 05       	cpc	r21, r1
    9c6c:	61 05       	cpc	r22, r1
    9c6e:	71 05       	cpc	r23, r1
    9c70:	18 f4       	brcc	.+6      	; 0x9c78 <_ZN4Pads6checkYEh+0x102>
    9c72:	80 e0       	ldi	r24, 0x00	; 0
    9c74:	01 c0       	rjmp	.+2      	; 0x9c78 <_ZN4Pads6checkYEh+0x102>
    9c76:	80 e0       	ldi	r24, 0x00	; 0
    9c78:	88 23       	and	r24, r24
    9c7a:	e9 f0       	breq	.+58     	; 0x9cb6 <_ZN4Pads6checkYEh+0x140>
    9c7c:	f6 01       	movw	r30, r12
    9c7e:	ec 0f       	add	r30, r28
    9c80:	fd 1f       	adc	r31, r29
    9c82:	11 87       	std	Z+9, r17	; 0x09
    9c84:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z11rTimeMillisv>
    9c88:	cc 0f       	add	r28, r28
    9c8a:	dd 1f       	adc	r29, r29
    9c8c:	cc 0f       	add	r28, r28
    9c8e:	dd 1f       	adc	r29, r29
    9c90:	cc 0d       	add	r28, r12
    9c92:	dd 1d       	adc	r29, r13
    9c94:	fe 01       	movw	r30, r28
    9c96:	eb 5d       	subi	r30, 0xDB	; 219
    9c98:	fd 4f       	sbci	r31, 0xFD	; 253
    9c9a:	60 83       	st	Z, r22
    9c9c:	71 83       	std	Z+1, r23	; 0x01
    9c9e:	82 83       	std	Z+2, r24	; 0x02
    9ca0:	93 83       	std	Z+3, r25	; 0x03
    9ca2:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z11rTimeMillisv>
    9ca6:	c7 54       	subi	r28, 0x47	; 71
    9ca8:	de 4f       	sbci	r29, 0xFE	; 254
    9caa:	68 83       	st	Y, r22
    9cac:	79 83       	std	Y+1, r23	; 0x01
    9cae:	8a 83       	std	Y+2, r24	; 0x02
    9cb0:	9b 83       	std	Y+3, r25	; 0x03
    9cb2:	81 e0       	ldi	r24, 0x01	; 1
    9cb4:	01 c0       	rjmp	.+2      	; 0x9cb8 <_ZN4Pads6checkYEh+0x142>
    9cb6:	80 e0       	ldi	r24, 0x00	; 0
    9cb8:	df 91       	pop	r29
    9cba:	cf 91       	pop	r28
    9cbc:	1f 91       	pop	r17
    9cbe:	0f 91       	pop	r16
    9cc0:	ef 90       	pop	r14
    9cc2:	df 90       	pop	r13
    9cc4:	cf 90       	pop	r12
    9cc6:	bf 90       	pop	r11
    9cc8:	af 90       	pop	r10
    9cca:	7f 90       	pop	r7
    9ccc:	6f 90       	pop	r6
    9cce:	5f 90       	pop	r5
    9cd0:	4f 90       	pop	r4
    9cd2:	08 95       	ret

00009cd4 <_ZN4Pads15checkAftertouchEhb>:
    9cd4:	8f 92       	push	r8
    9cd6:	9f 92       	push	r9
    9cd8:	af 92       	push	r10
    9cda:	bf 92       	push	r11
    9cdc:	cf 92       	push	r12
    9cde:	df 92       	push	r13
    9ce0:	ff 92       	push	r15
    9ce2:	0f 93       	push	r16
    9ce4:	1f 93       	push	r17
    9ce6:	cf 93       	push	r28
    9ce8:	df 93       	push	r29
    9cea:	8c 01       	movw	r16, r24
    9cec:	f6 2e       	mov	r15, r22
    9cee:	c6 2f       	mov	r28, r22
    9cf0:	d0 e0       	ldi	r29, 0x00	; 0
    9cf2:	fc 01       	movw	r30, r24
    9cf4:	ec 0f       	add	r30, r28
    9cf6:	fd 1f       	adc	r31, r29
    9cf8:	84 a1       	ldd	r24, Z+36	; 0x24
    9cfa:	88 23       	and	r24, r24
    9cfc:	09 f4       	brne	.+2      	; 0x9d00 <_ZN4Pads15checkAftertouchEhb+0x2c>
    9cfe:	e3 c0       	rjmp	.+454    	; 0x9ec6 <_ZN4Pads15checkAftertouchEhb+0x1f2>
    9d00:	44 23       	and	r20, r20
    9d02:	89 f0       	breq	.+34     	; 0x9d26 <_ZN4Pads15checkAftertouchEhb+0x52>
    9d04:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z11rTimeMillisv>
    9d08:	cc 0f       	add	r28, r28
    9d0a:	dd 1f       	adc	r29, r29
    9d0c:	cc 0f       	add	r28, r28
    9d0e:	dd 1f       	adc	r29, r29
    9d10:	0c 0f       	add	r16, r28
    9d12:	1d 1f       	adc	r17, r29
    9d14:	e8 01       	movw	r28, r16
    9d16:	c3 59       	subi	r28, 0x93	; 147
    9d18:	dd 4f       	sbci	r29, 0xFD	; 253
    9d1a:	68 83       	st	Y, r22
    9d1c:	79 83       	std	Y+1, r23	; 0x01
    9d1e:	8a 83       	std	Y+2, r24	; 0x02
    9d20:	9b 83       	std	Y+3, r25	; 0x03
    9d22:	f1 2c       	mov	r15, r1
    9d24:	32 c1       	rjmp	.+612    	; 0x9f8a <_ZN4Pads15checkAftertouchEhb+0x2b6>
    9d26:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z11rTimeMillisv>
    9d2a:	fe 01       	movw	r30, r28
    9d2c:	ee 0f       	add	r30, r30
    9d2e:	ff 1f       	adc	r31, r31
    9d30:	ee 0f       	add	r30, r30
    9d32:	ff 1f       	adc	r31, r31
    9d34:	e0 0f       	add	r30, r16
    9d36:	f1 1f       	adc	r31, r17
    9d38:	e3 59       	subi	r30, 0x93	; 147
    9d3a:	fd 4f       	sbci	r31, 0xFD	; 253
    9d3c:	80 80       	ld	r8, Z
    9d3e:	91 80       	ldd	r9, Z+1	; 0x01
    9d40:	a2 80       	ldd	r10, Z+2	; 0x02
    9d42:	b3 80       	ldd	r11, Z+3	; 0x03
    9d44:	dc 01       	movw	r26, r24
    9d46:	cb 01       	movw	r24, r22
    9d48:	88 19       	sub	r24, r8
    9d4a:	99 09       	sbc	r25, r9
    9d4c:	aa 09       	sbc	r26, r10
    9d4e:	bb 09       	sbc	r27, r11
    9d50:	84 36       	cpi	r24, 0x64	; 100
    9d52:	91 05       	cpc	r25, r1
    9d54:	a1 05       	cpc	r26, r1
    9d56:	b1 05       	cpc	r27, r1
    9d58:	08 f4       	brcc	.+2      	; 0x9d5c <_ZN4Pads15checkAftertouchEhb+0x88>
    9d5a:	f0 c0       	rjmp	.+480    	; 0x9f3c <_ZN4Pads15checkAftertouchEhb+0x268>
    9d5c:	fe 01       	movw	r30, r28
    9d5e:	ee 0f       	add	r30, r30
    9d60:	ff 1f       	adc	r31, r31
    9d62:	e0 0f       	add	r30, r16
    9d64:	f1 1f       	adc	r31, r17
    9d66:	45 a5       	ldd	r20, Z+45	; 0x2d
    9d68:	56 a5       	ldd	r21, Z+46	; 0x2e
    9d6a:	21 e0       	ldi	r18, 0x01	; 1
    9d6c:	6f 2d       	mov	r22, r15
    9d6e:	c8 01       	movw	r24, r16
    9d70:	0e 94 89 6b 	call	0xd712	; 0xd712 <_ZN4Pads13scalePressureEhi14pressureType_t>
    9d74:	f8 2e       	mov	r15, r24
    9d76:	88 23       	and	r24, r24
    9d78:	09 f4       	brne	.+2      	; 0x9d7c <_ZN4Pads15checkAftertouchEhb+0xa8>
    9d7a:	e2 c0       	rjmp	.+452    	; 0x9f40 <_ZN4Pads15checkAftertouchEhb+0x26c>
    9d7c:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z11rTimeMillisv>
    9d80:	fe 01       	movw	r30, r28
    9d82:	ee 0f       	add	r30, r30
    9d84:	ff 1f       	adc	r31, r31
    9d86:	ee 0f       	add	r30, r30
    9d88:	ff 1f       	adc	r31, r31
    9d8a:	e0 0f       	add	r30, r16
    9d8c:	f1 1f       	adc	r31, r17
    9d8e:	e7 5b       	subi	r30, 0xB7	; 183
    9d90:	fd 4f       	sbci	r31, 0xFD	; 253
    9d92:	80 80       	ld	r8, Z
    9d94:	91 80       	ldd	r9, Z+1	; 0x01
    9d96:	a2 80       	ldd	r10, Z+2	; 0x02
    9d98:	b3 80       	ldd	r11, Z+3	; 0x03
    9d9a:	dc 01       	movw	r26, r24
    9d9c:	cb 01       	movw	r24, r22
    9d9e:	88 19       	sub	r24, r8
    9da0:	99 09       	sbc	r25, r9
    9da2:	aa 09       	sbc	r26, r10
    9da4:	bb 09       	sbc	r27, r11
    9da6:	83 33       	cpi	r24, 0x33	; 51
    9da8:	91 05       	cpc	r25, r1
    9daa:	a1 05       	cpc	r26, r1
    9dac:	b1 05       	cpc	r27, r1
    9dae:	a0 f0       	brcs	.+40     	; 0x9dd8 <_ZN4Pads15checkAftertouchEhb+0x104>
    9db0:	8f 2d       	mov	r24, r15
    9db2:	90 e0       	ldi	r25, 0x00	; 0
    9db4:	f8 01       	movw	r30, r16
    9db6:	ec 0f       	add	r30, r28
    9db8:	fd 1f       	adc	r31, r29
    9dba:	23 8d       	ldd	r18, Z+27	; 0x1b
    9dbc:	82 1b       	sub	r24, r18
    9dbe:	91 09       	sbc	r25, r1
    9dc0:	ac 01       	movw	r20, r24
    9dc2:	22 f4       	brpl	.+8      	; 0x9dcc <_ZN4Pads15checkAftertouchEhb+0xf8>
    9dc4:	44 27       	eor	r20, r20
    9dc6:	55 27       	eor	r21, r21
    9dc8:	48 1b       	sub	r20, r24
    9dca:	59 0b       	sbc	r21, r25
    9dcc:	21 e0       	ldi	r18, 0x01	; 1
    9dce:	45 30       	cpi	r20, 0x05	; 5
    9dd0:	51 05       	cpc	r21, r1
    9dd2:	7c f4       	brge	.+30     	; 0x9df2 <_ZN4Pads15checkAftertouchEhb+0x11e>
    9dd4:	20 e0       	ldi	r18, 0x00	; 0
    9dd6:	0d c0       	rjmp	.+26     	; 0x9df2 <_ZN4Pads15checkAftertouchEhb+0x11e>
    9dd8:	f8 01       	movw	r30, r16
    9dda:	ec 0f       	add	r30, r28
    9ddc:	fd 1f       	adc	r31, r29
    9dde:	23 8d       	ldd	r18, Z+27	; 0x1b
    9de0:	2f 15       	cp	r18, r15
    9de2:	09 f4       	brne	.+2      	; 0x9de6 <_ZN4Pads15checkAftertouchEhb+0x112>
    9de4:	af c0       	rjmp	.+350    	; 0x9f44 <_ZN4Pads15checkAftertouchEhb+0x270>
    9de6:	21 e0       	ldi	r18, 0x01	; 1
    9de8:	4a 97       	sbiw	r24, 0x1a	; 26
    9dea:	a1 05       	cpc	r26, r1
    9dec:	b1 05       	cpc	r27, r1
    9dee:	08 f4       	brcc	.+2      	; 0x9df2 <_ZN4Pads15checkAftertouchEhb+0x11e>
    9df0:	20 e0       	ldi	r18, 0x00	; 0
    9df2:	22 23       	and	r18, r18
    9df4:	09 f4       	brne	.+2      	; 0x9df8 <_ZN4Pads15checkAftertouchEhb+0x124>
    9df6:	a8 c0       	rjmp	.+336    	; 0x9f48 <_ZN4Pads15checkAftertouchEhb+0x274>
    9df8:	68 01       	movw	r12, r16
    9dfa:	cc 0e       	add	r12, r28
    9dfc:	dd 1e       	adc	r13, r29
    9dfe:	f6 01       	movw	r30, r12
    9e00:	f3 8e       	std	Z+27, r15	; 0x1b
    9e02:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z11rTimeMillisv>
    9e06:	fe 01       	movw	r30, r28
    9e08:	ee 0f       	add	r30, r30
    9e0a:	ff 1f       	adc	r31, r31
    9e0c:	ee 0f       	add	r30, r30
    9e0e:	ff 1f       	adc	r31, r31
    9e10:	e0 0f       	add	r30, r16
    9e12:	f1 1f       	adc	r31, r17
    9e14:	e7 5b       	subi	r30, 0xB7	; 183
    9e16:	fd 4f       	sbci	r31, 0xFD	; 253
    9e18:	60 83       	st	Z, r22
    9e1a:	71 83       	std	Z+1, r23	; 0x01
    9e1c:	82 83       	std	Z+2, r24	; 0x02
    9e1e:	93 83       	std	Z+3, r25	; 0x03
    9e20:	f6 01       	movw	r30, r12
    9e22:	e0 55       	subi	r30, 0x50	; 80
    9e24:	fe 4f       	sbci	r31, 0xFE	; 254
    9e26:	80 81       	ld	r24, Z
    9e28:	81 11       	cpse	r24, r1
    9e2a:	9b c0       	rjmp	.+310    	; 0x9f62 <_ZN4Pads15checkAftertouchEhb+0x28e>
    9e2c:	81 e0       	ldi	r24, 0x01	; 1
    9e2e:	80 83       	st	Z, r24
    9e30:	98 c0       	rjmp	.+304    	; 0x9f62 <_ZN4Pads15checkAftertouchEhb+0x28e>
    9e32:	6c 2f       	mov	r22, r28
    9e34:	c8 01       	movw	r24, r16
    9e36:	0e 94 62 69 	call	0xd2c4	; 0xd2c4 <_ZN4Pads12isPadPressedEh>
    9e3a:	88 23       	and	r24, r24
    9e3c:	21 f0       	breq	.+8      	; 0x9e46 <_ZN4Pads15checkAftertouchEhb+0x172>
    9e3e:	f6 01       	movw	r30, r12
    9e40:	80 81       	ld	r24, Z
    9e42:	81 11       	cpse	r24, r1
    9e44:	a0 c0       	rjmp	.+320    	; 0x9f86 <_ZN4Pads15checkAftertouchEhb+0x2b2>
    9e46:	cf 5f       	subi	r28, 0xFF	; 255
    9e48:	ff ef       	ldi	r31, 0xFF	; 255
    9e4a:	cf 1a       	sub	r12, r31
    9e4c:	df 0a       	sbc	r13, r31
    9e4e:	c9 30       	cpi	r28, 0x09	; 9
    9e50:	81 f7       	brne	.-32     	; 0x9e32 <_ZN4Pads15checkAftertouchEhb+0x15e>
    9e52:	81 e0       	ldi	r24, 0x01	; 1
    9e54:	b8 12       	cpse	r11, r24
    9e56:	07 c0       	rjmp	.+14     	; 0x9e66 <_ZN4Pads15checkAftertouchEhb+0x192>
    9e58:	f8 01       	movw	r30, r16
    9e5a:	e8 56       	subi	r30, 0x68	; 104
    9e5c:	fe 4f       	sbci	r31, 0xFE	; 254
    9e5e:	f0 82       	st	Z, r15
    9e60:	ff 24       	eor	r15, r15
    9e62:	f3 94       	inc	r15
    9e64:	92 c0       	rjmp	.+292    	; 0x9f8a <_ZN4Pads15checkAftertouchEhb+0x2b6>
    9e66:	e1 e0       	ldi	r30, 0x01	; 1
    9e68:	eb 15       	cp	r30, r11
    9e6a:	08 f0       	brcs	.+2      	; 0x9e6e <_ZN4Pads15checkAftertouchEhb+0x19a>
    9e6c:	6f c0       	rjmp	.+222    	; 0x9f4c <_ZN4Pads15checkAftertouchEhb+0x278>
    9e6e:	68 01       	movw	r12, r16
    9e70:	fb e1       	ldi	r31, 0x1B	; 27
    9e72:	cf 0e       	add	r12, r31
    9e74:	d1 1c       	adc	r13, r1
    9e76:	c0 e0       	ldi	r28, 0x00	; 0
    9e78:	6d 2f       	mov	r22, r29
    9e7a:	c8 01       	movw	r24, r16
    9e7c:	0e 94 62 69 	call	0xd2c4	; 0xd2c4 <_ZN4Pads12isPadPressedEh>
    9e80:	88 23       	and	r24, r24
    9e82:	81 f0       	breq	.+32     	; 0x9ea4 <_ZN4Pads15checkAftertouchEhb+0x1d0>
    9e84:	d6 01       	movw	r26, r12
    9e86:	f6 01       	movw	r30, r12
    9e88:	eb 56       	subi	r30, 0x6B	; 107
    9e8a:	fe 4f       	sbci	r31, 0xFE	; 254
    9e8c:	80 81       	ld	r24, Z
    9e8e:	88 23       	and	r24, r24
    9e90:	49 f0       	breq	.+18     	; 0x9ea4 <_ZN4Pads15checkAftertouchEhb+0x1d0>
    9e92:	ec 50       	subi	r30, 0x0C	; 12
    9e94:	f1 40       	sbci	r31, 0x01	; 1
    9e96:	80 81       	ld	r24, Z
    9e98:	88 23       	and	r24, r24
    9e9a:	21 f0       	breq	.+8      	; 0x9ea4 <_ZN4Pads15checkAftertouchEhb+0x1d0>
    9e9c:	8c 91       	ld	r24, X
    9e9e:	c8 17       	cp	r28, r24
    9ea0:	08 f4       	brcc	.+2      	; 0x9ea4 <_ZN4Pads15checkAftertouchEhb+0x1d0>
    9ea2:	c8 2f       	mov	r28, r24
    9ea4:	df 5f       	subi	r29, 0xFF	; 255
    9ea6:	8f ef       	ldi	r24, 0xFF	; 255
    9ea8:	c8 1a       	sub	r12, r24
    9eaa:	d8 0a       	sbc	r13, r24
    9eac:	d9 30       	cpi	r29, 0x09	; 9
    9eae:	21 f7       	brne	.-56     	; 0x9e78 <_ZN4Pads15checkAftertouchEhb+0x1a4>
    9eb0:	f8 01       	movw	r30, r16
    9eb2:	e8 56       	subi	r30, 0x68	; 104
    9eb4:	fe 4f       	sbci	r31, 0xFE	; 254
    9eb6:	80 81       	ld	r24, Z
    9eb8:	c8 17       	cp	r28, r24
    9eba:	09 f4       	brne	.+2      	; 0x9ebe <_ZN4Pads15checkAftertouchEhb+0x1ea>
    9ebc:	49 c0       	rjmp	.+146    	; 0x9f50 <_ZN4Pads15checkAftertouchEhb+0x27c>
    9ebe:	f0 82       	st	Z, r15
    9ec0:	ff 24       	eor	r15, r15
    9ec2:	f3 94       	inc	r15
    9ec4:	62 c0       	rjmp	.+196    	; 0x9f8a <_ZN4Pads15checkAftertouchEhb+0x2b6>
    9ec6:	44 23       	and	r20, r20
    9ec8:	09 f4       	brne	.+2      	; 0x9ecc <_ZN4Pads15checkAftertouchEhb+0x1f8>
    9eca:	44 c0       	rjmp	.+136    	; 0x9f54 <_ZN4Pads15checkAftertouchEhb+0x280>
    9ecc:	f8 01       	movw	r30, r16
    9ece:	ec 0f       	add	r30, r28
    9ed0:	fd 1f       	adc	r31, r29
    9ed2:	e0 55       	subi	r30, 0x50	; 80
    9ed4:	fe 4f       	sbci	r31, 0xFE	; 254
    9ed6:	f0 80       	ld	r15, Z
    9ed8:	ff 20       	and	r15, r15
    9eda:	09 f4       	brne	.+2      	; 0x9ede <_ZN4Pads15checkAftertouchEhb+0x20a>
    9edc:	56 c0       	rjmp	.+172    	; 0x9f8a <_ZN4Pads15checkAftertouchEhb+0x2b6>
    9ede:	c0 0f       	add	r28, r16
    9ee0:	d1 1f       	adc	r29, r17
    9ee2:	1b 8e       	std	Y+27, r1	; 0x1b
    9ee4:	f8 01       	movw	r30, r16
    9ee6:	e9 56       	subi	r30, 0x69	; 105
    9ee8:	fe 4f       	sbci	r31, 0xFE	; 254
    9eea:	c0 81       	ld	r28, Z
    9eec:	cc 23       	and	r28, r28
    9eee:	29 f0       	breq	.+10     	; 0x9efa <_ZN4Pads15checkAftertouchEhb+0x226>
    9ef0:	c1 30       	cpi	r28, 0x01	; 1
    9ef2:	09 f4       	brne	.+2      	; 0x9ef6 <_ZN4Pads15checkAftertouchEhb+0x222>
    9ef4:	4a c0       	rjmp	.+148    	; 0x9f8a <_ZN4Pads15checkAftertouchEhb+0x2b6>
    9ef6:	f1 2c       	mov	r15, r1
    9ef8:	48 c0       	rjmp	.+144    	; 0x9f8a <_ZN4Pads15checkAftertouchEhb+0x2b6>
    9efa:	68 01       	movw	r12, r16
    9efc:	e0 e5       	ldi	r30, 0x50	; 80
    9efe:	ce 1a       	sub	r12, r30
    9f00:	ee ef       	ldi	r30, 0xFE	; 254
    9f02:	de 0a       	sbc	r13, r30
    9f04:	d0 e0       	ldi	r29, 0x00	; 0
    9f06:	f6 01       	movw	r30, r12
    9f08:	81 91       	ld	r24, Z+
    9f0a:	6f 01       	movw	r12, r30
    9f0c:	88 23       	and	r24, r24
    9f0e:	61 f0       	breq	.+24     	; 0x9f28 <_ZN4Pads15checkAftertouchEhb+0x254>
    9f10:	6c 2f       	mov	r22, r28
    9f12:	c8 01       	movw	r24, r16
    9f14:	0e 94 62 69 	call	0xd2c4	; 0xd2c4 <_ZN4Pads12isPadPressedEh>
    9f18:	88 23       	and	r24, r24
    9f1a:	31 f0       	breq	.+12     	; 0x9f28 <_ZN4Pads15checkAftertouchEhb+0x254>
    9f1c:	f6 01       	movw	r30, r12
    9f1e:	ed 50       	subi	r30, 0x0D	; 13
    9f20:	f1 40       	sbci	r31, 0x01	; 1
    9f22:	80 81       	ld	r24, Z
    9f24:	81 11       	cpse	r24, r1
    9f26:	df 5f       	subi	r29, 0xFF	; 255
    9f28:	cf 5f       	subi	r28, 0xFF	; 255
    9f2a:	c9 30       	cpi	r28, 0x09	; 9
    9f2c:	61 f7       	brne	.-40     	; 0x9f06 <_ZN4Pads15checkAftertouchEhb+0x232>
    9f2e:	d1 11       	cpse	r29, r1
    9f30:	13 c0       	rjmp	.+38     	; 0x9f58 <_ZN4Pads15checkAftertouchEhb+0x284>
    9f32:	f8 01       	movw	r30, r16
    9f34:	e8 56       	subi	r30, 0x68	; 104
    9f36:	fe 4f       	sbci	r31, 0xFE	; 254
    9f38:	10 82       	st	Z, r1
    9f3a:	27 c0       	rjmp	.+78     	; 0x9f8a <_ZN4Pads15checkAftertouchEhb+0x2b6>
    9f3c:	f1 2c       	mov	r15, r1
    9f3e:	25 c0       	rjmp	.+74     	; 0x9f8a <_ZN4Pads15checkAftertouchEhb+0x2b6>
    9f40:	f1 2c       	mov	r15, r1
    9f42:	23 c0       	rjmp	.+70     	; 0x9f8a <_ZN4Pads15checkAftertouchEhb+0x2b6>
    9f44:	f1 2c       	mov	r15, r1
    9f46:	21 c0       	rjmp	.+66     	; 0x9f8a <_ZN4Pads15checkAftertouchEhb+0x2b6>
    9f48:	f1 2c       	mov	r15, r1
    9f4a:	1f c0       	rjmp	.+62     	; 0x9f8a <_ZN4Pads15checkAftertouchEhb+0x2b6>
    9f4c:	f1 2c       	mov	r15, r1
    9f4e:	1d c0       	rjmp	.+58     	; 0x9f8a <_ZN4Pads15checkAftertouchEhb+0x2b6>
    9f50:	f1 2c       	mov	r15, r1
    9f52:	1b c0       	rjmp	.+54     	; 0x9f8a <_ZN4Pads15checkAftertouchEhb+0x2b6>
    9f54:	f1 2c       	mov	r15, r1
    9f56:	19 c0       	rjmp	.+50     	; 0x9f8a <_ZN4Pads15checkAftertouchEhb+0x2b6>
    9f58:	f1 2c       	mov	r15, r1
    9f5a:	17 c0       	rjmp	.+46     	; 0x9f8a <_ZN4Pads15checkAftertouchEhb+0x2b6>
    9f5c:	ff 24       	eor	r15, r15
    9f5e:	f3 94       	inc	r15
    9f60:	14 c0       	rjmp	.+40     	; 0x9f8a <_ZN4Pads15checkAftertouchEhb+0x2b6>
    9f62:	f8 01       	movw	r30, r16
    9f64:	e9 56       	subi	r30, 0x69	; 105
    9f66:	fe 4f       	sbci	r31, 0xFE	; 254
    9f68:	d0 81       	ld	r29, Z
    9f6a:	dd 23       	and	r29, r29
    9f6c:	21 f0       	breq	.+8      	; 0x9f76 <_ZN4Pads15checkAftertouchEhb+0x2a2>
    9f6e:	d1 30       	cpi	r29, 0x01	; 1
    9f70:	a9 f3       	breq	.-22     	; 0x9f5c <_ZN4Pads15checkAftertouchEhb+0x288>
    9f72:	f1 2c       	mov	r15, r1
    9f74:	0a c0       	rjmp	.+20     	; 0x9f8a <_ZN4Pads15checkAftertouchEhb+0x2b6>
    9f76:	68 01       	movw	r12, r16
    9f78:	f0 e5       	ldi	r31, 0x50	; 80
    9f7a:	cf 1a       	sub	r12, r31
    9f7c:	fe ef       	ldi	r31, 0xFE	; 254
    9f7e:	df 0a       	sbc	r13, r31
    9f80:	cd 2f       	mov	r28, r29
    9f82:	b1 2c       	mov	r11, r1
    9f84:	56 cf       	rjmp	.-340    	; 0x9e32 <_ZN4Pads15checkAftertouchEhb+0x15e>
    9f86:	b3 94       	inc	r11
    9f88:	5e cf       	rjmp	.-324    	; 0x9e46 <_ZN4Pads15checkAftertouchEhb+0x172>
    9f8a:	8f 2d       	mov	r24, r15
    9f8c:	df 91       	pop	r29
    9f8e:	cf 91       	pop	r28
    9f90:	1f 91       	pop	r17
    9f92:	0f 91       	pop	r16
    9f94:	ff 90       	pop	r15
    9f96:	df 90       	pop	r13
    9f98:	cf 90       	pop	r12
    9f9a:	bf 90       	pop	r11
    9f9c:	af 90       	pop	r10
    9f9e:	9f 90       	pop	r9
    9fa0:	8f 90       	pop	r8
    9fa2:	08 95       	ret

00009fa4 <_ZN4Pads9xyUpdatedEh>:
    9fa4:	df 92       	push	r13
    9fa6:	ef 92       	push	r14
    9fa8:	ff 92       	push	r15
    9faa:	0f 93       	push	r16
    9fac:	1f 93       	push	r17
    9fae:	cf 93       	push	r28
    9fb0:	df 93       	push	r29
    9fb2:	ec 01       	movw	r28, r24
    9fb4:	e6 2e       	mov	r14, r22
    9fb6:	80 91 2c 01 	lds	r24, 0x012C
    9fba:	90 91 2d 01 	lds	r25, 0x012D
    9fbe:	01 96       	adiw	r24, 0x01	; 1
    9fc0:	a9 f4       	brne	.+42     	; 0x9fec <_ZN4Pads9xyUpdatedEh+0x48>
    9fc2:	f0 90 58 0f 	lds	r15, 0x0F58
    9fc6:	f1 10       	cpse	r15, r1
    9fc8:	07 c0       	rjmp	.+14     	; 0x9fd8 <_ZN4Pads9xyUpdatedEh+0x34>
    9fca:	ce 01       	movw	r24, r28
    9fcc:	0e 94 e1 69 	call	0xd3c2	; 0xd3c2 <_ZN4Pads6setupYEv>
    9fd0:	81 e0       	ldi	r24, 0x01	; 1
    9fd2:	80 93 58 0f 	sts	0x0F58, r24
    9fd6:	b4 c0       	rjmp	.+360    	; 0xa140 <_ZN4Pads9xyUpdatedEh+0x19c>
    9fd8:	ce 01       	movw	r24, r28
    9fda:	0e 94 86 6a 	call	0xd50c	; 0xd50c <_ZN4Pads4getYEv>
    9fde:	90 93 2d 01 	sts	0x012D, r25
    9fe2:	80 93 2c 01 	sts	0x012C, r24
    9fe6:	01 96       	adiw	r24, 0x01	; 1
    9fe8:	09 f4       	brne	.+2      	; 0x9fec <_ZN4Pads9xyUpdatedEh+0x48>
    9fea:	9c c0       	rjmp	.+312    	; 0xa124 <_ZN4Pads9xyUpdatedEh+0x180>
    9fec:	80 91 58 0f 	lds	r24, 0x0F58
    9ff0:	88 23       	and	r24, r24
    9ff2:	69 f0       	breq	.+26     	; 0xa00e <_ZN4Pads9xyUpdatedEh+0x6a>
    9ff4:	80 91 2a 01 	lds	r24, 0x012A
    9ff8:	90 91 2b 01 	lds	r25, 0x012B
    9ffc:	01 96       	adiw	r24, 0x01	; 1
    9ffe:	a9 f4       	brne	.+42     	; 0xa02a <_ZN4Pads9xyUpdatedEh+0x86>
    a000:	ce 01       	movw	r24, r28
    a002:	0e 94 d1 69 	call	0xd3a2	; 0xd3a2 <_ZN4Pads6setupXEv>
    a006:	10 92 58 0f 	sts	0x0F58, r1
    a00a:	f1 2c       	mov	r15, r1
    a00c:	99 c0       	rjmp	.+306    	; 0xa140 <_ZN4Pads9xyUpdatedEh+0x19c>
    a00e:	80 91 2a 01 	lds	r24, 0x012A
    a012:	90 91 2b 01 	lds	r25, 0x012B
    a016:	01 96       	adiw	r24, 0x01	; 1
    a018:	09 f0       	breq	.+2      	; 0xa01c <_ZN4Pads9xyUpdatedEh+0x78>
    a01a:	8d c0       	rjmp	.+282    	; 0xa136 <_ZN4Pads9xyUpdatedEh+0x192>
    a01c:	ce 01       	movw	r24, r28
    a01e:	0e 94 67 6a 	call	0xd4ce	; 0xd4ce <_ZN4Pads4getXEv>
    a022:	90 93 2b 01 	sts	0x012B, r25
    a026:	80 93 2a 01 	sts	0x012A, r24
    a02a:	20 91 2c 01 	lds	r18, 0x012C
    a02e:	30 91 2d 01 	lds	r19, 0x012D
    a032:	2f 3f       	cpi	r18, 0xFF	; 255
    a034:	8f ef       	ldi	r24, 0xFF	; 255
    a036:	38 07       	cpc	r19, r24
    a038:	39 f0       	breq	.+14     	; 0xa048 <_ZN4Pads9xyUpdatedEh+0xa4>
    a03a:	80 91 2a 01 	lds	r24, 0x012A
    a03e:	90 91 2b 01 	lds	r25, 0x012B
    a042:	01 96       	adiw	r24, 0x01	; 1
    a044:	09 f4       	brne	.+2      	; 0xa048 <_ZN4Pads9xyUpdatedEh+0xa4>
    a046:	70 c0       	rjmp	.+224    	; 0xa128 <_ZN4Pads9xyUpdatedEh+0x184>
    a048:	60 91 2a 01 	lds	r22, 0x012A
    a04c:	70 91 2b 01 	lds	r23, 0x012B
    a050:	de 01       	movw	r26, r28
    a052:	ae 56       	subi	r26, 0x6E	; 110
    a054:	bd 4f       	sbci	r27, 0xFD	; 253
    a056:	8c 91       	ld	r24, X
    a058:	48 2f       	mov	r20, r24
    a05a:	50 e0       	ldi	r21, 0x00	; 0
    a05c:	44 0f       	add	r20, r20
    a05e:	55 1f       	adc	r21, r21
    a060:	4c 0f       	add	r20, r28
    a062:	5d 1f       	adc	r21, r29
    a064:	fa 01       	movw	r30, r20
    a066:	ff 96       	adiw	r30, 0x3f	; 63
    a068:	31 83       	std	Z+1, r19	; 0x01
    a06a:	20 83       	st	Z, r18
    a06c:	36 96       	adiw	r30, 0x06	; 6
    a06e:	71 83       	std	Z+1, r23	; 0x01
    a070:	60 83       	st	Z, r22
    a072:	8f 5f       	subi	r24, 0xFF	; 255
    a074:	8c 93       	st	X, r24
    a076:	83 30       	cpi	r24, 0x03	; 3
    a078:	09 f0       	breq	.+2      	; 0xa07c <_ZN4Pads9xyUpdatedEh+0xd8>
    a07a:	58 c0       	rjmp	.+176    	; 0xa12c <_ZN4Pads9xyUpdatedEh+0x188>
    a07c:	8f ef       	ldi	r24, 0xFF	; 255
    a07e:	9f ef       	ldi	r25, 0xFF	; 255
    a080:	90 93 2d 01 	sts	0x012D, r25
    a084:	80 93 2c 01 	sts	0x012C, r24
    a088:	90 93 2b 01 	sts	0x012B, r25
    a08c:	80 93 2a 01 	sts	0x012A, r24
    a090:	fd 01       	movw	r30, r26
    a092:	10 82       	st	Z, r1
    a094:	10 92 58 0f 	sts	0x0F58, r1
    a098:	ea 51       	subi	r30, 0x1A	; 26
    a09a:	ff 4f       	sbci	r31, 0xFF	; 255
    a09c:	f0 80       	ld	r15, Z
    a09e:	ff 20       	and	r15, r15
    a0a0:	09 f4       	brne	.+2      	; 0xa0a4 <_ZN4Pads9xyUpdatedEh+0x100>
    a0a2:	46 c0       	rjmp	.+140    	; 0xa130 <_ZN4Pads9xyUpdatedEh+0x18c>
    a0a4:	35 96       	adiw	r30, 0x05	; 5
    a0a6:	d0 80       	ld	r13, Z
    a0a8:	6d 2d       	mov	r22, r13
    a0aa:	ce 01       	movw	r24, r28
    a0ac:	23 dc       	rcall	.-1978   	; 0x98f4 <_ZN4Pads17getMedianValueXYZE16coordinateType_t>
    a0ae:	fe 01       	movw	r30, r28
    a0b0:	e7 58       	subi	r30, 0x87	; 135
    a0b2:	fc 4f       	sbci	r31, 0xFC	; 252
    a0b4:	20 81       	ld	r18, Z
    a0b6:	31 81       	ldd	r19, Z+1	; 0x01
    a0b8:	82 17       	cp	r24, r18
    a0ba:	93 07       	cpc	r25, r19
    a0bc:	2c f4       	brge	.+10     	; 0xa0c8 <_ZN4Pads9xyUpdatedEh+0x124>
    a0be:	9c 01       	movw	r18, r24
    a0c0:	2d 5f       	subi	r18, 0xFD	; 253
    a0c2:	3f 4f       	sbci	r19, 0xFF	; 255
    a0c4:	31 83       	std	Z+1, r19	; 0x01
    a0c6:	20 83       	st	Z, r18
    a0c8:	fe 01       	movw	r30, r28
    a0ca:	e5 58       	subi	r30, 0x85	; 133
    a0cc:	fc 4f       	sbci	r31, 0xFC	; 252
    a0ce:	20 81       	ld	r18, Z
    a0d0:	31 81       	ldd	r19, Z+1	; 0x01
    a0d2:	28 17       	cp	r18, r24
    a0d4:	39 07       	cpc	r19, r25
    a0d6:	1c f4       	brge	.+6      	; 0xa0de <_ZN4Pads9xyUpdatedEh+0x13a>
    a0d8:	03 97       	sbiw	r24, 0x03	; 3
    a0da:	91 83       	std	Z+1, r25	; 0x01
    a0dc:	80 83       	st	Z, r24
    a0de:	fe 01       	movw	r30, r28
    a0e0:	e7 58       	subi	r30, 0x87	; 135
    a0e2:	fc 4f       	sbci	r31, 0xFC	; 252
    a0e4:	00 81       	ld	r16, Z
    a0e6:	11 81       	ldd	r17, Z+1	; 0x01
    a0e8:	11 23       	and	r17, r17
    a0ea:	54 f1       	brlt	.+84     	; 0xa140 <_ZN4Pads9xyUpdatedEh+0x19c>
    a0ec:	32 96       	adiw	r30, 0x02	; 2
    a0ee:	80 81       	ld	r24, Z
    a0f0:	91 81       	ldd	r25, Z+1	; 0x01
    a0f2:	81 15       	cp	r24, r1
    a0f4:	94 40       	sbci	r25, 0x04	; 4
    a0f6:	24 f5       	brge	.+72     	; 0xa140 <_ZN4Pads9xyUpdatedEh+0x19c>
    a0f8:	2e 2d       	mov	r18, r14
    a0fa:	40 e0       	ldi	r20, 0x00	; 0
    a0fc:	6d 2d       	mov	r22, r13
    a0fe:	8a e6       	ldi	r24, 0x6A	; 106
    a100:	9f e0       	ldi	r25, 0x0F	; 15
    a102:	0e 94 48 6d 	call	0xda90	; 0xda90 <_ZN4Pads9calibrateE16coordinateType_t20calibrationDirectionhj>
    a106:	fe 01       	movw	r30, r28
    a108:	e5 58       	subi	r30, 0x85	; 133
    a10a:	fc 4f       	sbci	r31, 0xFC	; 252
    a10c:	00 81       	ld	r16, Z
    a10e:	11 81       	ldd	r17, Z+1	; 0x01
    a110:	c3 58       	subi	r28, 0x83	; 131
    a112:	dc 4f       	sbci	r29, 0xFC	; 252
    a114:	2e 2d       	mov	r18, r14
    a116:	41 e0       	ldi	r20, 0x01	; 1
    a118:	68 81       	ld	r22, Y
    a11a:	8a e6       	ldi	r24, 0x6A	; 106
    a11c:	9f e0       	ldi	r25, 0x0F	; 15
    a11e:	0e 94 48 6d 	call	0xda90	; 0xda90 <_ZN4Pads9calibrateE16coordinateType_t20calibrationDirectionhj>
    a122:	0e c0       	rjmp	.+28     	; 0xa140 <_ZN4Pads9xyUpdatedEh+0x19c>
    a124:	f1 2c       	mov	r15, r1
    a126:	0c c0       	rjmp	.+24     	; 0xa140 <_ZN4Pads9xyUpdatedEh+0x19c>
    a128:	f1 2c       	mov	r15, r1
    a12a:	0a c0       	rjmp	.+20     	; 0xa140 <_ZN4Pads9xyUpdatedEh+0x19c>
    a12c:	f1 2c       	mov	r15, r1
    a12e:	08 c0       	rjmp	.+16     	; 0xa140 <_ZN4Pads9xyUpdatedEh+0x19c>
    a130:	ff 24       	eor	r15, r15
    a132:	f3 94       	inc	r15
    a134:	05 c0       	rjmp	.+10     	; 0xa140 <_ZN4Pads9xyUpdatedEh+0x19c>
    a136:	20 91 2c 01 	lds	r18, 0x012C
    a13a:	30 91 2d 01 	lds	r19, 0x012D
    a13e:	84 cf       	rjmp	.-248    	; 0xa048 <_ZN4Pads9xyUpdatedEh+0xa4>
    a140:	8f 2d       	mov	r24, r15
    a142:	df 91       	pop	r29
    a144:	cf 91       	pop	r28
    a146:	1f 91       	pop	r17
    a148:	0f 91       	pop	r16
    a14a:	ff 90       	pop	r15
    a14c:	ef 90       	pop	r14
    a14e:	df 90       	pop	r13
    a150:	08 95       	ret

0000a152 <_ZN4Pads14pressureStableEhb>:
    a152:	df 92       	push	r13
    a154:	ef 92       	push	r14
    a156:	ff 92       	push	r15
    a158:	0f 93       	push	r16
    a15a:	1f 93       	push	r17
    a15c:	cf 93       	push	r28
    a15e:	df 93       	push	r29
    a160:	7c 01       	movw	r14, r24
    a162:	44 23       	and	r20, r20
    a164:	09 f4       	brne	.+2      	; 0xa168 <_ZN4Pads14pressureStableEhb+0x16>
    a166:	3f c0       	rjmp	.+126    	; 0xa1e6 <_ZN4Pads14pressureStableEhb+0x94>
    a168:	c6 2f       	mov	r28, r22
    a16a:	d0 e0       	ldi	r29, 0x00	; 0
    a16c:	fc 01       	movw	r30, r24
    a16e:	ec 0f       	add	r30, r28
    a170:	fd 1f       	adc	r31, r29
    a172:	e9 55       	subi	r30, 0x59	; 89
    a174:	fe 4f       	sbci	r31, 0xFE	; 254
    a176:	d0 80       	ld	r13, Z
    a178:	d1 10       	cpse	r13, r1
    a17a:	18 c0       	rjmp	.+48     	; 0xa1ac <_ZN4Pads14pressureStableEhb+0x5a>
    a17c:	8c 0f       	add	r24, r28
    a17e:	9d 1f       	adc	r25, r29
    a180:	fc 01       	movw	r30, r24
    a182:	e9 55       	subi	r30, 0x59	; 89
    a184:	fe 4f       	sbci	r31, 0xFE	; 254
    a186:	21 e0       	ldi	r18, 0x01	; 1
    a188:	20 83       	st	Z, r18
    a18a:	39 97       	sbiw	r30, 0x09	; 9
    a18c:	10 82       	st	Z, r1
    a18e:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z11rTimeMillisv>
    a192:	cc 0f       	add	r28, r28
    a194:	dd 1f       	adc	r29, r29
    a196:	cc 0f       	add	r28, r28
    a198:	dd 1f       	adc	r29, r29
    a19a:	ce 0d       	add	r28, r14
    a19c:	df 1d       	adc	r29, r15
    a19e:	c3 52       	subi	r28, 0x23	; 35
    a1a0:	de 4f       	sbci	r29, 0xFE	; 254
    a1a2:	68 83       	st	Y, r22
    a1a4:	79 83       	std	Y+1, r23	; 0x01
    a1a6:	8a 83       	std	Y+2, r24	; 0x02
    a1a8:	9b 83       	std	Y+3, r25	; 0x03
    a1aa:	5c c0       	rjmp	.+184    	; 0xa264 <_ZN4Pads14pressureStableEhb+0x112>
    a1ac:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z11rTimeMillisv>
    a1b0:	cc 0f       	add	r28, r28
    a1b2:	dd 1f       	adc	r29, r29
    a1b4:	cc 0f       	add	r28, r28
    a1b6:	dd 1f       	adc	r29, r29
    a1b8:	ce 0d       	add	r28, r14
    a1ba:	df 1d       	adc	r29, r15
    a1bc:	c3 52       	subi	r28, 0x23	; 35
    a1be:	de 4f       	sbci	r29, 0xFE	; 254
    a1c0:	08 81       	ld	r16, Y
    a1c2:	19 81       	ldd	r17, Y+1	; 0x01
    a1c4:	2a 81       	ldd	r18, Y+2	; 0x02
    a1c6:	3b 81       	ldd	r19, Y+3	; 0x03
    a1c8:	dc 01       	movw	r26, r24
    a1ca:	cb 01       	movw	r24, r22
    a1cc:	80 1b       	sub	r24, r16
    a1ce:	91 0b       	sbc	r25, r17
    a1d0:	a2 0b       	sbc	r26, r18
    a1d2:	b3 0b       	sbc	r27, r19
    a1d4:	dd 24       	eor	r13, r13
    a1d6:	d3 94       	inc	r13
    a1d8:	0b 97       	sbiw	r24, 0x0b	; 11
    a1da:	a1 05       	cpc	r26, r1
    a1dc:	b1 05       	cpc	r27, r1
    a1de:	08 f0       	brcs	.+2      	; 0xa1e2 <_ZN4Pads14pressureStableEhb+0x90>
    a1e0:	41 c0       	rjmp	.+130    	; 0xa264 <_ZN4Pads14pressureStableEhb+0x112>
    a1e2:	d1 2c       	mov	r13, r1
    a1e4:	3f c0       	rjmp	.+126    	; 0xa264 <_ZN4Pads14pressureStableEhb+0x112>
    a1e6:	06 2f       	mov	r16, r22
    a1e8:	10 e0       	ldi	r17, 0x00	; 0
    a1ea:	fc 01       	movw	r30, r24
    a1ec:	e0 0f       	add	r30, r16
    a1ee:	f1 1f       	adc	r31, r17
    a1f0:	e2 56       	subi	r30, 0x62	; 98
    a1f2:	fe 4f       	sbci	r31, 0xFE	; 254
    a1f4:	d0 80       	ld	r13, Z
    a1f6:	d1 10       	cpse	r13, r1
    a1f8:	19 c0       	rjmp	.+50     	; 0xa22c <_ZN4Pads14pressureStableEhb+0xda>
    a1fa:	80 0f       	add	r24, r16
    a1fc:	91 1f       	adc	r25, r17
    a1fe:	fc 01       	movw	r30, r24
    a200:	e2 56       	subi	r30, 0x62	; 98
    a202:	fe 4f       	sbci	r31, 0xFE	; 254
    a204:	21 e0       	ldi	r18, 0x01	; 1
    a206:	20 83       	st	Z, r18
    a208:	39 96       	adiw	r30, 0x09	; 9
    a20a:	10 82       	st	Z, r1
    a20c:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z11rTimeMillisv>
    a210:	e8 01       	movw	r28, r16
    a212:	cc 0f       	add	r28, r28
    a214:	dd 1f       	adc	r29, r29
    a216:	cc 0f       	add	r28, r28
    a218:	dd 1f       	adc	r29, r29
    a21a:	ce 0d       	add	r28, r14
    a21c:	df 1d       	adc	r29, r15
    a21e:	c7 54       	subi	r28, 0x47	; 71
    a220:	de 4f       	sbci	r29, 0xFE	; 254
    a222:	68 83       	st	Y, r22
    a224:	79 83       	std	Y+1, r23	; 0x01
    a226:	8a 83       	std	Y+2, r24	; 0x02
    a228:	9b 83       	std	Y+3, r25	; 0x03
    a22a:	1c c0       	rjmp	.+56     	; 0xa264 <_ZN4Pads14pressureStableEhb+0x112>
    a22c:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z11rTimeMillisv>
    a230:	00 0f       	add	r16, r16
    a232:	11 1f       	adc	r17, r17
    a234:	00 0f       	add	r16, r16
    a236:	11 1f       	adc	r17, r17
    a238:	e7 01       	movw	r28, r14
    a23a:	c0 0f       	add	r28, r16
    a23c:	d1 1f       	adc	r29, r17
    a23e:	c7 54       	subi	r28, 0x47	; 71
    a240:	de 4f       	sbci	r29, 0xFE	; 254
    a242:	08 81       	ld	r16, Y
    a244:	19 81       	ldd	r17, Y+1	; 0x01
    a246:	2a 81       	ldd	r18, Y+2	; 0x02
    a248:	3b 81       	ldd	r19, Y+3	; 0x03
    a24a:	dc 01       	movw	r26, r24
    a24c:	cb 01       	movw	r24, r22
    a24e:	80 1b       	sub	r24, r16
    a250:	91 0b       	sbc	r25, r17
    a252:	a2 0b       	sbc	r26, r18
    a254:	b3 0b       	sbc	r27, r19
    a256:	dd 24       	eor	r13, r13
    a258:	d3 94       	inc	r13
    a25a:	40 97       	sbiw	r24, 0x10	; 16
    a25c:	a1 05       	cpc	r26, r1
    a25e:	b1 05       	cpc	r27, r1
    a260:	08 f4       	brcc	.+2      	; 0xa264 <_ZN4Pads14pressureStableEhb+0x112>
    a262:	d1 2c       	mov	r13, r1
    a264:	8d 2d       	mov	r24, r13
    a266:	df 91       	pop	r29
    a268:	cf 91       	pop	r28
    a26a:	1f 91       	pop	r17
    a26c:	0f 91       	pop	r16
    a26e:	ff 90       	pop	r15
    a270:	ef 90       	pop	r14
    a272:	df 90       	pop	r13
    a274:	08 95       	ret

0000a276 <_ZN4Pads15pressureUpdatedEv>:

bool Pads::pressureUpdated() {
    a276:	cf 93       	push	r28
    a278:	df 93       	push	r29
    a27a:	ec 01       	movw	r28, r24

    int16_t pressure;

    pressure = getPressure();
    a27c:	0e 94 f1 69 	call	0xd3e2	; 0xd3e2 <_ZN4Pads11getPressureEv>

    if (pressure == -1) return false;
    a280:	8f 3f       	cpi	r24, 0xFF	; 255
    a282:	2f ef       	ldi	r18, 0xFF	; 255
    a284:	92 07       	cpc	r25, r18
    a286:	e1 f0       	breq	.+56     	; 0xa2c0 <_ZN4Pads15pressureUpdatedEv+0x4a>

}

void Pads::addPressureSamples(int16_t value) {

    pressureValueSamples[sampleCounterPressure] = value;
    a288:	fe 01       	movw	r30, r28
    a28a:	ef 56       	subi	r30, 0x6F	; 111
    a28c:	fd 4f       	sbci	r31, 0xFD	; 253
    a28e:	20 81       	ld	r18, Z
    a290:	e2 2f       	mov	r30, r18
    a292:	f0 e0       	ldi	r31, 0x00	; 0
    a294:	ee 0f       	add	r30, r30
    a296:	ff 1f       	adc	r31, r31
    a298:	ec 0f       	add	r30, r28
    a29a:	fd 1f       	adc	r31, r29
    a29c:	e5 5b       	subi	r30, 0xB5	; 181
    a29e:	ff 4f       	sbci	r31, 0xFF	; 255
    a2a0:	91 83       	std	Z+1, r25	; 0x01
    a2a2:	80 83       	st	Z, r24
    sampleCounterPressure++;
    a2a4:	91 e0       	ldi	r25, 0x01	; 1
    a2a6:	92 0f       	add	r25, r18
    if (pressure == -1) return false;

    //we have pressure
    addPressureSamples(pressure);

    if (!pressureSampled()) return false;
    a2a8:	93 30       	cpi	r25, 0x03	; 3
    a2aa:	29 f0       	breq	.+10     	; 0xa2b6 <_ZN4Pads15pressureUpdatedEv+0x40>
}

void Pads::addPressureSamples(int16_t value) {

    pressureValueSamples[sampleCounterPressure] = value;
    sampleCounterPressure++;
    a2ac:	cf 56       	subi	r28, 0x6F	; 111
    a2ae:	dd 4f       	sbci	r29, 0xFD	; 253
    a2b0:	98 83       	st	Y, r25
    if (pressure == -1) return false;

    //we have pressure
    addPressureSamples(pressure);

    if (!pressureSampled()) return false;
    a2b2:	80 e0       	ldi	r24, 0x00	; 0
    a2b4:	06 c0       	rjmp	.+12     	; 0xa2c2 <_ZN4Pads15pressureUpdatedEv+0x4c>
    else {

        //reset pressure sample counter
        sampleCounterPressure = 0;
    a2b6:	cf 56       	subi	r28, 0x6F	; 111
    a2b8:	dd 4f       	sbci	r29, 0xFD	; 253
    a2ba:	18 82       	st	Y, r1
        return true;
    a2bc:	81 e0       	ldi	r24, 0x01	; 1
    a2be:	01 c0       	rjmp	.+2      	; 0xa2c2 <_ZN4Pads15pressureUpdatedEv+0x4c>

    int16_t pressure;

    pressure = getPressure();

    if (pressure == -1) return false;
    a2c0:	80 e0       	ldi	r24, 0x00	; 0
        sampleCounterPressure = 0;
        return true;

    }

}
    a2c2:	df 91       	pop	r29
    a2c4:	cf 91       	pop	r28
    a2c6:	08 95       	ret

0000a2c8 <_ZN4Pads13checkVelocityEh>:

bool Pads::checkVelocity(uint8_t pad)  {
    a2c8:	cf 92       	push	r12
    a2ca:	df 92       	push	r13
    a2cc:	ff 92       	push	r15
    a2ce:	0f 93       	push	r16
    a2d0:	1f 93       	push	r17
    a2d2:	cf 93       	push	r28
    a2d4:	df 93       	push	r29
    a2d6:	ec 01       	movw	r28, r24
    a2d8:	16 2f       	mov	r17, r22

    //we've taken 3 pressure samples so far, get median value
    int16_t medianValue = getMedianValueXYZ(coordinateZ);
    a2da:	62 e0       	ldi	r22, 0x02	; 2
    a2dc:	0b db       	rcall	.-2538   	; 0x98f4 <_ZN4Pads17getMedianValueXYZE16coordinateType_t>
    a2de:	6c 01       	movw	r12, r24
    //calibrate pressure based on median value (0-1023 -> 0-127)
    uint8_t calibratedPressure = scalePressure(pad, medianValue, pressureVelocity);
    a2e0:	20 e0       	ldi	r18, 0x00	; 0
    a2e2:	ac 01       	movw	r20, r24
    a2e4:	61 2f       	mov	r22, r17
    a2e6:	ce 01       	movw	r24, r28
    a2e8:	0e 94 89 6b 	call	0xd712	; 0xd712 <_ZN4Pads13scalePressureEhi14pressureType_t>
    a2ec:	f8 2e       	mov	r15, r24

    bool pressDetected = (calibratedPressure > 0);
    a2ee:	01 e0       	ldi	r16, 0x01	; 1
    a2f0:	81 11       	cpse	r24, r1
    a2f2:	01 c0       	rjmp	.+2      	; 0xa2f6 <_ZN4Pads13checkVelocityEh+0x2e>
    a2f4:	00 e0       	ldi	r16, 0x00	; 0
    bool returnValue = false;

    if (pressureStable(pad, pressDetected))    {
    a2f6:	40 2f       	mov	r20, r16
    a2f8:	61 2f       	mov	r22, r17
    a2fa:	ce 01       	movw	r24, r28
    a2fc:	2a df       	rcall	.-428    	; 0xa152 <_ZN4Pads14pressureStableEhb>
    a2fe:	88 23       	and	r24, r24
    a300:	09 f4       	brne	.+2      	; 0xa304 <_ZN4Pads13checkVelocityEh+0x3c>
    a302:	65 c0       	rjmp	.+202    	; 0xa3ce <_ZN4Pads13checkVelocityEh+0x106>
            //printf("pad %d median value: %d\tMIDI value: %d\n", pad, medianValue, calibratedPressure);
        //#endif

        //pad reading is stable

        switch (pressDetected)    {
    a304:	00 23       	and	r16, r16
    a306:	99 f1       	breq	.+102    	; 0xa36e <_ZN4Pads13checkVelocityEh+0xa6>

            case true:
            if (!bitRead(padPressed, pad)) {  //pad isn't already pressed
    a308:	fe 01       	movw	r30, r28
    a30a:	ef 5a       	subi	r30, 0xAF	; 175
    a30c:	ff 4f       	sbci	r31, 0xFF	; 255
    a30e:	40 81       	ld	r20, Z
    a310:	51 81       	ldd	r21, Z+1	; 0x01
    a312:	21 2f       	mov	r18, r17
    a314:	30 e0       	ldi	r19, 0x00	; 0
    a316:	ca 01       	movw	r24, r20
    a318:	01 2e       	mov	r0, r17
    a31a:	02 c0       	rjmp	.+4      	; 0xa320 <_ZN4Pads13checkVelocityEh+0x58>
    a31c:	96 95       	lsr	r25
    a31e:	87 95       	ror	r24
    a320:	0a 94       	dec	r0
    a322:	e2 f7       	brpl	.-8      	; 0xa31c <_ZN4Pads13checkVelocityEh+0x54>
    a324:	80 fd       	sbrc	r24, 0
    a326:	16 c0       	rjmp	.+44     	; 0xa354 <_ZN4Pads13checkVelocityEh+0x8c>

                //sensor is really pressed
                bitWrite(padPressed, pad, true);  //set pad pressed
    a328:	81 e0       	ldi	r24, 0x01	; 1
    a32a:	90 e0       	ldi	r25, 0x00	; 0
    a32c:	a0 e0       	ldi	r26, 0x00	; 0
    a32e:	b0 e0       	ldi	r27, 0x00	; 0
    a330:	04 c0       	rjmp	.+8      	; 0xa33a <_ZN4Pads13checkVelocityEh+0x72>
    a332:	88 0f       	add	r24, r24
    a334:	99 1f       	adc	r25, r25
    a336:	aa 1f       	adc	r26, r26
    a338:	bb 1f       	adc	r27, r27
    a33a:	1a 95       	dec	r17
    a33c:	d2 f7       	brpl	.-12     	; 0xa332 <_ZN4Pads13checkVelocityEh+0x6a>
    a33e:	84 2b       	or	r24, r20
    a340:	95 2b       	or	r25, r21
    a342:	91 83       	std	Z+1, r25	; 0x01
    a344:	80 83       	st	Z, r24
                lastVelocityValue[pad] = calibratedPressure;
    a346:	fe 01       	movw	r30, r28
    a348:	e2 0f       	add	r30, r18
    a34a:	f3 1f       	adc	r31, r19
    a34c:	f2 8a       	std	Z+18, r15	; 0x12
                lastMIDInoteState[pad] = true;
    a34e:	81 e0       	ldi	r24, 0x01	; 1
    a350:	84 a3       	std	Z+36, r24	; 0x24
    a352:	01 c0       	rjmp	.+2      	; 0xa356 <_ZN4Pads13checkVelocityEh+0x8e>
    int16_t medianValue = getMedianValueXYZ(coordinateZ);
    //calibrate pressure based on median value (0-1023 -> 0-127)
    uint8_t calibratedPressure = scalePressure(pad, medianValue, pressureVelocity);

    bool pressDetected = (calibratedPressure > 0);
    bool returnValue = false;
    a354:	80 e0       	ldi	r24, 0x00	; 0
                lastMIDInoteState[pad] = true;
                returnValue = true;

            }
            //always update lastPressure value
            lastPressureValue[pad] = medianValue;
    a356:	22 0f       	add	r18, r18
    a358:	33 1f       	adc	r19, r19
    a35a:	fe 01       	movw	r30, r28
    a35c:	e2 0f       	add	r30, r18
    a35e:	f3 1f       	adc	r31, r19
    a360:	d6 a6       	std	Z+46, r13	; 0x2e
    a362:	c5 a6       	std	Z+45, r12	; 0x2d
            switchToXYread = true;
    a364:	cb 56       	subi	r28, 0x6B	; 107
    a366:	dd 4f       	sbci	r29, 0xFD	; 253
    a368:	91 e0       	ldi	r25, 0x01	; 1
    a36a:	98 83       	st	Y, r25
    a36c:	3c c0       	rjmp	.+120    	; 0xa3e6 <_ZN4Pads13checkVelocityEh+0x11e>
            break;

            case false:
            if (bitRead(padPressed, pad))  {  //pad is already pressed
    a36e:	fe 01       	movw	r30, r28
    a370:	ef 5a       	subi	r30, 0xAF	; 175
    a372:	ff 4f       	sbci	r31, 0xFF	; 255
    a374:	80 81       	ld	r24, Z
    a376:	91 81       	ldd	r25, Z+1	; 0x01
    a378:	e1 2f       	mov	r30, r17
    a37a:	f0 e0       	ldi	r31, 0x00	; 0
    a37c:	9c 01       	movw	r18, r24
    a37e:	01 2e       	mov	r0, r17
    a380:	02 c0       	rjmp	.+4      	; 0xa386 <_ZN4Pads13checkVelocityEh+0xbe>
    a382:	36 95       	lsr	r19
    a384:	27 95       	ror	r18
    a386:	0a 94       	dec	r0
    a388:	e2 f7       	brpl	.-8      	; 0xa382 <_ZN4Pads13checkVelocityEh+0xba>
    a38a:	20 ff       	sbrs	r18, 0
    a38c:	20 c0       	rjmp	.+64     	; 0xa3ce <_ZN4Pads13checkVelocityEh+0x106>

                lastVelocityValue[pad] = calibratedPressure;
    a38e:	ec 0f       	add	r30, r28
    a390:	fd 1f       	adc	r31, r29
    a392:	f2 8a       	std	Z+18, r15	; 0x12
                lastMIDInoteState[pad] = false;
    a394:	14 a2       	std	Z+36, r1	; 0x24
                returnValue = true;
                lastXMIDIvalue[pad] = DEFAULT_XY_AT_VALUE;
    a396:	2f ef       	ldi	r18, 0xFF	; 255
    a398:	20 83       	st	Z, r18
                lastYMIDIvalue[pad] = DEFAULT_XY_AT_VALUE;
    a39a:	21 87       	std	Z+9, r18	; 0x09
                bitWrite(padPressed, pad, false);  //set pad not pressed
    a39c:	fe 01       	movw	r30, r28
    a39e:	ef 5a       	subi	r30, 0xAF	; 175
    a3a0:	ff 4f       	sbci	r31, 0xFF	; 255
    a3a2:	41 e0       	ldi	r20, 0x01	; 1
    a3a4:	50 e0       	ldi	r21, 0x00	; 0
    a3a6:	60 e0       	ldi	r22, 0x00	; 0
    a3a8:	70 e0       	ldi	r23, 0x00	; 0
    a3aa:	04 c0       	rjmp	.+8      	; 0xa3b4 <_ZN4Pads13checkVelocityEh+0xec>
    a3ac:	44 0f       	add	r20, r20
    a3ae:	55 1f       	adc	r21, r21
    a3b0:	66 1f       	adc	r22, r22
    a3b2:	77 1f       	adc	r23, r23
    a3b4:	1a 95       	dec	r17
    a3b6:	d2 f7       	brpl	.-12     	; 0xa3ac <_ZN4Pads13checkVelocityEh+0xe4>
    a3b8:	40 95       	com	r20
    a3ba:	50 95       	com	r21
    a3bc:	84 23       	and	r24, r20
    a3be:	95 23       	and	r25, r21
    a3c0:	91 83       	std	Z+1, r25	; 0x01
    a3c2:	80 83       	st	Z, r24
                switchToXYread = false;
    a3c4:	ec 5b       	subi	r30, 0xBC	; 188
    a3c6:	fd 4f       	sbci	r31, 0xFD	; 253
    a3c8:	10 82       	st	Z, r1
            case false:
            if (bitRead(padPressed, pad))  {  //pad is already pressed

                lastVelocityValue[pad] = calibratedPressure;
                lastMIDInoteState[pad] = false;
                returnValue = true;
    a3ca:	81 e0       	ldi	r24, 0x01	; 1
    a3cc:	06 c0       	rjmp	.+12     	; 0xa3da <_ZN4Pads13checkVelocityEh+0x112>

        }

    }

    if (!switchToXYread) switchToNextPad = true;
    a3ce:	fe 01       	movw	r30, r28
    a3d0:	eb 56       	subi	r30, 0x6B	; 107
    a3d2:	fd 4f       	sbci	r31, 0xFD	; 253
    a3d4:	80 81       	ld	r24, Z
    a3d6:	81 11       	cpse	r24, r1
    a3d8:	05 c0       	rjmp	.+10     	; 0xa3e4 <_ZN4Pads13checkVelocityEh+0x11c>
    a3da:	cc 56       	subi	r28, 0x6C	; 108
    a3dc:	dd 4f       	sbci	r29, 0xFD	; 253
    a3de:	91 e0       	ldi	r25, 0x01	; 1
    a3e0:	98 83       	st	Y, r25
    a3e2:	01 c0       	rjmp	.+2      	; 0xa3e6 <_ZN4Pads13checkVelocityEh+0x11e>
    a3e4:	80 e0       	ldi	r24, 0x00	; 0
    return returnValue;

}
    a3e6:	df 91       	pop	r29
    a3e8:	cf 91       	pop	r28
    a3ea:	1f 91       	pop	r17
    a3ec:	0f 91       	pop	r16
    a3ee:	ff 90       	pop	r15
    a3f0:	df 90       	pop	r13
    a3f2:	cf 90       	pop	r12
    a3f4:	08 95       	ret

0000a3f6 <_ZN4Pads15checkNoteBufferEv>:

    checkNoteBuffer();

}

bool Pads::checkNoteBuffer()    {
    a3f6:	8f 92       	push	r8
    a3f8:	9f 92       	push	r9
    a3fa:	af 92       	push	r10
    a3fc:	bf 92       	push	r11
    a3fe:	ef 92       	push	r14
    a400:	ff 92       	push	r15
    a402:	0f 93       	push	r16
    a404:	1f 93       	push	r17
    a406:	cf 93       	push	r28

    //notes are stored in buffer and they're sent after PAD_NOTE_SEND_DELAY
    //to avoid glide effect while sending x/y + notes

    if (note_buffer_head == note_buffer_tail)   {
    a408:	fc 01       	movw	r30, r24
    a40a:	e9 58       	subi	r30, 0x89	; 137
    a40c:	fc 4f       	sbci	r31, 0xFC	; 252
    a40e:	c0 81       	ld	r28, Z
    a410:	31 97       	sbiw	r30, 0x01	; 1
    a412:	20 81       	ld	r18, Z
    a414:	2c 17       	cp	r18, r28
    a416:	e1 f1       	breq	.+120    	; 0xa490 <_ZN4Pads15checkNoteBufferEv+0x9a>
        return false;

    }

    //there is something in buffer
    uint8_t index = note_buffer_tail + 1;
    a418:	cf 5f       	subi	r28, 0xFF	; 255
    if (index >= PAD_NOTE_BUFFER_SIZE) index = 0;
    a41a:	c0 32       	cpi	r28, 0x20	; 32
    a41c:	08 f0       	brcs	.+2      	; 0xa420 <_ZN4Pads15checkNoteBufferEv+0x2a>
    a41e:	c0 e0       	ldi	r28, 0x00	; 0
    a420:	8c 01       	movw	r16, r24
    uint32_t noteTime = pad_note_timer_buffer[index];
    a422:	ec 2e       	mov	r14, r28
    a424:	f1 2c       	mov	r15, r1
    a426:	fc 01       	movw	r30, r24
    a428:	84 e0       	ldi	r24, 0x04	; 4
    a42a:	c8 9f       	mul	r28, r24
    a42c:	e0 0d       	add	r30, r0
    a42e:	f1 1d       	adc	r31, r1
    a430:	11 24       	eor	r1, r1
    a432:	ea 50       	subi	r30, 0x0A	; 10
    a434:	fd 4f       	sbci	r31, 0xFD	; 253
    a436:	80 80       	ld	r8, Z
    a438:	91 80       	ldd	r9, Z+1	; 0x01
    a43a:	a2 80       	ldd	r10, Z+2	; 0x02
    a43c:	b3 80       	ldd	r11, Z+3	; 0x03
    //this is fifo (circular) buffer
    //check first element in buffer
    //if first element (note) can't pass this condition, none of the other elements can, so return
    if ((rTimeMillis() - noteTime) < PAD_NOTE_SEND_DELAY) return false;
    a43e:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z11rTimeMillisv>
    a442:	dc 01       	movw	r26, r24
    a444:	cb 01       	movw	r24, r22
    a446:	88 19       	sub	r24, r8
    a448:	99 09       	sbc	r25, r9
    a44a:	aa 09       	sbc	r26, r10
    a44c:	bb 09       	sbc	r27, r11
    a44e:	44 97       	sbiw	r24, 0x14	; 20
    a450:	a1 05       	cpc	r26, r1
    a452:	b1 05       	cpc	r27, r1
    a454:	f8 f0       	brcs	.+62     	; 0xa494 <_ZN4Pads15checkNoteBufferEv+0x9e>
    //send
    if (noteSendEnabled[pad_buffer[index]]) {
    a456:	f8 01       	movw	r30, r16
    a458:	ee 0d       	add	r30, r14
    a45a:	ff 1d       	adc	r31, r15
    a45c:	ea 54       	subi	r30, 0x4A	; 74
    a45e:	fd 4f       	sbci	r31, 0xFD	; 253
    a460:	60 81       	ld	r22, Z
    a462:	f8 01       	movw	r30, r16
    a464:	e6 0f       	add	r30, r22
    a466:	f1 1d       	adc	r31, r1
    a468:	e5 56       	subi	r30, 0x65	; 101
    a46a:	ff 4f       	sbci	r31, 0xFF	; 255
    a46c:	80 81       	ld	r24, Z
    a46e:	88 23       	and	r24, r24
    a470:	49 f0       	breq	.+18     	; 0xa484 <_ZN4Pads15checkNoteBufferEv+0x8e>

        sendNotes(pad_buffer[index], velocity_buffer[index], true);
    a472:	e0 0e       	add	r14, r16
    a474:	f1 1e       	adc	r15, r17
    a476:	f7 01       	movw	r30, r14
    a478:	ea 52       	subi	r30, 0x2A	; 42
    a47a:	fd 4f       	sbci	r31, 0xFD	; 253
    a47c:	21 e0       	ldi	r18, 0x01	; 1
    a47e:	40 81       	ld	r20, Z
    a480:	c8 01       	movw	r24, r16
    a482:	a9 d8       	rcall	.-3758   	; 0x95d6 <_ZN4Pads9sendNotesEhhb>

    }

    note_buffer_tail = index;
    a484:	f8 01       	movw	r30, r16
    a486:	e9 58       	subi	r30, 0x89	; 137
    a488:	fc 4f       	sbci	r31, 0xFC	; 252
    a48a:	c0 83       	st	Z, r28
    return true;
    a48c:	81 e0       	ldi	r24, 0x01	; 1
    a48e:	03 c0       	rjmp	.+6      	; 0xa496 <_ZN4Pads15checkNoteBufferEv+0xa0>
    //to avoid glide effect while sending x/y + notes

    if (note_buffer_head == note_buffer_tail)   {

        //buffer is empty
        return false;
    a490:	80 e0       	ldi	r24, 0x00	; 0
    a492:	01 c0       	rjmp	.+2      	; 0xa496 <_ZN4Pads15checkNoteBufferEv+0xa0>
    if (index >= PAD_NOTE_BUFFER_SIZE) index = 0;
    uint32_t noteTime = pad_note_timer_buffer[index];
    //this is fifo (circular) buffer
    //check first element in buffer
    //if first element (note) can't pass this condition, none of the other elements can, so return
    if ((rTimeMillis() - noteTime) < PAD_NOTE_SEND_DELAY) return false;
    a494:	80 e0       	ldi	r24, 0x00	; 0
    }

    note_buffer_tail = index;
    return true;

}
    a496:	cf 91       	pop	r28
    a498:	1f 91       	pop	r17
    a49a:	0f 91       	pop	r16
    a49c:	ff 90       	pop	r15
    a49e:	ef 90       	pop	r14
    a4a0:	bf 90       	pop	r11
    a4a2:	af 90       	pop	r10
    a4a4:	9f 90       	pop	r9
    a4a6:	8f 90       	pop	r8
    a4a8:	08 95       	ret

0000a4aa <_ZN4Pads12checkLCDdataEhbbbb>:

void Pads::checkLCDdata(uint8_t pad, bool velocityAvailable, bool aftertouchAvailable, bool xAvailable, bool yAvailable)   {
    a4aa:	cf 92       	push	r12
    a4ac:	df 92       	push	r13
    a4ae:	ef 92       	push	r14
    a4b0:	ff 92       	push	r15
    a4b2:	0f 93       	push	r16
    a4b4:	1f 93       	push	r17
    a4b6:	cf 93       	push	r28
    a4b8:	df 93       	push	r29
    a4ba:	6c 01       	movw	r12, r24
    a4bc:	c6 2f       	mov	r28, r22
    a4be:	d4 2f       	mov	r29, r20
    a4c0:	f2 2e       	mov	r15, r18

    static bool lcdCleared = false;
    static int8_t lastShownPad = -1;

    if (isPadPressed(pad))  {   lcdCleared = false;
    a4c2:	0e 94 62 69 	call	0xd2c4	; 0xd2c4 <_ZN4Pads12isPadPressedEh>
    a4c6:	88 23       	and	r24, r24
    a4c8:	09 f4       	brne	.+2      	; 0xa4cc <_ZN4Pads12checkLCDdataEhbbbb+0x22>
    a4ca:	c9 c0       	rjmp	.+402    	; 0xa65e <_ZN4Pads12checkLCDdataEhbbbb+0x1b4>
    a4cc:	10 92 57 0f 	sts	0x0F57, r1

        #ifdef MODULE_LCD
        if (xAvailable) {
    a4d0:	00 23       	and	r16, r16
    a4d2:	41 f1       	breq	.+80     	; 0xa524 <_ZN4Pads12checkLCDdataEhbbbb+0x7a>

            if (xSendEnabled[pad])  {
    a4d4:	8c 2f       	mov	r24, r28
    a4d6:	90 e0       	ldi	r25, 0x00	; 0
    a4d8:	f6 01       	movw	r30, r12
    a4da:	e8 0f       	add	r30, r24
    a4dc:	f9 1f       	adc	r31, r25
    a4de:	e7 57       	subi	r30, 0x77	; 119
    a4e0:	ff 4f       	sbci	r31, 0xFF	; 255
    a4e2:	20 81       	ld	r18, Z
    a4e4:	22 23       	and	r18, r18
    a4e6:	a1 f0       	breq	.+40     	; 0xa510 <_ZN4Pads12checkLCDdataEhbbbb+0x66>

                display.displayXYposition(lastXMIDIvalue[pad], coordinateX);
    a4e8:	86 01       	movw	r16, r12
    a4ea:	08 0f       	add	r16, r24
    a4ec:	19 1f       	adc	r17, r25
    a4ee:	40 e0       	ldi	r20, 0x00	; 0
    a4f0:	f8 01       	movw	r30, r16
    a4f2:	60 81       	ld	r22, Z
    a4f4:	82 e6       	ldi	r24, 0x62	; 98
    a4f6:	9c e0       	ldi	r25, 0x0C	; 12
    a4f8:	0e 94 e8 3a 	call	0x75d0	; 0x75d0 <_ZN3LCD17displayXYpositionEh16coordinateType_t>
                display.displayXYcc(ccXPad[pad], coordinateX);
    a4fc:	f8 01       	movw	r30, r16
    a4fe:	ed 5a       	subi	r30, 0xAD	; 173
    a500:	ff 4f       	sbci	r31, 0xFF	; 255
    a502:	40 e0       	ldi	r20, 0x00	; 0
    a504:	60 81       	ld	r22, Z
    a506:	82 e6       	ldi	r24, 0x62	; 98
    a508:	9c e0       	ldi	r25, 0x0C	; 12
    a50a:	0e 94 8d 3b 	call	0x771a	; 0x771a <_ZN3LCD11displayXYccEh16coordinateType_t>
    a50e:	0a c0       	rjmp	.+20     	; 0xa524 <_ZN4Pads12checkLCDdataEhbbbb+0x7a>

            }   else {

                display.clearXYposition(coordinateX);
    a510:	60 e0       	ldi	r22, 0x00	; 0
    a512:	82 e6       	ldi	r24, 0x62	; 98
    a514:	9c e0       	ldi	r25, 0x0C	; 12
    a516:	0e 94 77 3f 	call	0x7eee	; 0x7eee <_ZN3LCD15clearXYpositionE16coordinateType_t>
                display.clearXYcc(coordinateX);
    a51a:	60 e0       	ldi	r22, 0x00	; 0
    a51c:	82 e6       	ldi	r24, 0x62	; 98
    a51e:	9c e0       	ldi	r25, 0x0C	; 12
    a520:	0e 94 a8 3f 	call	0x7f50	; 0x7f50 <_ZN3LCD9clearXYccE16coordinateType_t>

            }

        }

        if (yAvailable) {
    a524:	ee 20       	and	r14, r14
    a526:	41 f1       	breq	.+80     	; 0xa578 <_ZN4Pads12checkLCDdataEhbbbb+0xce>

            if (ySendEnabled[pad])  {
    a528:	8c 2f       	mov	r24, r28
    a52a:	90 e0       	ldi	r25, 0x00	; 0
    a52c:	f6 01       	movw	r30, r12
    a52e:	e8 0f       	add	r30, r24
    a530:	f9 1f       	adc	r31, r25
    a532:	ee 56       	subi	r30, 0x6E	; 110
    a534:	ff 4f       	sbci	r31, 0xFF	; 255
    a536:	20 81       	ld	r18, Z
    a538:	22 23       	and	r18, r18
    a53a:	a1 f0       	breq	.+40     	; 0xa564 <_ZN4Pads12checkLCDdataEhbbbb+0xba>

                display.displayXYposition(lastYMIDIvalue[pad], coordinateY);
    a53c:	86 01       	movw	r16, r12
    a53e:	08 0f       	add	r16, r24
    a540:	19 1f       	adc	r17, r25
    a542:	41 e0       	ldi	r20, 0x01	; 1
    a544:	f8 01       	movw	r30, r16
    a546:	61 85       	ldd	r22, Z+9	; 0x09
    a548:	82 e6       	ldi	r24, 0x62	; 98
    a54a:	9c e0       	ldi	r25, 0x0C	; 12
    a54c:	0e 94 e8 3a 	call	0x75d0	; 0x75d0 <_ZN3LCD17displayXYpositionEh16coordinateType_t>
                display.displayXYcc(ccYPad[pad], coordinateY);
    a550:	f8 01       	movw	r30, r16
    a552:	e4 5a       	subi	r30, 0xA4	; 164
    a554:	ff 4f       	sbci	r31, 0xFF	; 255
    a556:	41 e0       	ldi	r20, 0x01	; 1
    a558:	60 81       	ld	r22, Z
    a55a:	82 e6       	ldi	r24, 0x62	; 98
    a55c:	9c e0       	ldi	r25, 0x0C	; 12
    a55e:	0e 94 8d 3b 	call	0x771a	; 0x771a <_ZN3LCD11displayXYccEh16coordinateType_t>
    a562:	0a c0       	rjmp	.+20     	; 0xa578 <_ZN4Pads12checkLCDdataEhbbbb+0xce>

            }   else {

                display.clearXYposition(coordinateY);
    a564:	61 e0       	ldi	r22, 0x01	; 1
    a566:	82 e6       	ldi	r24, 0x62	; 98
    a568:	9c e0       	ldi	r25, 0x0C	; 12
    a56a:	0e 94 77 3f 	call	0x7eee	; 0x7eee <_ZN3LCD15clearXYpositionE16coordinateType_t>
                display.clearXYcc(coordinateY);
    a56e:	61 e0       	ldi	r22, 0x01	; 1
    a570:	82 e6       	ldi	r24, 0x62	; 98
    a572:	9c e0       	ldi	r25, 0x0C	; 12
    a574:	0e 94 a8 3f 	call	0x7f50	; 0x7f50 <_ZN3LCD9clearXYccE16coordinateType_t>

            }

        }

        if (aftertouchAvailable)    {
    a578:	ff 20       	and	r15, r15
    a57a:	91 f1       	breq	.+100    	; 0xa5e0 <_ZN4Pads12checkLCDdataEhbbbb+0x136>

            if (aftertouchSendEnabled[pad] && aftertouchActivated[pad]) {
    a57c:	8c 2f       	mov	r24, r28
    a57e:	90 e0       	ldi	r25, 0x00	; 0
    a580:	f6 01       	movw	r30, r12
    a582:	e8 0f       	add	r30, r24
    a584:	f9 1f       	adc	r31, r25
    a586:	ec 55       	subi	r30, 0x5C	; 92
    a588:	ff 4f       	sbci	r31, 0xFF	; 255
    a58a:	20 81       	ld	r18, Z
    a58c:	22 23       	and	r18, r18
    a58e:	19 f1       	breq	.+70     	; 0xa5d6 <_ZN4Pads12checkLCDdataEhbbbb+0x12c>
    a590:	f6 01       	movw	r30, r12
    a592:	e8 0f       	add	r30, r24
    a594:	f9 1f       	adc	r31, r25
    a596:	e0 55       	subi	r30, 0x50	; 80
    a598:	fe 4f       	sbci	r31, 0xFE	; 254
    a59a:	20 81       	ld	r18, Z
    a59c:	22 23       	and	r18, r18
    a59e:	d9 f0       	breq	.+54     	; 0xa5d6 <_ZN4Pads12checkLCDdataEhbbbb+0x12c>

                switch(aftertouchType)  {
    a5a0:	f6 01       	movw	r30, r12
    a5a2:	e9 56       	subi	r30, 0x69	; 105
    a5a4:	fe 4f       	sbci	r31, 0xFE	; 254
    a5a6:	20 81       	ld	r18, Z
    a5a8:	22 23       	and	r18, r18
    a5aa:	19 f0       	breq	.+6      	; 0xa5b2 <_ZN4Pads12checkLCDdataEhbbbb+0x108>
    a5ac:	21 30       	cpi	r18, 0x01	; 1
    a5ae:	51 f0       	breq	.+20     	; 0xa5c4 <_ZN4Pads12checkLCDdataEhbbbb+0x11a>
    a5b0:	26 c0       	rjmp	.+76     	; 0xa5fe <_ZN4Pads12checkLCDdataEhbbbb+0x154>

                    case aftertouchChannel:
                    display.displayAftertouch(maxAftertouchValue);
    a5b2:	f6 01       	movw	r30, r12
    a5b4:	e8 56       	subi	r30, 0x68	; 104
    a5b6:	fe 4f       	sbci	r31, 0xFE	; 254
    a5b8:	60 81       	ld	r22, Z
    a5ba:	82 e6       	ldi	r24, 0x62	; 98
    a5bc:	9c e0       	ldi	r25, 0x0C	; 12
    a5be:	0e 94 59 3a 	call	0x74b2	; 0x74b2 <_ZN3LCD17displayAftertouchEh>
                    break;
    a5c2:	1d c0       	rjmp	.+58     	; 0xa5fe <_ZN4Pads12checkLCDdataEhbbbb+0x154>

                    case aftertouchPoly:
                    display.displayAftertouch(lastAftertouchValue[pad]);
    a5c4:	f6 01       	movw	r30, r12
    a5c6:	e8 0f       	add	r30, r24
    a5c8:	f9 1f       	adc	r31, r25
    a5ca:	63 8d       	ldd	r22, Z+27	; 0x1b
    a5cc:	82 e6       	ldi	r24, 0x62	; 98
    a5ce:	9c e0       	ldi	r25, 0x0C	; 12
    a5d0:	0e 94 59 3a 	call	0x74b2	; 0x74b2 <_ZN3LCD17displayAftertouchEh>
                    break;
    a5d4:	14 c0       	rjmp	.+40     	; 0xa5fe <_ZN4Pads12checkLCDdataEhbbbb+0x154>

                }

            }

            else display.clearAftertouch();
    a5d6:	82 e6       	ldi	r24, 0x62	; 98
    a5d8:	9c e0       	ldi	r25, 0x0C	; 12
    a5da:	0e 94 5c 3f 	call	0x7eb8	; 0x7eb8 <_ZN3LCD15clearAftertouchEv>
    a5de:	0f c0       	rjmp	.+30     	; 0xa5fe <_ZN4Pads12checkLCDdataEhbbbb+0x154>

        }   else if (velocityAvailable && !aftertouchActivated[pad])
    a5e0:	dd 23       	and	r29, r29
    a5e2:	51 f1       	breq	.+84     	; 0xa638 <_ZN4Pads12checkLCDdataEhbbbb+0x18e>
    a5e4:	f6 01       	movw	r30, r12
    a5e6:	ec 0f       	add	r30, r28
    a5e8:	f1 1d       	adc	r31, r1
    a5ea:	e0 55       	subi	r30, 0x50	; 80
    a5ec:	fe 4f       	sbci	r31, 0xFE	; 254
    a5ee:	80 81       	ld	r24, Z
    a5f0:	81 11       	cpse	r24, r1
    a5f2:	07 c0       	rjmp	.+14     	; 0xa602 <_ZN4Pads12checkLCDdataEhbbbb+0x158>
        display.clearAftertouch();
    a5f4:	82 e6       	ldi	r24, 0x62	; 98
    a5f6:	9c e0       	ldi	r25, 0x0C	; 12
    a5f8:	0e 94 5c 3f 	call	0x7eb8	; 0x7eb8 <_ZN3LCD15clearAftertouchEv>
    a5fc:	02 c0       	rjmp	.+4      	; 0xa602 <_ZN4Pads12checkLCDdataEhbbbb+0x158>
        #endif

        if (velocityAvailable)  {
    a5fe:	dd 23       	and	r29, r29
    a600:	d9 f0       	breq	.+54     	; 0xa638 <_ZN4Pads12checkLCDdataEhbbbb+0x18e>

            handleNoteLCD(pad, lastVelocityValue[pad], lastMIDInoteState[pad]);
    a602:	8c 2f       	mov	r24, r28
    a604:	90 e0       	ldi	r25, 0x00	; 0
    a606:	f6 01       	movw	r30, r12
    a608:	e8 0f       	add	r30, r24
    a60a:	f9 1f       	adc	r31, r25
    a60c:	21 e0       	ldi	r18, 0x01	; 1
    a60e:	34 a1       	ldd	r19, Z+36	; 0x24
    a610:	31 11       	cpse	r19, r1
    a612:	01 c0       	rjmp	.+2      	; 0xa616 <_ZN4Pads12checkLCDdataEhbbbb+0x16c>
    a614:	20 e0       	ldi	r18, 0x00	; 0
    a616:	f6 01       	movw	r30, r12
    a618:	e8 0f       	add	r30, r24
    a61a:	f9 1f       	adc	r31, r25
    a61c:	42 89       	ldd	r20, Z+18	; 0x12
    a61e:	6c 2f       	mov	r22, r28
    a620:	c6 01       	movw	r24, r12
    a622:	a6 d8       	rcall	.-3764   	; 0x9770 <_ZN4Pads13handleNoteLCDEhhb>
        }

        if (velocityAvailable)  {

            #ifdef MODULE_LCD
                display.displayMIDIchannel(midiChannel[pad]);
    a624:	cc 0e       	add	r12, r28
    a626:	d1 1c       	adc	r13, r1
    a628:	f6 01       	movw	r30, r12
    a62a:	e2 57       	subi	r30, 0x72	; 114
    a62c:	fe 4f       	sbci	r31, 0xFE	; 254
    a62e:	60 81       	ld	r22, Z
    a630:	82 e6       	ldi	r24, 0x62	; 98
    a632:	9c e0       	ldi	r25, 0x0C	; 12
    a634:	0e 94 e0 3e 	call	0x7dc0	; 0x7dc0 <_ZN3LCD18displayMIDIchannelEh>
            #endif

        }

        if (lastShownPad != pad)    {
    a638:	80 91 29 01 	lds	r24, 0x0129
    a63c:	08 2e       	mov	r0, r24
    a63e:	00 0c       	add	r0, r0
    a640:	99 0b       	sbc	r25, r25
    a642:	2c 2f       	mov	r18, r28
    a644:	30 e0       	ldi	r19, 0x00	; 0
    a646:	82 17       	cp	r24, r18
    a648:	93 07       	cpc	r25, r19
    a64a:	29 f1       	breq	.+74     	; 0xa696 <_ZN4Pads12checkLCDdataEhbbbb+0x1ec>

            lastShownPad = pad;
    a64c:	c0 93 29 01 	sts	0x0129, r28
            #ifdef MODULE_LCD
            display.displayPad(pad+1);
    a650:	61 e0       	ldi	r22, 0x01	; 1
    a652:	6c 0f       	add	r22, r28
    a654:	82 e6       	ldi	r24, 0x62	; 98
    a656:	9c e0       	ldi	r25, 0x0C	; 12
    a658:	0e 94 7f 3e 	call	0x7cfe	; 0x7cfe <_ZN3LCD10displayPadEh>
    a65c:	1c c0       	rjmp	.+56     	; 0xa696 <_ZN4Pads12checkLCDdataEhbbbb+0x1ec>
            #endif

        }

    }   else if (allPadsReleased() && !lcdCleared) {
    a65e:	c6 01       	movw	r24, r12
    a660:	0e 94 6e 69 	call	0xd2dc	; 0xd2dc <_ZN4Pads15allPadsReleasedEv>
    a664:	88 23       	and	r24, r24
    a666:	a9 f0       	breq	.+42     	; 0xa692 <_ZN4Pads12checkLCDdataEhbbbb+0x1e8>
    a668:	80 91 57 0f 	lds	r24, 0x0F57
    a66c:	81 11       	cpse	r24, r1
    a66e:	11 c0       	rjmp	.+34     	; 0xa692 <_ZN4Pads12checkLCDdataEhbbbb+0x1e8>
    a670:	05 c0       	rjmp	.+10     	; 0xa67c <_ZN4Pads12checkLCDdataEhbbbb+0x1d2>
            lastShownPad = -1;

    }   else {

        if (velocityAvailable)
            display.clearAftertouch();
    a672:	82 e6       	ldi	r24, 0x62	; 98
    a674:	9c e0       	ldi	r25, 0x0C	; 12
    a676:	0e 94 5c 3f 	call	0x7eb8	; 0x7eb8 <_ZN3LCD15clearAftertouchEv>
    a67a:	0d c0       	rjmp	.+26     	; 0xa696 <_ZN4Pads12checkLCDdataEhbbbb+0x1ec>
        }

    }   else if (allPadsReleased() && !lcdCleared) {

            #ifdef MODULE_LCD
                display.clearPadData();
    a67c:	82 e6       	ldi	r24, 0x62	; 98
    a67e:	9c e0       	ldi	r25, 0x0C	; 12
    a680:	0e 94 fe 3f 	call	0x7ffc	; 0x7ffc <_ZN3LCD12clearPadDataEv>
            #endif

            lcdCleared = true;
    a684:	81 e0       	ldi	r24, 0x01	; 1
    a686:	80 93 57 0f 	sts	0x0F57, r24
            lastShownPad = -1;
    a68a:	8f ef       	ldi	r24, 0xFF	; 255
    a68c:	80 93 29 01 	sts	0x0129, r24
    a690:	02 c0       	rjmp	.+4      	; 0xa696 <_ZN4Pads12checkLCDdataEhbbbb+0x1ec>

    }   else {

        if (velocityAvailable)
    a692:	d1 11       	cpse	r29, r1
    a694:	ee cf       	rjmp	.-36     	; 0xa672 <_ZN4Pads12checkLCDdataEhbbbb+0x1c8>
            display.clearAftertouch();

    }

}
    a696:	df 91       	pop	r29
    a698:	cf 91       	pop	r28
    a69a:	1f 91       	pop	r17
    a69c:	0f 91       	pop	r16
    a69e:	ff 90       	pop	r15
    a6a0:	ef 90       	pop	r14
    a6a2:	df 90       	pop	r13
    a6a4:	cf 90       	pop	r12
    a6a6:	08 95       	ret

0000a6a8 <_ZN4Pads18updatePressHistoryEh>:

    }   resetCalibration();

}

void Pads::updatePressHistory(uint8_t pad) {
    a6a8:	ff 92       	push	r15
    a6aa:	0f 93       	push	r16
    a6ac:	1f 93       	push	r17
    a6ae:	cf 93       	push	r28
    a6b0:	df 93       	push	r29
    a6b2:	8c 01       	movw	r16, r24
    a6b4:	f6 2e       	mov	r15, r22
    a6b6:	c0 e0       	ldi	r28, 0x00	; 0

    //store currently pressed pad in buffer
    uint8_t pressedPads = 0;
    a6b8:	d0 e0       	ldi	r29, 0x00	; 0

    for (int i=0; i<MAX_PADS; i++)
        if (isPadPressed(i)) pressedPads++;
    a6ba:	6c 2f       	mov	r22, r28
    a6bc:	c8 01       	movw	r24, r16
    a6be:	0e 94 62 69 	call	0xd2c4	; 0xd2c4 <_ZN4Pads12isPadPressedEh>
    a6c2:	81 11       	cpse	r24, r1
    a6c4:	df 5f       	subi	r29, 0xFF	; 255
    a6c6:	cf 5f       	subi	r28, 0xFF	; 255
void Pads::updatePressHistory(uint8_t pad) {

    //store currently pressed pad in buffer
    uint8_t pressedPads = 0;

    for (int i=0; i<MAX_PADS; i++)
    a6c8:	c9 30       	cpi	r28, 0x09	; 9
    a6ca:	b9 f7       	brne	.-18     	; 0xa6ba <_ZN4Pads18updatePressHistoryEh+0x12>
        if (isPadPressed(i)) pressedPads++;

    if (pressedPads == 1)   {
    a6cc:	d1 30       	cpi	r29, 0x01	; 1
    a6ce:	39 f4       	brne	.+14     	; 0xa6de <_ZN4Pads18updatePressHistoryEh+0x36>

        padPressHistory_buffer[0] = pad;
    a6d0:	f8 01       	movw	r30, r16
    a6d2:	e4 55       	subi	r30, 0x54	; 84
    a6d4:	fd 4f       	sbci	r31, 0xFD	; 253
    a6d6:	f0 82       	st	Z, r15
        padPressHistory_counter = 0;
    a6d8:	39 96       	adiw	r30, 0x09	; 9
    a6da:	10 82       	st	Z, r1
    a6dc:	17 c0       	rjmp	.+46     	; 0xa70c <_ZN4Pads18updatePressHistoryEh+0x64>

    }   else {

        padPressHistory_counter++;
    a6de:	f8 01       	movw	r30, r16
    a6e0:	eb 54       	subi	r30, 0x4B	; 75
    a6e2:	fd 4f       	sbci	r31, 0xFD	; 253
    a6e4:	80 81       	ld	r24, Z
    a6e6:	8f 5f       	subi	r24, 0xFF	; 255
        if (padPressHistory_counter >= MAX_PADS)
    a6e8:	89 30       	cpi	r24, 0x09	; 9
    a6ea:	10 f4       	brcc	.+4      	; 0xa6f0 <_ZN4Pads18updatePressHistoryEh+0x48>
        padPressHistory_buffer[0] = pad;
        padPressHistory_counter = 0;

    }   else {

        padPressHistory_counter++;
    a6ec:	80 83       	st	Z, r24
    a6ee:	04 c0       	rjmp	.+8      	; 0xa6f8 <_ZN4Pads18updatePressHistoryEh+0x50>
        if (padPressHistory_counter >= MAX_PADS)
            padPressHistory_counter = 0; //overwrite
    a6f0:	f8 01       	movw	r30, r16
    a6f2:	eb 54       	subi	r30, 0x4B	; 75
    a6f4:	fd 4f       	sbci	r31, 0xFD	; 253
    a6f6:	10 82       	st	Z, r1

        padPressHistory_buffer[padPressHistory_counter] = pad;
    a6f8:	f8 01       	movw	r30, r16
    a6fa:	eb 54       	subi	r30, 0x4B	; 75
    a6fc:	fd 4f       	sbci	r31, 0xFD	; 253
    a6fe:	80 81       	ld	r24, Z
    a700:	08 0f       	add	r16, r24
    a702:	11 1d       	adc	r17, r1
    a704:	f8 01       	movw	r30, r16
    a706:	e4 55       	subi	r30, 0x54	; 84
    a708:	fd 4f       	sbci	r31, 0xFD	; 253
    a70a:	f0 82       	st	Z, r15
        //vserial.println(" to pad press history. New buffer:");
        //for (int i=0; i<MAX_PADS; i++)
            //vserial.println(padPressHistory_buffer[i]);
    //#endif

}
    a70c:	df 91       	pop	r29
    a70e:	cf 91       	pop	r28
    a710:	1f 91       	pop	r17
    a712:	0f 91       	pop	r16
    a714:	ff 90       	pop	r15
    a716:	08 95       	ret

0000a718 <_ZN4Pads20clearTouchHistoryPadEh>:

void Pads::clearTouchHistoryPad(uint8_t pad)    {
    a718:	df 92       	push	r13
    a71a:	ef 92       	push	r14
    a71c:	ff 92       	push	r15
    a71e:	0f 93       	push	r16
    a720:	1f 93       	push	r17
    a722:	cf 93       	push	r28
    a724:	df 93       	push	r29
    a726:	cd b7       	in	r28, 0x3d	; 61
    a728:	de b7       	in	r29, 0x3e	; 62
    a72a:	29 97       	sbiw	r28, 0x09	; 9
    a72c:	0f b6       	in	r0, 0x3f	; 63
    a72e:	f8 94       	cli
    a730:	de bf       	out	0x3e, r29	; 62
    a732:	0f be       	out	0x3f, r0	; 63
    a734:	cd bf       	out	0x3d, r28	; 61
    a736:	7c 01       	movw	r14, r24
    a738:	06 2f       	mov	r16, r22
    a73a:	10 e0       	ldi	r17, 0x00	; 0

    uint8_t padPressedCounter = 0;
    a73c:	d1 2c       	mov	r13, r1

    for (int i=0; i<MAX_PADS; i++)
        if (isPadPressed(i)) padPressedCounter++;
    a73e:	61 2f       	mov	r22, r17
    a740:	c7 01       	movw	r24, r14
    a742:	0e 94 62 69 	call	0xd2c4	; 0xd2c4 <_ZN4Pads12isPadPressedEh>
    a746:	81 11       	cpse	r24, r1
    a748:	d3 94       	inc	r13
    a74a:	1f 5f       	subi	r17, 0xFF	; 255

void Pads::clearTouchHistoryPad(uint8_t pad)    {

    uint8_t padPressedCounter = 0;

    for (int i=0; i<MAX_PADS; i++)
    a74c:	19 30       	cpi	r17, 0x09	; 9
    a74e:	b9 f7       	brne	.-18     	; 0xa73e <_ZN4Pads20clearTouchHistoryPadEh+0x26>
        if (isPadPressed(i)) padPressedCounter++;

    if (padPressedCounter < 1)  {
    a750:	dd 20       	and	r13, r13
    a752:	39 f0       	breq	.+14     	; 0xa762 <_ZN4Pads20clearTouchHistoryPadEh+0x4a>
    uint8_t index = pad;
    uint8_t newValue = 0;

    for (int i=0; i<MAX_PADS; i++)    {

        if (padPressHistory_buffer[i] == pad)   { index = i; padPressHistory_buffer[i] = newValue; break; }
    a754:	f7 01       	movw	r30, r14
    a756:	e4 55       	subi	r30, 0x54	; 84
    a758:	fd 4f       	sbci	r31, 0xFD	; 253
    a75a:	80 81       	ld	r24, Z
    a75c:	80 13       	cpse	r24, r16
    a75e:	12 c0       	rjmp	.+36     	; 0xa784 <_ZN4Pads20clearTouchHistoryPadEh+0x6c>
    a760:	1a c0       	rjmp	.+52     	; 0xa796 <_ZN4Pads20clearTouchHistoryPadEh+0x7e>
    a762:	f7 01       	movw	r30, r14
    a764:	e4 55       	subi	r30, 0x54	; 84
    a766:	fd 4f       	sbci	r31, 0xFD	; 253
    a768:	c7 01       	movw	r24, r14
    a76a:	8b 54       	subi	r24, 0x4B	; 75
    a76c:	9d 4f       	sbci	r25, 0xFD	; 253
        if (isPadPressed(i)) padPressedCounter++;

    if (padPressedCounter < 1)  {

        for (int i=0; i<MAX_PADS; i++)
            padPressHistory_buffer[i] = 0;
    a76e:	11 92       	st	Z+, r1
    for (int i=0; i<MAX_PADS; i++)
        if (isPadPressed(i)) padPressedCounter++;

    if (padPressedCounter < 1)  {

        for (int i=0; i<MAX_PADS; i++)
    a770:	e8 17       	cp	r30, r24
    a772:	f9 07       	cpc	r31, r25
    a774:	e1 f7       	brne	.-8      	; 0xa76e <_ZN4Pads20clearTouchHistoryPadEh+0x56>
            padPressHistory_buffer[i] = 0;

        padPressHistory_buffer[0] = pad;
    a776:	f7 01       	movw	r30, r14
    a778:	e4 55       	subi	r30, 0x54	; 84
    a77a:	fd 4f       	sbci	r31, 0xFD	; 253
    a77c:	00 83       	st	Z, r16
        padPressHistory_counter = 0;
    a77e:	39 96       	adiw	r30, 0x09	; 9
    a780:	10 82       	st	Z, r1
    a782:	40 c0       	rjmp	.+128    	; 0xa804 <_ZN4Pads20clearTouchHistoryPadEh+0xec>
    a784:	f7 01       	movw	r30, r14
    a786:	e3 55       	subi	r30, 0x53	; 83
    a788:	fd 4f       	sbci	r31, 0xFD	; 253
    }

    uint8_t index = pad;
    uint8_t newValue = 0;

    for (int i=0; i<MAX_PADS; i++)    {
    a78a:	81 e0       	ldi	r24, 0x01	; 1
    a78c:	90 e0       	ldi	r25, 0x00	; 0

        if (padPressHistory_buffer[i] == pad)   { index = i; padPressHistory_buffer[i] = newValue; break; }
    a78e:	21 91       	ld	r18, Z+
    a790:	20 13       	cpse	r18, r16
    a792:	0b c0       	rjmp	.+22     	; 0xa7aa <_ZN4Pads20clearTouchHistoryPadEh+0x92>
    a794:	02 c0       	rjmp	.+4      	; 0xa79a <_ZN4Pads20clearTouchHistoryPadEh+0x82>
    a796:	80 e0       	ldi	r24, 0x00	; 0
    a798:	90 e0       	ldi	r25, 0x00	; 0
    a79a:	08 2f       	mov	r16, r24
    a79c:	8e 0d       	add	r24, r14
    a79e:	9f 1d       	adc	r25, r15
    a7a0:	fc 01       	movw	r30, r24
    a7a2:	e4 55       	subi	r30, 0x54	; 84
    a7a4:	fd 4f       	sbci	r31, 0xFD	; 253
    a7a6:	10 82       	st	Z, r1
    a7a8:	04 c0       	rjmp	.+8      	; 0xa7b2 <_ZN4Pads20clearTouchHistoryPadEh+0x9a>
    }

    uint8_t index = pad;
    uint8_t newValue = 0;

    for (int i=0; i<MAX_PADS; i++)    {
    a7aa:	01 96       	adiw	r24, 0x01	; 1
    a7ac:	89 30       	cpi	r24, 0x09	; 9
    a7ae:	91 05       	cpc	r25, r1
    a7b0:	71 f7       	brne	.-36     	; 0xa78e <_ZN4Pads20clearTouchHistoryPadEh+0x76>
    a7b2:	f7 01       	movw	r30, r14
    a7b4:	e4 55       	subi	r30, 0x54	; 84
    a7b6:	fd 4f       	sbci	r31, 0xFD	; 253
    a7b8:	de 01       	movw	r26, r28
    a7ba:	11 96       	adiw	r26, 0x01	; 1
    a7bc:	97 01       	movw	r18, r14
    a7be:	2b 54       	subi	r18, 0x4B	; 75
    a7c0:	3d 4f       	sbci	r19, 0xFD	; 253

    //copy history array
    int8_t tempHistoryArray[MAX_PADS];

    for (int i=0; i<MAX_PADS; i++)
        tempHistoryArray[i] = padPressHistory_buffer[i];
    a7c2:	81 91       	ld	r24, Z+
    a7c4:	8d 93       	st	X+, r24
    }

    //copy history array
    int8_t tempHistoryArray[MAX_PADS];

    for (int i=0; i<MAX_PADS; i++)
    a7c6:	e2 17       	cp	r30, r18
    a7c8:	f3 07       	cpc	r31, r19
    a7ca:	d9 f7       	brne	.-10     	; 0xa7c2 <_ZN4Pads20clearTouchHistoryPadEh+0xaa>
        tempHistoryArray[i] = padPressHistory_buffer[i];

    //shift all values so that newValue is at the end of array
    for (int i=index; i<(MAX_PADS-1); i++) {
    a7cc:	80 2f       	mov	r24, r16
    a7ce:	90 e0       	ldi	r25, 0x00	; 0
    a7d0:	88 30       	cpi	r24, 0x08	; 8
    a7d2:	91 05       	cpc	r25, r1
    a7d4:	8c f4       	brge	.+34     	; 0xa7f8 <_ZN4Pads20clearTouchHistoryPadEh+0xe0>
    a7d6:	fc 01       	movw	r30, r24
    a7d8:	de 01       	movw	r26, r28
    a7da:	ae 0f       	add	r26, r30
    a7dc:	bf 1f       	adc	r27, r31
    a7de:	12 96       	adiw	r26, 0x02	; 2
    a7e0:	e4 55       	subi	r30, 0x54	; 84
    a7e2:	fd 4f       	sbci	r31, 0xFD	; 253
    a7e4:	ee 0d       	add	r30, r14
    a7e6:	ff 1d       	adc	r31, r15
    a7e8:	97 01       	movw	r18, r14
    a7ea:	2c 54       	subi	r18, 0x4C	; 76
    a7ec:	3d 4f       	sbci	r19, 0xFD	; 253

        padPressHistory_buffer[i] = tempHistoryArray[i+1];
    a7ee:	8d 91       	ld	r24, X+
    a7f0:	81 93       	st	Z+, r24

    for (int i=0; i<MAX_PADS; i++)
        tempHistoryArray[i] = padPressHistory_buffer[i];

    //shift all values so that newValue is at the end of array
    for (int i=index; i<(MAX_PADS-1); i++) {
    a7f2:	e2 17       	cp	r30, r18
    a7f4:	f3 07       	cpc	r31, r19
    a7f6:	d9 f7       	brne	.-10     	; 0xa7ee <_ZN4Pads20clearTouchHistoryPadEh+0xd6>

        padPressHistory_buffer[i] = tempHistoryArray[i+1];

    }

    padPressHistory_counter--;
    a7f8:	f7 01       	movw	r30, r14
    a7fa:	eb 54       	subi	r30, 0x4B	; 75
    a7fc:	fd 4f       	sbci	r31, 0xFD	; 253
    a7fe:	80 81       	ld	r24, Z
    a800:	81 50       	subi	r24, 0x01	; 1
    a802:	80 83       	st	Z, r24
        //vserial.println("New history buffer:");
        //for (int i=0; i<MAX_PADS; i++)
            //vserial.println(padPressHistory_buffer[i]);
    //#endif

}
    a804:	29 96       	adiw	r28, 0x09	; 9
    a806:	0f b6       	in	r0, 0x3f	; 63
    a808:	f8 94       	cli
    a80a:	de bf       	out	0x3e, r29	; 62
    a80c:	0f be       	out	0x3f, r0	; 63
    a80e:	cd bf       	out	0x3d, r28	; 61
    a810:	df 91       	pop	r29
    a812:	cf 91       	pop	r28
    a814:	1f 91       	pop	r17
    a816:	0f 91       	pop	r16
    a818:	ff 90       	pop	r15
    a81a:	ef 90       	pop	r14
    a81c:	df 90       	pop	r13
    a81e:	08 95       	ret

0000a820 <_ZN4Pads20updateLastPressedPadEhb>:

    }

}

void Pads::updateLastPressedPad(uint8_t pad, bool state)   {
    a820:	1f 93       	push	r17
    a822:	cf 93       	push	r28
    a824:	df 93       	push	r29
    a826:	ec 01       	movw	r28, r24
    a828:	16 2f       	mov	r17, r22

    switch(state)   {
    a82a:	41 30       	cpi	r20, 0x01	; 1
    a82c:	41 f4       	brne	.+16     	; 0xa83e <_ZN4Pads20updateLastPressedPadEhb+0x1e>

        case true:
        //pad is pressed, add it to touch history buffer
        if (pad != getLastTouchedPad()) {
    a82e:	0e 94 38 69 	call	0xd270	; 0xd270 <_ZN4Pads17getLastTouchedPadEv>
    a832:	81 17       	cp	r24, r17
    a834:	29 f0       	breq	.+10     	; 0xa840 <_ZN4Pads20updateLastPressedPadEhb+0x20>

            updatePressHistory(pad);
    a836:	61 2f       	mov	r22, r17
    a838:	ce 01       	movw	r24, r28
    a83a:	36 df       	rcall	.-404    	; 0xa6a8 <_ZN4Pads18updatePressHistoryEh>
    a83c:	01 c0       	rjmp	.+2      	; 0xa840 <_ZN4Pads20updateLastPressedPadEhb+0x20>
        }
        break;

        case false:
        //pad released, clear it from buffer
        clearTouchHistoryPad(pad);
    a83e:	6c df       	rcall	.-296    	; 0xa718 <_ZN4Pads20clearTouchHistoryPadEh>
        break;

    }   resetCalibration();
    a840:	ce 01       	movw	r24, r28
    a842:	0e 94 aa 6d 	call	0xdb54	; 0xdb54 <_ZN4Pads16resetCalibrationEv>

}
    a846:	df 91       	pop	r29
    a848:	cf 91       	pop	r28
    a84a:	1f 91       	pop	r17
    a84c:	08 95       	ret

0000a84e <_ZN4Pads10storeNotesEh>:
            //vserial.println(padPressHistory_buffer[i]);
    //#endif

}

void Pads::storeNotes(uint8_t pad)  {
    a84e:	ef 92       	push	r14
    a850:	ff 92       	push	r15
    a852:	0f 93       	push	r16
    a854:	1f 93       	push	r17
    a856:	cf 93       	push	r28
    a858:	df 93       	push	r29
    a85a:	ec 01       	movw	r28, r24
    a85c:	e6 2e       	mov	r14, r22
    //#if MODE_SERIAL > 0
        //vserial.print("Storing notes in buffer for pad ");
        //vserial.println(pad);
    //#endif

    uint8_t i = note_buffer_head + 1;
    a85e:	fc 01       	movw	r30, r24
    a860:	ea 58       	subi	r30, 0x8A	; 138
    a862:	fc 4f       	sbci	r31, 0xFC	; 252
    a864:	f0 80       	ld	r15, Z
    a866:	f3 94       	inc	r15
    if (i >= PAD_NOTE_BUFFER_SIZE) i = 0;
    a868:	8f e1       	ldi	r24, 0x1F	; 31
    a86a:	8f 15       	cp	r24, r15
    a86c:	08 f4       	brcc	.+2      	; 0xa870 <_ZN4Pads10storeNotesEh+0x22>
    a86e:	f1 2c       	mov	r15, r1
    //if buffer is full, wait until there is some space
    if (note_buffer_tail == i)  {
    a870:	fe 01       	movw	r30, r28
    a872:	e9 58       	subi	r30, 0x89	; 137
    a874:	fc 4f       	sbci	r31, 0xFC	; 252
    a876:	80 81       	ld	r24, Z
    a878:	8f 11       	cpse	r24, r15
    a87a:	04 c0       	rjmp	.+8      	; 0xa884 <_ZN4Pads10storeNotesEh+0x36>

        #if MODE_SERIAL > 0
            printf("Oops, buffer full. Waiting...\n");
        #endif

        while (!checkNoteBuffer());
    a87c:	ce 01       	movw	r24, r28
    a87e:	bb dd       	rcall	.-1162   	; 0xa3f6 <_ZN4Pads15checkNoteBufferEv>
    a880:	88 23       	and	r24, r24
    a882:	e1 f3       	breq	.-8      	; 0xa87c <_ZN4Pads10storeNotesEh+0x2e>

    }

    pad_buffer[i] = pad;
    a884:	0f 2d       	mov	r16, r15
    a886:	10 e0       	ldi	r17, 0x00	; 0
    a888:	ce 01       	movw	r24, r28
    a88a:	80 0f       	add	r24, r16
    a88c:	91 1f       	adc	r25, r17
    a88e:	fc 01       	movw	r30, r24
    a890:	ea 54       	subi	r30, 0x4A	; 74
    a892:	fd 4f       	sbci	r31, 0xFD	; 253
    a894:	e0 82       	st	Z, r14
    velocity_buffer[i] = lastVelocityValue[pad];
    a896:	b0 96       	adiw	r30, 0x20	; 32
    a898:	de 01       	movw	r26, r28
    a89a:	ae 0d       	add	r26, r14
    a89c:	b1 1d       	adc	r27, r1
    a89e:	52 96       	adiw	r26, 0x12	; 18
    a8a0:	8c 91       	ld	r24, X
    a8a2:	80 83       	st	Z, r24
    pad_note_timer_buffer[i] = rTimeMillis();
    a8a4:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z11rTimeMillisv>
    a8a8:	00 0f       	add	r16, r16
    a8aa:	11 1f       	adc	r17, r17
    a8ac:	00 0f       	add	r16, r16
    a8ae:	11 1f       	adc	r17, r17
    a8b0:	0c 0f       	add	r16, r28
    a8b2:	1d 1f       	adc	r17, r29
    a8b4:	f8 01       	movw	r30, r16
    a8b6:	ea 50       	subi	r30, 0x0A	; 10
    a8b8:	fd 4f       	sbci	r31, 0xFD	; 253
    a8ba:	60 83       	st	Z, r22
    a8bc:	71 83       	std	Z+1, r23	; 0x01
    a8be:	82 83       	std	Z+2, r24	; 0x02
    a8c0:	93 83       	std	Z+3, r25	; 0x03
    note_buffer_head = i;
    a8c2:	ca 58       	subi	r28, 0x8A	; 138
    a8c4:	dc 4f       	sbci	r29, 0xFC	; 252
    a8c6:	f8 82       	st	Y, r15

    a8c8:	df 91       	pop	r29
    a8ca:	cf 91       	pop	r28
    a8cc:	1f 91       	pop	r17
    a8ce:	0f 91       	pop	r16
    a8d0:	ff 90       	pop	r15
    a8d2:	ef 90       	pop	r14
    a8d4:	08 95       	ret

0000a8d6 <_ZN4Pads13checkMIDIdataEhbbbb>:
    if (!switchToXYread) switchToNextPad = true;
    return returnValue;

}

void Pads::checkMIDIdata(uint8_t pad, bool velocityAvailable, bool aftertouchAvailable, bool xAvailable, bool yAvailable)   {
    a8d6:	df 92       	push	r13
    a8d8:	ef 92       	push	r14
    a8da:	ff 92       	push	r15
    a8dc:	0f 93       	push	r16
    a8de:	1f 93       	push	r17
    a8e0:	cf 93       	push	r28
    a8e2:	df 93       	push	r29
    a8e4:	ec 01       	movw	r28, r24
    a8e6:	16 2f       	mov	r17, r22
    a8e8:	f4 2e       	mov	r15, r20
    a8ea:	d2 2e       	mov	r13, r18

    //send X/Y immediately
    if (xAvailable && xSendEnabled[pad])
    a8ec:	00 23       	and	r16, r16
    a8ee:	59 f0       	breq	.+22     	; 0xa906 <_ZN4Pads13checkMIDIdataEhbbbb+0x30>
    a8f0:	fc 01       	movw	r30, r24
    a8f2:	e6 0f       	add	r30, r22
    a8f4:	f1 1d       	adc	r31, r1
    a8f6:	e7 57       	subi	r30, 0x77	; 119
    a8f8:	ff 4f       	sbci	r31, 0xFF	; 255
    a8fa:	80 81       	ld	r24, Z
    a8fc:	88 23       	and	r24, r24
    a8fe:	19 f0       	breq	.+6      	; 0xa906 <_ZN4Pads13checkMIDIdataEhbbbb+0x30>
        sendX(pad);
    a900:	ce 01       	movw	r24, r28
    a902:	0e 94 85 49 	call	0x930a	; 0x930a <_ZN4Pads5sendXEh>

    if (yAvailable && ySendEnabled[pad])
    a906:	ee 20       	and	r14, r14
    a908:	61 f0       	breq	.+24     	; 0xa922 <_ZN4Pads13checkMIDIdataEhbbbb+0x4c>
    a90a:	fe 01       	movw	r30, r28
    a90c:	e1 0f       	add	r30, r17
    a90e:	f1 1d       	adc	r31, r1
    a910:	ee 56       	subi	r30, 0x6E	; 110
    a912:	ff 4f       	sbci	r31, 0xFF	; 255
    a914:	80 81       	ld	r24, Z
    a916:	88 23       	and	r24, r24
    a918:	21 f0       	breq	.+8      	; 0xa922 <_ZN4Pads13checkMIDIdataEhbbbb+0x4c>
        sendY(pad);
    a91a:	61 2f       	mov	r22, r17
    a91c:	ce 01       	movw	r24, r28
    a91e:	0e 94 9a 49 	call	0x9334	; 0x9334 <_ZN4Pads5sendYEh>

    //send aftertouch immediately
    if (aftertouchAvailable && aftertouchSendEnabled[pad])
    a922:	dd 20       	and	r13, r13
    a924:	61 f0       	breq	.+24     	; 0xa93e <_ZN4Pads13checkMIDIdataEhbbbb+0x68>
    a926:	fe 01       	movw	r30, r28
    a928:	e1 0f       	add	r30, r17
    a92a:	f1 1d       	adc	r31, r1
    a92c:	ec 55       	subi	r30, 0x5C	; 92
    a92e:	ff 4f       	sbci	r31, 0xFF	; 255
    a930:	80 81       	ld	r24, Z
    a932:	88 23       	and	r24, r24
    a934:	21 f0       	breq	.+8      	; 0xa93e <_ZN4Pads13checkMIDIdataEhbbbb+0x68>
        sendAftertouch(pad);
    a936:	61 2f       	mov	r22, r17
    a938:	ce 01       	movw	r24, r28
    a93a:	0e 94 af 49 	call	0x935e	; 0x935e <_ZN4Pads14sendAftertouchEh>

    if (velocityAvailable && noteSendEnabled[pad])  {
    a93e:	ff 20       	and	r15, r15
    a940:	e1 f0       	breq	.+56     	; 0xa97a <_ZN4Pads13checkMIDIdataEhbbbb+0xa4>
    a942:	81 2f       	mov	r24, r17
    a944:	90 e0       	ldi	r25, 0x00	; 0
    a946:	fe 01       	movw	r30, r28
    a948:	e8 0f       	add	r30, r24
    a94a:	f9 1f       	adc	r31, r25
    a94c:	e5 56       	subi	r30, 0x65	; 101
    a94e:	ff 4f       	sbci	r31, 0xFF	; 255
    a950:	20 81       	ld	r18, Z
    a952:	22 23       	and	r18, r18
    a954:	91 f0       	breq	.+36     	; 0xa97a <_ZN4Pads13checkMIDIdataEhbbbb+0xa4>

        switch(lastMIDInoteState[pad])  {
    a956:	fe 01       	movw	r30, r28
    a958:	e8 0f       	add	r30, r24
    a95a:	f9 1f       	adc	r31, r25
    a95c:	84 a1       	ldd	r24, Z+36	; 0x24
    a95e:	88 23       	and	r24, r24
    a960:	31 f0       	breq	.+12     	; 0xa96e <_ZN4Pads13checkMIDIdataEhbbbb+0x98>
    a962:	81 30       	cpi	r24, 0x01	; 1
    a964:	51 f4       	brne	.+20     	; 0xa97a <_ZN4Pads13checkMIDIdataEhbbbb+0xa4>

            case true:
            //if note on event happened, store notes in buffer first
            storeNotes(pad);
    a966:	61 2f       	mov	r22, r17
    a968:	ce 01       	movw	r24, r28
    a96a:	71 df       	rcall	.-286    	; 0xa84e <_ZN4Pads10storeNotesEh>
            break;
    a96c:	06 c0       	rjmp	.+12     	; 0xa97a <_ZN4Pads13checkMIDIdataEhbbbb+0xa4>

            case false:
            //note off event
            //send note off immediately
            sendNotes(pad, 0, false);
    a96e:	20 e0       	ldi	r18, 0x00	; 0
    a970:	40 e0       	ldi	r20, 0x00	; 0
    a972:	61 2f       	mov	r22, r17
    a974:	ce 01       	movw	r24, r28
    a976:	0e 94 eb 4a 	call	0x95d6	; 0x95d6 <_ZN4Pads9sendNotesEhhb>

        }

    }

    checkNoteBuffer();
    a97a:	ce 01       	movw	r24, r28
    a97c:	3c dd       	rcall	.-1416   	; 0xa3f6 <_ZN4Pads15checkNoteBufferEv>

}
    a97e:	df 91       	pop	r29
    a980:	cf 91       	pop	r28
    a982:	1f 91       	pop	r17
    a984:	0f 91       	pop	r16
    a986:	ff 90       	pop	r15
    a988:	ef 90       	pop	r14
    a98a:	df 90       	pop	r13
    a98c:	08 95       	ret

0000a98e <_ZN4Pads6updateEv>:

    }   return false;

}

void Pads::update()  {
    a98e:	df 92       	push	r13
    a990:	ef 92       	push	r14
    a992:	ff 92       	push	r15
    a994:	0f 93       	push	r16
    a996:	1f 93       	push	r17
    a998:	cf 93       	push	r28
    a99a:	df 93       	push	r29
    a99c:	ec 01       	movw	r28, r24

    uint8_t pad = padID[activePad];
    a99e:	fc 01       	movw	r30, r24
    a9a0:	ed 56       	subi	r30, 0x6D	; 109
    a9a2:	fd 4f       	sbci	r31, 0xFD	; 253
    a9a4:	e0 81       	ld	r30, Z
    a9a6:	f0 e0       	ldi	r31, 0x00	; 0
    a9a8:	eb 52       	subi	r30, 0x2B	; 43
    a9aa:	fe 4f       	sbci	r31, 0xFE	; 254
    a9ac:	10 81       	ld	r17, Z
    static bool aftertouchAvailable = false;
    static bool xAvailable = false;
    static bool yAvailable = false;
    bool restoreLCD = false;

    if (!switchToXYread)    {
    a9ae:	fc 01       	movw	r30, r24
    a9b0:	eb 56       	subi	r30, 0x6B	; 107
    a9b2:	fd 4f       	sbci	r31, 0xFD	; 253
    a9b4:	80 81       	ld	r24, Z
    a9b6:	81 11       	cpse	r24, r1
    a9b8:	10 c0       	rjmp	.+32     	; 0xa9da <_ZN4Pads6updateEv+0x4c>

        if (pressureUpdated())  {
    a9ba:	ce 01       	movw	r24, r28
    a9bc:	5c dc       	rcall	.-1864   	; 0xa276 <_ZN4Pads15pressureUpdatedEv>
    a9be:	88 23       	and	r24, r24
    a9c0:	19 f1       	breq	.+70     	; 0xaa08 <_ZN4Pads6updateEv+0x7a>

            //all needed pressure samples are obtained
            velocityAvailable = checkVelocity(pad);
    a9c2:	61 2f       	mov	r22, r17
    a9c4:	ce 01       	movw	r24, r28
    a9c6:	80 dc       	rcall	.-1792   	; 0xa2c8 <_ZN4Pads13checkVelocityEh>
    a9c8:	80 93 5c 0f 	sts	0x0F5C, r24
            aftertouchAvailable = checkAftertouch(pad, velocityAvailable);
    a9cc:	48 2f       	mov	r20, r24
    a9ce:	61 2f       	mov	r22, r17
    a9d0:	ce 01       	movw	r24, r28
    a9d2:	80 d9       	rcall	.-3328   	; 0x9cd4 <_ZN4Pads15checkAftertouchEhb>
    a9d4:	80 93 5b 0f 	sts	0x0F5B, r24
    a9d8:	17 c0       	rjmp	.+46     	; 0xaa08 <_ZN4Pads6updateEv+0x7a>

        }

    } else {

        if (xyUpdated(pad))    {
    a9da:	61 2f       	mov	r22, r17
    a9dc:	ce 01       	movw	r24, r28
    a9de:	e2 da       	rcall	.-2620   	; 0x9fa4 <_ZN4Pads9xyUpdatedEh>
    a9e0:	88 23       	and	r24, r24
    a9e2:	91 f0       	breq	.+36     	; 0xaa08 <_ZN4Pads6updateEv+0x7a>

            xAvailable = checkX(pad);
    a9e4:	61 2f       	mov	r22, r17
    a9e6:	ce 01       	movw	r24, r28
    a9e8:	19 d8       	rcall	.-4046   	; 0x9a1c <_ZN4Pads6checkXEh>
    a9ea:	80 93 5a 0f 	sts	0x0F5A, r24
            yAvailable = checkY(pad);
    a9ee:	61 2f       	mov	r22, r17
    a9f0:	ce 01       	movw	r24, r28
    a9f2:	c1 d8       	rcall	.-3710   	; 0x9b76 <_ZN4Pads6checkYEh>
    a9f4:	80 93 59 0f 	sts	0x0F59, r24

            switchToXYread = false;
    a9f8:	fe 01       	movw	r30, r28
    a9fa:	eb 56       	subi	r30, 0x6B	; 107
    a9fc:	fd 4f       	sbci	r31, 0xFD	; 253
    a9fe:	10 82       	st	Z, r1
            switchToNextPad = true;
    aa00:	81 e0       	ldi	r24, 0x01	; 1
    aa02:	31 97       	sbiw	r30, 0x01	; 1
    aa04:	80 83       	st	Z, r24
    aa06:	07 c0       	rjmp	.+14     	; 0xaa16 <_ZN4Pads6updateEv+0x88>

        }

    }

    if (switchToNextPad)  {
    aa08:	fe 01       	movw	r30, r28
    aa0a:	ec 56       	subi	r30, 0x6C	; 108
    aa0c:	fd 4f       	sbci	r31, 0xFD	; 253
    aa0e:	80 81       	ld	r24, Z
    aa10:	88 23       	and	r24, r24
    aa12:	09 f4       	brne	.+2      	; 0xaa16 <_ZN4Pads6updateEv+0x88>
    aa14:	bf c0       	rjmp	.+382    	; 0xab94 <_ZN4Pads6updateEv+0x206>

        //if we got to this point, everything that can be read is read

        if (velocityAvailable)  {
    aa16:	80 91 5c 0f 	lds	r24, 0x0F5C
    aa1a:	88 23       	and	r24, r24
    aa1c:	09 f4       	brne	.+2      	; 0xaa20 <_ZN4Pads6updateEv+0x92>
    aa1e:	3b c0       	rjmp	.+118    	; 0xaa96 <_ZN4Pads6updateEv+0x108>

            uint8_t index = getLastTouchedPad();
    aa20:	ce 01       	movw	r24, r28
    aa22:	0e 94 38 69 	call	0xd270	; 0xd270 <_ZN4Pads17getLastTouchedPadEv>
    aa26:	d8 2e       	mov	r13, r24

            //if pad is pressed, update last pressed pad
            //if it's released clear it from history
            updateLastPressedPad(pad, lastMIDInoteState[pad]);
    aa28:	e1 2e       	mov	r14, r17
    aa2a:	f1 2c       	mov	r15, r1
    aa2c:	fe 01       	movw	r30, r28
    aa2e:	ee 0d       	add	r30, r14
    aa30:	ff 1d       	adc	r31, r15
    aa32:	41 e0       	ldi	r20, 0x01	; 1
    aa34:	94 a1       	ldd	r25, Z+36	; 0x24
    aa36:	91 11       	cpse	r25, r1
    aa38:	01 c0       	rjmp	.+2      	; 0xaa3c <_ZN4Pads6updateEv+0xae>
    aa3a:	40 e0       	ldi	r20, 0x00	; 0
    aa3c:	61 2f       	mov	r22, r17
    aa3e:	ce 01       	movw	r24, r28
    aa40:	ef de       	rcall	.-546    	; 0xa820 <_ZN4Pads20updateLastPressedPadEhb>

            if (!lastMIDInoteState[pad])    {
    aa42:	fe 01       	movw	r30, r28
    aa44:	ee 0d       	add	r30, r14
    aa46:	ff 1d       	adc	r31, r15
    aa48:	94 a1       	ldd	r25, Z+36	; 0x24
    aa4a:	91 11       	cpse	r25, r1
    aa4c:	0e c0       	rjmp	.+28     	; 0xaa6a <_ZN4Pads6updateEv+0xdc>

                //a bit of black magic
                if ((index != getLastTouchedPad()) && !allPadsReleased())
    aa4e:	ce 01       	movw	r24, r28
    aa50:	0e 94 38 69 	call	0xd270	; 0xd270 <_ZN4Pads17getLastTouchedPadEv>
    aa54:	8d 15       	cp	r24, r13
    aa56:	39 f0       	breq	.+14     	; 0xaa66 <_ZN4Pads6updateEv+0xd8>
    aa58:	ce 01       	movw	r24, r28
    aa5a:	0e 94 6e 69 	call	0xd2dc	; 0xd2dc <_ZN4Pads15allPadsReleasedEv>
    aa5e:	91 e0       	ldi	r25, 0x01	; 1
    aa60:	d8 2e       	mov	r13, r24
    aa62:	d9 26       	eor	r13, r25
    aa64:	03 c0       	rjmp	.+6      	; 0xaa6c <_ZN4Pads6updateEv+0xde>
    aa66:	d1 2c       	mov	r13, r1
    aa68:	01 c0       	rjmp	.+2      	; 0xaa6c <_ZN4Pads6updateEv+0xde>

    static bool velocityAvailable = false;
    static bool aftertouchAvailable = false;
    static bool xAvailable = false;
    static bool yAvailable = false;
    bool restoreLCD = false;
    aa6a:	d1 2c       	mov	r13, r1
                if ((index != getLastTouchedPad()) && !allPadsReleased())
                    restoreLCD = true;

            }

            if (!editModeActive() && lastMIDInoteState[pad]) //update only once, on press
    aa6c:	ce 01       	movw	r24, r28
    aa6e:	54 d1       	rcall	.+680    	; 0xad18 <_ZN4Pads14editModeActiveEv>
    aa70:	81 11       	cpse	r24, r1
    aa72:	06 c0       	rjmp	.+12     	; 0xaa80 <_ZN4Pads6updateEv+0xf2>
    aa74:	fe 01       	movw	r30, r28
    aa76:	ee 0d       	add	r30, r14
    aa78:	ff 1d       	adc	r31, r15
    aa7a:	84 a1       	ldd	r24, Z+36	; 0x24
    aa7c:	81 11       	cpse	r24, r1
    aa7e:	91 c0       	rjmp	.+290    	; 0xaba2 <_ZN4Pads6updateEv+0x214>
                setFunctionLEDs(pad);

            if (editModeActive() && lastMIDInoteState[pad]) //update only once, on press
    aa80:	ce 01       	movw	r24, r28
    aa82:	4a d1       	rcall	.+660    	; 0xad18 <_ZN4Pads14editModeActiveEv>
    aa84:	88 23       	and	r24, r24
    aa86:	41 f0       	breq	.+16     	; 0xaa98 <_ZN4Pads6updateEv+0x10a>
    aa88:	fe 01       	movw	r30, r28
    aa8a:	ee 0d       	add	r30, r14
    aa8c:	ff 1d       	adc	r31, r15
    aa8e:	84 a1       	ldd	r24, Z+36	; 0x24
    aa90:	81 11       	cpse	r24, r1
    aa92:	8c c0       	rjmp	.+280    	; 0xabac <_ZN4Pads6updateEv+0x21e>
    aa94:	01 c0       	rjmp	.+2      	; 0xaa98 <_ZN4Pads6updateEv+0x10a>

    static bool velocityAvailable = false;
    static bool aftertouchAvailable = false;
    static bool xAvailable = false;
    static bool yAvailable = false;
    bool restoreLCD = false;
    aa96:	d1 2c       	mov	r13, r1
                setupPadEditMode(pad);

        }

        //check data to be sent
        if (!editModeActive()) {
    aa98:	ce 01       	movw	r24, r28
    aa9a:	3e d1       	rcall	.+636    	; 0xad18 <_ZN4Pads14editModeActiveEv>
    aa9c:	f8 2e       	mov	r15, r24
    aa9e:	81 11       	cpse	r24, r1
    aaa0:	67 c0       	rjmp	.+206    	; 0xab70 <_ZN4Pads6updateEv+0x1e2>

            //don't send or show midi data while in pad edit mode or menu
            #ifdef MODULE_LCD
            if (!menu.menuDisplayed())
    aaa2:	89 ed       	ldi	r24, 0xD9	; 217
    aaa4:	98 e0       	ldi	r25, 0x08	; 8
    aaa6:	0e 94 0f 30 	call	0x601e	; 0x601e <_ZN4Menu13menuDisplayedEv>
    aaaa:	81 11       	cpse	r24, r1
    aaac:	0b c0       	rjmp	.+22     	; 0xaac4 <_ZN4Pads6updateEv+0x136>
            #endif
                checkMIDIdata(pad, velocityAvailable, aftertouchAvailable, xAvailable, yAvailable);
    aaae:	e0 90 59 0f 	lds	r14, 0x0F59
    aab2:	00 91 5a 0f 	lds	r16, 0x0F5A
    aab6:	20 91 5b 0f 	lds	r18, 0x0F5B
    aaba:	40 91 5c 0f 	lds	r20, 0x0F5C
    aabe:	61 2f       	mov	r22, r17
    aac0:	ce 01       	movw	r24, r28
    aac2:	09 df       	rcall	.-494    	; 0xa8d6 <_ZN4Pads13checkMIDIdataEhbbbb>

            //only display data from last touched pad

            if (restoreLCD)    {
    aac4:	dd 20       	and	r13, r13
    aac6:	b9 f0       	breq	.+46     	; 0xaaf6 <_ZN4Pads6updateEv+0x168>

                uint8_t padIndex = getLastTouchedPad();
    aac8:	ce 01       	movw	r24, r28
    aaca:	0e 94 38 69 	call	0xd270	; 0xd270 <_ZN4Pads17getLastTouchedPadEv>
    aace:	18 2f       	mov	r17, r24

                //there are
                #ifdef MODULE_LCD
                if (!menu.menuDisplayed())
    aad0:	89 ed       	ldi	r24, 0xD9	; 217
    aad2:	98 e0       	ldi	r25, 0x08	; 8
    aad4:	0e 94 0f 30 	call	0x601e	; 0x601e <_ZN4Menu13menuDisplayedEv>
    aad8:	81 11       	cpse	r24, r1
    aada:	08 c0       	rjmp	.+16     	; 0xaaec <_ZN4Pads6updateEv+0x15e>
                #endif
                    checkLCDdata(padIndex, true, true, true, true);
    aadc:	ee 24       	eor	r14, r14
    aade:	e3 94       	inc	r14
    aae0:	01 e0       	ldi	r16, 0x01	; 1
    aae2:	21 e0       	ldi	r18, 0x01	; 1
    aae4:	41 e0       	ldi	r20, 0x01	; 1
    aae6:	61 2f       	mov	r22, r17
    aae8:	ce 01       	movw	r24, r28
    aaea:	df dc       	rcall	.-1602   	; 0xa4aa <_ZN4Pads12checkLCDdataEhbbbb>
                setFunctionLEDs(padIndex);
    aaec:	61 2f       	mov	r22, r17
    aaee:	ce 01       	movw	r24, r28
    aaf0:	0e 94 b0 78 	call	0xf160	; 0xf160 <_ZN4Pads15setFunctionLEDsEh>
    aaf4:	3d c0       	rjmp	.+122    	; 0xab70 <_ZN4Pads6updateEv+0x1e2>

            }   else {

                    if (pad == getLastTouchedPad()) {
    aaf6:	ce 01       	movw	r24, r28
    aaf8:	0e 94 38 69 	call	0xd270	; 0xd270 <_ZN4Pads17getLastTouchedPadEv>
    aafc:	18 13       	cpse	r17, r24
    aafe:	38 c0       	rjmp	.+112    	; 0xab70 <_ZN4Pads6updateEv+0x1e2>
                    #ifdef MODULE_LCD
                        if (menu.menuDisplayed())   {
    ab00:	89 ed       	ldi	r24, 0xD9	; 217
    ab02:	98 e0       	ldi	r25, 0x08	; 8
    ab04:	0e 94 0f 30 	call	0x601e	; 0x601e <_ZN4Menu13menuDisplayedEv>
    ab08:	88 23       	and	r24, r24
    ab0a:	39 f1       	breq	.+78     	; 0xab5a <_ZN4Pads6updateEv+0x1cc>

                            if (calibrationEnabled)
    ab0c:	fe 01       	movw	r30, r28
    ab0e:	e8 58       	subi	r30, 0x88	; 136
    ab10:	fc 4f       	sbci	r31, 0xFC	; 252
    ab12:	80 81       	ld	r24, Z
    ab14:	88 23       	and	r24, r24
    ab16:	61 f1       	breq	.+88     	; 0xab70 <_ZN4Pads6updateEv+0x1e2>
                                checkLCDdata(pad, false, false, (xAvailable && (activeCalibration == coordinateX)), (yAvailable && (activeCalibration == coordinateY)));
    ab18:	e0 90 59 0f 	lds	r14, 0x0F59
    ab1c:	ee 20       	and	r14, r14
    ab1e:	29 f0       	breq	.+10     	; 0xab2a <_ZN4Pads6updateEv+0x19c>
    ab20:	35 96       	adiw	r30, 0x05	; 5
    ab22:	80 81       	ld	r24, Z
    ab24:	81 30       	cpi	r24, 0x01	; 1
    ab26:	09 f4       	brne	.+2      	; 0xab2a <_ZN4Pads6updateEv+0x19c>
    ab28:	45 c0       	rjmp	.+138    	; 0xabb4 <_ZN4Pads6updateEv+0x226>
    ab2a:	e0 90 5a 0f 	lds	r14, 0x0F5A
    ab2e:	ee 20       	and	r14, r14
    ab30:	69 f0       	breq	.+26     	; 0xab4c <_ZN4Pads6updateEv+0x1be>
    ab32:	fe 01       	movw	r30, r28
    ab34:	e3 58       	subi	r30, 0x83	; 131
    ab36:	fc 4f       	sbci	r31, 0xFC	; 252
    ab38:	80 81       	ld	r24, Z
    ab3a:	88 23       	and	r24, r24
    ab3c:	11 f0       	breq	.+4      	; 0xab42 <_ZN4Pads6updateEv+0x1b4>
    ab3e:	ef 2c       	mov	r14, r15
    ab40:	05 c0       	rjmp	.+10     	; 0xab4c <_ZN4Pads6updateEv+0x1be>
    ab42:	8f 2d       	mov	r24, r15
    ab44:	fe 2c       	mov	r15, r14
    ab46:	e8 2e       	mov	r14, r24
    ab48:	01 c0       	rjmp	.+2      	; 0xab4c <_ZN4Pads6updateEv+0x1be>
    ab4a:	e8 2e       	mov	r14, r24
    ab4c:	0f 2d       	mov	r16, r15
    ab4e:	20 e0       	ldi	r18, 0x00	; 0
    ab50:	40 e0       	ldi	r20, 0x00	; 0
    ab52:	61 2f       	mov	r22, r17
    ab54:	ce 01       	movw	r24, r28
    ab56:	a9 dc       	rcall	.-1710   	; 0xa4aa <_ZN4Pads12checkLCDdataEhbbbb>
    ab58:	0b c0       	rjmp	.+22     	; 0xab70 <_ZN4Pads6updateEv+0x1e2>

                        }
                    else checkLCDdata(pad, velocityAvailable, aftertouchAvailable, xAvailable, yAvailable);
    ab5a:	e0 90 59 0f 	lds	r14, 0x0F59
    ab5e:	00 91 5a 0f 	lds	r16, 0x0F5A
    ab62:	20 91 5b 0f 	lds	r18, 0x0F5B
    ab66:	40 91 5c 0f 	lds	r20, 0x0F5C
    ab6a:	61 2f       	mov	r22, r17
    ab6c:	ce 01       	movw	r24, r28
    ab6e:	9d dc       	rcall	.-1734   	; 0xa4aa <_ZN4Pads12checkLCDdataEhbbbb>

            }

        }

        setNextPad();
    ab70:	ce 01       	movw	r24, r28
    ab72:	0e 94 a5 6a 	call	0xd54a	; 0xd54a <_ZN4Pads10setNextPadEv>
        setMuxInput(activePad);
    ab76:	fe 01       	movw	r30, r28
    ab78:	ed 56       	subi	r30, 0x6D	; 109
    ab7a:	fd 4f       	sbci	r31, 0xFD	; 253
    ab7c:	60 81       	ld	r22, Z
    ab7e:	ce 01       	movw	r24, r28
    ab80:	0e 94 9b 69 	call	0xd336	; 0xd336 <_ZN4Pads11setMuxInputEh>

        velocityAvailable = false;
    ab84:	10 92 5c 0f 	sts	0x0F5C, r1
        aftertouchAvailable = false;
    ab88:	10 92 5b 0f 	sts	0x0F5B, r1
        xAvailable = false;
    ab8c:	10 92 5a 0f 	sts	0x0F5A, r1
        yAvailable = false;
    ab90:	10 92 59 0f 	sts	0x0F59, r1
                //printf("\n");
        //#endif

    }

    checkRemainingOctaveShift();
    ab94:	ce 01       	movw	r24, r28
    ab96:	0e 94 7c 75 	call	0xeaf8	; 0xeaf8 <_ZN4Pads25checkRemainingOctaveShiftEv>
    checkRemainingNoteShift();
    ab9a:	ce 01       	movw	r24, r28
    ab9c:	0e 94 64 77 	call	0xeec8	; 0xeec8 <_ZN4Pads23checkRemainingNoteShiftEv>
    aba0:	0e c0       	rjmp	.+28     	; 0xabbe <_ZN4Pads6updateEv+0x230>
                    restoreLCD = true;

            }

            if (!editModeActive() && lastMIDInoteState[pad]) //update only once, on press
                setFunctionLEDs(pad);
    aba2:	61 2f       	mov	r22, r17
    aba4:	ce 01       	movw	r24, r28
    aba6:	0e 94 b0 78 	call	0xf160	; 0xf160 <_ZN4Pads15setFunctionLEDsEh>
    abaa:	6a cf       	rjmp	.-300    	; 0xaa80 <_ZN4Pads6updateEv+0xf2>

            if (editModeActive() && lastMIDInoteState[pad]) //update only once, on press
                setupPadEditMode(pad);
    abac:	61 2f       	mov	r22, r17
    abae:	ce 01       	movw	r24, r28
    abb0:	74 d0       	rcall	.+232    	; 0xac9a <_ZN4Pads16setupPadEditModeEh>
    abb2:	72 cf       	rjmp	.-284    	; 0xaa98 <_ZN4Pads6updateEv+0x10a>
                    if (pad == getLastTouchedPad()) {
                    #ifdef MODULE_LCD
                        if (menu.menuDisplayed())   {

                            if (calibrationEnabled)
                                checkLCDdata(pad, false, false, (xAvailable && (activeCalibration == coordinateX)), (yAvailable && (activeCalibration == coordinateY)));
    abb4:	80 91 5a 0f 	lds	r24, 0x0F5A
    abb8:	81 11       	cpse	r24, r1
    abba:	c7 cf       	rjmp	.-114    	; 0xab4a <_ZN4Pads6updateEv+0x1bc>
    abbc:	c7 cf       	rjmp	.-114    	; 0xab4c <_ZN4Pads6updateEv+0x1be>
    }

    checkRemainingOctaveShift();
    checkRemainingNoteShift();

}
    abbe:	df 91       	pop	r29
    abc0:	cf 91       	pop	r28
    abc2:	1f 91       	pop	r17
    abc4:	0f 91       	pop	r16
    abc6:	ff 90       	pop	r15
    abc8:	ef 90       	pop	r14
    abca:	df 90       	pop	r13
    abcc:	08 95       	ret

0000abce <_ZN4Pads21displayActivePadNotesEh>:
        leds.displayActiveNoteLEDs(true, pad);
    #endif

}

void Pads::displayActivePadNotes(uint8_t pad) {
    abce:	9f 92       	push	r9
    abd0:	af 92       	push	r10
    abd2:	bf 92       	push	r11
    abd4:	cf 92       	push	r12
    abd6:	df 92       	push	r13
    abd8:	ef 92       	push	r14
    abda:	ff 92       	push	r15
    abdc:	0f 93       	push	r16
    abde:	1f 93       	push	r17
    abe0:	cf 93       	push	r28
    abe2:	df 93       	push	r29
    abe4:	cd b7       	in	r28, 0x3d	; 61
    abe6:	de b7       	in	r29, 0x3e	; 62
    abe8:	2e 97       	sbiw	r28, 0x0e	; 14
    abea:	0f b6       	in	r0, 0x3f	; 63
    abec:	f8 94       	cli
    abee:	de bf       	out	0x3e, r29	; 62
    abf0:	0f be       	out	0x3f, r0	; 63
    abf2:	cd bf       	out	0x3d, r28	; 61
    abf4:	5c 01       	movw	r10, r24
    abf6:	87 e0       	ldi	r24, 0x07	; 7
    abf8:	68 9f       	mul	r22, r24
    abfa:	b0 01       	movw	r22, r0
    abfc:	11 24       	eor	r1, r1
    abfe:	8b 01       	movw	r16, r22
    ac00:	01 5b       	subi	r16, 0xB1	; 177
    ac02:	1e 4f       	sbci	r17, 0xFE	; 254
    ac04:	0a 0d       	add	r16, r10
    ac06:	1b 1d       	adc	r17, r11
    ac08:	6b 01       	movw	r12, r22
    ac0a:	ea ea       	ldi	r30, 0xAA	; 170
    ac0c:	ce 1a       	sub	r12, r30
    ac0e:	ee ef       	ldi	r30, 0xFE	; 254
    ac10:	de 0a       	sbc	r13, r30
    ac12:	ca 0c       	add	r12, r10
    ac14:	db 1c       	adc	r13, r11

    //this will display all active notes currently assigned to pad while in pad edit mode

    uint8_t tonicArray[NOTES_PER_PAD],
            noteCounter = 0;
    ac16:	91 2c       	mov	r9, r1
        //printf("Assigned notes:\n");
    //#endif

    for (int i=0; i<NOTES_PER_PAD; i++) {

        if (padNote[pad][i] == BLANK_NOTE) continue;
    ac18:	f8 01       	movw	r30, r16
    ac1a:	60 81       	ld	r22, Z
    ac1c:	60 38       	cpi	r22, 0x80	; 128
    ac1e:	d1 f0       	breq	.+52     	; 0xac54 <_ZN4Pads21displayActivePadNotesEh+0x86>

        tonicArray[noteCounter] = getTonicFromNote(padNote[pad][i]);
    ac20:	e9 2c       	mov	r14, r9
    ac22:	f1 2c       	mov	r15, r1
    ac24:	c5 01       	movw	r24, r10
    ac26:	0e 94 43 69 	call	0xd286	; 0xd286 <_ZN4Pads16getTonicFromNoteEh>
    ac2a:	e8 e0       	ldi	r30, 0x08	; 8
    ac2c:	f0 e0       	ldi	r31, 0x00	; 0
    ac2e:	ec 0f       	add	r30, r28
    ac30:	fd 1f       	adc	r31, r29
    ac32:	ee 0d       	add	r30, r14
    ac34:	ff 1d       	adc	r31, r15
    ac36:	80 83       	st	Z, r24
        octaveArray[noteCounter] = normalizeOctave(getOctaveFromNote(padNote[pad][i]));
    ac38:	f8 01       	movw	r30, r16
    ac3a:	60 81       	ld	r22, Z
    ac3c:	c5 01       	movw	r24, r10
    ac3e:	0e 94 56 69 	call	0xd2ac	; 0xd2ac <_ZN4Pads17getOctaveFromNoteEh>
    ac42:	e1 e0       	ldi	r30, 0x01	; 1
    ac44:	f0 e0       	ldi	r31, 0x00	; 0
    ac46:	ec 0f       	add	r30, r28
    ac48:	fd 1f       	adc	r31, r29
    ac4a:	ee 0d       	add	r30, r14
    ac4c:	ff 1d       	adc	r31, r15
    ac4e:	82 50       	subi	r24, 0x02	; 2
    ac50:	80 83       	st	Z, r24
        noteCounter++;
    ac52:	93 94       	inc	r9
    ac54:	0f 5f       	subi	r16, 0xFF	; 255
    ac56:	1f 4f       	sbci	r17, 0xFF	; 255

    //#if MODE_SERIAL > 0
        //printf("Assigned notes:\n");
    //#endif

    for (int i=0; i<NOTES_PER_PAD; i++) {
    ac58:	0c 15       	cp	r16, r12
    ac5a:	1d 05       	cpc	r17, r13
    ac5c:	e9 f6       	brne	.-70     	; 0xac18 <_ZN4Pads21displayActivePadNotesEh+0x4a>
        //#endif

    }

    #ifdef MODULE_LCD
        display.displayActivePadNotes(tonicArray, octaveArray, noteCounter, true);
    ac5e:	01 e0       	ldi	r16, 0x01	; 1
    ac60:	29 2d       	mov	r18, r9
    ac62:	ae 01       	movw	r20, r28
    ac64:	4f 5f       	subi	r20, 0xFF	; 255
    ac66:	5f 4f       	sbci	r21, 0xFF	; 255
    ac68:	be 01       	movw	r22, r28
    ac6a:	68 5f       	subi	r22, 0xF8	; 248
    ac6c:	7f 4f       	sbci	r23, 0xFF	; 255
    ac6e:	82 e6       	ldi	r24, 0x62	; 98
    ac70:	9c e0       	ldi	r25, 0x0C	; 12
    ac72:	0e 94 32 3c 	call	0x7864	; 0x7864 <_ZN3LCD21displayActivePadNotesEPhPahb>
    #endif

}
    ac76:	2e 96       	adiw	r28, 0x0e	; 14
    ac78:	0f b6       	in	r0, 0x3f	; 63
    ac7a:	f8 94       	cli
    ac7c:	de bf       	out	0x3e, r29	; 62
    ac7e:	0f be       	out	0x3f, r0	; 63
    ac80:	cd bf       	out	0x3d, r28	; 61
    ac82:	df 91       	pop	r29
    ac84:	cf 91       	pop	r28
    ac86:	1f 91       	pop	r17
    ac88:	0f 91       	pop	r16
    ac8a:	ff 90       	pop	r15
    ac8c:	ef 90       	pop	r14
    ac8e:	df 90       	pop	r13
    ac90:	cf 90       	pop	r12
    ac92:	bf 90       	pop	r11
    ac94:	af 90       	pop	r10
    ac96:	9f 90       	pop	r9
    ac98:	08 95       	ret

0000ac9a <_ZN4Pads16setupPadEditModeEh>:
#include "Pads.h"

bool editModeActivated;

void Pads::setupPadEditMode(uint8_t pad)    {
    ac9a:	0f 93       	push	r16
    ac9c:	1f 93       	push	r17
    ac9e:	cf 93       	push	r28
    aca0:	8c 01       	movw	r16, r24
    aca2:	c6 2f       	mov	r28, r22
    #if MODE_SERIAL > 0
        printf("Editing pad %d\n", pad);
    #endif

    #ifdef MODULE_LCD
        display.displayPadEditMode(pad + 1);
    aca4:	61 e0       	ldi	r22, 0x01	; 1
    aca6:	6c 0f       	add	r22, r28
    aca8:	82 e6       	ldi	r24, 0x62	; 98
    acaa:	9c e0       	ldi	r25, 0x0C	; 12
    acac:	0e 94 03 3e 	call	0x7c06	; 0x7c06 <_ZN3LCD18displayPadEditModeEh>
    //#if MODE_SERIAL > 0
        //printf("Active octave: %d\n", activeOctave);
    //#endif

    #ifdef MODULE_LCD
        display.displayActiveOctave(normalizeOctave(activeOctave));
    acb0:	f8 01       	movw	r30, r16
    acb2:	e6 56       	subi	r30, 0x66	; 102
    acb4:	fe 4f       	sbci	r31, 0xFE	; 254
    acb6:	60 81       	ld	r22, Z
    acb8:	62 50       	subi	r22, 0x02	; 2
    acba:	82 e6       	ldi	r24, 0x62	; 98
    acbc:	9c e0       	ldi	r25, 0x0C	; 12
    acbe:	0e 94 98 3d 	call	0x7b30	; 0x7b30 <_ZN3LCD19displayActiveOctaveEa>
    #endif

    displayActivePadNotes(pad);
    acc2:	6c 2f       	mov	r22, r28
    acc4:	c8 01       	movw	r24, r16
    acc6:	83 df       	rcall	.-250    	; 0xabce <_ZN4Pads21displayActivePadNotesEh>

    #ifdef MODULE_LEDS
        leds.displayActiveNoteLEDs(true, pad);
    acc8:	4c 2f       	mov	r20, r28
    acca:	61 e0       	ldi	r22, 0x01	; 1
    accc:	80 ed       	ldi	r24, 0xD0	; 208
    acce:	9e e0       	ldi	r25, 0x0E	; 14
    acd0:	0e 94 9e 46 	call	0x8d3c	; 0x8d3c <_ZN4LEDs21displayActiveNoteLEDsEbh>
    #endif

}
    acd4:	cf 91       	pop	r28
    acd6:	1f 91       	pop	r17
    acd8:	0f 91       	pop	r16
    acda:	08 95       	ret

0000acdc <_ZN4Pads15exitPadEditModeEv>:
        display.displayActivePadNotes(tonicArray, octaveArray, noteCounter, true);
    #endif

}

void Pads::exitPadEditMode()    {
    acdc:	cf 93       	push	r28
    acde:	df 93       	push	r29
    ace0:	ec 01       	movw	r28, r24

    editModeActivated = false;
    ace2:	10 92 5d 0f 	sts	0x0F5D, r1
    #ifdef MODULE_LCD
    display.clearPadEditMode();
    ace6:	82 e6       	ldi	r24, 0x62	; 98
    ace8:	9c e0       	ldi	r25, 0x0C	; 12
    acea:	0e 94 d9 3f 	call	0x7fb2	; 0x7fb2 <_ZN3LCD16clearPadEditModeEv>
    display.displayProgramAndScale(activeProgram+1, activeScale);
    acee:	fe 01       	movw	r30, r28
    acf0:	e4 56       	subi	r30, 0x64	; 100
    acf2:	fe 4f       	sbci	r31, 0xFE	; 254
    acf4:	c3 56       	subi	r28, 0x63	; 99
    acf6:	de 4f       	sbci	r29, 0xFE	; 254
    acf8:	68 81       	ld	r22, Y
    acfa:	6f 5f       	subi	r22, 0xFF	; 255
    acfc:	40 81       	ld	r20, Z
    acfe:	82 e6       	ldi	r24, 0x62	; 98
    ad00:	9c e0       	ldi	r25, 0x0C	; 12
    ad02:	0e 94 a6 38 	call	0x714c	; 0x714c <_ZN3LCD22displayProgramAndScaleEhh>
    #endif
    //after exiting from pad edit mode, restore note led states
    #ifdef MODULE_LEDS
    leds.displayActiveNoteLEDs();
    ad06:	40 e0       	ldi	r20, 0x00	; 0
    ad08:	60 e0       	ldi	r22, 0x00	; 0
    ad0a:	80 ed       	ldi	r24, 0xD0	; 208
    ad0c:	9e e0       	ldi	r25, 0x0E	; 14
    ad0e:	0e 94 9e 46 	call	0x8d3c	; 0x8d3c <_ZN4LEDs21displayActiveNoteLEDsEbh>
    #endif

}
    ad12:	df 91       	pop	r29
    ad14:	cf 91       	pop	r28
    ad16:	08 95       	ret

0000ad18 <_ZN4Pads14editModeActiveEv>:

bool Pads::editModeActive() {

    return editModeActivated;

}
    ad18:	80 91 5d 0f 	lds	r24, 0x0F5D
    ad1c:	08 95       	ret

0000ad1e <_ZN4Pads11setEditModeEb>:

void Pads::setEditMode(bool state)    {

    editModeActivated = state;
    ad1e:	60 93 5d 0f 	sts	0x0F5D, r22
    ad22:	08 95       	ret

0000ad24 <_ZN4Pads16getPadParametersEv>:
    //scale is contained within program, apply new parameters
    getScaleParameters();

}

void Pads::getPadParameters()   {
    ad24:	2f 92       	push	r2
    ad26:	3f 92       	push	r3
    ad28:	4f 92       	push	r4
    ad2a:	5f 92       	push	r5
    ad2c:	6f 92       	push	r6
    ad2e:	7f 92       	push	r7
    ad30:	8f 92       	push	r8
    ad32:	9f 92       	push	r9
    ad34:	af 92       	push	r10
    ad36:	bf 92       	push	r11
    ad38:	cf 92       	push	r12
    ad3a:	df 92       	push	r13
    ad3c:	ef 92       	push	r14
    ad3e:	ff 92       	push	r15
    ad40:	0f 93       	push	r16
    ad42:	1f 93       	push	r17
    ad44:	cf 93       	push	r28
    ad46:	df 93       	push	r29
    ad48:	cd b7       	in	r28, 0x3d	; 61
    ad4a:	de b7       	in	r29, 0x3e	; 62
    ad4c:	ca 56       	subi	r28, 0x6A	; 106
    ad4e:	d1 09       	sbc	r29, r1
    ad50:	0f b6       	in	r0, 0x3f	; 63
    ad52:	f8 94       	cli
    ad54:	de bf       	out	0x3e, r29	; 62
    ad56:	0f be       	out	0x3f, r0	; 63
    ad58:	cd bf       	out	0x3d, r28	; 61
    ad5a:	98 87       	std	Y+8, r25	; 0x08
    ad5c:	8f 83       	std	Y+7, r24	; 0x07

    splitEnabled = configuration.readParameter(CONF_BLOCK_PROGRAM, programGlobalSettingsSection, GLOBAL_PROGRAM_SETTING_XY_SPLIT_STATE_ID+(GLOBAL_PROGRAM_SETTINGS*(uint16_t)activeProgram));
    ad5e:	fc 01       	movw	r30, r24
    ad60:	e3 56       	subi	r30, 0x63	; 99
    ad62:	fe 4f       	sbci	r31, 0xFE	; 254
    ad64:	90 81       	ld	r25, Z
    ad66:	09 2f       	mov	r16, r25
    ad68:	09 2e       	mov	r0, r25
    ad6a:	00 0c       	add	r0, r0
    ad6c:	11 0b       	sbc	r17, r17
    ad6e:	23 e1       	ldi	r18, 0x13	; 19
    ad70:	92 02       	muls	r25, r18
    ad72:	50 01       	movw	r10, r0
    ad74:	11 24       	eor	r1, r1
    ad76:	75 01       	movw	r14, r10
    ad78:	35 e0       	ldi	r19, 0x05	; 5
    ad7a:	e3 0e       	add	r14, r19
    ad7c:	f1 1c       	adc	r15, r1
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    ad7e:	80 91 7b 04 	lds	r24, 0x047B
    ad82:	90 91 7c 04 	lds	r25, 0x047C
    ad86:	20 91 81 04 	lds	r18, 0x0481
    ad8a:	30 91 82 04 	lds	r19, 0x0482
    ad8e:	82 0f       	add	r24, r18
    ad90:	93 1f       	adc	r25, r19
    ad92:	05 96       	adiw	r24, 0x05	; 5
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    ad94:	20 91 a7 04 	lds	r18, 0x04A7
    ad98:	21 30       	cpi	r18, 0x01	; 1
    ad9a:	19 f1       	breq	.+70     	; 0xade2 <_ZN4Pads16getPadParametersEv+0xbe>
    ad9c:	18 f0       	brcs	.+6      	; 0xada4 <_ZN4Pads16getPadParametersEv+0x80>
    ad9e:	22 30       	cpi	r18, 0x02	; 2
    ada0:	39 f1       	breq	.+78     	; 0xadf0 <_ZN4Pads16getPadParametersEv+0xcc>
    ada2:	2e c0       	rjmp	.+92     	; 0xae00 <_ZN4Pads16getPadParametersEv+0xdc>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    ada4:	67 01       	movw	r12, r14
    ada6:	d6 94       	lsr	r13
    ada8:	c7 94       	ror	r12
    adaa:	d6 94       	lsr	r13
    adac:	c7 94       	ror	r12
    adae:	d6 94       	lsr	r13
    adb0:	c7 94       	ror	r12
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    adb2:	8c 0d       	add	r24, r12
    adb4:	91 1d       	adc	r25, r1
            if (startAddress > EEPROM_SIZE) {
    adb6:	81 30       	cpi	r24, 0x01	; 1
    adb8:	40 e1       	ldi	r20, 0x10	; 16
    adba:	94 07       	cpc	r25, r20
    adbc:	10 f0       	brcs	.+4      	; 0xadc2 <_ZN4Pads16getPadParametersEv+0x9e>
    adbe:	0c 94 b0 60 	jmp	0xc160	; 0xc160 <_ZN4Pads16getPadParametersEv+0x143c>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    adc2:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    adc6:	90 e0       	ldi	r25, 0x00	; 0

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    adc8:	cc 0c       	add	r12, r12
    adca:	cc 0c       	add	r12, r12
    adcc:	cc 0c       	add	r12, r12
    adce:	ec 18       	sub	r14, r12
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    add0:	02 c0       	rjmp	.+4      	; 0xadd6 <_ZN4Pads16getPadParametersEv+0xb2>
    add2:	95 95       	asr	r25
    add4:	87 95       	ror	r24
    add6:	ea 94       	dec	r14
    add8:	e2 f7       	brpl	.-8      	; 0xadd2 <_ZN4Pads16getPadParametersEv+0xae>
    adda:	81 70       	andi	r24, 0x01	; 1
    addc:	99 27       	eor	r25, r25
    adde:	0c 94 b7 60 	jmp	0xc16e	; 0xc16e <_ZN4Pads16getPadParametersEv+0x144a>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    ade2:	8e 0d       	add	r24, r14
    ade4:	9f 1d       	adc	r25, r15
    ade6:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    adea:	90 e0       	ldi	r25, 0x00	; 0
    adec:	0c 94 b7 60 	jmp	0xc16e	; 0xc16e <_ZN4Pads16getPadParametersEv+0x144a>
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
    adf0:	ee 0c       	add	r14, r14
    adf2:	ff 1c       	adc	r15, r15
            return eeprom_read_word((uint16_t*)startAddress);
    adf4:	8e 0d       	add	r24, r14
    adf6:	9f 1d       	adc	r25, r15
    adf8:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    adfc:	0c 94 b7 60 	jmp	0xc16e	; 0xc16e <_ZN4Pads16getPadParametersEv+0x144a>
    ae00:	ef 81       	ldd	r30, Y+7	; 0x07
    ae02:	f8 85       	ldd	r31, Y+8	; 0x08
    ae04:	e7 56       	subi	r30, 0x67	; 103
    ae06:	fe 4f       	sbci	r31, 0xFE	; 254
    ae08:	10 82       	st	Z, r1
            printf("All pad parameters are global - split is off\n");
        #endif

        for (int i=0; i<MAX_PADS; i++)    {

            xSendEnabled[i]                 = configuration.readParameter(CONF_BLOCK_PROGRAM, programGlobalSettingsSection, GLOBAL_PROGRAM_SETTING_X_ENABLE_ID+(GLOBAL_PROGRAM_SETTINGS*(uint16_t)activeProgram));
    ae0a:	c5 01       	movw	r24, r10
    ae0c:	06 96       	adiw	r24, 0x06	; 6
    ae0e:	9c 83       	std	Y+4, r25	; 0x04
    ae10:	8b 83       	std	Y+3, r24	; 0x03
        uint8_t parameterIndex;

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    ae12:	96 95       	lsr	r25
    ae14:	87 95       	ror	r24
    ae16:	96 95       	lsr	r25
    ae18:	87 95       	ror	r24
    ae1a:	96 95       	lsr	r25
    ae1c:	87 95       	ror	r24
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    ae1e:	dc 01       	movw	r26, r24
    ae20:	bb 27       	eor	r27, r27
    ae22:	be 83       	std	Y+6, r27	; 0x06
    ae24:	ad 83       	std	Y+5, r26	; 0x05

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    ae26:	88 0f       	add	r24, r24
    ae28:	88 0f       	add	r24, r24
    ae2a:	88 0f       	add	r24, r24
    ae2c:	bb 81       	ldd	r27, Y+3	; 0x03
    ae2e:	b8 1b       	sub	r27, r24
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    ae30:	eb 2f       	mov	r30, r27
    ae32:	f0 e0       	ldi	r31, 0x00	; 0
    ae34:	61 96       	adiw	r28, 0x11	; 17
    ae36:	ff af       	std	Y+63, r31	; 0x3f
    ae38:	ee af       	std	Y+62, r30	; 0x3e
    ae3a:	61 97       	sbiw	r28, 0x11	; 17
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
    ae3c:	6b 80       	ldd	r6, Y+3	; 0x03
    ae3e:	7c 80       	ldd	r7, Y+4	; 0x04
    ae40:	66 0c       	add	r6, r6
    ae42:	77 1c       	adc	r7, r7
            ySendEnabled[i]                 = configuration.readParameter(CONF_BLOCK_PROGRAM, programGlobalSettingsSection, GLOBAL_PROGRAM_SETTING_Y_ENABLE_ID+(GLOBAL_PROGRAM_SETTINGS*(uint16_t)activeProgram));
    ae44:	95 01       	movw	r18, r10
    ae46:	29 5f       	subi	r18, 0xF9	; 249
    ae48:	3f 4f       	sbci	r19, 0xFF	; 255
    ae4a:	3a 87       	std	Y+10, r19	; 0x0a
    ae4c:	29 87       	std	Y+9, r18	; 0x09
        uint8_t parameterIndex;

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    ae4e:	c9 01       	movw	r24, r18
    ae50:	96 95       	lsr	r25
    ae52:	87 95       	ror	r24
    ae54:	96 95       	lsr	r25
    ae56:	87 95       	ror	r24
    ae58:	96 95       	lsr	r25
    ae5a:	87 95       	ror	r24
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    ae5c:	dc 01       	movw	r26, r24
    ae5e:	bb 27       	eor	r27, r27
    ae60:	b8 a3       	std	Y+32, r27	; 0x20
    ae62:	af 8f       	std	Y+31, r26	; 0x1f

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    ae64:	88 0f       	add	r24, r24
    ae66:	88 0f       	add	r24, r24
    ae68:	88 0f       	add	r24, r24
    ae6a:	28 1b       	sub	r18, r24
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    ae6c:	e2 2f       	mov	r30, r18
    ae6e:	f0 e0       	ldi	r31, 0x00	; 0
    ae70:	63 96       	adiw	r28, 0x13	; 19
    ae72:	ff af       	std	Y+63, r31	; 0x3f
    ae74:	ee af       	std	Y+62, r30	; 0x3e
    ae76:	63 97       	sbiw	r28, 0x13	; 19
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
    ae78:	93 01       	movw	r18, r6
    ae7a:	2e 5f       	subi	r18, 0xFE	; 254
    ae7c:	3f 4f       	sbci	r19, 0xFF	; 255
    ae7e:	3a a3       	std	Y+34, r19	; 0x22
    ae80:	29 a3       	std	Y+33, r18	; 0x21
            noteSendEnabled[i]              = configuration.readParameter(CONF_BLOCK_PROGRAM, programGlobalSettingsSection, GLOBAL_PROGRAM_SETTING_NOTE_ENABLE_ID+(GLOBAL_PROGRAM_SETTINGS*(uint16_t)activeProgram));
    ae82:	c5 01       	movw	r24, r10
    ae84:	08 96       	adiw	r24, 0x08	; 8
    ae86:	9c 87       	std	Y+12, r25	; 0x0c
    ae88:	8b 87       	std	Y+11, r24	; 0x0b
        uint8_t parameterIndex;

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    ae8a:	96 95       	lsr	r25
    ae8c:	87 95       	ror	r24
    ae8e:	96 95       	lsr	r25
    ae90:	87 95       	ror	r24
    ae92:	96 95       	lsr	r25
    ae94:	87 95       	ror	r24
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    ae96:	dc 01       	movw	r26, r24
    ae98:	bb 27       	eor	r27, r27
    ae9a:	bc a3       	std	Y+36, r27	; 0x24
    ae9c:	ab a3       	std	Y+35, r26	; 0x23

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    ae9e:	88 0f       	add	r24, r24
    aea0:	88 0f       	add	r24, r24
    aea2:	88 0f       	add	r24, r24
    aea4:	bb 85       	ldd	r27, Y+11	; 0x0b
    aea6:	b8 1b       	sub	r27, r24
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    aea8:	eb 2f       	mov	r30, r27
    aeaa:	f0 e0       	ldi	r31, 0x00	; 0
    aeac:	65 96       	adiw	r28, 0x15	; 21
    aeae:	ff af       	std	Y+63, r31	; 0x3f
    aeb0:	ee af       	std	Y+62, r30	; 0x3e
    aeb2:	65 97       	sbiw	r28, 0x15	; 21
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
    aeb4:	2e 5f       	subi	r18, 0xFE	; 254
    aeb6:	3f 4f       	sbci	r19, 0xFF	; 255
    aeb8:	3e a3       	std	Y+38, r19	; 0x26
    aeba:	2d a3       	std	Y+37, r18	; 0x25
            aftertouchSendEnabled[i]        = configuration.readParameter(CONF_BLOCK_PROGRAM, programGlobalSettingsSection, GLOBAL_PROGRAM_SETTING_AFTERTOUCH_ENABLE_ID+(GLOBAL_PROGRAM_SETTINGS*(uint16_t)activeProgram));
    aebc:	c5 01       	movw	r24, r10
    aebe:	09 96       	adiw	r24, 0x09	; 9
    aec0:	9e 87       	std	Y+14, r25	; 0x0e
    aec2:	8d 87       	std	Y+13, r24	; 0x0d
        uint8_t parameterIndex;

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    aec4:	96 95       	lsr	r25
    aec6:	87 95       	ror	r24
    aec8:	96 95       	lsr	r25
    aeca:	87 95       	ror	r24
    aecc:	96 95       	lsr	r25
    aece:	87 95       	ror	r24
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    aed0:	dc 01       	movw	r26, r24
    aed2:	bb 27       	eor	r27, r27
    aed4:	b8 a7       	std	Y+40, r27	; 0x28
    aed6:	af a3       	std	Y+39, r26	; 0x27

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    aed8:	88 0f       	add	r24, r24
    aeda:	88 0f       	add	r24, r24
    aedc:	88 0f       	add	r24, r24
    aede:	bd 85       	ldd	r27, Y+13	; 0x0d
    aee0:	b8 1b       	sub	r27, r24
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    aee2:	eb 2f       	mov	r30, r27
    aee4:	f0 e0       	ldi	r31, 0x00	; 0
    aee6:	67 96       	adiw	r28, 0x17	; 23
    aee8:	ff af       	std	Y+63, r31	; 0x3f
    aeea:	ee af       	std	Y+62, r30	; 0x3e
    aeec:	67 97       	sbiw	r28, 0x17	; 23
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
    aeee:	2e 5f       	subi	r18, 0xFE	; 254
    aef0:	3f 4f       	sbci	r19, 0xFF	; 255
    aef2:	3a a7       	std	Y+42, r19	; 0x2a
    aef4:	29 a7       	std	Y+41, r18	; 0x29
            ccXPad[i]                       = configuration.readParameter(CONF_BLOCK_PROGRAM, programGlobalSettingsSection, GLOBAL_PROGRAM_SETTING_CC_X_ID+(GLOBAL_PROGRAM_SETTINGS*(uint16_t)activeProgram));
    aef6:	c5 01       	movw	r24, r10
    aef8:	0b 96       	adiw	r24, 0x0b	; 11
    aefa:	98 8b       	std	Y+16, r25	; 0x10
    aefc:	8f 87       	std	Y+15, r24	; 0x0f
        uint8_t parameterIndex;

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    aefe:	96 95       	lsr	r25
    af00:	87 95       	ror	r24
    af02:	96 95       	lsr	r25
    af04:	87 95       	ror	r24
    af06:	96 95       	lsr	r25
    af08:	87 95       	ror	r24
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    af0a:	dc 01       	movw	r26, r24
    af0c:	bb 27       	eor	r27, r27
    af0e:	bc a7       	std	Y+44, r27	; 0x2c
    af10:	ab a7       	std	Y+43, r26	; 0x2b

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    af12:	88 0f       	add	r24, r24
    af14:	88 0f       	add	r24, r24
    af16:	88 0f       	add	r24, r24
    af18:	bf 85       	ldd	r27, Y+15	; 0x0f
    af1a:	b8 1b       	sub	r27, r24
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    af1c:	eb 2f       	mov	r30, r27
    af1e:	f0 e0       	ldi	r31, 0x00	; 0
    af20:	69 96       	adiw	r28, 0x19	; 25
    af22:	ff af       	std	Y+63, r31	; 0x3f
    af24:	ee af       	std	Y+62, r30	; 0x3e
    af26:	69 97       	sbiw	r28, 0x19	; 25
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
    af28:	2c 5f       	subi	r18, 0xFC	; 252
    af2a:	3f 4f       	sbci	r19, 0xFF	; 255
    af2c:	3e a7       	std	Y+46, r19	; 0x2e
    af2e:	2d a7       	std	Y+45, r18	; 0x2d
            ccYPad[i]                       = configuration.readParameter(CONF_BLOCK_PROGRAM, programGlobalSettingsSection, GLOBAL_PROGRAM_SETTING_CC_Y_ID+(GLOBAL_PROGRAM_SETTINGS*(uint16_t)activeProgram));
    af30:	c5 01       	movw	r24, r10
    af32:	0c 96       	adiw	r24, 0x0c	; 12
    af34:	9a 8b       	std	Y+18, r25	; 0x12
    af36:	89 8b       	std	Y+17, r24	; 0x11
        uint8_t parameterIndex;

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    af38:	96 95       	lsr	r25
    af3a:	87 95       	ror	r24
    af3c:	96 95       	lsr	r25
    af3e:	87 95       	ror	r24
    af40:	96 95       	lsr	r25
    af42:	87 95       	ror	r24
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    af44:	dc 01       	movw	r26, r24
    af46:	bb 27       	eor	r27, r27
    af48:	b8 ab       	std	Y+48, r27	; 0x30
    af4a:	af a7       	std	Y+47, r26	; 0x2f

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    af4c:	88 0f       	add	r24, r24
    af4e:	88 0f       	add	r24, r24
    af50:	88 0f       	add	r24, r24
    af52:	b9 89       	ldd	r27, Y+17	; 0x11
    af54:	b8 1b       	sub	r27, r24
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    af56:	eb 2f       	mov	r30, r27
    af58:	f0 e0       	ldi	r31, 0x00	; 0
    af5a:	6b 96       	adiw	r28, 0x1b	; 27
    af5c:	ff af       	std	Y+63, r31	; 0x3f
    af5e:	ee af       	std	Y+62, r30	; 0x3e
    af60:	6b 97       	sbiw	r28, 0x1b	; 27
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
    af62:	2e 5f       	subi	r18, 0xFE	; 254
    af64:	3f 4f       	sbci	r19, 0xFF	; 255
    af66:	3a ab       	std	Y+50, r19	; 0x32
    af68:	29 ab       	std	Y+49, r18	; 0x31
            ccXminPad[i]                    = configuration.readParameter(CONF_BLOCK_PROGRAM, programGlobalSettingsSection, GLOBAL_PROGRAM_SETTING_X_MIN_ID+(GLOBAL_PROGRAM_SETTINGS*(uint16_t)activeProgram));
    af6a:	c5 01       	movw	r24, r10
    af6c:	0d 96       	adiw	r24, 0x0d	; 13
    af6e:	9c 8b       	std	Y+20, r25	; 0x14
    af70:	8b 8b       	std	Y+19, r24	; 0x13
        uint8_t parameterIndex;

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    af72:	96 95       	lsr	r25
    af74:	87 95       	ror	r24
    af76:	96 95       	lsr	r25
    af78:	87 95       	ror	r24
    af7a:	96 95       	lsr	r25
    af7c:	87 95       	ror	r24
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    af7e:	dc 01       	movw	r26, r24
    af80:	bb 27       	eor	r27, r27
    af82:	bc ab       	std	Y+52, r27	; 0x34
    af84:	ab ab       	std	Y+51, r26	; 0x33

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    af86:	88 0f       	add	r24, r24
    af88:	88 0f       	add	r24, r24
    af8a:	88 0f       	add	r24, r24
    af8c:	bb 89       	ldd	r27, Y+19	; 0x13
    af8e:	b8 1b       	sub	r27, r24
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    af90:	eb 2f       	mov	r30, r27
    af92:	f0 e0       	ldi	r31, 0x00	; 0
    af94:	6d 96       	adiw	r28, 0x1d	; 29
    af96:	ff af       	std	Y+63, r31	; 0x3f
    af98:	ee af       	std	Y+62, r30	; 0x3e
    af9a:	6d 97       	sbiw	r28, 0x1d	; 29
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
    af9c:	2e 5f       	subi	r18, 0xFE	; 254
    af9e:	3f 4f       	sbci	r19, 0xFF	; 255
    afa0:	3e ab       	std	Y+54, r19	; 0x36
    afa2:	2d ab       	std	Y+53, r18	; 0x35
            ccXmaxPad[i]                    = configuration.readParameter(CONF_BLOCK_PROGRAM, programGlobalSettingsSection, GLOBAL_PROGRAM_SETTING_X_MAX_ID+(GLOBAL_PROGRAM_SETTINGS*(uint16_t)activeProgram));
    afa4:	c5 01       	movw	r24, r10
    afa6:	0e 96       	adiw	r24, 0x0e	; 14
    afa8:	9e 8b       	std	Y+22, r25	; 0x16
    afaa:	8d 8b       	std	Y+21, r24	; 0x15
        uint8_t parameterIndex;

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    afac:	96 95       	lsr	r25
    afae:	87 95       	ror	r24
    afb0:	96 95       	lsr	r25
    afb2:	87 95       	ror	r24
    afb4:	96 95       	lsr	r25
    afb6:	87 95       	ror	r24
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    afb8:	dc 01       	movw	r26, r24
    afba:	bb 27       	eor	r27, r27
    afbc:	b8 af       	std	Y+56, r27	; 0x38
    afbe:	af ab       	std	Y+55, r26	; 0x37

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    afc0:	88 0f       	add	r24, r24
    afc2:	88 0f       	add	r24, r24
    afc4:	88 0f       	add	r24, r24
    afc6:	bd 89       	ldd	r27, Y+21	; 0x15
    afc8:	b8 1b       	sub	r27, r24
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    afca:	eb 2f       	mov	r30, r27
    afcc:	f0 e0       	ldi	r31, 0x00	; 0
    afce:	6f 96       	adiw	r28, 0x1f	; 31
    afd0:	ff af       	std	Y+63, r31	; 0x3f
    afd2:	ee af       	std	Y+62, r30	; 0x3e
    afd4:	6f 97       	sbiw	r28, 0x1f	; 31
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
    afd6:	2e 5f       	subi	r18, 0xFE	; 254
    afd8:	3f 4f       	sbci	r19, 0xFF	; 255
    afda:	3a af       	std	Y+58, r19	; 0x3a
    afdc:	29 af       	std	Y+57, r18	; 0x39
            ccYminPad[i]                    = configuration.readParameter(CONF_BLOCK_PROGRAM, programGlobalSettingsSection, GLOBAL_PROGRAM_SETTING_Y_MIN_ID+(GLOBAL_PROGRAM_SETTINGS*(uint16_t)activeProgram));
    afde:	c5 01       	movw	r24, r10
    afe0:	0f 96       	adiw	r24, 0x0f	; 15
    afe2:	98 8f       	std	Y+24, r25	; 0x18
    afe4:	8f 8b       	std	Y+23, r24	; 0x17
        uint8_t parameterIndex;

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    afe6:	96 95       	lsr	r25
    afe8:	87 95       	ror	r24
    afea:	96 95       	lsr	r25
    afec:	87 95       	ror	r24
    afee:	96 95       	lsr	r25
    aff0:	87 95       	ror	r24
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    aff2:	dc 01       	movw	r26, r24
    aff4:	bb 27       	eor	r27, r27
    aff6:	bc af       	std	Y+60, r27	; 0x3c
    aff8:	ab af       	std	Y+59, r26	; 0x3b

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    affa:	88 0f       	add	r24, r24
    affc:	88 0f       	add	r24, r24
    affe:	88 0f       	add	r24, r24
    b000:	bf 89       	ldd	r27, Y+23	; 0x17
    b002:	b8 1b       	sub	r27, r24
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    b004:	eb 2f       	mov	r30, r27
    b006:	f0 e0       	ldi	r31, 0x00	; 0
    b008:	a1 96       	adiw	r28, 0x21	; 33
    b00a:	ff af       	std	Y+63, r31	; 0x3f
    b00c:	ee af       	std	Y+62, r30	; 0x3e
    b00e:	a1 97       	sbiw	r28, 0x21	; 33
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
    b010:	2e 5f       	subi	r18, 0xFE	; 254
    b012:	3f 4f       	sbci	r19, 0xFF	; 255
    b014:	3e af       	std	Y+62, r19	; 0x3e
    b016:	2d af       	std	Y+61, r18	; 0x3d
            ccYmaxPad[i]                    = configuration.readParameter(CONF_BLOCK_PROGRAM, programGlobalSettingsSection, GLOBAL_PROGRAM_SETTING_Y_MAX_ID+(GLOBAL_PROGRAM_SETTINGS*(uint16_t)activeProgram));
    b018:	c5 01       	movw	r24, r10
    b01a:	40 96       	adiw	r24, 0x10	; 16
    b01c:	9a 8f       	std	Y+26, r25	; 0x1a
    b01e:	89 8f       	std	Y+25, r24	; 0x19
        uint8_t parameterIndex;

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    b020:	96 95       	lsr	r25
    b022:	87 95       	ror	r24
    b024:	96 95       	lsr	r25
    b026:	87 95       	ror	r24
    b028:	96 95       	lsr	r25
    b02a:	87 95       	ror	r24
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    b02c:	dc 01       	movw	r26, r24
    b02e:	bb 27       	eor	r27, r27
    b030:	21 96       	adiw	r28, 0x01	; 1
    b032:	bf af       	std	Y+63, r27	; 0x3f
    b034:	ae af       	std	Y+62, r26	; 0x3e
    b036:	21 97       	sbiw	r28, 0x01	; 1

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    b038:	88 0f       	add	r24, r24
    b03a:	88 0f       	add	r24, r24
    b03c:	88 0f       	add	r24, r24
    b03e:	b9 8d       	ldd	r27, Y+25	; 0x19
    b040:	b8 1b       	sub	r27, r24
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    b042:	eb 2f       	mov	r30, r27
    b044:	f0 e0       	ldi	r31, 0x00	; 0
    b046:	a3 96       	adiw	r28, 0x23	; 35
    b048:	ff af       	std	Y+63, r31	; 0x3f
    b04a:	ee af       	std	Y+62, r30	; 0x3e
    b04c:	a3 97       	sbiw	r28, 0x23	; 35
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
    b04e:	2e 5f       	subi	r18, 0xFE	; 254
    b050:	3f 4f       	sbci	r19, 0xFF	; 255
    b052:	23 96       	adiw	r28, 0x03	; 3
    b054:	3f af       	std	Y+63, r19	; 0x3f
    b056:	2e af       	std	Y+62, r18	; 0x3e
    b058:	23 97       	sbiw	r28, 0x03	; 3
            padCurveX[i]                    = configuration.readParameter(CONF_BLOCK_PROGRAM, programGlobalSettingsSection, GLOBAL_PROGRAM_SETTING_X_CURVE_GAIN_ID+(GLOBAL_PROGRAM_SETTINGS*(uint16_t)activeProgram));
    b05a:	c5 01       	movw	r24, r10
    b05c:	41 96       	adiw	r24, 0x11	; 17
    b05e:	9c 8f       	std	Y+28, r25	; 0x1c
    b060:	8b 8f       	std	Y+27, r24	; 0x1b
        uint8_t parameterIndex;

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    b062:	96 95       	lsr	r25
    b064:	87 95       	ror	r24
    b066:	96 95       	lsr	r25
    b068:	87 95       	ror	r24
    b06a:	96 95       	lsr	r25
    b06c:	87 95       	ror	r24
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    b06e:	dc 01       	movw	r26, r24
    b070:	bb 27       	eor	r27, r27
    b072:	25 96       	adiw	r28, 0x05	; 5
    b074:	bf af       	std	Y+63, r27	; 0x3f
    b076:	ae af       	std	Y+62, r26	; 0x3e
    b078:	25 97       	sbiw	r28, 0x05	; 5

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    b07a:	88 0f       	add	r24, r24
    b07c:	88 0f       	add	r24, r24
    b07e:	88 0f       	add	r24, r24
    b080:	bb 8d       	ldd	r27, Y+27	; 0x1b
    b082:	b8 1b       	sub	r27, r24
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    b084:	eb 2f       	mov	r30, r27
    b086:	f0 e0       	ldi	r31, 0x00	; 0
    b088:	a5 96       	adiw	r28, 0x25	; 37
    b08a:	ff af       	std	Y+63, r31	; 0x3f
    b08c:	ee af       	std	Y+62, r30	; 0x3e
    b08e:	a5 97       	sbiw	r28, 0x25	; 37
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
    b090:	2e 5f       	subi	r18, 0xFE	; 254
    b092:	3f 4f       	sbci	r19, 0xFF	; 255
    b094:	27 96       	adiw	r28, 0x07	; 7
    b096:	3f af       	std	Y+63, r19	; 0x3f
    b098:	2e af       	std	Y+62, r18	; 0x3e
    b09a:	27 97       	sbiw	r28, 0x07	; 7
            padCurveY[i]                    = configuration.readParameter(CONF_BLOCK_PROGRAM, programGlobalSettingsSection, GLOBAL_PROGRAM_SETTING_Y_CURVE_GAIN_ID+(GLOBAL_PROGRAM_SETTINGS*(uint16_t)activeProgram));
    b09c:	c5 01       	movw	r24, r10
    b09e:	42 96       	adiw	r24, 0x12	; 18
    b0a0:	9e 8f       	std	Y+30, r25	; 0x1e
    b0a2:	8d 8f       	std	Y+29, r24	; 0x1d
        uint8_t parameterIndex;

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    b0a4:	96 95       	lsr	r25
    b0a6:	87 95       	ror	r24
    b0a8:	96 95       	lsr	r25
    b0aa:	87 95       	ror	r24
    b0ac:	96 95       	lsr	r25
    b0ae:	87 95       	ror	r24
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    b0b0:	dc 01       	movw	r26, r24
    b0b2:	bb 27       	eor	r27, r27
    b0b4:	29 96       	adiw	r28, 0x09	; 9
    b0b6:	bf af       	std	Y+63, r27	; 0x3f
    b0b8:	ae af       	std	Y+62, r26	; 0x3e
    b0ba:	29 97       	sbiw	r28, 0x09	; 9

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    b0bc:	88 0f       	add	r24, r24
    b0be:	88 0f       	add	r24, r24
    b0c0:	88 0f       	add	r24, r24
    b0c2:	bd 8d       	ldd	r27, Y+29	; 0x1d
    b0c4:	b8 1b       	sub	r27, r24
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    b0c6:	eb 2f       	mov	r30, r27
    b0c8:	f0 e0       	ldi	r31, 0x00	; 0
    b0ca:	a7 96       	adiw	r28, 0x27	; 39
    b0cc:	ff af       	std	Y+63, r31	; 0x3f
    b0ce:	ee af       	std	Y+62, r30	; 0x3e
    b0d0:	a7 97       	sbiw	r28, 0x27	; 39
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
    b0d2:	2e 5f       	subi	r18, 0xFE	; 254
    b0d4:	3f 4f       	sbci	r19, 0xFF	; 255
    b0d6:	2b 96       	adiw	r28, 0x0b	; 11
    b0d8:	3f af       	std	Y+63, r19	; 0x3f
    b0da:	2e af       	std	Y+62, r18	; 0x3e
    b0dc:	2b 97       	sbiw	r28, 0x0b	; 11
            midiChannel[i]                  = configuration.readParameter(CONF_BLOCK_PROGRAM, programGlobalSettingsSection, GLOBAL_PROGRAM_SETTING_MIDI_CHANNEL_ID+(GLOBAL_PROGRAM_SETTINGS*(uint16_t)activeProgram));
    b0de:	c5 01       	movw	r24, r10
    b0e0:	0a 96       	adiw	r24, 0x0a	; 10
    b0e2:	9a 83       	std	Y+2, r25	; 0x02
    b0e4:	89 83       	std	Y+1, r24	; 0x01
        uint8_t parameterIndex;

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    b0e6:	96 95       	lsr	r25
    b0e8:	87 95       	ror	r24
    b0ea:	96 95       	lsr	r25
    b0ec:	87 95       	ror	r24
    b0ee:	96 95       	lsr	r25
    b0f0:	87 95       	ror	r24
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    b0f2:	dc 01       	movw	r26, r24
    b0f4:	bb 27       	eor	r27, r27
    b0f6:	2d 96       	adiw	r28, 0x0d	; 13
    b0f8:	bf af       	std	Y+63, r27	; 0x3f
    b0fa:	ae af       	std	Y+62, r26	; 0x3e
    b0fc:	2d 97       	sbiw	r28, 0x0d	; 13

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    b0fe:	88 0f       	add	r24, r24
    b100:	88 0f       	add	r24, r24
    b102:	88 0f       	add	r24, r24
    b104:	b9 81       	ldd	r27, Y+1	; 0x01
    b106:	b8 1b       	sub	r27, r24
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    b108:	eb 2f       	mov	r30, r27
    b10a:	f0 e0       	ldi	r31, 0x00	; 0
    b10c:	a9 96       	adiw	r28, 0x29	; 41
    b10e:	ff af       	std	Y+63, r31	; 0x3f
    b110:	ee af       	std	Y+62, r30	; 0x3e
    b112:	a9 97       	sbiw	r28, 0x29	; 41
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
    b114:	20 51       	subi	r18, 0x10	; 16
    b116:	31 09       	sbc	r19, r1
    b118:	2f 96       	adiw	r28, 0x0f	; 15
    b11a:	3f af       	std	Y+63, r19	; 0x3f
    b11c:	2e af       	std	Y+62, r18	; 0x3e
    b11e:	2f 97       	sbiw	r28, 0x0f	; 15
    b120:	af 80       	ldd	r10, Y+7	; 0x07
    b122:	b8 84       	ldd	r11, Y+8	; 0x08
    b124:	81 2c       	mov	r8, r1
    b126:	91 2c       	mov	r9, r1
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    b128:	0f 2e       	mov	r0, r31
    b12a:	fb e7       	ldi	r31, 0x7B	; 123
    b12c:	cf 2e       	mov	r12, r31
    b12e:	f4 e0       	ldi	r31, 0x04	; 4
    b130:	df 2e       	mov	r13, r31
    b132:	f0 2d       	mov	r31, r0
    b134:	0f 2e       	mov	r0, r31
    b136:	f1 e8       	ldi	r31, 0x81	; 129
    b138:	ef 2e       	mov	r14, r31
    b13a:	f4 e0       	ldi	r31, 0x04	; 4
    b13c:	ff 2e       	mov	r15, r31
    b13e:	f0 2d       	mov	r31, r0
        return blocks[blockID].blockStartAddress+START_OFFSET;

    };
    inline uint8_t getParameterType(uint8_t blockID, uint8_t sectionID) {

        return blocks[blockID].sectionParameterType[sectionID];
    b140:	07 ea       	ldi	r16, 0xA7	; 167
    b142:	14 e0       	ldi	r17, 0x04	; 4
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    b144:	41 2c       	mov	r4, r1
    b146:	51 2c       	mov	r5, r1
            printf("All pad parameters are global - split is off\n");
        #endif

        for (int i=0; i<MAX_PADS; i++)    {

            xSendEnabled[i]                 = configuration.readParameter(CONF_BLOCK_PROGRAM, programGlobalSettingsSection, GLOBAL_PROGRAM_SETTING_X_ENABLE_ID+(GLOBAL_PROGRAM_SETTINGS*(uint16_t)activeProgram));
    b148:	33 24       	eor	r3, r3
    b14a:	33 94       	inc	r3
    b14c:	21 2c       	mov	r2, r1
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    b14e:	d6 01       	movw	r26, r12
    b150:	2d 91       	ld	r18, X+
    b152:	3c 91       	ld	r19, X
    b154:	f7 01       	movw	r30, r14
    b156:	80 81       	ld	r24, Z
    b158:	91 81       	ldd	r25, Z+1	; 0x01
    b15a:	82 0f       	add	r24, r18
    b15c:	93 1f       	adc	r25, r19
    b15e:	05 96       	adiw	r24, 0x05	; 5
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    b160:	d8 01       	movw	r26, r16
    b162:	2c 91       	ld	r18, X
    b164:	21 30       	cpi	r18, 0x01	; 1
    b166:	d1 f0       	breq	.+52     	; 0xb19c <_ZN4Pads16getPadParametersEv+0x478>
    b168:	18 f0       	brcs	.+6      	; 0xb170 <_ZN4Pads16getPadParametersEv+0x44c>
    b16a:	22 30       	cpi	r18, 0x02	; 2
    b16c:	f9 f0       	breq	.+62     	; 0xb1ac <_ZN4Pads16getPadParametersEv+0x488>
    b16e:	23 c0       	rjmp	.+70     	; 0xb1b6 <_ZN4Pads16getPadParametersEv+0x492>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    b170:	ed 81       	ldd	r30, Y+5	; 0x05
    b172:	fe 81       	ldd	r31, Y+6	; 0x06
    b174:	8e 0f       	add	r24, r30
    b176:	9f 1f       	adc	r25, r31
            if (startAddress > EEPROM_SIZE) {
    b178:	81 30       	cpi	r24, 0x01	; 1
    b17a:	f0 e1       	ldi	r31, 0x10	; 16
    b17c:	9f 07       	cpc	r25, r31
    b17e:	f0 f4       	brcc	.+60     	; 0xb1bc <_ZN4Pads16getPadParametersEv+0x498>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    b180:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    b184:	90 e0       	ldi	r25, 0x00	; 0
    b186:	60 96       	adiw	r28, 0x10	; 16
    b188:	0f ac       	ldd	r0, Y+63	; 0x3f
    b18a:	60 97       	sbiw	r28, 0x10	; 16
    b18c:	02 c0       	rjmp	.+4      	; 0xb192 <_ZN4Pads16getPadParametersEv+0x46e>
    b18e:	95 95       	asr	r25
    b190:	87 95       	ror	r24
    b192:	0a 94       	dec	r0
    b194:	e2 f7       	brpl	.-8      	; 0xb18e <_ZN4Pads16getPadParametersEv+0x46a>
    b196:	81 70       	andi	r24, 0x01	; 1
    b198:	99 27       	eor	r25, r25
    b19a:	12 c0       	rjmp	.+36     	; 0xb1c0 <_ZN4Pads16getPadParametersEv+0x49c>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    b19c:	2b 81       	ldd	r18, Y+3	; 0x03
    b19e:	3c 81       	ldd	r19, Y+4	; 0x04
    b1a0:	82 0f       	add	r24, r18
    b1a2:	93 1f       	adc	r25, r19
    b1a4:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    b1a8:	90 e0       	ldi	r25, 0x00	; 0
    b1aa:	0a c0       	rjmp	.+20     	; 0xb1c0 <_ZN4Pads16getPadParametersEv+0x49c>
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    b1ac:	86 0d       	add	r24, r6
    b1ae:	97 1d       	adc	r25, r7
    b1b0:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    b1b4:	05 c0       	rjmp	.+10     	; 0xb1c0 <_ZN4Pads16getPadParametersEv+0x49c>
            break;

        }   return 0;
    b1b6:	84 2d       	mov	r24, r4
    b1b8:	95 2d       	mov	r25, r5
    b1ba:	02 c0       	rjmp	.+4      	; 0xb1c0 <_ZN4Pads16getPadParametersEv+0x49c>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    b1bc:	84 2d       	mov	r24, r4
    b1be:	95 2d       	mov	r25, r5
    b1c0:	ab 96       	adiw	r28, 0x2b	; 43
    b1c2:	bf ae       	std	Y+63, r11	; 0x3f
    b1c4:	ae ae       	std	Y+62, r10	; 0x3e
    b1c6:	ab 97       	sbiw	r28, 0x2b	; 43
    b1c8:	f5 01       	movw	r30, r10
    b1ca:	e7 57       	subi	r30, 0x77	; 119
    b1cc:	ff 4f       	sbci	r31, 0xFF	; 255
    b1ce:	23 2d       	mov	r18, r3
    b1d0:	89 2b       	or	r24, r25
    b1d2:	09 f4       	brne	.+2      	; 0xb1d6 <_ZN4Pads16getPadParametersEv+0x4b2>
    b1d4:	22 2d       	mov	r18, r2
    b1d6:	20 83       	st	Z, r18
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    b1d8:	d6 01       	movw	r26, r12
    b1da:	2d 91       	ld	r18, X+
    b1dc:	3c 91       	ld	r19, X
    b1de:	f7 01       	movw	r30, r14
    b1e0:	80 81       	ld	r24, Z
    b1e2:	91 81       	ldd	r25, Z+1	; 0x01
    b1e4:	82 0f       	add	r24, r18
    b1e6:	93 1f       	adc	r25, r19
    b1e8:	05 96       	adiw	r24, 0x05	; 5
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    b1ea:	d8 01       	movw	r26, r16
    b1ec:	2c 91       	ld	r18, X
    b1ee:	21 30       	cpi	r18, 0x01	; 1
    b1f0:	d1 f0       	breq	.+52     	; 0xb226 <_ZN4Pads16getPadParametersEv+0x502>
    b1f2:	18 f0       	brcs	.+6      	; 0xb1fa <_ZN4Pads16getPadParametersEv+0x4d6>
    b1f4:	22 30       	cpi	r18, 0x02	; 2
    b1f6:	f9 f0       	breq	.+62     	; 0xb236 <_ZN4Pads16getPadParametersEv+0x512>
    b1f8:	25 c0       	rjmp	.+74     	; 0xb244 <_ZN4Pads16getPadParametersEv+0x520>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    b1fa:	ef 8d       	ldd	r30, Y+31	; 0x1f
    b1fc:	f8 a1       	ldd	r31, Y+32	; 0x20
    b1fe:	8e 0f       	add	r24, r30
    b200:	9f 1f       	adc	r25, r31
            if (startAddress > EEPROM_SIZE) {
    b202:	81 30       	cpi	r24, 0x01	; 1
    b204:	f0 e1       	ldi	r31, 0x10	; 16
    b206:	9f 07       	cpc	r25, r31
    b208:	00 f5       	brcc	.+64     	; 0xb24a <_ZN4Pads16getPadParametersEv+0x526>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    b20a:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    b20e:	90 e0       	ldi	r25, 0x00	; 0
    b210:	62 96       	adiw	r28, 0x12	; 18
    b212:	0f ac       	ldd	r0, Y+63	; 0x3f
    b214:	62 97       	sbiw	r28, 0x12	; 18
    b216:	02 c0       	rjmp	.+4      	; 0xb21c <_ZN4Pads16getPadParametersEv+0x4f8>
    b218:	95 95       	asr	r25
    b21a:	87 95       	ror	r24
    b21c:	0a 94       	dec	r0
    b21e:	e2 f7       	brpl	.-8      	; 0xb218 <_ZN4Pads16getPadParametersEv+0x4f4>
    b220:	81 70       	andi	r24, 0x01	; 1
    b222:	99 27       	eor	r25, r25
    b224:	14 c0       	rjmp	.+40     	; 0xb24e <_ZN4Pads16getPadParametersEv+0x52a>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    b226:	29 85       	ldd	r18, Y+9	; 0x09
    b228:	3a 85       	ldd	r19, Y+10	; 0x0a
    b22a:	82 0f       	add	r24, r18
    b22c:	93 1f       	adc	r25, r19
    b22e:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    b232:	90 e0       	ldi	r25, 0x00	; 0
    b234:	0c c0       	rjmp	.+24     	; 0xb24e <_ZN4Pads16getPadParametersEv+0x52a>
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    b236:	a9 a1       	ldd	r26, Y+33	; 0x21
    b238:	ba a1       	ldd	r27, Y+34	; 0x22
    b23a:	8a 0f       	add	r24, r26
    b23c:	9b 1f       	adc	r25, r27
    b23e:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    b242:	05 c0       	rjmp	.+10     	; 0xb24e <_ZN4Pads16getPadParametersEv+0x52a>
            break;

        }   return 0;
    b244:	84 2d       	mov	r24, r4
    b246:	95 2d       	mov	r25, r5
    b248:	02 c0       	rjmp	.+4      	; 0xb24e <_ZN4Pads16getPadParametersEv+0x52a>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    b24a:	84 2d       	mov	r24, r4
    b24c:	95 2d       	mov	r25, r5
    b24e:	ab 96       	adiw	r28, 0x2b	; 43
    b250:	ee ad       	ldd	r30, Y+62	; 0x3e
    b252:	ff ad       	ldd	r31, Y+63	; 0x3f
    b254:	ab 97       	sbiw	r28, 0x2b	; 43
    b256:	ee 56       	subi	r30, 0x6E	; 110
    b258:	ff 4f       	sbci	r31, 0xFF	; 255
            ySendEnabled[i]                 = configuration.readParameter(CONF_BLOCK_PROGRAM, programGlobalSettingsSection, GLOBAL_PROGRAM_SETTING_Y_ENABLE_ID+(GLOBAL_PROGRAM_SETTINGS*(uint16_t)activeProgram));
    b25a:	23 2d       	mov	r18, r3
    b25c:	89 2b       	or	r24, r25
    b25e:	09 f4       	brne	.+2      	; 0xb262 <_ZN4Pads16getPadParametersEv+0x53e>
    b260:	22 2d       	mov	r18, r2
    b262:	20 83       	st	Z, r18
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    b264:	f6 01       	movw	r30, r12
    b266:	20 81       	ld	r18, Z
    b268:	31 81       	ldd	r19, Z+1	; 0x01
    b26a:	d7 01       	movw	r26, r14
    b26c:	8d 91       	ld	r24, X+
    b26e:	9c 91       	ld	r25, X
    b270:	82 0f       	add	r24, r18
    b272:	93 1f       	adc	r25, r19
    b274:	05 96       	adiw	r24, 0x05	; 5
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    b276:	f8 01       	movw	r30, r16
    b278:	20 81       	ld	r18, Z
    b27a:	21 30       	cpi	r18, 0x01	; 1
    b27c:	d1 f0       	breq	.+52     	; 0xb2b2 <_ZN4Pads16getPadParametersEv+0x58e>
    b27e:	18 f0       	brcs	.+6      	; 0xb286 <_ZN4Pads16getPadParametersEv+0x562>
    b280:	22 30       	cpi	r18, 0x02	; 2
    b282:	f9 f0       	breq	.+62     	; 0xb2c2 <_ZN4Pads16getPadParametersEv+0x59e>
    b284:	25 c0       	rjmp	.+74     	; 0xb2d0 <_ZN4Pads16getPadParametersEv+0x5ac>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    b286:	2b a1       	ldd	r18, Y+35	; 0x23
    b288:	3c a1       	ldd	r19, Y+36	; 0x24
    b28a:	82 0f       	add	r24, r18
    b28c:	93 1f       	adc	r25, r19
            if (startAddress > EEPROM_SIZE) {
    b28e:	81 30       	cpi	r24, 0x01	; 1
    b290:	30 e1       	ldi	r19, 0x10	; 16
    b292:	93 07       	cpc	r25, r19
    b294:	00 f5       	brcc	.+64     	; 0xb2d6 <_ZN4Pads16getPadParametersEv+0x5b2>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    b296:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    b29a:	90 e0       	ldi	r25, 0x00	; 0
    b29c:	64 96       	adiw	r28, 0x14	; 20
    b29e:	0f ac       	ldd	r0, Y+63	; 0x3f
    b2a0:	64 97       	sbiw	r28, 0x14	; 20
    b2a2:	02 c0       	rjmp	.+4      	; 0xb2a8 <_ZN4Pads16getPadParametersEv+0x584>
    b2a4:	95 95       	asr	r25
    b2a6:	87 95       	ror	r24
    b2a8:	0a 94       	dec	r0
    b2aa:	e2 f7       	brpl	.-8      	; 0xb2a4 <_ZN4Pads16getPadParametersEv+0x580>
    b2ac:	81 70       	andi	r24, 0x01	; 1
    b2ae:	99 27       	eor	r25, r25
    b2b0:	14 c0       	rjmp	.+40     	; 0xb2da <_ZN4Pads16getPadParametersEv+0x5b6>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    b2b2:	ab 85       	ldd	r26, Y+11	; 0x0b
    b2b4:	bc 85       	ldd	r27, Y+12	; 0x0c
    b2b6:	8a 0f       	add	r24, r26
    b2b8:	9b 1f       	adc	r25, r27
    b2ba:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    b2be:	90 e0       	ldi	r25, 0x00	; 0
    b2c0:	0c c0       	rjmp	.+24     	; 0xb2da <_ZN4Pads16getPadParametersEv+0x5b6>
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    b2c2:	ed a1       	ldd	r30, Y+37	; 0x25
    b2c4:	fe a1       	ldd	r31, Y+38	; 0x26
    b2c6:	8e 0f       	add	r24, r30
    b2c8:	9f 1f       	adc	r25, r31
    b2ca:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    b2ce:	05 c0       	rjmp	.+10     	; 0xb2da <_ZN4Pads16getPadParametersEv+0x5b6>
            break;

        }   return 0;
    b2d0:	84 2d       	mov	r24, r4
    b2d2:	95 2d       	mov	r25, r5
    b2d4:	02 c0       	rjmp	.+4      	; 0xb2da <_ZN4Pads16getPadParametersEv+0x5b6>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    b2d6:	84 2d       	mov	r24, r4
    b2d8:	95 2d       	mov	r25, r5
    b2da:	ab 96       	adiw	r28, 0x2b	; 43
    b2dc:	ee ad       	ldd	r30, Y+62	; 0x3e
    b2de:	ff ad       	ldd	r31, Y+63	; 0x3f
    b2e0:	ab 97       	sbiw	r28, 0x2b	; 43
    b2e2:	e5 56       	subi	r30, 0x65	; 101
    b2e4:	ff 4f       	sbci	r31, 0xFF	; 255
            noteSendEnabled[i]              = configuration.readParameter(CONF_BLOCK_PROGRAM, programGlobalSettingsSection, GLOBAL_PROGRAM_SETTING_NOTE_ENABLE_ID+(GLOBAL_PROGRAM_SETTINGS*(uint16_t)activeProgram));
    b2e6:	23 2d       	mov	r18, r3
    b2e8:	89 2b       	or	r24, r25
    b2ea:	09 f4       	brne	.+2      	; 0xb2ee <_ZN4Pads16getPadParametersEv+0x5ca>
    b2ec:	22 2d       	mov	r18, r2
    b2ee:	20 83       	st	Z, r18
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    b2f0:	d6 01       	movw	r26, r12
    b2f2:	2d 91       	ld	r18, X+
    b2f4:	3c 91       	ld	r19, X
    b2f6:	f7 01       	movw	r30, r14
    b2f8:	80 81       	ld	r24, Z
    b2fa:	91 81       	ldd	r25, Z+1	; 0x01
    b2fc:	82 0f       	add	r24, r18
    b2fe:	93 1f       	adc	r25, r19
    b300:	05 96       	adiw	r24, 0x05	; 5
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    b302:	d8 01       	movw	r26, r16
    b304:	2c 91       	ld	r18, X
    b306:	21 30       	cpi	r18, 0x01	; 1
    b308:	d1 f0       	breq	.+52     	; 0xb33e <_ZN4Pads16getPadParametersEv+0x61a>
    b30a:	18 f0       	brcs	.+6      	; 0xb312 <_ZN4Pads16getPadParametersEv+0x5ee>
    b30c:	22 30       	cpi	r18, 0x02	; 2
    b30e:	f9 f0       	breq	.+62     	; 0xb34e <_ZN4Pads16getPadParametersEv+0x62a>
    b310:	25 c0       	rjmp	.+74     	; 0xb35c <_ZN4Pads16getPadParametersEv+0x638>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    b312:	ef a1       	ldd	r30, Y+39	; 0x27
    b314:	f8 a5       	ldd	r31, Y+40	; 0x28
    b316:	8e 0f       	add	r24, r30
    b318:	9f 1f       	adc	r25, r31
            if (startAddress > EEPROM_SIZE) {
    b31a:	81 30       	cpi	r24, 0x01	; 1
    b31c:	f0 e1       	ldi	r31, 0x10	; 16
    b31e:	9f 07       	cpc	r25, r31
    b320:	00 f5       	brcc	.+64     	; 0xb362 <_ZN4Pads16getPadParametersEv+0x63e>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    b322:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    b326:	90 e0       	ldi	r25, 0x00	; 0
    b328:	66 96       	adiw	r28, 0x16	; 22
    b32a:	0f ac       	ldd	r0, Y+63	; 0x3f
    b32c:	66 97       	sbiw	r28, 0x16	; 22
    b32e:	02 c0       	rjmp	.+4      	; 0xb334 <_ZN4Pads16getPadParametersEv+0x610>
    b330:	95 95       	asr	r25
    b332:	87 95       	ror	r24
    b334:	0a 94       	dec	r0
    b336:	e2 f7       	brpl	.-8      	; 0xb330 <_ZN4Pads16getPadParametersEv+0x60c>
    b338:	81 70       	andi	r24, 0x01	; 1
    b33a:	99 27       	eor	r25, r25
    b33c:	14 c0       	rjmp	.+40     	; 0xb366 <_ZN4Pads16getPadParametersEv+0x642>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    b33e:	2d 85       	ldd	r18, Y+13	; 0x0d
    b340:	3e 85       	ldd	r19, Y+14	; 0x0e
    b342:	82 0f       	add	r24, r18
    b344:	93 1f       	adc	r25, r19
    b346:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    b34a:	90 e0       	ldi	r25, 0x00	; 0
    b34c:	0c c0       	rjmp	.+24     	; 0xb366 <_ZN4Pads16getPadParametersEv+0x642>
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    b34e:	a9 a5       	ldd	r26, Y+41	; 0x29
    b350:	ba a5       	ldd	r27, Y+42	; 0x2a
    b352:	8a 0f       	add	r24, r26
    b354:	9b 1f       	adc	r25, r27
    b356:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    b35a:	05 c0       	rjmp	.+10     	; 0xb366 <_ZN4Pads16getPadParametersEv+0x642>
            break;

        }   return 0;
    b35c:	84 2d       	mov	r24, r4
    b35e:	95 2d       	mov	r25, r5
    b360:	02 c0       	rjmp	.+4      	; 0xb366 <_ZN4Pads16getPadParametersEv+0x642>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    b362:	84 2d       	mov	r24, r4
    b364:	95 2d       	mov	r25, r5
    b366:	ab 96       	adiw	r28, 0x2b	; 43
    b368:	ee ad       	ldd	r30, Y+62	; 0x3e
    b36a:	ff ad       	ldd	r31, Y+63	; 0x3f
    b36c:	ab 97       	sbiw	r28, 0x2b	; 43
    b36e:	ec 55       	subi	r30, 0x5C	; 92
    b370:	ff 4f       	sbci	r31, 0xFF	; 255
            aftertouchSendEnabled[i]        = configuration.readParameter(CONF_BLOCK_PROGRAM, programGlobalSettingsSection, GLOBAL_PROGRAM_SETTING_AFTERTOUCH_ENABLE_ID+(GLOBAL_PROGRAM_SETTINGS*(uint16_t)activeProgram));
    b372:	23 2d       	mov	r18, r3
    b374:	89 2b       	or	r24, r25
    b376:	09 f4       	brne	.+2      	; 0xb37a <_ZN4Pads16getPadParametersEv+0x656>
    b378:	22 2d       	mov	r18, r2
    b37a:	20 83       	st	Z, r18
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    b37c:	f6 01       	movw	r30, r12
    b37e:	20 81       	ld	r18, Z
    b380:	31 81       	ldd	r19, Z+1	; 0x01
    b382:	d7 01       	movw	r26, r14
    b384:	8d 91       	ld	r24, X+
    b386:	9c 91       	ld	r25, X
    b388:	82 0f       	add	r24, r18
    b38a:	93 1f       	adc	r25, r19
    b38c:	05 96       	adiw	r24, 0x05	; 5
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    b38e:	f8 01       	movw	r30, r16
    b390:	20 81       	ld	r18, Z
    b392:	21 30       	cpi	r18, 0x01	; 1
    b394:	d1 f0       	breq	.+52     	; 0xb3ca <_ZN4Pads16getPadParametersEv+0x6a6>
    b396:	18 f0       	brcs	.+6      	; 0xb39e <_ZN4Pads16getPadParametersEv+0x67a>
    b398:	22 30       	cpi	r18, 0x02	; 2
    b39a:	f1 f0       	breq	.+60     	; 0xb3d8 <_ZN4Pads16getPadParametersEv+0x6b4>
    b39c:	24 c0       	rjmp	.+72     	; 0xb3e6 <_ZN4Pads16getPadParametersEv+0x6c2>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    b39e:	2b a5       	ldd	r18, Y+43	; 0x2b
    b3a0:	3c a5       	ldd	r19, Y+44	; 0x2c
    b3a2:	82 0f       	add	r24, r18
    b3a4:	93 1f       	adc	r25, r19
            if (startAddress > EEPROM_SIZE) {
    b3a6:	81 30       	cpi	r24, 0x01	; 1
    b3a8:	30 e1       	ldi	r19, 0x10	; 16
    b3aa:	93 07       	cpc	r25, r19
    b3ac:	f0 f4       	brcc	.+60     	; 0xb3ea <_ZN4Pads16getPadParametersEv+0x6c6>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    b3ae:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    b3b2:	90 e0       	ldi	r25, 0x00	; 0
    b3b4:	68 96       	adiw	r28, 0x18	; 24
    b3b6:	0f ac       	ldd	r0, Y+63	; 0x3f
    b3b8:	68 97       	sbiw	r28, 0x18	; 24
    b3ba:	02 c0       	rjmp	.+4      	; 0xb3c0 <_ZN4Pads16getPadParametersEv+0x69c>
    b3bc:	95 95       	asr	r25
    b3be:	87 95       	ror	r24
    b3c0:	0a 94       	dec	r0
    b3c2:	e2 f7       	brpl	.-8      	; 0xb3bc <_ZN4Pads16getPadParametersEv+0x698>
    b3c4:	81 70       	andi	r24, 0x01	; 1
    b3c6:	99 27       	eor	r25, r25
    b3c8:	11 c0       	rjmp	.+34     	; 0xb3ec <_ZN4Pads16getPadParametersEv+0x6c8>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    b3ca:	af 85       	ldd	r26, Y+15	; 0x0f
    b3cc:	b8 89       	ldd	r27, Y+16	; 0x10
    b3ce:	8a 0f       	add	r24, r26
    b3d0:	9b 1f       	adc	r25, r27
    b3d2:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    b3d6:	0a c0       	rjmp	.+20     	; 0xb3ec <_ZN4Pads16getPadParametersEv+0x6c8>
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    b3d8:	ed a5       	ldd	r30, Y+45	; 0x2d
    b3da:	fe a5       	ldd	r31, Y+46	; 0x2e
    b3dc:	8e 0f       	add	r24, r30
    b3de:	9f 1f       	adc	r25, r31
    b3e0:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    b3e4:	03 c0       	rjmp	.+6      	; 0xb3ec <_ZN4Pads16getPadParametersEv+0x6c8>
            break;

        }   return 0;
    b3e6:	84 2d       	mov	r24, r4
    b3e8:	01 c0       	rjmp	.+2      	; 0xb3ec <_ZN4Pads16getPadParametersEv+0x6c8>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    b3ea:	84 2d       	mov	r24, r4
    b3ec:	ab 96       	adiw	r28, 0x2b	; 43
    b3ee:	ee ad       	ldd	r30, Y+62	; 0x3e
    b3f0:	ff ad       	ldd	r31, Y+63	; 0x3f
    b3f2:	ab 97       	sbiw	r28, 0x2b	; 43
    b3f4:	ed 5a       	subi	r30, 0xAD	; 173
    b3f6:	ff 4f       	sbci	r31, 0xFF	; 255
            ccXPad[i]                       = configuration.readParameter(CONF_BLOCK_PROGRAM, programGlobalSettingsSection, GLOBAL_PROGRAM_SETTING_CC_X_ID+(GLOBAL_PROGRAM_SETTINGS*(uint16_t)activeProgram));
    b3f8:	80 83       	st	Z, r24
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    b3fa:	d6 01       	movw	r26, r12
    b3fc:	2d 91       	ld	r18, X+
    b3fe:	3c 91       	ld	r19, X
    b400:	f7 01       	movw	r30, r14
    b402:	80 81       	ld	r24, Z
    b404:	91 81       	ldd	r25, Z+1	; 0x01
    b406:	82 0f       	add	r24, r18
    b408:	93 1f       	adc	r25, r19
    b40a:	05 96       	adiw	r24, 0x05	; 5
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    b40c:	d8 01       	movw	r26, r16
    b40e:	2c 91       	ld	r18, X
    b410:	21 30       	cpi	r18, 0x01	; 1
    b412:	d1 f0       	breq	.+52     	; 0xb448 <_ZN4Pads16getPadParametersEv+0x724>
    b414:	18 f0       	brcs	.+6      	; 0xb41c <_ZN4Pads16getPadParametersEv+0x6f8>
    b416:	22 30       	cpi	r18, 0x02	; 2
    b418:	f1 f0       	breq	.+60     	; 0xb456 <_ZN4Pads16getPadParametersEv+0x732>
    b41a:	24 c0       	rjmp	.+72     	; 0xb464 <_ZN4Pads16getPadParametersEv+0x740>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    b41c:	ef a5       	ldd	r30, Y+47	; 0x2f
    b41e:	f8 a9       	ldd	r31, Y+48	; 0x30
    b420:	8e 0f       	add	r24, r30
    b422:	9f 1f       	adc	r25, r31
            if (startAddress > EEPROM_SIZE) {
    b424:	81 30       	cpi	r24, 0x01	; 1
    b426:	f0 e1       	ldi	r31, 0x10	; 16
    b428:	9f 07       	cpc	r25, r31
    b42a:	f0 f4       	brcc	.+60     	; 0xb468 <_ZN4Pads16getPadParametersEv+0x744>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    b42c:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    b430:	90 e0       	ldi	r25, 0x00	; 0
    b432:	6a 96       	adiw	r28, 0x1a	; 26
    b434:	0f ac       	ldd	r0, Y+63	; 0x3f
    b436:	6a 97       	sbiw	r28, 0x1a	; 26
    b438:	02 c0       	rjmp	.+4      	; 0xb43e <_ZN4Pads16getPadParametersEv+0x71a>
    b43a:	95 95       	asr	r25
    b43c:	87 95       	ror	r24
    b43e:	0a 94       	dec	r0
    b440:	e2 f7       	brpl	.-8      	; 0xb43a <_ZN4Pads16getPadParametersEv+0x716>
    b442:	81 70       	andi	r24, 0x01	; 1
    b444:	99 27       	eor	r25, r25
    b446:	11 c0       	rjmp	.+34     	; 0xb46a <_ZN4Pads16getPadParametersEv+0x746>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    b448:	29 89       	ldd	r18, Y+17	; 0x11
    b44a:	3a 89       	ldd	r19, Y+18	; 0x12
    b44c:	82 0f       	add	r24, r18
    b44e:	93 1f       	adc	r25, r19
    b450:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    b454:	0a c0       	rjmp	.+20     	; 0xb46a <_ZN4Pads16getPadParametersEv+0x746>
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    b456:	a9 a9       	ldd	r26, Y+49	; 0x31
    b458:	ba a9       	ldd	r27, Y+50	; 0x32
    b45a:	8a 0f       	add	r24, r26
    b45c:	9b 1f       	adc	r25, r27
    b45e:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    b462:	03 c0       	rjmp	.+6      	; 0xb46a <_ZN4Pads16getPadParametersEv+0x746>
            break;

        }   return 0;
    b464:	84 2d       	mov	r24, r4
    b466:	01 c0       	rjmp	.+2      	; 0xb46a <_ZN4Pads16getPadParametersEv+0x746>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    b468:	84 2d       	mov	r24, r4
    b46a:	ab 96       	adiw	r28, 0x2b	; 43
    b46c:	ee ad       	ldd	r30, Y+62	; 0x3e
    b46e:	ff ad       	ldd	r31, Y+63	; 0x3f
    b470:	ab 97       	sbiw	r28, 0x2b	; 43
    b472:	e4 5a       	subi	r30, 0xA4	; 164
    b474:	ff 4f       	sbci	r31, 0xFF	; 255
            ccYPad[i]                       = configuration.readParameter(CONF_BLOCK_PROGRAM, programGlobalSettingsSection, GLOBAL_PROGRAM_SETTING_CC_Y_ID+(GLOBAL_PROGRAM_SETTINGS*(uint16_t)activeProgram));
    b476:	80 83       	st	Z, r24
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    b478:	f6 01       	movw	r30, r12
    b47a:	20 81       	ld	r18, Z
    b47c:	31 81       	ldd	r19, Z+1	; 0x01
    b47e:	d7 01       	movw	r26, r14
    b480:	8d 91       	ld	r24, X+
    b482:	9c 91       	ld	r25, X
    b484:	82 0f       	add	r24, r18
    b486:	93 1f       	adc	r25, r19
    b488:	05 96       	adiw	r24, 0x05	; 5
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    b48a:	f8 01       	movw	r30, r16
    b48c:	20 81       	ld	r18, Z
    b48e:	21 30       	cpi	r18, 0x01	; 1
    b490:	d1 f0       	breq	.+52     	; 0xb4c6 <_ZN4Pads16getPadParametersEv+0x7a2>
    b492:	18 f0       	brcs	.+6      	; 0xb49a <_ZN4Pads16getPadParametersEv+0x776>
    b494:	22 30       	cpi	r18, 0x02	; 2
    b496:	f1 f0       	breq	.+60     	; 0xb4d4 <_ZN4Pads16getPadParametersEv+0x7b0>
    b498:	24 c0       	rjmp	.+72     	; 0xb4e2 <_ZN4Pads16getPadParametersEv+0x7be>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    b49a:	2b a9       	ldd	r18, Y+51	; 0x33
    b49c:	3c a9       	ldd	r19, Y+52	; 0x34
    b49e:	82 0f       	add	r24, r18
    b4a0:	93 1f       	adc	r25, r19
            if (startAddress > EEPROM_SIZE) {
    b4a2:	81 30       	cpi	r24, 0x01	; 1
    b4a4:	30 e1       	ldi	r19, 0x10	; 16
    b4a6:	93 07       	cpc	r25, r19
    b4a8:	f0 f4       	brcc	.+60     	; 0xb4e6 <_ZN4Pads16getPadParametersEv+0x7c2>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    b4aa:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    b4ae:	90 e0       	ldi	r25, 0x00	; 0
    b4b0:	6c 96       	adiw	r28, 0x1c	; 28
    b4b2:	0f ac       	ldd	r0, Y+63	; 0x3f
    b4b4:	6c 97       	sbiw	r28, 0x1c	; 28
    b4b6:	02 c0       	rjmp	.+4      	; 0xb4bc <_ZN4Pads16getPadParametersEv+0x798>
    b4b8:	95 95       	asr	r25
    b4ba:	87 95       	ror	r24
    b4bc:	0a 94       	dec	r0
    b4be:	e2 f7       	brpl	.-8      	; 0xb4b8 <_ZN4Pads16getPadParametersEv+0x794>
    b4c0:	81 70       	andi	r24, 0x01	; 1
    b4c2:	99 27       	eor	r25, r25
    b4c4:	11 c0       	rjmp	.+34     	; 0xb4e8 <_ZN4Pads16getPadParametersEv+0x7c4>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    b4c6:	ab 89       	ldd	r26, Y+19	; 0x13
    b4c8:	bc 89       	ldd	r27, Y+20	; 0x14
    b4ca:	8a 0f       	add	r24, r26
    b4cc:	9b 1f       	adc	r25, r27
    b4ce:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    b4d2:	0a c0       	rjmp	.+20     	; 0xb4e8 <_ZN4Pads16getPadParametersEv+0x7c4>
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    b4d4:	ed a9       	ldd	r30, Y+53	; 0x35
    b4d6:	fe a9       	ldd	r31, Y+54	; 0x36
    b4d8:	8e 0f       	add	r24, r30
    b4da:	9f 1f       	adc	r25, r31
    b4dc:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    b4e0:	03 c0       	rjmp	.+6      	; 0xb4e8 <_ZN4Pads16getPadParametersEv+0x7c4>
            break;

        }   return 0;
    b4e2:	84 2d       	mov	r24, r4
    b4e4:	01 c0       	rjmp	.+2      	; 0xb4e8 <_ZN4Pads16getPadParametersEv+0x7c4>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    b4e6:	84 2d       	mov	r24, r4
    b4e8:	ab 96       	adiw	r28, 0x2b	; 43
    b4ea:	ee ad       	ldd	r30, Y+62	; 0x3e
    b4ec:	ff ad       	ldd	r31, Y+63	; 0x3f
    b4ee:	ab 97       	sbiw	r28, 0x2b	; 43
    b4f0:	eb 59       	subi	r30, 0x9B	; 155
    b4f2:	ff 4f       	sbci	r31, 0xFF	; 255
            ccXminPad[i]                    = configuration.readParameter(CONF_BLOCK_PROGRAM, programGlobalSettingsSection, GLOBAL_PROGRAM_SETTING_X_MIN_ID+(GLOBAL_PROGRAM_SETTINGS*(uint16_t)activeProgram));
    b4f4:	80 83       	st	Z, r24
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    b4f6:	d6 01       	movw	r26, r12
    b4f8:	2d 91       	ld	r18, X+
    b4fa:	3c 91       	ld	r19, X
    b4fc:	f7 01       	movw	r30, r14
    b4fe:	80 81       	ld	r24, Z
    b500:	91 81       	ldd	r25, Z+1	; 0x01
    b502:	82 0f       	add	r24, r18
    b504:	93 1f       	adc	r25, r19
    b506:	05 96       	adiw	r24, 0x05	; 5
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    b508:	d8 01       	movw	r26, r16
    b50a:	2c 91       	ld	r18, X
    b50c:	21 30       	cpi	r18, 0x01	; 1
    b50e:	d1 f0       	breq	.+52     	; 0xb544 <_ZN4Pads16getPadParametersEv+0x820>
    b510:	18 f0       	brcs	.+6      	; 0xb518 <_ZN4Pads16getPadParametersEv+0x7f4>
    b512:	22 30       	cpi	r18, 0x02	; 2
    b514:	f1 f0       	breq	.+60     	; 0xb552 <_ZN4Pads16getPadParametersEv+0x82e>
    b516:	24 c0       	rjmp	.+72     	; 0xb560 <_ZN4Pads16getPadParametersEv+0x83c>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    b518:	ef a9       	ldd	r30, Y+55	; 0x37
    b51a:	f8 ad       	ldd	r31, Y+56	; 0x38
    b51c:	8e 0f       	add	r24, r30
    b51e:	9f 1f       	adc	r25, r31
            if (startAddress > EEPROM_SIZE) {
    b520:	81 30       	cpi	r24, 0x01	; 1
    b522:	f0 e1       	ldi	r31, 0x10	; 16
    b524:	9f 07       	cpc	r25, r31
    b526:	f0 f4       	brcc	.+60     	; 0xb564 <_ZN4Pads16getPadParametersEv+0x840>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    b528:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    b52c:	90 e0       	ldi	r25, 0x00	; 0
    b52e:	6e 96       	adiw	r28, 0x1e	; 30
    b530:	0f ac       	ldd	r0, Y+63	; 0x3f
    b532:	6e 97       	sbiw	r28, 0x1e	; 30
    b534:	02 c0       	rjmp	.+4      	; 0xb53a <_ZN4Pads16getPadParametersEv+0x816>
    b536:	95 95       	asr	r25
    b538:	87 95       	ror	r24
    b53a:	0a 94       	dec	r0
    b53c:	e2 f7       	brpl	.-8      	; 0xb536 <_ZN4Pads16getPadParametersEv+0x812>
    b53e:	81 70       	andi	r24, 0x01	; 1
    b540:	99 27       	eor	r25, r25
    b542:	11 c0       	rjmp	.+34     	; 0xb566 <_ZN4Pads16getPadParametersEv+0x842>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    b544:	2d 89       	ldd	r18, Y+21	; 0x15
    b546:	3e 89       	ldd	r19, Y+22	; 0x16
    b548:	82 0f       	add	r24, r18
    b54a:	93 1f       	adc	r25, r19
    b54c:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    b550:	0a c0       	rjmp	.+20     	; 0xb566 <_ZN4Pads16getPadParametersEv+0x842>
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    b552:	a9 ad       	ldd	r26, Y+57	; 0x39
    b554:	ba ad       	ldd	r27, Y+58	; 0x3a
    b556:	8a 0f       	add	r24, r26
    b558:	9b 1f       	adc	r25, r27
    b55a:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    b55e:	03 c0       	rjmp	.+6      	; 0xb566 <_ZN4Pads16getPadParametersEv+0x842>
            break;

        }   return 0;
    b560:	84 2d       	mov	r24, r4
    b562:	01 c0       	rjmp	.+2      	; 0xb566 <_ZN4Pads16getPadParametersEv+0x842>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    b564:	84 2d       	mov	r24, r4
    b566:	ab 96       	adiw	r28, 0x2b	; 43
    b568:	ee ad       	ldd	r30, Y+62	; 0x3e
    b56a:	ff ad       	ldd	r31, Y+63	; 0x3f
    b56c:	ab 97       	sbiw	r28, 0x2b	; 43
    b56e:	e2 59       	subi	r30, 0x92	; 146
    b570:	ff 4f       	sbci	r31, 0xFF	; 255
            ccXmaxPad[i]                    = configuration.readParameter(CONF_BLOCK_PROGRAM, programGlobalSettingsSection, GLOBAL_PROGRAM_SETTING_X_MAX_ID+(GLOBAL_PROGRAM_SETTINGS*(uint16_t)activeProgram));
    b572:	80 83       	st	Z, r24
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    b574:	f6 01       	movw	r30, r12
    b576:	20 81       	ld	r18, Z
    b578:	31 81       	ldd	r19, Z+1	; 0x01
    b57a:	d7 01       	movw	r26, r14
    b57c:	8d 91       	ld	r24, X+
    b57e:	9c 91       	ld	r25, X
    b580:	82 0f       	add	r24, r18
    b582:	93 1f       	adc	r25, r19
    b584:	05 96       	adiw	r24, 0x05	; 5
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    b586:	f8 01       	movw	r30, r16
    b588:	20 81       	ld	r18, Z
    b58a:	21 30       	cpi	r18, 0x01	; 1
    b58c:	d1 f0       	breq	.+52     	; 0xb5c2 <_ZN4Pads16getPadParametersEv+0x89e>
    b58e:	18 f0       	brcs	.+6      	; 0xb596 <_ZN4Pads16getPadParametersEv+0x872>
    b590:	22 30       	cpi	r18, 0x02	; 2
    b592:	f1 f0       	breq	.+60     	; 0xb5d0 <_ZN4Pads16getPadParametersEv+0x8ac>
    b594:	24 c0       	rjmp	.+72     	; 0xb5de <_ZN4Pads16getPadParametersEv+0x8ba>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    b596:	2b ad       	ldd	r18, Y+59	; 0x3b
    b598:	3c ad       	ldd	r19, Y+60	; 0x3c
    b59a:	82 0f       	add	r24, r18
    b59c:	93 1f       	adc	r25, r19
            if (startAddress > EEPROM_SIZE) {
    b59e:	81 30       	cpi	r24, 0x01	; 1
    b5a0:	30 e1       	ldi	r19, 0x10	; 16
    b5a2:	93 07       	cpc	r25, r19
    b5a4:	f0 f4       	brcc	.+60     	; 0xb5e2 <_ZN4Pads16getPadParametersEv+0x8be>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    b5a6:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    b5aa:	90 e0       	ldi	r25, 0x00	; 0
    b5ac:	a0 96       	adiw	r28, 0x20	; 32
    b5ae:	0f ac       	ldd	r0, Y+63	; 0x3f
    b5b0:	a0 97       	sbiw	r28, 0x20	; 32
    b5b2:	02 c0       	rjmp	.+4      	; 0xb5b8 <_ZN4Pads16getPadParametersEv+0x894>
    b5b4:	95 95       	asr	r25
    b5b6:	87 95       	ror	r24
    b5b8:	0a 94       	dec	r0
    b5ba:	e2 f7       	brpl	.-8      	; 0xb5b4 <_ZN4Pads16getPadParametersEv+0x890>
    b5bc:	81 70       	andi	r24, 0x01	; 1
    b5be:	99 27       	eor	r25, r25
    b5c0:	11 c0       	rjmp	.+34     	; 0xb5e4 <_ZN4Pads16getPadParametersEv+0x8c0>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    b5c2:	af 89       	ldd	r26, Y+23	; 0x17
    b5c4:	b8 8d       	ldd	r27, Y+24	; 0x18
    b5c6:	8a 0f       	add	r24, r26
    b5c8:	9b 1f       	adc	r25, r27
    b5ca:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    b5ce:	0a c0       	rjmp	.+20     	; 0xb5e4 <_ZN4Pads16getPadParametersEv+0x8c0>
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    b5d0:	ed ad       	ldd	r30, Y+61	; 0x3d
    b5d2:	fe ad       	ldd	r31, Y+62	; 0x3e
    b5d4:	8e 0f       	add	r24, r30
    b5d6:	9f 1f       	adc	r25, r31
    b5d8:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    b5dc:	03 c0       	rjmp	.+6      	; 0xb5e4 <_ZN4Pads16getPadParametersEv+0x8c0>
            break;

        }   return 0;
    b5de:	84 2d       	mov	r24, r4
    b5e0:	01 c0       	rjmp	.+2      	; 0xb5e4 <_ZN4Pads16getPadParametersEv+0x8c0>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    b5e2:	84 2d       	mov	r24, r4
    b5e4:	ab 96       	adiw	r28, 0x2b	; 43
    b5e6:	ee ad       	ldd	r30, Y+62	; 0x3e
    b5e8:	ff ad       	ldd	r31, Y+63	; 0x3f
    b5ea:	ab 97       	sbiw	r28, 0x2b	; 43
    b5ec:	e9 58       	subi	r30, 0x89	; 137
    b5ee:	ff 4f       	sbci	r31, 0xFF	; 255
            ccYminPad[i]                    = configuration.readParameter(CONF_BLOCK_PROGRAM, programGlobalSettingsSection, GLOBAL_PROGRAM_SETTING_Y_MIN_ID+(GLOBAL_PROGRAM_SETTINGS*(uint16_t)activeProgram));
    b5f0:	80 83       	st	Z, r24
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    b5f2:	d6 01       	movw	r26, r12
    b5f4:	2d 91       	ld	r18, X+
    b5f6:	3c 91       	ld	r19, X
    b5f8:	f7 01       	movw	r30, r14
    b5fa:	80 81       	ld	r24, Z
    b5fc:	91 81       	ldd	r25, Z+1	; 0x01
    b5fe:	82 0f       	add	r24, r18
    b600:	93 1f       	adc	r25, r19
    b602:	05 96       	adiw	r24, 0x05	; 5
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    b604:	d8 01       	movw	r26, r16
    b606:	2c 91       	ld	r18, X
    b608:	21 30       	cpi	r18, 0x01	; 1
    b60a:	e1 f0       	breq	.+56     	; 0xb644 <_ZN4Pads16getPadParametersEv+0x920>
    b60c:	18 f0       	brcs	.+6      	; 0xb614 <_ZN4Pads16getPadParametersEv+0x8f0>
    b60e:	22 30       	cpi	r18, 0x02	; 2
    b610:	01 f1       	breq	.+64     	; 0xb652 <_ZN4Pads16getPadParametersEv+0x92e>
    b612:	28 c0       	rjmp	.+80     	; 0xb664 <_ZN4Pads16getPadParametersEv+0x940>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    b614:	21 96       	adiw	r28, 0x01	; 1
    b616:	ee ad       	ldd	r30, Y+62	; 0x3e
    b618:	ff ad       	ldd	r31, Y+63	; 0x3f
    b61a:	21 97       	sbiw	r28, 0x01	; 1
    b61c:	8e 0f       	add	r24, r30
    b61e:	9f 1f       	adc	r25, r31
            if (startAddress > EEPROM_SIZE) {
    b620:	81 30       	cpi	r24, 0x01	; 1
    b622:	f0 e1       	ldi	r31, 0x10	; 16
    b624:	9f 07       	cpc	r25, r31
    b626:	00 f5       	brcc	.+64     	; 0xb668 <_ZN4Pads16getPadParametersEv+0x944>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    b628:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    b62c:	90 e0       	ldi	r25, 0x00	; 0
    b62e:	a2 96       	adiw	r28, 0x22	; 34
    b630:	0f ac       	ldd	r0, Y+63	; 0x3f
    b632:	a2 97       	sbiw	r28, 0x22	; 34
    b634:	02 c0       	rjmp	.+4      	; 0xb63a <_ZN4Pads16getPadParametersEv+0x916>
    b636:	95 95       	asr	r25
    b638:	87 95       	ror	r24
    b63a:	0a 94       	dec	r0
    b63c:	e2 f7       	brpl	.-8      	; 0xb636 <_ZN4Pads16getPadParametersEv+0x912>
    b63e:	81 70       	andi	r24, 0x01	; 1
    b640:	99 27       	eor	r25, r25
    b642:	13 c0       	rjmp	.+38     	; 0xb66a <_ZN4Pads16getPadParametersEv+0x946>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    b644:	29 8d       	ldd	r18, Y+25	; 0x19
    b646:	3a 8d       	ldd	r19, Y+26	; 0x1a
    b648:	82 0f       	add	r24, r18
    b64a:	93 1f       	adc	r25, r19
    b64c:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    b650:	0c c0       	rjmp	.+24     	; 0xb66a <_ZN4Pads16getPadParametersEv+0x946>
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    b652:	23 96       	adiw	r28, 0x03	; 3
    b654:	ae ad       	ldd	r26, Y+62	; 0x3e
    b656:	bf ad       	ldd	r27, Y+63	; 0x3f
    b658:	23 97       	sbiw	r28, 0x03	; 3
    b65a:	8a 0f       	add	r24, r26
    b65c:	9b 1f       	adc	r25, r27
    b65e:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    b662:	03 c0       	rjmp	.+6      	; 0xb66a <_ZN4Pads16getPadParametersEv+0x946>
            break;

        }   return 0;
    b664:	84 2d       	mov	r24, r4
    b666:	01 c0       	rjmp	.+2      	; 0xb66a <_ZN4Pads16getPadParametersEv+0x946>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    b668:	84 2d       	mov	r24, r4
    b66a:	ab 96       	adiw	r28, 0x2b	; 43
    b66c:	ee ad       	ldd	r30, Y+62	; 0x3e
    b66e:	ff ad       	ldd	r31, Y+63	; 0x3f
    b670:	ab 97       	sbiw	r28, 0x2b	; 43
    b672:	e0 58       	subi	r30, 0x80	; 128
    b674:	ff 4f       	sbci	r31, 0xFF	; 255
            ccYmaxPad[i]                    = configuration.readParameter(CONF_BLOCK_PROGRAM, programGlobalSettingsSection, GLOBAL_PROGRAM_SETTING_Y_MAX_ID+(GLOBAL_PROGRAM_SETTINGS*(uint16_t)activeProgram));
    b676:	80 83       	st	Z, r24
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    b678:	f6 01       	movw	r30, r12
    b67a:	20 81       	ld	r18, Z
    b67c:	31 81       	ldd	r19, Z+1	; 0x01
    b67e:	d7 01       	movw	r26, r14
    b680:	8d 91       	ld	r24, X+
    b682:	9c 91       	ld	r25, X
    b684:	82 0f       	add	r24, r18
    b686:	93 1f       	adc	r25, r19
    b688:	05 96       	adiw	r24, 0x05	; 5
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    b68a:	f8 01       	movw	r30, r16
    b68c:	20 81       	ld	r18, Z
    b68e:	21 30       	cpi	r18, 0x01	; 1
    b690:	e1 f0       	breq	.+56     	; 0xb6ca <_ZN4Pads16getPadParametersEv+0x9a6>
    b692:	18 f0       	brcs	.+6      	; 0xb69a <_ZN4Pads16getPadParametersEv+0x976>
    b694:	22 30       	cpi	r18, 0x02	; 2
    b696:	01 f1       	breq	.+64     	; 0xb6d8 <_ZN4Pads16getPadParametersEv+0x9b4>
    b698:	28 c0       	rjmp	.+80     	; 0xb6ea <_ZN4Pads16getPadParametersEv+0x9c6>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    b69a:	25 96       	adiw	r28, 0x05	; 5
    b69c:	2e ad       	ldd	r18, Y+62	; 0x3e
    b69e:	3f ad       	ldd	r19, Y+63	; 0x3f
    b6a0:	25 97       	sbiw	r28, 0x05	; 5
    b6a2:	82 0f       	add	r24, r18
    b6a4:	93 1f       	adc	r25, r19
            if (startAddress > EEPROM_SIZE) {
    b6a6:	81 30       	cpi	r24, 0x01	; 1
    b6a8:	30 e1       	ldi	r19, 0x10	; 16
    b6aa:	93 07       	cpc	r25, r19
    b6ac:	00 f5       	brcc	.+64     	; 0xb6ee <_ZN4Pads16getPadParametersEv+0x9ca>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    b6ae:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    b6b2:	90 e0       	ldi	r25, 0x00	; 0
    b6b4:	a4 96       	adiw	r28, 0x24	; 36
    b6b6:	0f ac       	ldd	r0, Y+63	; 0x3f
    b6b8:	a4 97       	sbiw	r28, 0x24	; 36
    b6ba:	02 c0       	rjmp	.+4      	; 0xb6c0 <_ZN4Pads16getPadParametersEv+0x99c>
    b6bc:	95 95       	asr	r25
    b6be:	87 95       	ror	r24
    b6c0:	0a 94       	dec	r0
    b6c2:	e2 f7       	brpl	.-8      	; 0xb6bc <_ZN4Pads16getPadParametersEv+0x998>
    b6c4:	81 70       	andi	r24, 0x01	; 1
    b6c6:	99 27       	eor	r25, r25
    b6c8:	13 c0       	rjmp	.+38     	; 0xb6f0 <_ZN4Pads16getPadParametersEv+0x9cc>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    b6ca:	ab 8d       	ldd	r26, Y+27	; 0x1b
    b6cc:	bc 8d       	ldd	r27, Y+28	; 0x1c
    b6ce:	8a 0f       	add	r24, r26
    b6d0:	9b 1f       	adc	r25, r27
    b6d2:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    b6d6:	0c c0       	rjmp	.+24     	; 0xb6f0 <_ZN4Pads16getPadParametersEv+0x9cc>
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    b6d8:	27 96       	adiw	r28, 0x07	; 7
    b6da:	ee ad       	ldd	r30, Y+62	; 0x3e
    b6dc:	ff ad       	ldd	r31, Y+63	; 0x3f
    b6de:	27 97       	sbiw	r28, 0x07	; 7
    b6e0:	8e 0f       	add	r24, r30
    b6e2:	9f 1f       	adc	r25, r31
    b6e4:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    b6e8:	03 c0       	rjmp	.+6      	; 0xb6f0 <_ZN4Pads16getPadParametersEv+0x9cc>
            break;

        }   return 0;
    b6ea:	84 2d       	mov	r24, r4
    b6ec:	01 c0       	rjmp	.+2      	; 0xb6f0 <_ZN4Pads16getPadParametersEv+0x9cc>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    b6ee:	84 2d       	mov	r24, r4
    b6f0:	ab 96       	adiw	r28, 0x2b	; 43
    b6f2:	ee ad       	ldd	r30, Y+62	; 0x3e
    b6f4:	ff ad       	ldd	r31, Y+63	; 0x3f
    b6f6:	ab 97       	sbiw	r28, 0x2b	; 43
    b6f8:	e3 55       	subi	r30, 0x53	; 83
    b6fa:	ff 4f       	sbci	r31, 0xFF	; 255
            padCurveX[i]                    = configuration.readParameter(CONF_BLOCK_PROGRAM, programGlobalSettingsSection, GLOBAL_PROGRAM_SETTING_X_CURVE_GAIN_ID+(GLOBAL_PROGRAM_SETTINGS*(uint16_t)activeProgram));
    b6fc:	80 83       	st	Z, r24
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    b6fe:	d6 01       	movw	r26, r12
    b700:	2d 91       	ld	r18, X+
    b702:	3c 91       	ld	r19, X
    b704:	f7 01       	movw	r30, r14
    b706:	80 81       	ld	r24, Z
    b708:	91 81       	ldd	r25, Z+1	; 0x01
    b70a:	82 0f       	add	r24, r18
    b70c:	93 1f       	adc	r25, r19
    b70e:	05 96       	adiw	r24, 0x05	; 5
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    b710:	d8 01       	movw	r26, r16
    b712:	2c 91       	ld	r18, X
    b714:	21 30       	cpi	r18, 0x01	; 1
    b716:	e1 f0       	breq	.+56     	; 0xb750 <_ZN4Pads16getPadParametersEv+0xa2c>
    b718:	18 f0       	brcs	.+6      	; 0xb720 <_ZN4Pads16getPadParametersEv+0x9fc>
    b71a:	22 30       	cpi	r18, 0x02	; 2
    b71c:	01 f1       	breq	.+64     	; 0xb75e <_ZN4Pads16getPadParametersEv+0xa3a>
    b71e:	28 c0       	rjmp	.+80     	; 0xb770 <_ZN4Pads16getPadParametersEv+0xa4c>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    b720:	29 96       	adiw	r28, 0x09	; 9
    b722:	ee ad       	ldd	r30, Y+62	; 0x3e
    b724:	ff ad       	ldd	r31, Y+63	; 0x3f
    b726:	29 97       	sbiw	r28, 0x09	; 9
    b728:	8e 0f       	add	r24, r30
    b72a:	9f 1f       	adc	r25, r31
            if (startAddress > EEPROM_SIZE) {
    b72c:	81 30       	cpi	r24, 0x01	; 1
    b72e:	f0 e1       	ldi	r31, 0x10	; 16
    b730:	9f 07       	cpc	r25, r31
    b732:	00 f5       	brcc	.+64     	; 0xb774 <_ZN4Pads16getPadParametersEv+0xa50>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    b734:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    b738:	90 e0       	ldi	r25, 0x00	; 0
    b73a:	a6 96       	adiw	r28, 0x26	; 38
    b73c:	0f ac       	ldd	r0, Y+63	; 0x3f
    b73e:	a6 97       	sbiw	r28, 0x26	; 38
    b740:	02 c0       	rjmp	.+4      	; 0xb746 <_ZN4Pads16getPadParametersEv+0xa22>
    b742:	95 95       	asr	r25
    b744:	87 95       	ror	r24
    b746:	0a 94       	dec	r0
    b748:	e2 f7       	brpl	.-8      	; 0xb742 <_ZN4Pads16getPadParametersEv+0xa1e>
    b74a:	81 70       	andi	r24, 0x01	; 1
    b74c:	99 27       	eor	r25, r25
    b74e:	13 c0       	rjmp	.+38     	; 0xb776 <_ZN4Pads16getPadParametersEv+0xa52>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    b750:	2d 8d       	ldd	r18, Y+29	; 0x1d
    b752:	3e 8d       	ldd	r19, Y+30	; 0x1e
    b754:	82 0f       	add	r24, r18
    b756:	93 1f       	adc	r25, r19
    b758:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    b75c:	0c c0       	rjmp	.+24     	; 0xb776 <_ZN4Pads16getPadParametersEv+0xa52>
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    b75e:	2b 96       	adiw	r28, 0x0b	; 11
    b760:	ae ad       	ldd	r26, Y+62	; 0x3e
    b762:	bf ad       	ldd	r27, Y+63	; 0x3f
    b764:	2b 97       	sbiw	r28, 0x0b	; 11
    b766:	8a 0f       	add	r24, r26
    b768:	9b 1f       	adc	r25, r27
    b76a:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    b76e:	03 c0       	rjmp	.+6      	; 0xb776 <_ZN4Pads16getPadParametersEv+0xa52>
            break;

        }   return 0;
    b770:	84 2d       	mov	r24, r4
    b772:	01 c0       	rjmp	.+2      	; 0xb776 <_ZN4Pads16getPadParametersEv+0xa52>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    b774:	84 2d       	mov	r24, r4
    b776:	ab 96       	adiw	r28, 0x2b	; 43
    b778:	ee ad       	ldd	r30, Y+62	; 0x3e
    b77a:	ff ad       	ldd	r31, Y+63	; 0x3f
    b77c:	ab 97       	sbiw	r28, 0x2b	; 43
    b77e:	ea 54       	subi	r30, 0x4A	; 74
    b780:	ff 4f       	sbci	r31, 0xFF	; 255
            padCurveY[i]                    = configuration.readParameter(CONF_BLOCK_PROGRAM, programGlobalSettingsSection, GLOBAL_PROGRAM_SETTING_Y_CURVE_GAIN_ID+(GLOBAL_PROGRAM_SETTINGS*(uint16_t)activeProgram));
    b782:	80 83       	st	Z, r24
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    b784:	f6 01       	movw	r30, r12
    b786:	20 81       	ld	r18, Z
    b788:	31 81       	ldd	r19, Z+1	; 0x01
    b78a:	d7 01       	movw	r26, r14
    b78c:	8d 91       	ld	r24, X+
    b78e:	9c 91       	ld	r25, X
    b790:	82 0f       	add	r24, r18
    b792:	93 1f       	adc	r25, r19
    b794:	05 96       	adiw	r24, 0x05	; 5
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    b796:	f8 01       	movw	r30, r16
    b798:	20 81       	ld	r18, Z
    b79a:	21 30       	cpi	r18, 0x01	; 1
    b79c:	e1 f0       	breq	.+56     	; 0xb7d6 <_ZN4Pads16getPadParametersEv+0xab2>
    b79e:	18 f0       	brcs	.+6      	; 0xb7a6 <_ZN4Pads16getPadParametersEv+0xa82>
    b7a0:	22 30       	cpi	r18, 0x02	; 2
    b7a2:	01 f1       	breq	.+64     	; 0xb7e4 <_ZN4Pads16getPadParametersEv+0xac0>
    b7a4:	28 c0       	rjmp	.+80     	; 0xb7f6 <_ZN4Pads16getPadParametersEv+0xad2>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    b7a6:	2d 96       	adiw	r28, 0x0d	; 13
    b7a8:	2e ad       	ldd	r18, Y+62	; 0x3e
    b7aa:	3f ad       	ldd	r19, Y+63	; 0x3f
    b7ac:	2d 97       	sbiw	r28, 0x0d	; 13
    b7ae:	82 0f       	add	r24, r18
    b7b0:	93 1f       	adc	r25, r19
            if (startAddress > EEPROM_SIZE) {
    b7b2:	81 30       	cpi	r24, 0x01	; 1
    b7b4:	30 e1       	ldi	r19, 0x10	; 16
    b7b6:	93 07       	cpc	r25, r19
    b7b8:	00 f5       	brcc	.+64     	; 0xb7fa <_ZN4Pads16getPadParametersEv+0xad6>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    b7ba:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    b7be:	90 e0       	ldi	r25, 0x00	; 0
    b7c0:	a8 96       	adiw	r28, 0x28	; 40
    b7c2:	0f ac       	ldd	r0, Y+63	; 0x3f
    b7c4:	a8 97       	sbiw	r28, 0x28	; 40
    b7c6:	02 c0       	rjmp	.+4      	; 0xb7cc <_ZN4Pads16getPadParametersEv+0xaa8>
    b7c8:	95 95       	asr	r25
    b7ca:	87 95       	ror	r24
    b7cc:	0a 94       	dec	r0
    b7ce:	e2 f7       	brpl	.-8      	; 0xb7c8 <_ZN4Pads16getPadParametersEv+0xaa4>
    b7d0:	81 70       	andi	r24, 0x01	; 1
    b7d2:	99 27       	eor	r25, r25
    b7d4:	13 c0       	rjmp	.+38     	; 0xb7fc <_ZN4Pads16getPadParametersEv+0xad8>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    b7d6:	a9 81       	ldd	r26, Y+1	; 0x01
    b7d8:	ba 81       	ldd	r27, Y+2	; 0x02
    b7da:	8a 0f       	add	r24, r26
    b7dc:	9b 1f       	adc	r25, r27
    b7de:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    b7e2:	0c c0       	rjmp	.+24     	; 0xb7fc <_ZN4Pads16getPadParametersEv+0xad8>
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    b7e4:	2f 96       	adiw	r28, 0x0f	; 15
    b7e6:	ee ad       	ldd	r30, Y+62	; 0x3e
    b7e8:	ff ad       	ldd	r31, Y+63	; 0x3f
    b7ea:	2f 97       	sbiw	r28, 0x0f	; 15
    b7ec:	8e 0f       	add	r24, r30
    b7ee:	9f 1f       	adc	r25, r31
    b7f0:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    b7f4:	03 c0       	rjmp	.+6      	; 0xb7fc <_ZN4Pads16getPadParametersEv+0xad8>
            break;

        }   return 0;
    b7f6:	84 2d       	mov	r24, r4
    b7f8:	01 c0       	rjmp	.+2      	; 0xb7fc <_ZN4Pads16getPadParametersEv+0xad8>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    b7fa:	84 2d       	mov	r24, r4
    b7fc:	ab 96       	adiw	r28, 0x2b	; 43
    b7fe:	ee ad       	ldd	r30, Y+62	; 0x3e
    b800:	ff ad       	ldd	r31, Y+63	; 0x3f
    b802:	ab 97       	sbiw	r28, 0x2b	; 43
    b804:	e2 57       	subi	r30, 0x72	; 114
    b806:	fe 4f       	sbci	r31, 0xFE	; 254
            midiChannel[i]                  = configuration.readParameter(CONF_BLOCK_PROGRAM, programGlobalSettingsSection, GLOBAL_PROGRAM_SETTING_MIDI_CHANNEL_ID+(GLOBAL_PROGRAM_SETTINGS*(uint16_t)activeProgram));
    b808:	80 83       	st	Z, r24
        //apply global settings to pads
        #if MODE_SERIAL > 0
            printf("All pad parameters are global - split is off\n");
        #endif

        for (int i=0; i<MAX_PADS; i++)    {
    b80a:	ff ef       	ldi	r31, 0xFF	; 255
    b80c:	8f 1a       	sub	r8, r31
    b80e:	9f 0a       	sbc	r9, r31
    b810:	2f ef       	ldi	r18, 0xFF	; 255
    b812:	a2 1a       	sub	r10, r18
    b814:	b2 0a       	sbc	r11, r18
    b816:	39 e0       	ldi	r19, 0x09	; 9
    b818:	83 16       	cp	r8, r19
    b81a:	91 04       	cpc	r9, r1
    b81c:	09 f0       	breq	.+2      	; 0xb820 <_ZN4Pads16getPadParametersEv+0xafc>
    b81e:	97 cc       	rjmp	.-1746   	; 0xb14e <_ZN4Pads16getPadParametersEv+0x42a>
    b820:	3d c4       	rjmp	.+2170   	; 0xc09c <_ZN4Pads16getPadParametersEv+0x1378>
        #endif

        //pads have individual settings
        for (int i=0; i<MAX_PADS; i++)    {

                xSendEnabled[i]             = configuration.readParameter(CONF_BLOCK_PROGRAM, programLocalSettingsSection, (LOCAL_PROGRAM_SETTINGS*i+LOCAL_PROGRAM_SETTING_X_ENABLE_ID)+(LOCAL_PROGRAM_SETTINGS*MAX_PADS*(uint16_t)activeProgram));
    b822:	0b 81       	ldd	r16, Y+3	; 0x03
    b824:	1c 81       	ldd	r17, Y+4	; 0x04
    b826:	8d 81       	ldd	r24, Y+5	; 0x05
    b828:	9e 81       	ldd	r25, Y+6	; 0x06
    b82a:	08 0f       	add	r16, r24
    b82c:	19 1f       	adc	r17, r25
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    b82e:	d5 01       	movw	r26, r10
    b830:	8d 91       	ld	r24, X+
    b832:	9c 91       	ld	r25, X
    b834:	f6 01       	movw	r30, r12
    b836:	20 81       	ld	r18, Z
    b838:	31 81       	ldd	r19, Z+1	; 0x01
    b83a:	82 0f       	add	r24, r18
    b83c:	93 1f       	adc	r25, r19
    b83e:	05 96       	adiw	r24, 0x05	; 5
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    b840:	d7 01       	movw	r26, r14
    b842:	2c 91       	ld	r18, X
    b844:	21 30       	cpi	r18, 0x01	; 1
    b846:	11 f1       	breq	.+68     	; 0xb88c <_ZN4Pads16getPadParametersEv+0xb68>
    b848:	18 f0       	brcs	.+6      	; 0xb850 <_ZN4Pads16getPadParametersEv+0xb2c>
    b84a:	22 30       	cpi	r18, 0x02	; 2
    b84c:	29 f1       	breq	.+74     	; 0xb898 <_ZN4Pads16getPadParametersEv+0xb74>
    b84e:	29 c0       	rjmp	.+82     	; 0xb8a2 <_ZN4Pads16getPadParametersEv+0xb7e>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    b850:	16 95       	lsr	r17
    b852:	07 95       	ror	r16
    b854:	16 95       	lsr	r17
    b856:	07 95       	ror	r16
    b858:	16 95       	lsr	r17
    b85a:	07 95       	ror	r16
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    b85c:	80 0f       	add	r24, r16
    b85e:	91 1d       	adc	r25, r1
            if (startAddress > EEPROM_SIZE) {
    b860:	81 30       	cpi	r24, 0x01	; 1
    b862:	b0 e1       	ldi	r27, 0x10	; 16
    b864:	9b 07       	cpc	r25, r27
    b866:	00 f5       	brcc	.+64     	; 0xb8a8 <_ZN4Pads16getPadParametersEv+0xb84>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    b868:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    b86c:	90 e0       	ldi	r25, 0x00	; 0

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    b86e:	00 0f       	add	r16, r16
    b870:	00 0f       	add	r16, r16
    b872:	00 0f       	add	r16, r16
    b874:	2d 81       	ldd	r18, Y+5	; 0x05
    b876:	eb 81       	ldd	r30, Y+3	; 0x03
    b878:	2e 0f       	add	r18, r30
    b87a:	20 1b       	sub	r18, r16
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    b87c:	02 c0       	rjmp	.+4      	; 0xb882 <_ZN4Pads16getPadParametersEv+0xb5e>
    b87e:	95 95       	asr	r25
    b880:	87 95       	ror	r24
    b882:	2a 95       	dec	r18
    b884:	e2 f7       	brpl	.-8      	; 0xb87e <_ZN4Pads16getPadParametersEv+0xb5a>
    b886:	81 70       	andi	r24, 0x01	; 1
    b888:	99 27       	eor	r25, r25
    b88a:	10 c0       	rjmp	.+32     	; 0xb8ac <_ZN4Pads16getPadParametersEv+0xb88>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    b88c:	80 0f       	add	r24, r16
    b88e:	91 1f       	adc	r25, r17
    b890:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    b894:	90 e0       	ldi	r25, 0x00	; 0
    b896:	0a c0       	rjmp	.+20     	; 0xb8ac <_ZN4Pads16getPadParametersEv+0xb88>
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    b898:	88 0d       	add	r24, r8
    b89a:	99 1d       	adc	r25, r9
    b89c:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    b8a0:	05 c0       	rjmp	.+10     	; 0xb8ac <_ZN4Pads16getPadParametersEv+0xb88>
            break;

        }   return 0;
    b8a2:	85 2d       	mov	r24, r5
    b8a4:	94 2d       	mov	r25, r4
    b8a6:	02 c0       	rjmp	.+4      	; 0xb8ac <_ZN4Pads16getPadParametersEv+0xb88>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    b8a8:	85 2d       	mov	r24, r5
    b8aa:	94 2d       	mov	r25, r4
    b8ac:	81 01       	movw	r16, r2
    b8ae:	f1 01       	movw	r30, r2
    b8b0:	e7 57       	subi	r30, 0x77	; 119
    b8b2:	ff 4f       	sbci	r31, 0xFF	; 255
    b8b4:	21 e0       	ldi	r18, 0x01	; 1
    b8b6:	89 2b       	or	r24, r25
    b8b8:	09 f4       	brne	.+2      	; 0xb8bc <_ZN4Pads16getPadParametersEv+0xb98>
    b8ba:	20 e0       	ldi	r18, 0x00	; 0
    b8bc:	20 83       	st	Z, r18
    b8be:	69 85       	ldd	r22, Y+9	; 0x09
    b8c0:	7a 85       	ldd	r23, Y+10	; 0x0a
    b8c2:	2d 81       	ldd	r18, Y+5	; 0x05
    b8c4:	3e 81       	ldd	r19, Y+6	; 0x06
    b8c6:	62 0f       	add	r22, r18
    b8c8:	73 1f       	adc	r23, r19
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    b8ca:	d5 01       	movw	r26, r10
    b8cc:	8d 91       	ld	r24, X+
    b8ce:	9c 91       	ld	r25, X
    b8d0:	f6 01       	movw	r30, r12
    b8d2:	20 81       	ld	r18, Z
    b8d4:	31 81       	ldd	r19, Z+1	; 0x01
    b8d6:	28 0f       	add	r18, r24
    b8d8:	39 1f       	adc	r19, r25
    b8da:	a9 01       	movw	r20, r18
    b8dc:	4b 5f       	subi	r20, 0xFB	; 251
    b8de:	5f 4f       	sbci	r21, 0xFF	; 255
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    b8e0:	d7 01       	movw	r26, r14
    b8e2:	9c 91       	ld	r25, X
    b8e4:	91 30       	cpi	r25, 0x01	; 1
    b8e6:	41 f1       	breq	.+80     	; 0xb938 <_ZN4Pads16getPadParametersEv+0xc14>
    b8e8:	18 f0       	brcs	.+6      	; 0xb8f0 <_ZN4Pads16getPadParametersEv+0xbcc>
    b8ea:	92 30       	cpi	r25, 0x02	; 2
    b8ec:	61 f1       	breq	.+88     	; 0xb946 <_ZN4Pads16getPadParametersEv+0xc22>
    b8ee:	32 c0       	rjmp	.+100    	; 0xb954 <_ZN4Pads16getPadParametersEv+0xc30>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    b8f0:	fb 01       	movw	r30, r22
    b8f2:	f6 95       	lsr	r31
    b8f4:	e7 95       	ror	r30
    b8f6:	f6 95       	lsr	r31
    b8f8:	e7 95       	ror	r30
    b8fa:	f6 95       	lsr	r31
    b8fc:	e7 95       	ror	r30
    b8fe:	fa 83       	std	Y+2, r31	; 0x02
    b900:	e9 83       	std	Y+1, r30	; 0x01
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    b902:	ca 01       	movw	r24, r20
    b904:	f9 81       	ldd	r31, Y+1	; 0x01
    b906:	8f 0f       	add	r24, r31
    b908:	91 1d       	adc	r25, r1
            if (startAddress > EEPROM_SIZE) {
    b90a:	81 30       	cpi	r24, 0x01	; 1
    b90c:	20 e1       	ldi	r18, 0x10	; 16
    b90e:	92 07       	cpc	r25, r18
    b910:	20 f5       	brcc	.+72     	; 0xb95a <_ZN4Pads16getPadParametersEv+0xc36>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    b912:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    b916:	90 e0       	ldi	r25, 0x00	; 0

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    b918:	29 81       	ldd	r18, Y+1	; 0x01
    b91a:	22 0f       	add	r18, r18
    b91c:	22 0f       	add	r18, r18
    b91e:	22 0f       	add	r18, r18
    b920:	3d 81       	ldd	r19, Y+5	; 0x05
    b922:	49 85       	ldd	r20, Y+9	; 0x09
    b924:	34 0f       	add	r19, r20
    b926:	32 1b       	sub	r19, r18
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    b928:	02 c0       	rjmp	.+4      	; 0xb92e <_ZN4Pads16getPadParametersEv+0xc0a>
    b92a:	95 95       	asr	r25
    b92c:	87 95       	ror	r24
    b92e:	3a 95       	dec	r19
    b930:	e2 f7       	brpl	.-8      	; 0xb92a <_ZN4Pads16getPadParametersEv+0xc06>
    b932:	81 70       	andi	r24, 0x01	; 1
    b934:	99 27       	eor	r25, r25
    b936:	13 c0       	rjmp	.+38     	; 0xb95e <_ZN4Pads16getPadParametersEv+0xc3a>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    b938:	ca 01       	movw	r24, r20
    b93a:	86 0f       	add	r24, r22
    b93c:	97 1f       	adc	r25, r23
    b93e:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    b942:	90 e0       	ldi	r25, 0x00	; 0
    b944:	0c c0       	rjmp	.+24     	; 0xb95e <_ZN4Pads16getPadParametersEv+0xc3a>
    b946:	c9 01       	movw	r24, r18
    b948:	07 96       	adiw	r24, 0x07	; 7
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    b94a:	88 0d       	add	r24, r8
    b94c:	99 1d       	adc	r25, r9
    b94e:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    b952:	05 c0       	rjmp	.+10     	; 0xb95e <_ZN4Pads16getPadParametersEv+0xc3a>
            break;

        }   return 0;
    b954:	85 2d       	mov	r24, r5
    b956:	94 2d       	mov	r25, r4
    b958:	02 c0       	rjmp	.+4      	; 0xb95e <_ZN4Pads16getPadParametersEv+0xc3a>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    b95a:	85 2d       	mov	r24, r5
    b95c:	94 2d       	mov	r25, r4
    b95e:	f8 01       	movw	r30, r16
    b960:	ee 56       	subi	r30, 0x6E	; 110
    b962:	ff 4f       	sbci	r31, 0xFF	; 255
                ySendEnabled[i]             = configuration.readParameter(CONF_BLOCK_PROGRAM, programLocalSettingsSection, (LOCAL_PROGRAM_SETTINGS*i+LOCAL_PROGRAM_SETTING_Y_ENABLE_ID)+(LOCAL_PROGRAM_SETTINGS*MAX_PADS*(uint16_t)activeProgram));
    b964:	21 e0       	ldi	r18, 0x01	; 1
    b966:	89 2b       	or	r24, r25
    b968:	09 f4       	brne	.+2      	; 0xb96c <_ZN4Pads16getPadParametersEv+0xc48>
    b96a:	20 e0       	ldi	r18, 0x00	; 0
    b96c:	20 83       	st	Z, r18
    b96e:	6b 85       	ldd	r22, Y+11	; 0x0b
    b970:	7c 85       	ldd	r23, Y+12	; 0x0c
    b972:	8d 81       	ldd	r24, Y+5	; 0x05
    b974:	9e 81       	ldd	r25, Y+6	; 0x06
    b976:	68 0f       	add	r22, r24
    b978:	79 1f       	adc	r23, r25
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    b97a:	d5 01       	movw	r26, r10
    b97c:	8d 91       	ld	r24, X+
    b97e:	9c 91       	ld	r25, X
    b980:	f6 01       	movw	r30, r12
    b982:	20 81       	ld	r18, Z
    b984:	31 81       	ldd	r19, Z+1	; 0x01
    b986:	28 0f       	add	r18, r24
    b988:	39 1f       	adc	r19, r25
    b98a:	a9 01       	movw	r20, r18
    b98c:	4b 5f       	subi	r20, 0xFB	; 251
    b98e:	5f 4f       	sbci	r21, 0xFF	; 255
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    b990:	d7 01       	movw	r26, r14
    b992:	9c 91       	ld	r25, X
    b994:	91 30       	cpi	r25, 0x01	; 1
    b996:	41 f1       	breq	.+80     	; 0xb9e8 <_ZN4Pads16getPadParametersEv+0xcc4>
    b998:	18 f0       	brcs	.+6      	; 0xb9a0 <_ZN4Pads16getPadParametersEv+0xc7c>
    b99a:	92 30       	cpi	r25, 0x02	; 2
    b99c:	61 f1       	breq	.+88     	; 0xb9f6 <_ZN4Pads16getPadParametersEv+0xcd2>
    b99e:	32 c0       	rjmp	.+100    	; 0xba04 <_ZN4Pads16getPadParametersEv+0xce0>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    b9a0:	fb 01       	movw	r30, r22
    b9a2:	f6 95       	lsr	r31
    b9a4:	e7 95       	ror	r30
    b9a6:	f6 95       	lsr	r31
    b9a8:	e7 95       	ror	r30
    b9aa:	f6 95       	lsr	r31
    b9ac:	e7 95       	ror	r30
    b9ae:	fa 83       	std	Y+2, r31	; 0x02
    b9b0:	e9 83       	std	Y+1, r30	; 0x01
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    b9b2:	ca 01       	movw	r24, r20
    b9b4:	f9 81       	ldd	r31, Y+1	; 0x01
    b9b6:	8f 0f       	add	r24, r31
    b9b8:	91 1d       	adc	r25, r1
            if (startAddress > EEPROM_SIZE) {
    b9ba:	81 30       	cpi	r24, 0x01	; 1
    b9bc:	20 e1       	ldi	r18, 0x10	; 16
    b9be:	92 07       	cpc	r25, r18
    b9c0:	20 f5       	brcc	.+72     	; 0xba0a <_ZN4Pads16getPadParametersEv+0xce6>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    b9c2:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    b9c6:	90 e0       	ldi	r25, 0x00	; 0

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    b9c8:	29 81       	ldd	r18, Y+1	; 0x01
    b9ca:	22 0f       	add	r18, r18
    b9cc:	22 0f       	add	r18, r18
    b9ce:	22 0f       	add	r18, r18
    b9d0:	3d 81       	ldd	r19, Y+5	; 0x05
    b9d2:	4b 85       	ldd	r20, Y+11	; 0x0b
    b9d4:	34 0f       	add	r19, r20
    b9d6:	32 1b       	sub	r19, r18
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    b9d8:	02 c0       	rjmp	.+4      	; 0xb9de <_ZN4Pads16getPadParametersEv+0xcba>
    b9da:	95 95       	asr	r25
    b9dc:	87 95       	ror	r24
    b9de:	3a 95       	dec	r19
    b9e0:	e2 f7       	brpl	.-8      	; 0xb9da <_ZN4Pads16getPadParametersEv+0xcb6>
    b9e2:	81 70       	andi	r24, 0x01	; 1
    b9e4:	99 27       	eor	r25, r25
    b9e6:	13 c0       	rjmp	.+38     	; 0xba0e <_ZN4Pads16getPadParametersEv+0xcea>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    b9e8:	ca 01       	movw	r24, r20
    b9ea:	86 0f       	add	r24, r22
    b9ec:	97 1f       	adc	r25, r23
    b9ee:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    b9f2:	90 e0       	ldi	r25, 0x00	; 0
    b9f4:	0c c0       	rjmp	.+24     	; 0xba0e <_ZN4Pads16getPadParametersEv+0xcea>
    b9f6:	c9 01       	movw	r24, r18
    b9f8:	09 96       	adiw	r24, 0x09	; 9
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    b9fa:	88 0d       	add	r24, r8
    b9fc:	99 1d       	adc	r25, r9
    b9fe:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    ba02:	05 c0       	rjmp	.+10     	; 0xba0e <_ZN4Pads16getPadParametersEv+0xcea>
            break;

        }   return 0;
    ba04:	85 2d       	mov	r24, r5
    ba06:	94 2d       	mov	r25, r4
    ba08:	02 c0       	rjmp	.+4      	; 0xba0e <_ZN4Pads16getPadParametersEv+0xcea>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    ba0a:	85 2d       	mov	r24, r5
    ba0c:	94 2d       	mov	r25, r4
    ba0e:	f8 01       	movw	r30, r16
    ba10:	e5 56       	subi	r30, 0x65	; 101
    ba12:	ff 4f       	sbci	r31, 0xFF	; 255
                noteSendEnabled[i]          = configuration.readParameter(CONF_BLOCK_PROGRAM, programLocalSettingsSection, (LOCAL_PROGRAM_SETTINGS*i+LOCAL_PROGRAM_SETTING_NOTE_ENABLE_ID)+(LOCAL_PROGRAM_SETTINGS*MAX_PADS*(uint16_t)activeProgram));
    ba14:	21 e0       	ldi	r18, 0x01	; 1
    ba16:	89 2b       	or	r24, r25
    ba18:	09 f4       	brne	.+2      	; 0xba1c <_ZN4Pads16getPadParametersEv+0xcf8>
    ba1a:	20 e0       	ldi	r18, 0x00	; 0
    ba1c:	20 83       	st	Z, r18
    ba1e:	6d 85       	ldd	r22, Y+13	; 0x0d
    ba20:	7e 85       	ldd	r23, Y+14	; 0x0e
    ba22:	8d 81       	ldd	r24, Y+5	; 0x05
    ba24:	9e 81       	ldd	r25, Y+6	; 0x06
    ba26:	68 0f       	add	r22, r24
    ba28:	79 1f       	adc	r23, r25
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    ba2a:	d5 01       	movw	r26, r10
    ba2c:	8d 91       	ld	r24, X+
    ba2e:	9c 91       	ld	r25, X
    ba30:	f6 01       	movw	r30, r12
    ba32:	20 81       	ld	r18, Z
    ba34:	31 81       	ldd	r19, Z+1	; 0x01
    ba36:	28 0f       	add	r18, r24
    ba38:	39 1f       	adc	r19, r25
    ba3a:	a9 01       	movw	r20, r18
    ba3c:	4b 5f       	subi	r20, 0xFB	; 251
    ba3e:	5f 4f       	sbci	r21, 0xFF	; 255
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    ba40:	d7 01       	movw	r26, r14
    ba42:	9c 91       	ld	r25, X
    ba44:	91 30       	cpi	r25, 0x01	; 1
    ba46:	41 f1       	breq	.+80     	; 0xba98 <_ZN4Pads16getPadParametersEv+0xd74>
    ba48:	18 f0       	brcs	.+6      	; 0xba50 <_ZN4Pads16getPadParametersEv+0xd2c>
    ba4a:	92 30       	cpi	r25, 0x02	; 2
    ba4c:	61 f1       	breq	.+88     	; 0xbaa6 <_ZN4Pads16getPadParametersEv+0xd82>
    ba4e:	32 c0       	rjmp	.+100    	; 0xbab4 <_ZN4Pads16getPadParametersEv+0xd90>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    ba50:	fb 01       	movw	r30, r22
    ba52:	f6 95       	lsr	r31
    ba54:	e7 95       	ror	r30
    ba56:	f6 95       	lsr	r31
    ba58:	e7 95       	ror	r30
    ba5a:	f6 95       	lsr	r31
    ba5c:	e7 95       	ror	r30
    ba5e:	fa 83       	std	Y+2, r31	; 0x02
    ba60:	e9 83       	std	Y+1, r30	; 0x01
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    ba62:	ca 01       	movw	r24, r20
    ba64:	f9 81       	ldd	r31, Y+1	; 0x01
    ba66:	8f 0f       	add	r24, r31
    ba68:	91 1d       	adc	r25, r1
            if (startAddress > EEPROM_SIZE) {
    ba6a:	81 30       	cpi	r24, 0x01	; 1
    ba6c:	20 e1       	ldi	r18, 0x10	; 16
    ba6e:	92 07       	cpc	r25, r18
    ba70:	20 f5       	brcc	.+72     	; 0xbaba <_ZN4Pads16getPadParametersEv+0xd96>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    ba72:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    ba76:	90 e0       	ldi	r25, 0x00	; 0

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    ba78:	29 81       	ldd	r18, Y+1	; 0x01
    ba7a:	22 0f       	add	r18, r18
    ba7c:	22 0f       	add	r18, r18
    ba7e:	22 0f       	add	r18, r18
    ba80:	3d 81       	ldd	r19, Y+5	; 0x05
    ba82:	4d 85       	ldd	r20, Y+13	; 0x0d
    ba84:	34 0f       	add	r19, r20
    ba86:	32 1b       	sub	r19, r18
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    ba88:	02 c0       	rjmp	.+4      	; 0xba8e <_ZN4Pads16getPadParametersEv+0xd6a>
    ba8a:	95 95       	asr	r25
    ba8c:	87 95       	ror	r24
    ba8e:	3a 95       	dec	r19
    ba90:	e2 f7       	brpl	.-8      	; 0xba8a <_ZN4Pads16getPadParametersEv+0xd66>
    ba92:	81 70       	andi	r24, 0x01	; 1
    ba94:	99 27       	eor	r25, r25
    ba96:	13 c0       	rjmp	.+38     	; 0xbabe <_ZN4Pads16getPadParametersEv+0xd9a>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    ba98:	cb 01       	movw	r24, r22
    ba9a:	84 0f       	add	r24, r20
    ba9c:	95 1f       	adc	r25, r21
    ba9e:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    baa2:	90 e0       	ldi	r25, 0x00	; 0
    baa4:	0c c0       	rjmp	.+24     	; 0xbabe <_ZN4Pads16getPadParametersEv+0xd9a>
    baa6:	c9 01       	movw	r24, r18
    baa8:	0b 96       	adiw	r24, 0x0b	; 11
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    baaa:	88 0d       	add	r24, r8
    baac:	99 1d       	adc	r25, r9
    baae:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    bab2:	05 c0       	rjmp	.+10     	; 0xbabe <_ZN4Pads16getPadParametersEv+0xd9a>
            break;

        }   return 0;
    bab4:	85 2d       	mov	r24, r5
    bab6:	94 2d       	mov	r25, r4
    bab8:	02 c0       	rjmp	.+4      	; 0xbabe <_ZN4Pads16getPadParametersEv+0xd9a>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    baba:	85 2d       	mov	r24, r5
    babc:	94 2d       	mov	r25, r4
    babe:	f8 01       	movw	r30, r16
    bac0:	ec 55       	subi	r30, 0x5C	; 92
    bac2:	ff 4f       	sbci	r31, 0xFF	; 255
                aftertouchSendEnabled[i]    = configuration.readParameter(CONF_BLOCK_PROGRAM, programLocalSettingsSection, (LOCAL_PROGRAM_SETTINGS*i+LOCAL_PROGRAM_SETTING_AFTERTOUCH_ENABLE_ID)+(LOCAL_PROGRAM_SETTINGS*MAX_PADS*(uint16_t)activeProgram));
    bac4:	21 e0       	ldi	r18, 0x01	; 1
    bac6:	89 2b       	or	r24, r25
    bac8:	09 f4       	brne	.+2      	; 0xbacc <_ZN4Pads16getPadParametersEv+0xda8>
    baca:	20 e0       	ldi	r18, 0x00	; 0
    bacc:	20 83       	st	Z, r18
    bace:	6f 85       	ldd	r22, Y+15	; 0x0f
    bad0:	78 89       	ldd	r23, Y+16	; 0x10
    bad2:	8d 81       	ldd	r24, Y+5	; 0x05
    bad4:	9e 81       	ldd	r25, Y+6	; 0x06
    bad6:	68 0f       	add	r22, r24
    bad8:	79 1f       	adc	r23, r25
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    bada:	d5 01       	movw	r26, r10
    badc:	8d 91       	ld	r24, X+
    bade:	9c 91       	ld	r25, X
    bae0:	f6 01       	movw	r30, r12
    bae2:	20 81       	ld	r18, Z
    bae4:	31 81       	ldd	r19, Z+1	; 0x01
    bae6:	28 0f       	add	r18, r24
    bae8:	39 1f       	adc	r19, r25
    baea:	a9 01       	movw	r20, r18
    baec:	4b 5f       	subi	r20, 0xFB	; 251
    baee:	5f 4f       	sbci	r21, 0xFF	; 255
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    baf0:	d7 01       	movw	r26, r14
    baf2:	9c 91       	ld	r25, X
    baf4:	91 30       	cpi	r25, 0x01	; 1
    baf6:	41 f1       	breq	.+80     	; 0xbb48 <_ZN4Pads16getPadParametersEv+0xe24>
    baf8:	18 f0       	brcs	.+6      	; 0xbb00 <_ZN4Pads16getPadParametersEv+0xddc>
    bafa:	92 30       	cpi	r25, 0x02	; 2
    bafc:	59 f1       	breq	.+86     	; 0xbb54 <_ZN4Pads16getPadParametersEv+0xe30>
    bafe:	31 c0       	rjmp	.+98     	; 0xbb62 <_ZN4Pads16getPadParametersEv+0xe3e>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    bb00:	fb 01       	movw	r30, r22
    bb02:	f6 95       	lsr	r31
    bb04:	e7 95       	ror	r30
    bb06:	f6 95       	lsr	r31
    bb08:	e7 95       	ror	r30
    bb0a:	f6 95       	lsr	r31
    bb0c:	e7 95       	ror	r30
    bb0e:	fa 83       	std	Y+2, r31	; 0x02
    bb10:	e9 83       	std	Y+1, r30	; 0x01
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    bb12:	ca 01       	movw	r24, r20
    bb14:	f9 81       	ldd	r31, Y+1	; 0x01
    bb16:	8f 0f       	add	r24, r31
    bb18:	91 1d       	adc	r25, r1
            if (startAddress > EEPROM_SIZE) {
    bb1a:	81 30       	cpi	r24, 0x01	; 1
    bb1c:	20 e1       	ldi	r18, 0x10	; 16
    bb1e:	92 07       	cpc	r25, r18
    bb20:	10 f5       	brcc	.+68     	; 0xbb66 <_ZN4Pads16getPadParametersEv+0xe42>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    bb22:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    bb26:	90 e0       	ldi	r25, 0x00	; 0

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    bb28:	29 81       	ldd	r18, Y+1	; 0x01
    bb2a:	22 0f       	add	r18, r18
    bb2c:	22 0f       	add	r18, r18
    bb2e:	22 0f       	add	r18, r18
    bb30:	3d 81       	ldd	r19, Y+5	; 0x05
    bb32:	4f 85       	ldd	r20, Y+15	; 0x0f
    bb34:	34 0f       	add	r19, r20
    bb36:	32 1b       	sub	r19, r18
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    bb38:	02 c0       	rjmp	.+4      	; 0xbb3e <_ZN4Pads16getPadParametersEv+0xe1a>
    bb3a:	95 95       	asr	r25
    bb3c:	87 95       	ror	r24
    bb3e:	3a 95       	dec	r19
    bb40:	e2 f7       	brpl	.-8      	; 0xbb3a <_ZN4Pads16getPadParametersEv+0xe16>
    bb42:	81 70       	andi	r24, 0x01	; 1
    bb44:	99 27       	eor	r25, r25
    bb46:	10 c0       	rjmp	.+32     	; 0xbb68 <_ZN4Pads16getPadParametersEv+0xe44>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    bb48:	cb 01       	movw	r24, r22
    bb4a:	84 0f       	add	r24, r20
    bb4c:	95 1f       	adc	r25, r21
    bb4e:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    bb52:	0a c0       	rjmp	.+20     	; 0xbb68 <_ZN4Pads16getPadParametersEv+0xe44>
    bb54:	c9 01       	movw	r24, r18
    bb56:	0f 96       	adiw	r24, 0x0f	; 15
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    bb58:	88 0d       	add	r24, r8
    bb5a:	99 1d       	adc	r25, r9
    bb5c:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    bb60:	03 c0       	rjmp	.+6      	; 0xbb68 <_ZN4Pads16getPadParametersEv+0xe44>
            break;

        }   return 0;
    bb62:	85 2d       	mov	r24, r5
    bb64:	01 c0       	rjmp	.+2      	; 0xbb68 <_ZN4Pads16getPadParametersEv+0xe44>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    bb66:	85 2d       	mov	r24, r5
    bb68:	f8 01       	movw	r30, r16
    bb6a:	ed 5a       	subi	r30, 0xAD	; 173
    bb6c:	ff 4f       	sbci	r31, 0xFF	; 255
                ccXPad[i]                   = configuration.readParameter(CONF_BLOCK_PROGRAM, programLocalSettingsSection, (LOCAL_PROGRAM_SETTINGS*i+LOCAL_PROGRAM_SETTING_CC_X_ID)+(LOCAL_PROGRAM_SETTINGS*MAX_PADS*(uint16_t)activeProgram));
    bb6e:	80 83       	st	Z, r24
    bb70:	69 89       	ldd	r22, Y+17	; 0x11
    bb72:	7a 89       	ldd	r23, Y+18	; 0x12
    bb74:	8d 81       	ldd	r24, Y+5	; 0x05
    bb76:	9e 81       	ldd	r25, Y+6	; 0x06
    bb78:	68 0f       	add	r22, r24
    bb7a:	79 1f       	adc	r23, r25
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    bb7c:	d5 01       	movw	r26, r10
    bb7e:	8d 91       	ld	r24, X+
    bb80:	9c 91       	ld	r25, X
    bb82:	f6 01       	movw	r30, r12
    bb84:	20 81       	ld	r18, Z
    bb86:	31 81       	ldd	r19, Z+1	; 0x01
    bb88:	28 0f       	add	r18, r24
    bb8a:	39 1f       	adc	r19, r25
    bb8c:	a9 01       	movw	r20, r18
    bb8e:	4b 5f       	subi	r20, 0xFB	; 251
    bb90:	5f 4f       	sbci	r21, 0xFF	; 255
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    bb92:	d7 01       	movw	r26, r14
    bb94:	9c 91       	ld	r25, X
    bb96:	91 30       	cpi	r25, 0x01	; 1
    bb98:	41 f1       	breq	.+80     	; 0xbbea <_ZN4Pads16getPadParametersEv+0xec6>
    bb9a:	18 f0       	brcs	.+6      	; 0xbba2 <_ZN4Pads16getPadParametersEv+0xe7e>
    bb9c:	92 30       	cpi	r25, 0x02	; 2
    bb9e:	59 f1       	breq	.+86     	; 0xbbf6 <_ZN4Pads16getPadParametersEv+0xed2>
    bba0:	31 c0       	rjmp	.+98     	; 0xbc04 <_ZN4Pads16getPadParametersEv+0xee0>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    bba2:	fb 01       	movw	r30, r22
    bba4:	f6 95       	lsr	r31
    bba6:	e7 95       	ror	r30
    bba8:	f6 95       	lsr	r31
    bbaa:	e7 95       	ror	r30
    bbac:	f6 95       	lsr	r31
    bbae:	e7 95       	ror	r30
    bbb0:	fa 83       	std	Y+2, r31	; 0x02
    bbb2:	e9 83       	std	Y+1, r30	; 0x01
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    bbb4:	ca 01       	movw	r24, r20
    bbb6:	f9 81       	ldd	r31, Y+1	; 0x01
    bbb8:	8f 0f       	add	r24, r31
    bbba:	91 1d       	adc	r25, r1
            if (startAddress > EEPROM_SIZE) {
    bbbc:	81 30       	cpi	r24, 0x01	; 1
    bbbe:	20 e1       	ldi	r18, 0x10	; 16
    bbc0:	92 07       	cpc	r25, r18
    bbc2:	10 f5       	brcc	.+68     	; 0xbc08 <_ZN4Pads16getPadParametersEv+0xee4>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    bbc4:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    bbc8:	90 e0       	ldi	r25, 0x00	; 0

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    bbca:	29 81       	ldd	r18, Y+1	; 0x01
    bbcc:	22 0f       	add	r18, r18
    bbce:	22 0f       	add	r18, r18
    bbd0:	22 0f       	add	r18, r18
    bbd2:	3d 81       	ldd	r19, Y+5	; 0x05
    bbd4:	49 89       	ldd	r20, Y+17	; 0x11
    bbd6:	34 0f       	add	r19, r20
    bbd8:	32 1b       	sub	r19, r18
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    bbda:	02 c0       	rjmp	.+4      	; 0xbbe0 <_ZN4Pads16getPadParametersEv+0xebc>
    bbdc:	95 95       	asr	r25
    bbde:	87 95       	ror	r24
    bbe0:	3a 95       	dec	r19
    bbe2:	e2 f7       	brpl	.-8      	; 0xbbdc <_ZN4Pads16getPadParametersEv+0xeb8>
    bbe4:	81 70       	andi	r24, 0x01	; 1
    bbe6:	99 27       	eor	r25, r25
    bbe8:	10 c0       	rjmp	.+32     	; 0xbc0a <_ZN4Pads16getPadParametersEv+0xee6>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    bbea:	cb 01       	movw	r24, r22
    bbec:	84 0f       	add	r24, r20
    bbee:	95 1f       	adc	r25, r21
    bbf0:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    bbf4:	0a c0       	rjmp	.+20     	; 0xbc0a <_ZN4Pads16getPadParametersEv+0xee6>
    bbf6:	c9 01       	movw	r24, r18
    bbf8:	41 96       	adiw	r24, 0x11	; 17
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    bbfa:	88 0d       	add	r24, r8
    bbfc:	99 1d       	adc	r25, r9
    bbfe:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    bc02:	03 c0       	rjmp	.+6      	; 0xbc0a <_ZN4Pads16getPadParametersEv+0xee6>
            break;

        }   return 0;
    bc04:	85 2d       	mov	r24, r5
    bc06:	01 c0       	rjmp	.+2      	; 0xbc0a <_ZN4Pads16getPadParametersEv+0xee6>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    bc08:	85 2d       	mov	r24, r5
    bc0a:	f8 01       	movw	r30, r16
    bc0c:	e4 5a       	subi	r30, 0xA4	; 164
    bc0e:	ff 4f       	sbci	r31, 0xFF	; 255
                ccYPad[i]                   = configuration.readParameter(CONF_BLOCK_PROGRAM, programLocalSettingsSection, (LOCAL_PROGRAM_SETTINGS*i+LOCAL_PROGRAM_SETTING_CC_Y_ID)+(LOCAL_PROGRAM_SETTINGS*MAX_PADS*(uint16_t)activeProgram));
    bc10:	80 83       	st	Z, r24
    bc12:	6b 89       	ldd	r22, Y+19	; 0x13
    bc14:	7c 89       	ldd	r23, Y+20	; 0x14
    bc16:	8d 81       	ldd	r24, Y+5	; 0x05
    bc18:	9e 81       	ldd	r25, Y+6	; 0x06
    bc1a:	68 0f       	add	r22, r24
    bc1c:	79 1f       	adc	r23, r25
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    bc1e:	d5 01       	movw	r26, r10
    bc20:	8d 91       	ld	r24, X+
    bc22:	9c 91       	ld	r25, X
    bc24:	f6 01       	movw	r30, r12
    bc26:	20 81       	ld	r18, Z
    bc28:	31 81       	ldd	r19, Z+1	; 0x01
    bc2a:	28 0f       	add	r18, r24
    bc2c:	39 1f       	adc	r19, r25
    bc2e:	a9 01       	movw	r20, r18
    bc30:	4b 5f       	subi	r20, 0xFB	; 251
    bc32:	5f 4f       	sbci	r21, 0xFF	; 255
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    bc34:	d7 01       	movw	r26, r14
    bc36:	9c 91       	ld	r25, X
    bc38:	91 30       	cpi	r25, 0x01	; 1
    bc3a:	41 f1       	breq	.+80     	; 0xbc8c <_ZN4Pads16getPadParametersEv+0xf68>
    bc3c:	18 f0       	brcs	.+6      	; 0xbc44 <_ZN4Pads16getPadParametersEv+0xf20>
    bc3e:	92 30       	cpi	r25, 0x02	; 2
    bc40:	59 f1       	breq	.+86     	; 0xbc98 <_ZN4Pads16getPadParametersEv+0xf74>
    bc42:	31 c0       	rjmp	.+98     	; 0xbca6 <_ZN4Pads16getPadParametersEv+0xf82>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    bc44:	fb 01       	movw	r30, r22
    bc46:	f6 95       	lsr	r31
    bc48:	e7 95       	ror	r30
    bc4a:	f6 95       	lsr	r31
    bc4c:	e7 95       	ror	r30
    bc4e:	f6 95       	lsr	r31
    bc50:	e7 95       	ror	r30
    bc52:	fa 83       	std	Y+2, r31	; 0x02
    bc54:	e9 83       	std	Y+1, r30	; 0x01
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    bc56:	ca 01       	movw	r24, r20
    bc58:	f9 81       	ldd	r31, Y+1	; 0x01
    bc5a:	8f 0f       	add	r24, r31
    bc5c:	91 1d       	adc	r25, r1
            if (startAddress > EEPROM_SIZE) {
    bc5e:	81 30       	cpi	r24, 0x01	; 1
    bc60:	20 e1       	ldi	r18, 0x10	; 16
    bc62:	92 07       	cpc	r25, r18
    bc64:	10 f5       	brcc	.+68     	; 0xbcaa <_ZN4Pads16getPadParametersEv+0xf86>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    bc66:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    bc6a:	90 e0       	ldi	r25, 0x00	; 0

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    bc6c:	29 81       	ldd	r18, Y+1	; 0x01
    bc6e:	22 0f       	add	r18, r18
    bc70:	22 0f       	add	r18, r18
    bc72:	22 0f       	add	r18, r18
    bc74:	3d 81       	ldd	r19, Y+5	; 0x05
    bc76:	4b 89       	ldd	r20, Y+19	; 0x13
    bc78:	34 0f       	add	r19, r20
    bc7a:	32 1b       	sub	r19, r18
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    bc7c:	02 c0       	rjmp	.+4      	; 0xbc82 <_ZN4Pads16getPadParametersEv+0xf5e>
    bc7e:	95 95       	asr	r25
    bc80:	87 95       	ror	r24
    bc82:	3a 95       	dec	r19
    bc84:	e2 f7       	brpl	.-8      	; 0xbc7e <_ZN4Pads16getPadParametersEv+0xf5a>
    bc86:	81 70       	andi	r24, 0x01	; 1
    bc88:	99 27       	eor	r25, r25
    bc8a:	10 c0       	rjmp	.+32     	; 0xbcac <_ZN4Pads16getPadParametersEv+0xf88>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    bc8c:	cb 01       	movw	r24, r22
    bc8e:	84 0f       	add	r24, r20
    bc90:	95 1f       	adc	r25, r21
    bc92:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    bc96:	0a c0       	rjmp	.+20     	; 0xbcac <_ZN4Pads16getPadParametersEv+0xf88>
    bc98:	c9 01       	movw	r24, r18
    bc9a:	43 96       	adiw	r24, 0x13	; 19
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    bc9c:	88 0d       	add	r24, r8
    bc9e:	99 1d       	adc	r25, r9
    bca0:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    bca4:	03 c0       	rjmp	.+6      	; 0xbcac <_ZN4Pads16getPadParametersEv+0xf88>
            break;

        }   return 0;
    bca6:	85 2d       	mov	r24, r5
    bca8:	01 c0       	rjmp	.+2      	; 0xbcac <_ZN4Pads16getPadParametersEv+0xf88>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    bcaa:	85 2d       	mov	r24, r5
    bcac:	f8 01       	movw	r30, r16
    bcae:	eb 59       	subi	r30, 0x9B	; 155
    bcb0:	ff 4f       	sbci	r31, 0xFF	; 255
                ccXminPad[i]                = configuration.readParameter(CONF_BLOCK_PROGRAM, programLocalSettingsSection, (LOCAL_PROGRAM_SETTINGS*i+LOCAL_PROGRAM_SETTING_X_MIN_ID)+(LOCAL_PROGRAM_SETTINGS*MAX_PADS*(uint16_t)activeProgram));
    bcb2:	80 83       	st	Z, r24
    bcb4:	6d 89       	ldd	r22, Y+21	; 0x15
    bcb6:	7e 89       	ldd	r23, Y+22	; 0x16
    bcb8:	8d 81       	ldd	r24, Y+5	; 0x05
    bcba:	9e 81       	ldd	r25, Y+6	; 0x06
    bcbc:	68 0f       	add	r22, r24
    bcbe:	79 1f       	adc	r23, r25
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    bcc0:	d5 01       	movw	r26, r10
    bcc2:	8d 91       	ld	r24, X+
    bcc4:	9c 91       	ld	r25, X
    bcc6:	f6 01       	movw	r30, r12
    bcc8:	20 81       	ld	r18, Z
    bcca:	31 81       	ldd	r19, Z+1	; 0x01
    bccc:	28 0f       	add	r18, r24
    bcce:	39 1f       	adc	r19, r25
    bcd0:	a9 01       	movw	r20, r18
    bcd2:	4b 5f       	subi	r20, 0xFB	; 251
    bcd4:	5f 4f       	sbci	r21, 0xFF	; 255
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    bcd6:	d7 01       	movw	r26, r14
    bcd8:	9c 91       	ld	r25, X
    bcda:	91 30       	cpi	r25, 0x01	; 1
    bcdc:	41 f1       	breq	.+80     	; 0xbd2e <_ZN4Pads16getPadParametersEv+0x100a>
    bcde:	18 f0       	brcs	.+6      	; 0xbce6 <_ZN4Pads16getPadParametersEv+0xfc2>
    bce0:	92 30       	cpi	r25, 0x02	; 2
    bce2:	59 f1       	breq	.+86     	; 0xbd3a <_ZN4Pads16getPadParametersEv+0x1016>
    bce4:	31 c0       	rjmp	.+98     	; 0xbd48 <_ZN4Pads16getPadParametersEv+0x1024>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    bce6:	fb 01       	movw	r30, r22
    bce8:	f6 95       	lsr	r31
    bcea:	e7 95       	ror	r30
    bcec:	f6 95       	lsr	r31
    bcee:	e7 95       	ror	r30
    bcf0:	f6 95       	lsr	r31
    bcf2:	e7 95       	ror	r30
    bcf4:	fa 83       	std	Y+2, r31	; 0x02
    bcf6:	e9 83       	std	Y+1, r30	; 0x01
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    bcf8:	ca 01       	movw	r24, r20
    bcfa:	f9 81       	ldd	r31, Y+1	; 0x01
    bcfc:	8f 0f       	add	r24, r31
    bcfe:	91 1d       	adc	r25, r1
            if (startAddress > EEPROM_SIZE) {
    bd00:	81 30       	cpi	r24, 0x01	; 1
    bd02:	20 e1       	ldi	r18, 0x10	; 16
    bd04:	92 07       	cpc	r25, r18
    bd06:	10 f5       	brcc	.+68     	; 0xbd4c <_ZN4Pads16getPadParametersEv+0x1028>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    bd08:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    bd0c:	90 e0       	ldi	r25, 0x00	; 0

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    bd0e:	29 81       	ldd	r18, Y+1	; 0x01
    bd10:	22 0f       	add	r18, r18
    bd12:	22 0f       	add	r18, r18
    bd14:	22 0f       	add	r18, r18
    bd16:	3d 81       	ldd	r19, Y+5	; 0x05
    bd18:	4d 89       	ldd	r20, Y+21	; 0x15
    bd1a:	34 0f       	add	r19, r20
    bd1c:	32 1b       	sub	r19, r18
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    bd1e:	02 c0       	rjmp	.+4      	; 0xbd24 <_ZN4Pads16getPadParametersEv+0x1000>
    bd20:	95 95       	asr	r25
    bd22:	87 95       	ror	r24
    bd24:	3a 95       	dec	r19
    bd26:	e2 f7       	brpl	.-8      	; 0xbd20 <_ZN4Pads16getPadParametersEv+0xffc>
    bd28:	81 70       	andi	r24, 0x01	; 1
    bd2a:	99 27       	eor	r25, r25
    bd2c:	10 c0       	rjmp	.+32     	; 0xbd4e <_ZN4Pads16getPadParametersEv+0x102a>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    bd2e:	cb 01       	movw	r24, r22
    bd30:	84 0f       	add	r24, r20
    bd32:	95 1f       	adc	r25, r21
    bd34:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    bd38:	0a c0       	rjmp	.+20     	; 0xbd4e <_ZN4Pads16getPadParametersEv+0x102a>
    bd3a:	c9 01       	movw	r24, r18
    bd3c:	45 96       	adiw	r24, 0x15	; 21
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    bd3e:	88 0d       	add	r24, r8
    bd40:	99 1d       	adc	r25, r9
    bd42:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    bd46:	03 c0       	rjmp	.+6      	; 0xbd4e <_ZN4Pads16getPadParametersEv+0x102a>
            break;

        }   return 0;
    bd48:	85 2d       	mov	r24, r5
    bd4a:	01 c0       	rjmp	.+2      	; 0xbd4e <_ZN4Pads16getPadParametersEv+0x102a>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    bd4c:	85 2d       	mov	r24, r5
    bd4e:	f8 01       	movw	r30, r16
    bd50:	e2 59       	subi	r30, 0x92	; 146
    bd52:	ff 4f       	sbci	r31, 0xFF	; 255
                ccXmaxPad[i]                = configuration.readParameter(CONF_BLOCK_PROGRAM, programLocalSettingsSection, (LOCAL_PROGRAM_SETTINGS*i+LOCAL_PROGRAM_SETTING_X_MAX_ID)+(LOCAL_PROGRAM_SETTINGS*MAX_PADS*(uint16_t)activeProgram));
    bd54:	80 83       	st	Z, r24
    bd56:	6f 89       	ldd	r22, Y+23	; 0x17
    bd58:	78 8d       	ldd	r23, Y+24	; 0x18
    bd5a:	8d 81       	ldd	r24, Y+5	; 0x05
    bd5c:	9e 81       	ldd	r25, Y+6	; 0x06
    bd5e:	68 0f       	add	r22, r24
    bd60:	79 1f       	adc	r23, r25
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    bd62:	d5 01       	movw	r26, r10
    bd64:	8d 91       	ld	r24, X+
    bd66:	9c 91       	ld	r25, X
    bd68:	f6 01       	movw	r30, r12
    bd6a:	20 81       	ld	r18, Z
    bd6c:	31 81       	ldd	r19, Z+1	; 0x01
    bd6e:	28 0f       	add	r18, r24
    bd70:	39 1f       	adc	r19, r25
    bd72:	a9 01       	movw	r20, r18
    bd74:	4b 5f       	subi	r20, 0xFB	; 251
    bd76:	5f 4f       	sbci	r21, 0xFF	; 255
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    bd78:	d7 01       	movw	r26, r14
    bd7a:	9c 91       	ld	r25, X
    bd7c:	91 30       	cpi	r25, 0x01	; 1
    bd7e:	41 f1       	breq	.+80     	; 0xbdd0 <_ZN4Pads16getPadParametersEv+0x10ac>
    bd80:	18 f0       	brcs	.+6      	; 0xbd88 <_ZN4Pads16getPadParametersEv+0x1064>
    bd82:	92 30       	cpi	r25, 0x02	; 2
    bd84:	59 f1       	breq	.+86     	; 0xbddc <_ZN4Pads16getPadParametersEv+0x10b8>
    bd86:	31 c0       	rjmp	.+98     	; 0xbdea <_ZN4Pads16getPadParametersEv+0x10c6>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    bd88:	fb 01       	movw	r30, r22
    bd8a:	f6 95       	lsr	r31
    bd8c:	e7 95       	ror	r30
    bd8e:	f6 95       	lsr	r31
    bd90:	e7 95       	ror	r30
    bd92:	f6 95       	lsr	r31
    bd94:	e7 95       	ror	r30
    bd96:	fa 83       	std	Y+2, r31	; 0x02
    bd98:	e9 83       	std	Y+1, r30	; 0x01
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    bd9a:	ca 01       	movw	r24, r20
    bd9c:	f9 81       	ldd	r31, Y+1	; 0x01
    bd9e:	8f 0f       	add	r24, r31
    bda0:	91 1d       	adc	r25, r1
            if (startAddress > EEPROM_SIZE) {
    bda2:	81 30       	cpi	r24, 0x01	; 1
    bda4:	20 e1       	ldi	r18, 0x10	; 16
    bda6:	92 07       	cpc	r25, r18
    bda8:	10 f5       	brcc	.+68     	; 0xbdee <_ZN4Pads16getPadParametersEv+0x10ca>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    bdaa:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    bdae:	90 e0       	ldi	r25, 0x00	; 0

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    bdb0:	29 81       	ldd	r18, Y+1	; 0x01
    bdb2:	22 0f       	add	r18, r18
    bdb4:	22 0f       	add	r18, r18
    bdb6:	22 0f       	add	r18, r18
    bdb8:	3d 81       	ldd	r19, Y+5	; 0x05
    bdba:	4f 89       	ldd	r20, Y+23	; 0x17
    bdbc:	34 0f       	add	r19, r20
    bdbe:	32 1b       	sub	r19, r18
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    bdc0:	02 c0       	rjmp	.+4      	; 0xbdc6 <_ZN4Pads16getPadParametersEv+0x10a2>
    bdc2:	95 95       	asr	r25
    bdc4:	87 95       	ror	r24
    bdc6:	3a 95       	dec	r19
    bdc8:	e2 f7       	brpl	.-8      	; 0xbdc2 <_ZN4Pads16getPadParametersEv+0x109e>
    bdca:	81 70       	andi	r24, 0x01	; 1
    bdcc:	99 27       	eor	r25, r25
    bdce:	10 c0       	rjmp	.+32     	; 0xbdf0 <_ZN4Pads16getPadParametersEv+0x10cc>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    bdd0:	cb 01       	movw	r24, r22
    bdd2:	84 0f       	add	r24, r20
    bdd4:	95 1f       	adc	r25, r21
    bdd6:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    bdda:	0a c0       	rjmp	.+20     	; 0xbdf0 <_ZN4Pads16getPadParametersEv+0x10cc>
    bddc:	c9 01       	movw	r24, r18
    bdde:	47 96       	adiw	r24, 0x17	; 23
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    bde0:	88 0d       	add	r24, r8
    bde2:	99 1d       	adc	r25, r9
    bde4:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    bde8:	03 c0       	rjmp	.+6      	; 0xbdf0 <_ZN4Pads16getPadParametersEv+0x10cc>
            break;

        }   return 0;
    bdea:	85 2d       	mov	r24, r5
    bdec:	01 c0       	rjmp	.+2      	; 0xbdf0 <_ZN4Pads16getPadParametersEv+0x10cc>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    bdee:	85 2d       	mov	r24, r5
    bdf0:	f8 01       	movw	r30, r16
    bdf2:	e9 58       	subi	r30, 0x89	; 137
    bdf4:	ff 4f       	sbci	r31, 0xFF	; 255
                ccYminPad[i]                = configuration.readParameter(CONF_BLOCK_PROGRAM, programLocalSettingsSection, (LOCAL_PROGRAM_SETTINGS*i+LOCAL_PROGRAM_SETTING_Y_MIN_ID)+(LOCAL_PROGRAM_SETTINGS*MAX_PADS*(uint16_t)activeProgram));
    bdf6:	80 83       	st	Z, r24
    bdf8:	69 8d       	ldd	r22, Y+25	; 0x19
    bdfa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    bdfc:	8d 81       	ldd	r24, Y+5	; 0x05
    bdfe:	9e 81       	ldd	r25, Y+6	; 0x06
    be00:	68 0f       	add	r22, r24
    be02:	79 1f       	adc	r23, r25
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    be04:	d5 01       	movw	r26, r10
    be06:	8d 91       	ld	r24, X+
    be08:	9c 91       	ld	r25, X
    be0a:	f6 01       	movw	r30, r12
    be0c:	20 81       	ld	r18, Z
    be0e:	31 81       	ldd	r19, Z+1	; 0x01
    be10:	28 0f       	add	r18, r24
    be12:	39 1f       	adc	r19, r25
    be14:	a9 01       	movw	r20, r18
    be16:	4b 5f       	subi	r20, 0xFB	; 251
    be18:	5f 4f       	sbci	r21, 0xFF	; 255
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    be1a:	d7 01       	movw	r26, r14
    be1c:	9c 91       	ld	r25, X
    be1e:	91 30       	cpi	r25, 0x01	; 1
    be20:	41 f1       	breq	.+80     	; 0xbe72 <_ZN4Pads16getPadParametersEv+0x114e>
    be22:	18 f0       	brcs	.+6      	; 0xbe2a <_ZN4Pads16getPadParametersEv+0x1106>
    be24:	92 30       	cpi	r25, 0x02	; 2
    be26:	59 f1       	breq	.+86     	; 0xbe7e <_ZN4Pads16getPadParametersEv+0x115a>
    be28:	31 c0       	rjmp	.+98     	; 0xbe8c <_ZN4Pads16getPadParametersEv+0x1168>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    be2a:	fb 01       	movw	r30, r22
    be2c:	f6 95       	lsr	r31
    be2e:	e7 95       	ror	r30
    be30:	f6 95       	lsr	r31
    be32:	e7 95       	ror	r30
    be34:	f6 95       	lsr	r31
    be36:	e7 95       	ror	r30
    be38:	fa 83       	std	Y+2, r31	; 0x02
    be3a:	e9 83       	std	Y+1, r30	; 0x01
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    be3c:	ca 01       	movw	r24, r20
    be3e:	f9 81       	ldd	r31, Y+1	; 0x01
    be40:	8f 0f       	add	r24, r31
    be42:	91 1d       	adc	r25, r1
            if (startAddress > EEPROM_SIZE) {
    be44:	81 30       	cpi	r24, 0x01	; 1
    be46:	20 e1       	ldi	r18, 0x10	; 16
    be48:	92 07       	cpc	r25, r18
    be4a:	10 f5       	brcc	.+68     	; 0xbe90 <_ZN4Pads16getPadParametersEv+0x116c>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    be4c:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    be50:	90 e0       	ldi	r25, 0x00	; 0

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    be52:	29 81       	ldd	r18, Y+1	; 0x01
    be54:	22 0f       	add	r18, r18
    be56:	22 0f       	add	r18, r18
    be58:	22 0f       	add	r18, r18
    be5a:	3d 81       	ldd	r19, Y+5	; 0x05
    be5c:	49 8d       	ldd	r20, Y+25	; 0x19
    be5e:	34 0f       	add	r19, r20
    be60:	32 1b       	sub	r19, r18
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    be62:	02 c0       	rjmp	.+4      	; 0xbe68 <_ZN4Pads16getPadParametersEv+0x1144>
    be64:	95 95       	asr	r25
    be66:	87 95       	ror	r24
    be68:	3a 95       	dec	r19
    be6a:	e2 f7       	brpl	.-8      	; 0xbe64 <_ZN4Pads16getPadParametersEv+0x1140>
    be6c:	81 70       	andi	r24, 0x01	; 1
    be6e:	99 27       	eor	r25, r25
    be70:	10 c0       	rjmp	.+32     	; 0xbe92 <_ZN4Pads16getPadParametersEv+0x116e>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    be72:	ca 01       	movw	r24, r20
    be74:	86 0f       	add	r24, r22
    be76:	97 1f       	adc	r25, r23
    be78:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    be7c:	0a c0       	rjmp	.+20     	; 0xbe92 <_ZN4Pads16getPadParametersEv+0x116e>
    be7e:	c9 01       	movw	r24, r18
    be80:	49 96       	adiw	r24, 0x19	; 25
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    be82:	88 0d       	add	r24, r8
    be84:	99 1d       	adc	r25, r9
    be86:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    be8a:	03 c0       	rjmp	.+6      	; 0xbe92 <_ZN4Pads16getPadParametersEv+0x116e>
            break;

        }   return 0;
    be8c:	85 2d       	mov	r24, r5
    be8e:	01 c0       	rjmp	.+2      	; 0xbe92 <_ZN4Pads16getPadParametersEv+0x116e>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    be90:	85 2d       	mov	r24, r5
    be92:	f8 01       	movw	r30, r16
    be94:	e0 58       	subi	r30, 0x80	; 128
    be96:	ff 4f       	sbci	r31, 0xFF	; 255
                ccYmaxPad[i]                = configuration.readParameter(CONF_BLOCK_PROGRAM, programLocalSettingsSection, (LOCAL_PROGRAM_SETTINGS*i+LOCAL_PROGRAM_SETTING_Y_MAX_ID)+(LOCAL_PROGRAM_SETTINGS*MAX_PADS*(uint16_t)activeProgram));
    be98:	80 83       	st	Z, r24
    be9a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    be9c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    be9e:	8d 81       	ldd	r24, Y+5	; 0x05
    bea0:	9e 81       	ldd	r25, Y+6	; 0x06
    bea2:	68 0f       	add	r22, r24
    bea4:	79 1f       	adc	r23, r25
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    bea6:	d5 01       	movw	r26, r10
    bea8:	8d 91       	ld	r24, X+
    beaa:	9c 91       	ld	r25, X
    beac:	f6 01       	movw	r30, r12
    beae:	20 81       	ld	r18, Z
    beb0:	31 81       	ldd	r19, Z+1	; 0x01
    beb2:	28 0f       	add	r18, r24
    beb4:	39 1f       	adc	r19, r25
    beb6:	a9 01       	movw	r20, r18
    beb8:	4b 5f       	subi	r20, 0xFB	; 251
    beba:	5f 4f       	sbci	r21, 0xFF	; 255
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    bebc:	d7 01       	movw	r26, r14
    bebe:	9c 91       	ld	r25, X
    bec0:	91 30       	cpi	r25, 0x01	; 1
    bec2:	41 f1       	breq	.+80     	; 0xbf14 <_ZN4Pads16getPadParametersEv+0x11f0>
    bec4:	18 f0       	brcs	.+6      	; 0xbecc <_ZN4Pads16getPadParametersEv+0x11a8>
    bec6:	92 30       	cpi	r25, 0x02	; 2
    bec8:	59 f1       	breq	.+86     	; 0xbf20 <_ZN4Pads16getPadParametersEv+0x11fc>
    beca:	31 c0       	rjmp	.+98     	; 0xbf2e <_ZN4Pads16getPadParametersEv+0x120a>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    becc:	fb 01       	movw	r30, r22
    bece:	f6 95       	lsr	r31
    bed0:	e7 95       	ror	r30
    bed2:	f6 95       	lsr	r31
    bed4:	e7 95       	ror	r30
    bed6:	f6 95       	lsr	r31
    bed8:	e7 95       	ror	r30
    beda:	fa 83       	std	Y+2, r31	; 0x02
    bedc:	e9 83       	std	Y+1, r30	; 0x01
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    bede:	ca 01       	movw	r24, r20
    bee0:	f9 81       	ldd	r31, Y+1	; 0x01
    bee2:	8f 0f       	add	r24, r31
    bee4:	91 1d       	adc	r25, r1
            if (startAddress > EEPROM_SIZE) {
    bee6:	81 30       	cpi	r24, 0x01	; 1
    bee8:	20 e1       	ldi	r18, 0x10	; 16
    beea:	92 07       	cpc	r25, r18
    beec:	10 f5       	brcc	.+68     	; 0xbf32 <_ZN4Pads16getPadParametersEv+0x120e>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    beee:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    bef2:	90 e0       	ldi	r25, 0x00	; 0

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    bef4:	29 81       	ldd	r18, Y+1	; 0x01
    bef6:	22 0f       	add	r18, r18
    bef8:	22 0f       	add	r18, r18
    befa:	22 0f       	add	r18, r18
    befc:	3d 81       	ldd	r19, Y+5	; 0x05
    befe:	4b 8d       	ldd	r20, Y+27	; 0x1b
    bf00:	34 0f       	add	r19, r20
    bf02:	32 1b       	sub	r19, r18
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    bf04:	02 c0       	rjmp	.+4      	; 0xbf0a <_ZN4Pads16getPadParametersEv+0x11e6>
    bf06:	95 95       	asr	r25
    bf08:	87 95       	ror	r24
    bf0a:	3a 95       	dec	r19
    bf0c:	e2 f7       	brpl	.-8      	; 0xbf06 <_ZN4Pads16getPadParametersEv+0x11e2>
    bf0e:	81 70       	andi	r24, 0x01	; 1
    bf10:	99 27       	eor	r25, r25
    bf12:	10 c0       	rjmp	.+32     	; 0xbf34 <_ZN4Pads16getPadParametersEv+0x1210>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    bf14:	cb 01       	movw	r24, r22
    bf16:	84 0f       	add	r24, r20
    bf18:	95 1f       	adc	r25, r21
    bf1a:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    bf1e:	0a c0       	rjmp	.+20     	; 0xbf34 <_ZN4Pads16getPadParametersEv+0x1210>
    bf20:	c9 01       	movw	r24, r18
    bf22:	4b 96       	adiw	r24, 0x1b	; 27
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    bf24:	88 0d       	add	r24, r8
    bf26:	99 1d       	adc	r25, r9
    bf28:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    bf2c:	03 c0       	rjmp	.+6      	; 0xbf34 <_ZN4Pads16getPadParametersEv+0x1210>
            break;

        }   return 0;
    bf2e:	85 2d       	mov	r24, r5
    bf30:	01 c0       	rjmp	.+2      	; 0xbf34 <_ZN4Pads16getPadParametersEv+0x1210>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    bf32:	85 2d       	mov	r24, r5
    bf34:	f8 01       	movw	r30, r16
    bf36:	e3 55       	subi	r30, 0x53	; 83
    bf38:	ff 4f       	sbci	r31, 0xFF	; 255
                padCurveX[i]                = configuration.readParameter(CONF_BLOCK_PROGRAM, programLocalSettingsSection, (LOCAL_PROGRAM_SETTINGS*i+LOCAL_PROGRAM_SETTING_X_CURVE_GAIN_ID)+(LOCAL_PROGRAM_SETTINGS*MAX_PADS*(uint16_t)activeProgram));
    bf3a:	80 83       	st	Z, r24
    bf3c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    bf3e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    bf40:	8d 81       	ldd	r24, Y+5	; 0x05
    bf42:	9e 81       	ldd	r25, Y+6	; 0x06
    bf44:	68 0f       	add	r22, r24
    bf46:	79 1f       	adc	r23, r25
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    bf48:	d5 01       	movw	r26, r10
    bf4a:	8d 91       	ld	r24, X+
    bf4c:	9c 91       	ld	r25, X
    bf4e:	f6 01       	movw	r30, r12
    bf50:	20 81       	ld	r18, Z
    bf52:	31 81       	ldd	r19, Z+1	; 0x01
    bf54:	28 0f       	add	r18, r24
    bf56:	39 1f       	adc	r19, r25
    bf58:	a9 01       	movw	r20, r18
    bf5a:	4b 5f       	subi	r20, 0xFB	; 251
    bf5c:	5f 4f       	sbci	r21, 0xFF	; 255
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    bf5e:	d7 01       	movw	r26, r14
    bf60:	9c 91       	ld	r25, X
    bf62:	91 30       	cpi	r25, 0x01	; 1
    bf64:	41 f1       	breq	.+80     	; 0xbfb6 <_ZN4Pads16getPadParametersEv+0x1292>
    bf66:	18 f0       	brcs	.+6      	; 0xbf6e <_ZN4Pads16getPadParametersEv+0x124a>
    bf68:	92 30       	cpi	r25, 0x02	; 2
    bf6a:	59 f1       	breq	.+86     	; 0xbfc2 <_ZN4Pads16getPadParametersEv+0x129e>
    bf6c:	31 c0       	rjmp	.+98     	; 0xbfd0 <_ZN4Pads16getPadParametersEv+0x12ac>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    bf6e:	fb 01       	movw	r30, r22
    bf70:	f6 95       	lsr	r31
    bf72:	e7 95       	ror	r30
    bf74:	f6 95       	lsr	r31
    bf76:	e7 95       	ror	r30
    bf78:	f6 95       	lsr	r31
    bf7a:	e7 95       	ror	r30
    bf7c:	fa 83       	std	Y+2, r31	; 0x02
    bf7e:	e9 83       	std	Y+1, r30	; 0x01
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    bf80:	ca 01       	movw	r24, r20
    bf82:	f9 81       	ldd	r31, Y+1	; 0x01
    bf84:	8f 0f       	add	r24, r31
    bf86:	91 1d       	adc	r25, r1
            if (startAddress > EEPROM_SIZE) {
    bf88:	81 30       	cpi	r24, 0x01	; 1
    bf8a:	20 e1       	ldi	r18, 0x10	; 16
    bf8c:	92 07       	cpc	r25, r18
    bf8e:	10 f5       	brcc	.+68     	; 0xbfd4 <_ZN4Pads16getPadParametersEv+0x12b0>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    bf90:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    bf94:	90 e0       	ldi	r25, 0x00	; 0

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    bf96:	29 81       	ldd	r18, Y+1	; 0x01
    bf98:	22 0f       	add	r18, r18
    bf9a:	22 0f       	add	r18, r18
    bf9c:	22 0f       	add	r18, r18
    bf9e:	3d 81       	ldd	r19, Y+5	; 0x05
    bfa0:	4d 8d       	ldd	r20, Y+29	; 0x1d
    bfa2:	34 0f       	add	r19, r20
    bfa4:	32 1b       	sub	r19, r18
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    bfa6:	02 c0       	rjmp	.+4      	; 0xbfac <_ZN4Pads16getPadParametersEv+0x1288>
    bfa8:	95 95       	asr	r25
    bfaa:	87 95       	ror	r24
    bfac:	3a 95       	dec	r19
    bfae:	e2 f7       	brpl	.-8      	; 0xbfa8 <_ZN4Pads16getPadParametersEv+0x1284>
    bfb0:	81 70       	andi	r24, 0x01	; 1
    bfb2:	99 27       	eor	r25, r25
    bfb4:	10 c0       	rjmp	.+32     	; 0xbfd6 <_ZN4Pads16getPadParametersEv+0x12b2>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    bfb6:	cb 01       	movw	r24, r22
    bfb8:	84 0f       	add	r24, r20
    bfba:	95 1f       	adc	r25, r21
    bfbc:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    bfc0:	0a c0       	rjmp	.+20     	; 0xbfd6 <_ZN4Pads16getPadParametersEv+0x12b2>
    bfc2:	c9 01       	movw	r24, r18
    bfc4:	4d 96       	adiw	r24, 0x1d	; 29
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    bfc6:	88 0d       	add	r24, r8
    bfc8:	99 1d       	adc	r25, r9
    bfca:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    bfce:	03 c0       	rjmp	.+6      	; 0xbfd6 <_ZN4Pads16getPadParametersEv+0x12b2>
            break;

        }   return 0;
    bfd0:	85 2d       	mov	r24, r5
    bfd2:	01 c0       	rjmp	.+2      	; 0xbfd6 <_ZN4Pads16getPadParametersEv+0x12b2>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    bfd4:	85 2d       	mov	r24, r5
    bfd6:	f8 01       	movw	r30, r16
    bfd8:	ea 54       	subi	r30, 0x4A	; 74
    bfda:	ff 4f       	sbci	r31, 0xFF	; 255
                padCurveY[i]                = configuration.readParameter(CONF_BLOCK_PROGRAM, programLocalSettingsSection, (LOCAL_PROGRAM_SETTINGS*i+LOCAL_PROGRAM_SETTING_Y_CURVE_GAIN_ID)+(LOCAL_PROGRAM_SETTINGS*MAX_PADS*(uint16_t)activeProgram));
    bfdc:	80 83       	st	Z, r24
    bfde:	6d 81       	ldd	r22, Y+5	; 0x05
    bfe0:	7e 81       	ldd	r23, Y+6	; 0x06
    bfe2:	66 0d       	add	r22, r6
    bfe4:	77 1d       	adc	r23, r7
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    bfe6:	d5 01       	movw	r26, r10
    bfe8:	8d 91       	ld	r24, X+
    bfea:	9c 91       	ld	r25, X
    bfec:	f6 01       	movw	r30, r12
    bfee:	20 81       	ld	r18, Z
    bff0:	31 81       	ldd	r19, Z+1	; 0x01
    bff2:	28 0f       	add	r18, r24
    bff4:	39 1f       	adc	r19, r25
    bff6:	a9 01       	movw	r20, r18
    bff8:	4b 5f       	subi	r20, 0xFB	; 251
    bffa:	5f 4f       	sbci	r21, 0xFF	; 255
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    bffc:	d7 01       	movw	r26, r14
    bffe:	9c 91       	ld	r25, X
    c000:	91 30       	cpi	r25, 0x01	; 1
    c002:	39 f1       	breq	.+78     	; 0xc052 <_ZN4Pads16getPadParametersEv+0x132e>
    c004:	18 f0       	brcs	.+6      	; 0xc00c <_ZN4Pads16getPadParametersEv+0x12e8>
    c006:	92 30       	cpi	r25, 0x02	; 2
    c008:	51 f1       	breq	.+84     	; 0xc05e <_ZN4Pads16getPadParametersEv+0x133a>
    c00a:	30 c0       	rjmp	.+96     	; 0xc06c <_ZN4Pads16getPadParametersEv+0x1348>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    c00c:	fb 01       	movw	r30, r22
    c00e:	f6 95       	lsr	r31
    c010:	e7 95       	ror	r30
    c012:	f6 95       	lsr	r31
    c014:	e7 95       	ror	r30
    c016:	f6 95       	lsr	r31
    c018:	e7 95       	ror	r30
    c01a:	fa 83       	std	Y+2, r31	; 0x02
    c01c:	e9 83       	std	Y+1, r30	; 0x01
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    c01e:	ca 01       	movw	r24, r20
    c020:	f9 81       	ldd	r31, Y+1	; 0x01
    c022:	8f 0f       	add	r24, r31
    c024:	91 1d       	adc	r25, r1
            if (startAddress > EEPROM_SIZE) {
    c026:	81 30       	cpi	r24, 0x01	; 1
    c028:	20 e1       	ldi	r18, 0x10	; 16
    c02a:	92 07       	cpc	r25, r18
    c02c:	08 f5       	brcc	.+66     	; 0xc070 <_ZN4Pads16getPadParametersEv+0x134c>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    c02e:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    c032:	90 e0       	ldi	r25, 0x00	; 0

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    c034:	29 81       	ldd	r18, Y+1	; 0x01
    c036:	22 0f       	add	r18, r18
    c038:	22 0f       	add	r18, r18
    c03a:	22 0f       	add	r18, r18
    c03c:	3d 81       	ldd	r19, Y+5	; 0x05
    c03e:	36 0d       	add	r19, r6
    c040:	32 1b       	sub	r19, r18
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    c042:	02 c0       	rjmp	.+4      	; 0xc048 <_ZN4Pads16getPadParametersEv+0x1324>
    c044:	95 95       	asr	r25
    c046:	87 95       	ror	r24
    c048:	3a 95       	dec	r19
    c04a:	e2 f7       	brpl	.-8      	; 0xc044 <_ZN4Pads16getPadParametersEv+0x1320>
    c04c:	81 70       	andi	r24, 0x01	; 1
    c04e:	99 27       	eor	r25, r25
    c050:	10 c0       	rjmp	.+32     	; 0xc072 <_ZN4Pads16getPadParametersEv+0x134e>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    c052:	cb 01       	movw	r24, r22
    c054:	84 0f       	add	r24, r20
    c056:	95 1f       	adc	r25, r21
    c058:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    c05c:	0a c0       	rjmp	.+20     	; 0xc072 <_ZN4Pads16getPadParametersEv+0x134e>
    c05e:	c9 01       	movw	r24, r18
    c060:	0d 96       	adiw	r24, 0x0d	; 13
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    c062:	88 0d       	add	r24, r8
    c064:	99 1d       	adc	r25, r9
    c066:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    c06a:	03 c0       	rjmp	.+6      	; 0xc072 <_ZN4Pads16getPadParametersEv+0x134e>
            break;

        }   return 0;
    c06c:	85 2d       	mov	r24, r5
    c06e:	01 c0       	rjmp	.+2      	; 0xc072 <_ZN4Pads16getPadParametersEv+0x134e>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    c070:	85 2d       	mov	r24, r5
    c072:	f8 01       	movw	r30, r16
    c074:	e2 57       	subi	r30, 0x72	; 114
    c076:	fe 4f       	sbci	r31, 0xFE	; 254
                midiChannel[i]              = configuration.readParameter(CONF_BLOCK_PROGRAM, programLocalSettingsSection, (LOCAL_PROGRAM_SETTINGS*i+LOCAL_PROGRAM_SETTING_MIDI_CHANNEL_ID)+(LOCAL_PROGRAM_SETTINGS*MAX_PADS*(uint16_t)activeProgram));
    c078:	80 83       	st	Z, r24
    c07a:	3f ef       	ldi	r19, 0xFF	; 255
    c07c:	23 1a       	sub	r2, r19
    c07e:	33 0a       	sbc	r3, r19
    c080:	8d 81       	ldd	r24, Y+5	; 0x05
    c082:	9e 81       	ldd	r25, Y+6	; 0x06
    c084:	0d 96       	adiw	r24, 0x0d	; 13
    c086:	9e 83       	std	Y+6, r25	; 0x06
    c088:	8d 83       	std	Y+5, r24	; 0x05
    c08a:	9a e1       	ldi	r25, 0x1A	; 26
    c08c:	89 0e       	add	r8, r25
    c08e:	91 1c       	adc	r9, r1
        #if MODE_SERIAL > 0
            printf("Pads have individual settings\n");
        #endif

        //pads have individual settings
        for (int i=0; i<MAX_PADS; i++)    {
    c090:	ad 81       	ldd	r26, Y+5	; 0x05
    c092:	be 81       	ldd	r27, Y+6	; 0x06
    c094:	a5 37       	cpi	r26, 0x75	; 117
    c096:	b1 05       	cpc	r27, r1
    c098:	09 f0       	breq	.+2      	; 0xc09c <_ZN4Pads16getPadParametersEv+0x1378>
    c09a:	c3 cb       	rjmp	.-2170   	; 0xb822 <_ZN4Pads16getPadParametersEv+0xafe>

}

uint8_t Pads::getLastTouchedPad()   {

    return padPressHistory_buffer[padPressHistory_counter];
    c09c:	ef 81       	ldd	r30, Y+7	; 0x07
    c09e:	f8 85       	ldd	r31, Y+8	; 0x08
    c0a0:	eb 54       	subi	r30, 0x4B	; 75
    c0a2:	fd 4f       	sbci	r31, 0xFD	; 253
    c0a4:	80 81       	ld	r24, Z
    c0a6:	ef 81       	ldd	r30, Y+7	; 0x07
    c0a8:	f8 85       	ldd	r31, Y+8	; 0x08
    c0aa:	e8 0f       	add	r30, r24
    c0ac:	f1 1d       	adc	r31, r1
    c0ae:	e4 55       	subi	r30, 0x54	; 84
    c0b0:	fd 4f       	sbci	r31, 0xFD	; 253
    c0b2:	00 81       	ld	r16, Z
    }

    uint8_t lastTouchedPad = getLastTouchedPad();

    #ifdef MODULE_LEDS
        leds.setLEDstate(LED_ON_OFF_SPLIT, splitEnabled ? ledStateFull : ledStateOff);
    c0b4:	ef 81       	ldd	r30, Y+7	; 0x07
    c0b6:	f8 85       	ldd	r31, Y+8	; 0x08
    c0b8:	e7 56       	subi	r30, 0x67	; 103
    c0ba:	fe 4f       	sbci	r31, 0xFE	; 254
    c0bc:	80 81       	ld	r24, Z
    c0be:	81 11       	cpse	r24, r1
    c0c0:	02 c0       	rjmp	.+4      	; 0xc0c6 <_ZN4Pads16getPadParametersEv+0x13a2>
    c0c2:	40 e0       	ldi	r20, 0x00	; 0
    c0c4:	01 c0       	rjmp	.+2      	; 0xc0c8 <_ZN4Pads16getPadParametersEv+0x13a4>
    c0c6:	42 e0       	ldi	r20, 0x02	; 2
    c0c8:	66 e0       	ldi	r22, 0x06	; 6
    c0ca:	80 ed       	ldi	r24, 0xD0	; 208
    c0cc:	9e e0       	ldi	r25, 0x0E	; 14
    c0ce:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
bool Pads::getMIDISendState(onOff_t type, uint8_t padNumber)    {

    switch(type)    {

        case onOff_aftertouch:
        return aftertouchSendEnabled[padNumber];
    c0d2:	10 e0       	ldi	r17, 0x00	; 0
    c0d4:	ef 81       	ldd	r30, Y+7	; 0x07
    c0d6:	f8 85       	ldd	r31, Y+8	; 0x08
    c0d8:	e0 0f       	add	r30, r16
    c0da:	f1 1f       	adc	r31, r17
    c0dc:	ec 55       	subi	r30, 0x5C	; 92
    c0de:	ff 4f       	sbci	r31, 0xFF	; 255

    uint8_t lastTouchedPad = getLastTouchedPad();

    #ifdef MODULE_LEDS
        leds.setLEDstate(LED_ON_OFF_SPLIT, splitEnabled ? ledStateFull : ledStateOff);
        leds.setLEDstate(LED_ON_OFF_AFTERTOUCH, getMIDISendState(onOff_aftertouch, lastTouchedPad) ? ledStateFull : ledStateOff);
    c0e0:	80 81       	ld	r24, Z
    c0e2:	81 11       	cpse	r24, r1
    c0e4:	02 c0       	rjmp	.+4      	; 0xc0ea <_ZN4Pads16getPadParametersEv+0x13c6>
    c0e6:	40 e0       	ldi	r20, 0x00	; 0
    c0e8:	01 c0       	rjmp	.+2      	; 0xc0ec <_ZN4Pads16getPadParametersEv+0x13c8>
    c0ea:	42 e0       	ldi	r20, 0x02	; 2
    c0ec:	61 e0       	ldi	r22, 0x01	; 1
    c0ee:	80 ed       	ldi	r24, 0xD0	; 208
    c0f0:	9e e0       	ldi	r25, 0x0E	; 14
    c0f2:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>

        case onOff_aftertouch:
        return aftertouchSendEnabled[padNumber];

        case onOff_notes:
        return noteSendEnabled[padNumber];
    c0f6:	ef 81       	ldd	r30, Y+7	; 0x07
    c0f8:	f8 85       	ldd	r31, Y+8	; 0x08
    c0fa:	e0 0f       	add	r30, r16
    c0fc:	f1 1f       	adc	r31, r17
    c0fe:	e5 56       	subi	r30, 0x65	; 101
    c100:	ff 4f       	sbci	r31, 0xFF	; 255
    uint8_t lastTouchedPad = getLastTouchedPad();

    #ifdef MODULE_LEDS
        leds.setLEDstate(LED_ON_OFF_SPLIT, splitEnabled ? ledStateFull : ledStateOff);
        leds.setLEDstate(LED_ON_OFF_AFTERTOUCH, getMIDISendState(onOff_aftertouch, lastTouchedPad) ? ledStateFull : ledStateOff);
        leds.setLEDstate(LED_ON_OFF_NOTES, getMIDISendState(onOff_notes, lastTouchedPad) ? ledStateFull : ledStateOff);
    c102:	80 81       	ld	r24, Z
    c104:	81 11       	cpse	r24, r1
    c106:	02 c0       	rjmp	.+4      	; 0xc10c <_ZN4Pads16getPadParametersEv+0x13e8>
    c108:	40 e0       	ldi	r20, 0x00	; 0
    c10a:	01 c0       	rjmp	.+2      	; 0xc10e <_ZN4Pads16getPadParametersEv+0x13ea>
    c10c:	42 e0       	ldi	r20, 0x02	; 2
    c10e:	62 e0       	ldi	r22, 0x02	; 2
    c110:	80 ed       	ldi	r24, 0xD0	; 208
    c112:	9e e0       	ldi	r25, 0x0E	; 14
    c114:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>

        case onOff_notes:
        return noteSendEnabled[padNumber];

        case onOff_x:
        return xSendEnabled[padNumber];
    c118:	ef 81       	ldd	r30, Y+7	; 0x07
    c11a:	f8 85       	ldd	r31, Y+8	; 0x08
    c11c:	e0 0f       	add	r30, r16
    c11e:	f1 1f       	adc	r31, r17
    c120:	e7 57       	subi	r30, 0x77	; 119
    c122:	ff 4f       	sbci	r31, 0xFF	; 255

    #ifdef MODULE_LEDS
        leds.setLEDstate(LED_ON_OFF_SPLIT, splitEnabled ? ledStateFull : ledStateOff);
        leds.setLEDstate(LED_ON_OFF_AFTERTOUCH, getMIDISendState(onOff_aftertouch, lastTouchedPad) ? ledStateFull : ledStateOff);
        leds.setLEDstate(LED_ON_OFF_NOTES, getMIDISendState(onOff_notes, lastTouchedPad) ? ledStateFull : ledStateOff);
        leds.setLEDstate(LED_ON_OFF_X, getMIDISendState(onOff_x, lastTouchedPad) ? ledStateFull : ledStateOff);
    c124:	80 81       	ld	r24, Z
    c126:	81 11       	cpse	r24, r1
    c128:	02 c0       	rjmp	.+4      	; 0xc12e <_ZN4Pads16getPadParametersEv+0x140a>
    c12a:	40 e0       	ldi	r20, 0x00	; 0
    c12c:	01 c0       	rjmp	.+2      	; 0xc130 <_ZN4Pads16getPadParametersEv+0x140c>
    c12e:	42 e0       	ldi	r20, 0x02	; 2
    c130:	63 e0       	ldi	r22, 0x03	; 3
    c132:	80 ed       	ldi	r24, 0xD0	; 208
    c134:	9e e0       	ldi	r25, 0x0E	; 14
    c136:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>

        case onOff_x:
        return xSendEnabled[padNumber];

        case onOff_y:
        return ySendEnabled[padNumber];
    c13a:	ef 81       	ldd	r30, Y+7	; 0x07
    c13c:	f8 85       	ldd	r31, Y+8	; 0x08
    c13e:	0e 0f       	add	r16, r30
    c140:	1f 1f       	adc	r17, r31
    c142:	f8 01       	movw	r30, r16
    c144:	ee 56       	subi	r30, 0x6E	; 110
    c146:	ff 4f       	sbci	r31, 0xFF	; 255
    #ifdef MODULE_LEDS
        leds.setLEDstate(LED_ON_OFF_SPLIT, splitEnabled ? ledStateFull : ledStateOff);
        leds.setLEDstate(LED_ON_OFF_AFTERTOUCH, getMIDISendState(onOff_aftertouch, lastTouchedPad) ? ledStateFull : ledStateOff);
        leds.setLEDstate(LED_ON_OFF_NOTES, getMIDISendState(onOff_notes, lastTouchedPad) ? ledStateFull : ledStateOff);
        leds.setLEDstate(LED_ON_OFF_X, getMIDISendState(onOff_x, lastTouchedPad) ? ledStateFull : ledStateOff);
        leds.setLEDstate(LED_ON_OFF_Y, getMIDISendState(onOff_y, lastTouchedPad) ? ledStateFull : ledStateOff);
    c148:	80 81       	ld	r24, Z
    c14a:	81 11       	cpse	r24, r1
    c14c:	02 c0       	rjmp	.+4      	; 0xc152 <_ZN4Pads16getPadParametersEv+0x142e>
    c14e:	40 e0       	ldi	r20, 0x00	; 0
    c150:	01 c0       	rjmp	.+2      	; 0xc154 <_ZN4Pads16getPadParametersEv+0x1430>
    c152:	42 e0       	ldi	r20, 0x02	; 2
    c154:	60 e0       	ldi	r22, 0x00	; 0
    c156:	80 ed       	ldi	r24, 0xD0	; 208
    c158:	9e e0       	ldi	r25, 0x0E	; 14
    c15a:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
    c15e:	77 c0       	rjmp	.+238    	; 0xc24e <_ZN4Pads16getPadParametersEv+0x152a>

}

void Pads::getPadParameters()   {

    splitEnabled = configuration.readParameter(CONF_BLOCK_PROGRAM, programGlobalSettingsSection, GLOBAL_PROGRAM_SETTING_XY_SPLIT_STATE_ID+(GLOBAL_PROGRAM_SETTINGS*(uint16_t)activeProgram));
    c160:	ef 81       	ldd	r30, Y+7	; 0x07
    c162:	f8 85       	ldd	r31, Y+8	; 0x08
    c164:	e7 56       	subi	r30, 0x67	; 103
    c166:	fe 4f       	sbci	r31, 0xFE	; 254
    c168:	10 82       	st	Z, r1
    c16a:	0c 94 05 57 	jmp	0xae0a	; 0xae0a <_ZN4Pads16getPadParametersEv+0xe6>
    c16e:	21 e0       	ldi	r18, 0x01	; 1
    c170:	89 2b       	or	r24, r25
    c172:	09 f4       	brne	.+2      	; 0xc176 <_ZN4Pads16getPadParametersEv+0x1452>
    c174:	20 e0       	ldi	r18, 0x00	; 0
    c176:	ef 81       	ldd	r30, Y+7	; 0x07
    c178:	f8 85       	ldd	r31, Y+8	; 0x08
    c17a:	e7 56       	subi	r30, 0x67	; 103
    c17c:	fe 4f       	sbci	r31, 0xFE	; 254
    c17e:	20 83       	st	Z, r18

    #if MODE_SERIAL > 0
        printf("Printing out pad configuration\n");
    #endif

    if (!splitEnabled)  {   //split off
    c180:	22 23       	and	r18, r18
    c182:	11 f4       	brne	.+4      	; 0xc188 <_ZN4Pads16getPadParametersEv+0x1464>
    c184:	0c 94 05 57 	jmp	0xae0a	; 0xae0a <_ZN4Pads16getPadParametersEv+0xe6>
        #endif

        //pads have individual settings
        for (int i=0; i<MAX_PADS; i++)    {

                xSendEnabled[i]             = configuration.readParameter(CONF_BLOCK_PROGRAM, programLocalSettingsSection, (LOCAL_PROGRAM_SETTINGS*i+LOCAL_PROGRAM_SETTING_X_ENABLE_ID)+(LOCAL_PROGRAM_SETTINGS*MAX_PADS*(uint16_t)activeProgram));
    c188:	85 e7       	ldi	r24, 0x75	; 117
    c18a:	80 9f       	mul	r24, r16
    c18c:	90 01       	movw	r18, r0
    c18e:	81 9f       	mul	r24, r17
    c190:	30 0d       	add	r19, r0
    c192:	11 24       	eor	r1, r1
    c194:	3c 83       	std	Y+4, r19	; 0x04
    c196:	2b 83       	std	Y+3, r18	; 0x03
    c198:	2f 80       	ldd	r2, Y+7	; 0x07
    c19a:	38 84       	ldd	r3, Y+8	; 0x08
    c19c:	49 01       	movw	r8, r18
    c19e:	88 0c       	add	r8, r8
    c1a0:	99 1c       	adc	r9, r9
    c1a2:	00 e0       	ldi	r16, 0x00	; 0
    c1a4:	10 e0       	ldi	r17, 0x00	; 0
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    c1a6:	0f 2e       	mov	r0, r31
    c1a8:	fb e7       	ldi	r31, 0x7B	; 123
    c1aa:	af 2e       	mov	r10, r31
    c1ac:	f4 e0       	ldi	r31, 0x04	; 4
    c1ae:	bf 2e       	mov	r11, r31
    c1b0:	f0 2d       	mov	r31, r0
    c1b2:	0f 2e       	mov	r0, r31
    c1b4:	f3 e8       	ldi	r31, 0x83	; 131
    c1b6:	cf 2e       	mov	r12, r31
    c1b8:	f4 e0       	ldi	r31, 0x04	; 4
    c1ba:	df 2e       	mov	r13, r31
    c1bc:	f0 2d       	mov	r31, r0
        return blocks[blockID].blockStartAddress+START_OFFSET;

    };
    inline uint8_t getParameterType(uint8_t blockID, uint8_t sectionID) {

        return blocks[blockID].sectionParameterType[sectionID];
    c1be:	0f 2e       	mov	r0, r31
    c1c0:	f8 ea       	ldi	r31, 0xA8	; 168
    c1c2:	ef 2e       	mov	r14, r31
    c1c4:	f4 e0       	ldi	r31, 0x04	; 4
    c1c6:	ff 2e       	mov	r15, r31
    c1c8:	f0 2d       	mov	r31, r0
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    c1ca:	51 2c       	mov	r5, r1
    c1cc:	41 2c       	mov	r4, r1
    c1ce:	2f 5f       	subi	r18, 0xFF	; 255
    c1d0:	3f 4f       	sbci	r19, 0xFF	; 255
    c1d2:	3a 87       	std	Y+10, r19	; 0x0a
    c1d4:	29 87       	std	Y+9, r18	; 0x09
    c1d6:	8b 81       	ldd	r24, Y+3	; 0x03
    c1d8:	9c 81       	ldd	r25, Y+4	; 0x04
    c1da:	02 96       	adiw	r24, 0x02	; 2
    c1dc:	9c 87       	std	Y+12, r25	; 0x0c
    c1de:	8b 87       	std	Y+11, r24	; 0x0b
    c1e0:	ab 81       	ldd	r26, Y+3	; 0x03
    c1e2:	bc 81       	ldd	r27, Y+4	; 0x04
    c1e4:	13 96       	adiw	r26, 0x03	; 3
    c1e6:	be 87       	std	Y+14, r27	; 0x0e
    c1e8:	ad 87       	std	Y+13, r26	; 0x0d
    c1ea:	eb 81       	ldd	r30, Y+3	; 0x03
    c1ec:	fc 81       	ldd	r31, Y+4	; 0x04
    c1ee:	35 96       	adiw	r30, 0x05	; 5
    c1f0:	f8 8b       	std	Y+16, r31	; 0x10
    c1f2:	ef 87       	std	Y+15, r30	; 0x0f
    c1f4:	2b 81       	ldd	r18, Y+3	; 0x03
    c1f6:	3c 81       	ldd	r19, Y+4	; 0x04
    c1f8:	2a 5f       	subi	r18, 0xFA	; 250
    c1fa:	3f 4f       	sbci	r19, 0xFF	; 255
    c1fc:	3a 8b       	std	Y+18, r19	; 0x12
    c1fe:	29 8b       	std	Y+17, r18	; 0x11
    c200:	8b 81       	ldd	r24, Y+3	; 0x03
    c202:	9c 81       	ldd	r25, Y+4	; 0x04
    c204:	07 96       	adiw	r24, 0x07	; 7
    c206:	9c 8b       	std	Y+20, r25	; 0x14
    c208:	8b 8b       	std	Y+19, r24	; 0x13
    c20a:	ab 81       	ldd	r26, Y+3	; 0x03
    c20c:	bc 81       	ldd	r27, Y+4	; 0x04
    c20e:	18 96       	adiw	r26, 0x08	; 8
    c210:	be 8b       	std	Y+22, r27	; 0x16
    c212:	ad 8b       	std	Y+21, r26	; 0x15
    c214:	eb 81       	ldd	r30, Y+3	; 0x03
    c216:	fc 81       	ldd	r31, Y+4	; 0x04
    c218:	39 96       	adiw	r30, 0x09	; 9
    c21a:	f8 8f       	std	Y+24, r31	; 0x18
    c21c:	ef 8b       	std	Y+23, r30	; 0x17
    c21e:	2b 81       	ldd	r18, Y+3	; 0x03
    c220:	3c 81       	ldd	r19, Y+4	; 0x04
    c222:	26 5f       	subi	r18, 0xF6	; 246
    c224:	3f 4f       	sbci	r19, 0xFF	; 255
    c226:	3a 8f       	std	Y+26, r19	; 0x1a
    c228:	29 8f       	std	Y+25, r18	; 0x19
    c22a:	8b 81       	ldd	r24, Y+3	; 0x03
    c22c:	9c 81       	ldd	r25, Y+4	; 0x04
    c22e:	0b 96       	adiw	r24, 0x0b	; 11
    c230:	9c 8f       	std	Y+28, r25	; 0x1c
    c232:	8b 8f       	std	Y+27, r24	; 0x1b
    c234:	ab 81       	ldd	r26, Y+3	; 0x03
    c236:	bc 81       	ldd	r27, Y+4	; 0x04
    c238:	1c 96       	adiw	r26, 0x0c	; 12
    c23a:	be 8f       	std	Y+30, r27	; 0x1e
    c23c:	ad 8f       	std	Y+29, r26	; 0x1d
    c23e:	6b 80       	ldd	r6, Y+3	; 0x03
    c240:	7c 80       	ldd	r7, Y+4	; 0x04
    c242:	b4 e0       	ldi	r27, 0x04	; 4
    c244:	6b 0e       	add	r6, r27
    c246:	71 1c       	adc	r7, r1
    c248:	1e 83       	std	Y+6, r17	; 0x06
    c24a:	0d 83       	std	Y+5, r16	; 0x05
    c24c:	ea ca       	rjmp	.-2604   	; 0xb822 <_ZN4Pads16getPadParametersEv+0xafe>
        leds.setLEDstate(LED_ON_OFF_NOTES, getMIDISendState(onOff_notes, lastTouchedPad) ? ledStateFull : ledStateOff);
        leds.setLEDstate(LED_ON_OFF_X, getMIDISendState(onOff_x, lastTouchedPad) ? ledStateFull : ledStateOff);
        leds.setLEDstate(LED_ON_OFF_Y, getMIDISendState(onOff_y, lastTouchedPad) ? ledStateFull : ledStateOff);
    #endif

}
    c24e:	c6 59       	subi	r28, 0x96	; 150
    c250:	df 4f       	sbci	r29, 0xFF	; 255
    c252:	0f b6       	in	r0, 0x3f	; 63
    c254:	f8 94       	cli
    c256:	de bf       	out	0x3e, r29	; 62
    c258:	0f be       	out	0x3f, r0	; 63
    c25a:	cd bf       	out	0x3d, r28	; 61
    c25c:	df 91       	pop	r29
    c25e:	cf 91       	pop	r28
    c260:	1f 91       	pop	r17
    c262:	0f 91       	pop	r16
    c264:	ff 90       	pop	r15
    c266:	ef 90       	pop	r14
    c268:	df 90       	pop	r13
    c26a:	cf 90       	pop	r12
    c26c:	bf 90       	pop	r11
    c26e:	af 90       	pop	r10
    c270:	9f 90       	pop	r9
    c272:	8f 90       	pop	r8
    c274:	7f 90       	pop	r7
    c276:	6f 90       	pop	r6
    c278:	5f 90       	pop	r5
    c27a:	4f 90       	pop	r4
    c27c:	3f 90       	pop	r3
    c27e:	2f 90       	pop	r2
    c280:	08 95       	ret

0000c282 <_ZN4Pads13generateScaleE7scale_t>:

    }

}

void Pads::generateScale(scale_t scale)    {
    c282:	2f 92       	push	r2
    c284:	3f 92       	push	r3
    c286:	4f 92       	push	r4
    c288:	5f 92       	push	r5
    c28a:	6f 92       	push	r6
    c28c:	7f 92       	push	r7
    c28e:	8f 92       	push	r8
    c290:	9f 92       	push	r9
    c292:	af 92       	push	r10
    c294:	bf 92       	push	r11
    c296:	cf 92       	push	r12
    c298:	df 92       	push	r13
    c29a:	ef 92       	push	r14
    c29c:	ff 92       	push	r15
    c29e:	0f 93       	push	r16
    c2a0:	1f 93       	push	r17
    c2a2:	cf 93       	push	r28
    c2a4:	df 93       	push	r29
    c2a6:	00 d0       	rcall	.+0      	; 0xc2a8 <_ZN4Pads13generateScaleE7scale_t+0x26>
    c2a8:	00 d0       	rcall	.+0      	; 0xc2aa <_ZN4Pads13generateScaleE7scale_t+0x28>
    c2aa:	00 d0       	rcall	.+0      	; 0xc2ac <_ZN4Pads13generateScaleE7scale_t+0x2a>
    c2ac:	cd b7       	in	r28, 0x3d	; 61
    c2ae:	de b7       	in	r29, 0x3e	; 62
    c2b0:	6c 01       	movw	r12, r24
    c2b2:	16 2f       	mov	r17, r22

    if (isPredefinedScale(scale)) {
    c2b4:	67 30       	cpi	r22, 0x07	; 7
    c2b6:	08 f0       	brcs	.+2      	; 0xc2ba <_ZN4Pads13generateScaleE7scale_t+0x38>
    c2b8:	6d c1       	rjmp	.+730    	; 0xc594 <_ZN4Pads13generateScaleE7scale_t+0x312>

        //predefined scale
        uint8_t notesPerScale = getNotesPerScale(scale);
    c2ba:	86 2f       	mov	r24, r22
    c2bc:	0e 94 47 7e 	call	0xfc8e	; 0xfc8e <_Z16getNotesPerScale7scale_t>
    c2c0:	78 2e       	mov	r7, r24
        uint8_t octave = configuration.readParameter(CONF_BLOCK_PROGRAM, programScalePredefinedSection, PREDEFINED_SCALE_OCTAVE_ID+((PREDEFINED_SCALE_PARAMETERS*NUMBER_OF_PREDEFINED_SCALES)*(uint16_t)activeProgram)+PREDEFINED_SCALE_PARAMETERS*(uint16_t)activeScale);
    c2c2:	f6 01       	movw	r30, r12
    c2c4:	e4 56       	subi	r30, 0x64	; 100
    c2c6:	fe 4f       	sbci	r31, 0xFE	; 254
    c2c8:	80 81       	ld	r24, Z
    c2ca:	08 2e       	mov	r0, r24
    c2cc:	00 0c       	add	r0, r0
    c2ce:	99 0b       	sbc	r25, r25
    c2d0:	9c 01       	movw	r18, r24
    c2d2:	22 0f       	add	r18, r18
    c2d4:	33 1f       	adc	r19, r19
    c2d6:	28 0f       	add	r18, r24
    c2d8:	39 1f       	adc	r19, r25
    c2da:	31 96       	adiw	r30, 0x01	; 1
    c2dc:	80 81       	ld	r24, Z
    c2de:	29 01       	movw	r4, r18
    c2e0:	95 e1       	ldi	r25, 0x15	; 21
    c2e2:	89 02       	muls	r24, r25
    c2e4:	40 0c       	add	r4, r0
    c2e6:	51 1c       	adc	r5, r1
    c2e8:	11 24       	eor	r1, r1
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    c2ea:	e0 90 7b 04 	lds	r14, 0x047B
    c2ee:	f0 90 7c 04 	lds	r15, 0x047C
    c2f2:	80 91 85 04 	lds	r24, 0x0485
    c2f6:	90 91 86 04 	lds	r25, 0x0486
    c2fa:	e8 0e       	add	r14, r24
    c2fc:	f9 1e       	adc	r15, r25
    c2fe:	e5 e0       	ldi	r30, 0x05	; 5
    c300:	ee 0e       	add	r14, r30
    c302:	f1 1c       	adc	r15, r1
        return blocks[blockID].blockStartAddress+START_OFFSET;

    };
    inline uint8_t getParameterType(uint8_t blockID, uint8_t sectionID) {

        return blocks[blockID].sectionParameterType[sectionID];
    c304:	80 91 a9 04 	lds	r24, 0x04A9
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    c308:	81 30       	cpi	r24, 0x01	; 1
    c30a:	19 f1       	breq	.+70     	; 0xc352 <_ZN4Pads13generateScaleE7scale_t+0xd0>
    c30c:	18 f0       	brcs	.+6      	; 0xc314 <_ZN4Pads13generateScaleE7scale_t+0x92>
    c30e:	82 30       	cpi	r24, 0x02	; 2
    c310:	59 f1       	breq	.+86     	; 0xc368 <_ZN4Pads13generateScaleE7scale_t+0xe6>
    c312:	37 c0       	rjmp	.+110    	; 0xc382 <_ZN4Pads13generateScaleE7scale_t+0x100>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    c314:	52 01       	movw	r10, r4
    c316:	b6 94       	lsr	r11
    c318:	a7 94       	ror	r10
    c31a:	b6 94       	lsr	r11
    c31c:	a7 94       	ror	r10
    c31e:	b6 94       	lsr	r11
    c320:	a7 94       	ror	r10
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    c322:	c7 01       	movw	r24, r14
    c324:	8a 0d       	add	r24, r10
    c326:	91 1d       	adc	r25, r1
            if (startAddress > EEPROM_SIZE) {
    c328:	81 30       	cpi	r24, 0x01	; 1
    c32a:	f0 e1       	ldi	r31, 0x10	; 16
    c32c:	9f 07       	cpc	r25, r31
    c32e:	08 f0       	brcs	.+2      	; 0xc332 <_ZN4Pads13generateScaleE7scale_t+0xb0>
    c330:	bf c1       	rjmp	.+894    	; 0xc6b0 <_ZN4Pads13generateScaleE7scale_t+0x42e>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    c332:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    c336:	90 e0       	ldi	r25, 0x00	; 0

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    c338:	aa 0c       	add	r10, r10
    c33a:	aa 0c       	add	r10, r10
    c33c:	aa 0c       	add	r10, r10
    c33e:	24 2d       	mov	r18, r4
    c340:	2a 19       	sub	r18, r10
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    c342:	02 c0       	rjmp	.+4      	; 0xc348 <_ZN4Pads13generateScaleE7scale_t+0xc6>
    c344:	95 95       	asr	r25
    c346:	87 95       	ror	r24
    c348:	2a 95       	dec	r18
    c34a:	e2 f7       	brpl	.-8      	; 0xc344 <_ZN4Pads13generateScaleE7scale_t+0xc2>
    c34c:	81 70       	andi	r24, 0x01	; 1
    c34e:	99 27       	eor	r25, r25
    c350:	b1 c1       	rjmp	.+866    	; 0xc6b4 <_ZN4Pads13generateScaleE7scale_t+0x432>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    c352:	c2 01       	movw	r24, r4
    c354:	8e 0d       	add	r24, r14
    c356:	9f 1d       	adc	r25, r15
    c358:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    c35c:	08 2f       	mov	r16, r24
        note_t tonic = (note_t)configuration.readParameter(CONF_BLOCK_PROGRAM, programScalePredefinedSection, PREDEFINED_SCALE_TONIC_ID+((PREDEFINED_SCALE_PARAMETERS*NUMBER_OF_PREDEFINED_SCALES)*(uint16_t)activeProgram)+PREDEFINED_SCALE_PARAMETERS*(uint16_t)activeScale);
    c35e:	42 01       	movw	r8, r4
    c360:	2f ef       	ldi	r18, 0xFF	; 255
    c362:	82 1a       	sub	r8, r18
    c364:	92 0a       	sbc	r9, r18
    c366:	37 c0       	rjmp	.+110    	; 0xc3d6 <_ZN4Pads13generateScaleE7scale_t+0x154>
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
    c368:	c2 01       	movw	r24, r4
    c36a:	88 0f       	add	r24, r24
    c36c:	99 1f       	adc	r25, r25
            return eeprom_read_word((uint16_t*)startAddress);
    c36e:	8e 0d       	add	r24, r14
    c370:	9f 1d       	adc	r25, r15
    c372:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    c376:	08 2f       	mov	r16, r24
    c378:	42 01       	movw	r8, r4
    c37a:	3f ef       	ldi	r19, 0xFF	; 255
    c37c:	83 1a       	sub	r8, r19
    c37e:	93 0a       	sbc	r9, r19
    c380:	35 c0       	rjmp	.+106    	; 0xc3ec <_ZN4Pads13generateScaleE7scale_t+0x16a>
    c382:	42 01       	movw	r8, r4
    c384:	9f ef       	ldi	r25, 0xFF	; 255
    c386:	89 1a       	sub	r8, r25
    c388:	99 0a       	sbc	r9, r25
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    c38a:	81 30       	cpi	r24, 0x01	; 1
    c38c:	19 f1       	breq	.+70     	; 0xc3d4 <_ZN4Pads13generateScaleE7scale_t+0x152>
    c38e:	18 f0       	brcs	.+6      	; 0xc396 <_ZN4Pads13generateScaleE7scale_t+0x114>
    c390:	82 30       	cpi	r24, 0x02	; 2
    c392:	c1 f5       	brne	.+112    	; 0xc404 <_ZN4Pads13generateScaleE7scale_t+0x182>
    c394:	2a c0       	rjmp	.+84     	; 0xc3ea <_ZN4Pads13generateScaleE7scale_t+0x168>

    if (isPredefinedScale(scale)) {

        //predefined scale
        uint8_t notesPerScale = getNotesPerScale(scale);
        uint8_t octave = configuration.readParameter(CONF_BLOCK_PROGRAM, programScalePredefinedSection, PREDEFINED_SCALE_OCTAVE_ID+((PREDEFINED_SCALE_PARAMETERS*NUMBER_OF_PREDEFINED_SCALES)*(uint16_t)activeProgram)+PREDEFINED_SCALE_PARAMETERS*(uint16_t)activeScale);
    c396:	00 e0       	ldi	r16, 0x00	; 0

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    c398:	54 01       	movw	r10, r8
    c39a:	b6 94       	lsr	r11
    c39c:	a7 94       	ror	r10
    c39e:	b6 94       	lsr	r11
    c3a0:	a7 94       	ror	r10
    c3a2:	b6 94       	lsr	r11
    c3a4:	a7 94       	ror	r10
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    c3a6:	c7 01       	movw	r24, r14
    c3a8:	8a 0d       	add	r24, r10
    c3aa:	91 1d       	adc	r25, r1
            if (startAddress > EEPROM_SIZE) {
    c3ac:	81 30       	cpi	r24, 0x01	; 1
    c3ae:	e0 e1       	ldi	r30, 0x10	; 16
    c3b0:	9e 07       	cpc	r25, r30
    c3b2:	08 f0       	brcs	.+2      	; 0xc3b6 <_ZN4Pads13generateScaleE7scale_t+0x134>
    c3b4:	85 c1       	rjmp	.+778    	; 0xc6c0 <_ZN4Pads13generateScaleE7scale_t+0x43e>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    c3b6:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    c3ba:	90 e0       	ldi	r25, 0x00	; 0

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    c3bc:	aa 0c       	add	r10, r10
    c3be:	aa 0c       	add	r10, r10
    c3c0:	aa 0c       	add	r10, r10
    c3c2:	8a 18       	sub	r8, r10
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    c3c4:	02 c0       	rjmp	.+4      	; 0xc3ca <_ZN4Pads13generateScaleE7scale_t+0x148>
    c3c6:	95 95       	asr	r25
    c3c8:	87 95       	ror	r24
    c3ca:	8a 94       	dec	r8
    c3cc:	e2 f7       	brpl	.-8      	; 0xc3c6 <_ZN4Pads13generateScaleE7scale_t+0x144>
    c3ce:	81 70       	andi	r24, 0x01	; 1
    c3d0:	99 27       	eor	r25, r25
    c3d2:	78 c1       	rjmp	.+752    	; 0xc6c4 <_ZN4Pads13generateScaleE7scale_t+0x442>
    c3d4:	00 e0       	ldi	r16, 0x00	; 0
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    c3d6:	c4 01       	movw	r24, r8
    c3d8:	8e 0d       	add	r24, r14
    c3da:	9f 1d       	adc	r25, r15
    c3dc:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
        note_t tonic = (note_t)configuration.readParameter(CONF_BLOCK_PROGRAM, programScalePredefinedSection, PREDEFINED_SCALE_TONIC_ID+((PREDEFINED_SCALE_PARAMETERS*NUMBER_OF_PREDEFINED_SCALES)*(uint16_t)activeProgram)+PREDEFINED_SCALE_PARAMETERS*(uint16_t)activeScale);
        noteShiftLevel = configuration.readParameter(CONF_BLOCK_PROGRAM, programScalePredefinedSection, PREDEFINED_SCALE_SHIFT_ID+((PREDEFINED_SCALE_PARAMETERS*NUMBER_OF_PREDEFINED_SCALES)*(uint16_t)activeProgram)+PREDEFINED_SCALE_PARAMETERS*(uint16_t)activeScale);
    c3e0:	f2 e0       	ldi	r31, 0x02	; 2
    c3e2:	4f 0e       	add	r4, r31
    c3e4:	51 1c       	adc	r5, r1
    if (isPredefinedScale(scale)) {

        //predefined scale
        uint8_t notesPerScale = getNotesPerScale(scale);
        uint8_t octave = configuration.readParameter(CONF_BLOCK_PROGRAM, programScalePredefinedSection, PREDEFINED_SCALE_OCTAVE_ID+((PREDEFINED_SCALE_PARAMETERS*NUMBER_OF_PREDEFINED_SCALES)*(uint16_t)activeProgram)+PREDEFINED_SCALE_PARAMETERS*(uint16_t)activeScale);
        note_t tonic = (note_t)configuration.readParameter(CONF_BLOCK_PROGRAM, programScalePredefinedSection, PREDEFINED_SCALE_TONIC_ID+((PREDEFINED_SCALE_PARAMETERS*NUMBER_OF_PREDEFINED_SCALES)*(uint16_t)activeProgram)+PREDEFINED_SCALE_PARAMETERS*(uint16_t)activeScale);
    c3e6:	98 2e       	mov	r9, r24
    c3e8:	37 c0       	rjmp	.+110    	; 0xc458 <_ZN4Pads13generateScaleE7scale_t+0x1d6>

    if (isPredefinedScale(scale)) {

        //predefined scale
        uint8_t notesPerScale = getNotesPerScale(scale);
        uint8_t octave = configuration.readParameter(CONF_BLOCK_PROGRAM, programScalePredefinedSection, PREDEFINED_SCALE_OCTAVE_ID+((PREDEFINED_SCALE_PARAMETERS*NUMBER_OF_PREDEFINED_SCALES)*(uint16_t)activeProgram)+PREDEFINED_SCALE_PARAMETERS*(uint16_t)activeScale);
    c3ea:	00 e0       	ldi	r16, 0x00	; 0
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
    c3ec:	c4 01       	movw	r24, r8
    c3ee:	88 0f       	add	r24, r24
    c3f0:	99 1f       	adc	r25, r25
            return eeprom_read_word((uint16_t*)startAddress);
    c3f2:	8e 0d       	add	r24, r14
    c3f4:	9f 1d       	adc	r25, r15
    c3f6:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    c3fa:	98 2e       	mov	r9, r24
        note_t tonic = (note_t)configuration.readParameter(CONF_BLOCK_PROGRAM, programScalePredefinedSection, PREDEFINED_SCALE_TONIC_ID+((PREDEFINED_SCALE_PARAMETERS*NUMBER_OF_PREDEFINED_SCALES)*(uint16_t)activeProgram)+PREDEFINED_SCALE_PARAMETERS*(uint16_t)activeScale);
        noteShiftLevel = configuration.readParameter(CONF_BLOCK_PROGRAM, programScalePredefinedSection, PREDEFINED_SCALE_SHIFT_ID+((PREDEFINED_SCALE_PARAMETERS*NUMBER_OF_PREDEFINED_SCALES)*(uint16_t)activeProgram)+PREDEFINED_SCALE_PARAMETERS*(uint16_t)activeScale);
    c3fc:	22 e0       	ldi	r18, 0x02	; 2
    c3fe:	42 0e       	add	r4, r18
    c400:	51 1c       	adc	r5, r1
    c402:	32 c0       	rjmp	.+100    	; 0xc468 <_ZN4Pads13generateScaleE7scale_t+0x1e6>
    c404:	32 e0       	ldi	r19, 0x02	; 2
    c406:	43 0e       	add	r4, r19
    c408:	51 1c       	adc	r5, r1
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    c40a:	81 30       	cpi	r24, 0x01	; 1
    c40c:	19 f1       	breq	.+70     	; 0xc454 <_ZN4Pads13generateScaleE7scale_t+0x1d2>
    c40e:	18 f0       	brcs	.+6      	; 0xc416 <_ZN4Pads13generateScaleE7scale_t+0x194>
    c410:	82 30       	cpi	r24, 0x02	; 2
    c412:	91 f5       	brne	.+100    	; 0xc478 <_ZN4Pads13generateScaleE7scale_t+0x1f6>
    c414:	27 c0       	rjmp	.+78     	; 0xc464 <_ZN4Pads13generateScaleE7scale_t+0x1e2>
    if (isPredefinedScale(scale)) {

        //predefined scale
        uint8_t notesPerScale = getNotesPerScale(scale);
        uint8_t octave = configuration.readParameter(CONF_BLOCK_PROGRAM, programScalePredefinedSection, PREDEFINED_SCALE_OCTAVE_ID+((PREDEFINED_SCALE_PARAMETERS*NUMBER_OF_PREDEFINED_SCALES)*(uint16_t)activeProgram)+PREDEFINED_SCALE_PARAMETERS*(uint16_t)activeScale);
        note_t tonic = (note_t)configuration.readParameter(CONF_BLOCK_PROGRAM, programScalePredefinedSection, PREDEFINED_SCALE_TONIC_ID+((PREDEFINED_SCALE_PARAMETERS*NUMBER_OF_PREDEFINED_SCALES)*(uint16_t)activeProgram)+PREDEFINED_SCALE_PARAMETERS*(uint16_t)activeScale);
    c416:	91 2c       	mov	r9, r1

    if (isPredefinedScale(scale)) {

        //predefined scale
        uint8_t notesPerScale = getNotesPerScale(scale);
        uint8_t octave = configuration.readParameter(CONF_BLOCK_PROGRAM, programScalePredefinedSection, PREDEFINED_SCALE_OCTAVE_ID+((PREDEFINED_SCALE_PARAMETERS*NUMBER_OF_PREDEFINED_SCALES)*(uint16_t)activeProgram)+PREDEFINED_SCALE_PARAMETERS*(uint16_t)activeScale);
    c418:	00 e0       	ldi	r16, 0x00	; 0

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    c41a:	52 01       	movw	r10, r4
    c41c:	b6 94       	lsr	r11
    c41e:	a7 94       	ror	r10
    c420:	b6 94       	lsr	r11
    c422:	a7 94       	ror	r10
    c424:	b6 94       	lsr	r11
    c426:	a7 94       	ror	r10
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    c428:	c7 01       	movw	r24, r14
    c42a:	8a 0d       	add	r24, r10
    c42c:	91 1d       	adc	r25, r1
            if (startAddress > EEPROM_SIZE) {
    c42e:	81 30       	cpi	r24, 0x01	; 1
    c430:	e0 e1       	ldi	r30, 0x10	; 16
    c432:	9e 07       	cpc	r25, r30
    c434:	30 f5       	brcc	.+76     	; 0xc482 <_ZN4Pads13generateScaleE7scale_t+0x200>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    c436:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    c43a:	90 e0       	ldi	r25, 0x00	; 0

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    c43c:	aa 0c       	add	r10, r10
    c43e:	aa 0c       	add	r10, r10
    c440:	aa 0c       	add	r10, r10
    c442:	4a 18       	sub	r4, r10
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    c444:	02 c0       	rjmp	.+4      	; 0xc44a <_ZN4Pads13generateScaleE7scale_t+0x1c8>
    c446:	95 95       	asr	r25
    c448:	87 95       	ror	r24
    c44a:	4a 94       	dec	r4
    c44c:	e2 f7       	brpl	.-8      	; 0xc446 <_ZN4Pads13generateScaleE7scale_t+0x1c4>
    c44e:	81 70       	andi	r24, 0x01	; 1
    c450:	99 27       	eor	r25, r25
    c452:	19 c0       	rjmp	.+50     	; 0xc486 <_ZN4Pads13generateScaleE7scale_t+0x204>
        note_t tonic = (note_t)configuration.readParameter(CONF_BLOCK_PROGRAM, programScalePredefinedSection, PREDEFINED_SCALE_TONIC_ID+((PREDEFINED_SCALE_PARAMETERS*NUMBER_OF_PREDEFINED_SCALES)*(uint16_t)activeProgram)+PREDEFINED_SCALE_PARAMETERS*(uint16_t)activeScale);
    c454:	91 2c       	mov	r9, r1

    if (isPredefinedScale(scale)) {

        //predefined scale
        uint8_t notesPerScale = getNotesPerScale(scale);
        uint8_t octave = configuration.readParameter(CONF_BLOCK_PROGRAM, programScalePredefinedSection, PREDEFINED_SCALE_OCTAVE_ID+((PREDEFINED_SCALE_PARAMETERS*NUMBER_OF_PREDEFINED_SCALES)*(uint16_t)activeProgram)+PREDEFINED_SCALE_PARAMETERS*(uint16_t)activeScale);
    c456:	00 e0       	ldi	r16, 0x00	; 0
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    c458:	c2 01       	movw	r24, r4
    c45a:	8e 0d       	add	r24, r14
    c45c:	9f 1d       	adc	r25, r15
    c45e:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    c462:	11 c0       	rjmp	.+34     	; 0xc486 <_ZN4Pads13generateScaleE7scale_t+0x204>
        note_t tonic = (note_t)configuration.readParameter(CONF_BLOCK_PROGRAM, programScalePredefinedSection, PREDEFINED_SCALE_TONIC_ID+((PREDEFINED_SCALE_PARAMETERS*NUMBER_OF_PREDEFINED_SCALES)*(uint16_t)activeProgram)+PREDEFINED_SCALE_PARAMETERS*(uint16_t)activeScale);
    c464:	91 2c       	mov	r9, r1

    if (isPredefinedScale(scale)) {

        //predefined scale
        uint8_t notesPerScale = getNotesPerScale(scale);
        uint8_t octave = configuration.readParameter(CONF_BLOCK_PROGRAM, programScalePredefinedSection, PREDEFINED_SCALE_OCTAVE_ID+((PREDEFINED_SCALE_PARAMETERS*NUMBER_OF_PREDEFINED_SCALES)*(uint16_t)activeProgram)+PREDEFINED_SCALE_PARAMETERS*(uint16_t)activeScale);
    c466:	00 e0       	ldi	r16, 0x00	; 0
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
    c468:	c2 01       	movw	r24, r4
    c46a:	88 0f       	add	r24, r24
    c46c:	99 1f       	adc	r25, r25
            return eeprom_read_word((uint16_t*)startAddress);
    c46e:	8e 0d       	add	r24, r14
    c470:	9f 1d       	adc	r25, r15
    c472:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    c476:	07 c0       	rjmp	.+14     	; 0xc486 <_ZN4Pads13generateScaleE7scale_t+0x204>
        note_t tonic = (note_t)configuration.readParameter(CONF_BLOCK_PROGRAM, programScalePredefinedSection, PREDEFINED_SCALE_TONIC_ID+((PREDEFINED_SCALE_PARAMETERS*NUMBER_OF_PREDEFINED_SCALES)*(uint16_t)activeProgram)+PREDEFINED_SCALE_PARAMETERS*(uint16_t)activeScale);
    c478:	91 2c       	mov	r9, r1

    if (isPredefinedScale(scale)) {

        //predefined scale
        uint8_t notesPerScale = getNotesPerScale(scale);
        uint8_t octave = configuration.readParameter(CONF_BLOCK_PROGRAM, programScalePredefinedSection, PREDEFINED_SCALE_OCTAVE_ID+((PREDEFINED_SCALE_PARAMETERS*NUMBER_OF_PREDEFINED_SCALES)*(uint16_t)activeProgram)+PREDEFINED_SCALE_PARAMETERS*(uint16_t)activeScale);
    c47a:	00 e0       	ldi	r16, 0x00	; 0
            break;

        }   return 0;
    c47c:	80 e0       	ldi	r24, 0x00	; 0
    c47e:	90 e0       	ldi	r25, 0x00	; 0
    c480:	02 c0       	rjmp	.+4      	; 0xc486 <_ZN4Pads13generateScaleE7scale_t+0x204>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    c482:	80 e0       	ldi	r24, 0x00	; 0
    c484:	90 e0       	ldi	r25, 0x00	; 0
        note_t tonic = (note_t)configuration.readParameter(CONF_BLOCK_PROGRAM, programScalePredefinedSection, PREDEFINED_SCALE_TONIC_ID+((PREDEFINED_SCALE_PARAMETERS*NUMBER_OF_PREDEFINED_SCALES)*(uint16_t)activeProgram)+PREDEFINED_SCALE_PARAMETERS*(uint16_t)activeScale);
        noteShiftLevel = configuration.readParameter(CONF_BLOCK_PROGRAM, programScalePredefinedSection, PREDEFINED_SCALE_SHIFT_ID+((PREDEFINED_SCALE_PARAMETERS*NUMBER_OF_PREDEFINED_SCALES)*(uint16_t)activeProgram)+PREDEFINED_SCALE_PARAMETERS*(uint16_t)activeScale);
    c486:	f6 01       	movw	r30, r12
    c488:	e5 56       	subi	r30, 0x65	; 101
    c48a:	fe 4f       	sbci	r31, 0xFE	; 254
    c48c:	80 83       	st	Z, r24
            //printf("Shift: %d\n", noteShiftLevel);
        //#endif

        uint8_t noteCounter = 0;

        for (int i=0; i<notesPerScale; i++) {
    c48e:	e7 2c       	mov	r14, r7
    c490:	f1 2c       	mov	r15, r1
    c492:	1e 14       	cp	r1, r14
    c494:	1f 04       	cpc	r1, r15
    c496:	b4 f4       	brge	.+44     	; 0xc4c4 <_ZN4Pads13generateScaleE7scale_t+0x242>
    c498:	56 01       	movw	r10, r12
    c49a:	f1 eb       	ldi	r31, 0xB1	; 177
    c49c:	af 1a       	sub	r10, r31
    c49e:	fe ef       	ldi	r31, 0xFE	; 254
    c4a0:	bf 0a       	sbc	r11, r31
    c4a2:	41 2c       	mov	r4, r1
    c4a4:	51 2c       	mov	r5, r1

            padNote[i][0] = getScaleNote(scale, i);
    c4a6:	64 2d       	mov	r22, r4
    c4a8:	81 2f       	mov	r24, r17
    c4aa:	0e 94 51 7e 	call	0xfca2	; 0xfca2 <_Z12getScaleNote7scale_th>
    c4ae:	f5 01       	movw	r30, r10
    c4b0:	80 83       	st	Z, r24
            //printf("Shift: %d\n", noteShiftLevel);
        //#endif

        uint8_t noteCounter = 0;

        for (int i=0; i<notesPerScale; i++) {
    c4b2:	ff ef       	ldi	r31, 0xFF	; 255
    c4b4:	4f 1a       	sub	r4, r31
    c4b6:	5f 0a       	sbc	r5, r31
    c4b8:	27 e0       	ldi	r18, 0x07	; 7
    c4ba:	a2 0e       	add	r10, r18
    c4bc:	b1 1c       	adc	r11, r1
    c4be:	e4 14       	cp	r14, r4
    c4c0:	f5 04       	cpc	r15, r5
    c4c2:	89 f7       	brne	.-30     	; 0xc4a6 <_ZN4Pads13generateScaleE7scale_t+0x224>
            padNote[i][0] = getScaleNote(scale, i);
            noteCounter++;

        }

        if (notesPerScale < MAX_PADS) {
    c4c4:	38 e0       	ldi	r19, 0x08	; 8
    c4c6:	37 15       	cp	r19, r7
    c4c8:	08 f4       	brcc	.+2      	; 0xc4cc <_ZN4Pads13generateScaleE7scale_t+0x24a>
    c4ca:	01 c1       	rjmp	.+514    	; 0xc6ce <_ZN4Pads13generateScaleE7scale_t+0x44c>
    c4cc:	96 01       	movw	r18, r12
    c4ce:	87 e0       	ldi	r24, 0x07	; 7
    c4d0:	78 9e       	mul	r7, r24
    c4d2:	20 0d       	add	r18, r0
    c4d4:	31 1d       	adc	r19, r1
    c4d6:	11 24       	eor	r1, r1
    c4d8:	f9 01       	movw	r30, r18
    c4da:	e1 5b       	subi	r30, 0xB1	; 177
    c4dc:	fe 4f       	sbci	r31, 0xFE	; 254
    c4de:	5f 01       	movw	r10, r30
    c4e0:	6e 2d       	mov	r22, r14
    c4e2:	67 19       	sub	r22, r7

            noteCounter = 0;

            for (int i=notesPerScale; i<MAX_PADS; i++)  {

                padNote[i][0] = getScaleNote(scale, noteCounter);
    c4e4:	81 2f       	mov	r24, r17
    c4e6:	0e 94 51 7e 	call	0xfca2	; 0xfca2 <_Z12getScaleNote7scale_th>
                //these notes are actually in another octave
                padNote[i][0] += MIDI_NOTES;
    c4ea:	84 5f       	subi	r24, 0xF4	; 244
    c4ec:	f5 01       	movw	r30, r10
    c4ee:	80 83       	st	Z, r24

        if (notesPerScale < MAX_PADS) {

            noteCounter = 0;

            for (int i=notesPerScale; i<MAX_PADS; i++)  {
    c4f0:	ff ef       	ldi	r31, 0xFF	; 255
    c4f2:	ef 1a       	sub	r14, r31
    c4f4:	ff 0a       	sbc	r15, r31
    c4f6:	27 e0       	ldi	r18, 0x07	; 7
    c4f8:	a2 0e       	add	r10, r18
    c4fa:	b1 1c       	adc	r11, r1
    c4fc:	39 e0       	ldi	r19, 0x09	; 9
    c4fe:	e3 16       	cp	r14, r19
    c500:	f1 04       	cpc	r15, r1
    c502:	74 f3       	brlt	.-36     	; 0xc4e0 <_ZN4Pads13generateScaleE7scale_t+0x25e>
    c504:	e4 c0       	rjmp	.+456    	; 0xc6ce <_ZN4Pads13generateScaleE7scale_t+0x44c>
        //default notes in scale are now applied to pads
        //apply saved octave

        for (int i=0; i<MAX_PADS; i++)    {

            padNote[i][0] += (MIDI_NOTES*octave);
    c506:	80 81       	ld	r24, Z
    c508:	80 0f       	add	r24, r16
    c50a:	80 83       	st	Z, r24
    c50c:	37 96       	adiw	r30, 0x07	; 7
        }

        //default notes in scale are now applied to pads
        //apply saved octave

        for (int i=0; i<MAX_PADS; i++)    {
    c50e:	e2 17       	cp	r30, r18
    c510:	f3 07       	cpc	r31, r19
    c512:	c9 f7       	brne	.-14     	; 0xc506 <_ZN4Pads13generateScaleE7scale_t+0x284>
            padNote[i][0] += (MIDI_NOTES*octave);

        }

        //now apply saved tonic
        setTonic((note_t)tonic, true); //internal change, do not write anything to eeprom
    c514:	41 e0       	ldi	r20, 0x01	; 1
    c516:	69 2d       	mov	r22, r9
    c518:	c6 01       	movw	r24, r12
    c51a:	0e 94 f4 75 	call	0xebe8	; 0xebe8 <_ZN4Pads8setTonicE6note_tb>

        //finally, apply note shift
        if (noteShiftLevel < 0)  {
    c51e:	f6 01       	movw	r30, r12
    c520:	e5 56       	subi	r30, 0x65	; 101
    c522:	fe 4f       	sbci	r31, 0xFE	; 254
    c524:	80 81       	ld	r24, Z
    c526:	88 23       	and	r24, r24
    c528:	1c f0       	brlt	.+6      	; 0xc530 <_ZN4Pads13generateScaleE7scale_t+0x2ae>
            for (int i=0; i<noteShiftLevel; i++)
                shiftNote(false, true);

        }   else {

            for (int i=0; i<noteShiftLevel; i++)
    c52a:	18 16       	cp	r1, r24
    c52c:	ec f0       	brlt	.+58     	; 0xc568 <_ZN4Pads13generateScaleE7scale_t+0x2e6>
    c52e:	db c0       	rjmp	.+438    	; 0xc6e6 <_ZN4Pads13generateScaleE7scale_t+0x464>
        setTonic((note_t)tonic, true); //internal change, do not write anything to eeprom

        //finally, apply note shift
        if (noteShiftLevel < 0)  {

            noteShiftLevel *= -1;
    c530:	81 95       	neg	r24
    c532:	f6 01       	movw	r30, r12
    c534:	e5 56       	subi	r30, 0x65	; 101
    c536:	fe 4f       	sbci	r31, 0xFE	; 254
    c538:	80 83       	st	Z, r24
            for (int i=0; i<noteShiftLevel; i++)
    c53a:	18 16       	cp	r1, r24
    c53c:	0c f0       	brlt	.+2      	; 0xc540 <_ZN4Pads13generateScaleE7scale_t+0x2be>
    c53e:	d3 c0       	rjmp	.+422    	; 0xc6e6 <_ZN4Pads13generateScaleE7scale_t+0x464>
    c540:	e1 2c       	mov	r14, r1
    c542:	f1 2c       	mov	r15, r1
    c544:	8f 01       	movw	r16, r30
                shiftNote(false, true);
    c546:	41 e0       	ldi	r20, 0x01	; 1
    c548:	60 e0       	ldi	r22, 0x00	; 0
    c54a:	c6 01       	movw	r24, r12
    c54c:	0e 94 43 72 	call	0xe486	; 0xe486 <_ZN4Pads9shiftNoteEbb>

        //finally, apply note shift
        if (noteShiftLevel < 0)  {

            noteShiftLevel *= -1;
            for (int i=0; i<noteShiftLevel; i++)
    c550:	8f ef       	ldi	r24, 0xFF	; 255
    c552:	e8 1a       	sub	r14, r24
    c554:	f8 0a       	sbc	r15, r24
    c556:	f8 01       	movw	r30, r16
    c558:	80 81       	ld	r24, Z
    c55a:	08 2e       	mov	r0, r24
    c55c:	00 0c       	add	r0, r0
    c55e:	99 0b       	sbc	r25, r25
    c560:	e8 16       	cp	r14, r24
    c562:	f9 06       	cpc	r15, r25
    c564:	84 f3       	brlt	.-32     	; 0xc546 <_ZN4Pads13generateScaleE7scale_t+0x2c4>
    c566:	bf c0       	rjmp	.+382    	; 0xc6e6 <_ZN4Pads13generateScaleE7scale_t+0x464>
                shiftNote(false, true);

        }   else {

            for (int i=0; i<noteShiftLevel; i++)
    c568:	e1 2c       	mov	r14, r1
    c56a:	f1 2c       	mov	r15, r1
    c56c:	86 01       	movw	r16, r12
    c56e:	05 56       	subi	r16, 0x65	; 101
    c570:	1e 4f       	sbci	r17, 0xFE	; 254
                shiftNote(true, true);
    c572:	41 e0       	ldi	r20, 0x01	; 1
    c574:	61 e0       	ldi	r22, 0x01	; 1
    c576:	c6 01       	movw	r24, r12
    c578:	0e 94 43 72 	call	0xe486	; 0xe486 <_ZN4Pads9shiftNoteEbb>
            for (int i=0; i<noteShiftLevel; i++)
                shiftNote(false, true);

        }   else {

            for (int i=0; i<noteShiftLevel; i++)
    c57c:	ff ef       	ldi	r31, 0xFF	; 255
    c57e:	ef 1a       	sub	r14, r31
    c580:	ff 0a       	sbc	r15, r31
    c582:	f8 01       	movw	r30, r16
    c584:	80 81       	ld	r24, Z
    c586:	08 2e       	mov	r0, r24
    c588:	00 0c       	add	r0, r0
    c58a:	99 0b       	sbc	r25, r25
    c58c:	e8 16       	cp	r14, r24
    c58e:	f9 06       	cpc	r15, r25
    c590:	84 f3       	brlt	.-32     	; 0xc572 <_ZN4Pads13generateScaleE7scale_t+0x2f0>
    c592:	a9 c0       	rjmp	.+338    	; 0xc6e6 <_ZN4Pads13generateScaleE7scale_t+0x464>

        //#if MODE_SERIAL > 0
            //printf("User scale %d\n", scale-NUMBER_OF_PREDEFINED_SCALES);
        //#endif

        uint16_t noteID = (scale - NUMBER_OF_PREDEFINED_SCALES)*(MAX_PADS*NOTES_PER_PAD);
    c594:	86 2f       	mov	r24, r22
    c596:	90 e0       	ldi	r25, 0x00	; 0
    c598:	07 97       	sbiw	r24, 0x07	; 7
    c59a:	2f e3       	ldi	r18, 0x3F	; 63
    c59c:	28 9f       	mul	r18, r24
    c59e:	20 01       	movw	r4, r0
    c5a0:	29 9f       	mul	r18, r25
    c5a2:	50 0c       	add	r5, r0
    c5a4:	11 24       	eor	r1, r1
    c5a6:	92 01       	movw	r18, r4
    c5a8:	22 0f       	add	r18, r18
    c5aa:	33 1f       	adc	r19, r19
    c5ac:	3e 83       	std	Y+6, r19	; 0x06
    c5ae:	2d 83       	std	Y+5, r18	; 0x05
    c5b0:	c6 01       	movw	r24, r12
    c5b2:	81 5b       	subi	r24, 0xB1	; 177
    c5b4:	9e 4f       	sbci	r25, 0xFE	; 254
    c5b6:	9a 83       	std	Y+2, r25	; 0x02
    c5b8:	89 83       	std	Y+1, r24	; 0x01
    c5ba:	f2 01       	movw	r30, r4
    c5bc:	ff 96       	adiw	r30, 0x3f	; 63
    c5be:	fc 83       	std	Y+4, r31	; 0x04
    c5c0:	eb 83       	std	Y+3, r30	; 0x03
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    c5c2:	0f 2e       	mov	r0, r31
    c5c4:	f1 eb       	ldi	r31, 0xB1	; 177
    c5c6:	af 2e       	mov	r10, r31
    c5c8:	f4 e0       	ldi	r31, 0x04	; 4
    c5ca:	bf 2e       	mov	r11, r31
    c5cc:	f0 2d       	mov	r31, r0
    c5ce:	0f 2e       	mov	r0, r31
    c5d0:	f3 eb       	ldi	r31, 0xB3	; 179
    c5d2:	cf 2e       	mov	r12, r31
    c5d4:	f4 e0       	ldi	r31, 0x04	; 4
    c5d6:	df 2e       	mov	r13, r31
    c5d8:	f0 2d       	mov	r31, r0
        return blocks[blockID].blockStartAddress+START_OFFSET;

    };
    inline uint8_t getParameterType(uint8_t blockID, uint8_t sectionID) {

        return blocks[blockID].sectionParameterType[sectionID];
    c5da:	0f 2e       	mov	r0, r31
    c5dc:	fb ed       	ldi	r31, 0xDB	; 219
    c5de:	6f 2e       	mov	r6, r31
    c5e0:	f4 e0       	ldi	r31, 0x04	; 4
    c5e2:	7f 2e       	mov	r7, r31
    c5e4:	f0 2d       	mov	r31, r0
    c5e6:	5b c0       	rjmp	.+182    	; 0xc69e <_ZN4Pads13generateScaleE7scale_t+0x41c>
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    c5e8:	f5 01       	movw	r30, r10
    c5ea:	20 81       	ld	r18, Z
    c5ec:	31 81       	ldd	r19, Z+1	; 0x01
    c5ee:	f6 01       	movw	r30, r12
    c5f0:	80 81       	ld	r24, Z
    c5f2:	91 81       	ldd	r25, Z+1	; 0x01
    c5f4:	82 0f       	add	r24, r18
    c5f6:	93 1f       	adc	r25, r19
    c5f8:	05 96       	adiw	r24, 0x05	; 5
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    c5fa:	f3 01       	movw	r30, r6
    c5fc:	20 81       	ld	r18, Z
    c5fe:	21 30       	cpi	r18, 0x01	; 1
    c600:	09 f1       	breq	.+66     	; 0xc644 <_ZN4Pads13generateScaleE7scale_t+0x3c2>
    c602:	18 f0       	brcs	.+6      	; 0xc60a <_ZN4Pads13generateScaleE7scale_t+0x388>
    c604:	22 30       	cpi	r18, 0x02	; 2
    c606:	19 f1       	breq	.+70     	; 0xc64e <_ZN4Pads13generateScaleE7scale_t+0x3cc>
    c608:	29 c0       	rjmp	.+82     	; 0xc65c <_ZN4Pads13generateScaleE7scale_t+0x3da>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    c60a:	18 01       	movw	r2, r16
    c60c:	36 94       	lsr	r3
    c60e:	27 94       	ror	r2
    c610:	36 94       	lsr	r3
    c612:	27 94       	ror	r2
    c614:	36 94       	lsr	r3
    c616:	27 94       	ror	r2
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    c618:	82 0d       	add	r24, r2
    c61a:	91 1d       	adc	r25, r1
            if (startAddress > EEPROM_SIZE) {
    c61c:	81 30       	cpi	r24, 0x01	; 1
    c61e:	f0 e1       	ldi	r31, 0x10	; 16
    c620:	9f 07       	cpc	r25, r31
    c622:	f0 f4       	brcc	.+60     	; 0xc660 <_ZN4Pads13generateScaleE7scale_t+0x3de>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    c624:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    c628:	90 e0       	ldi	r25, 0x00	; 0

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    c62a:	22 0c       	add	r2, r2
    c62c:	22 0c       	add	r2, r2
    c62e:	22 0c       	add	r2, r2
    c630:	20 2f       	mov	r18, r16
    c632:	22 19       	sub	r18, r2
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    c634:	02 c0       	rjmp	.+4      	; 0xc63a <_ZN4Pads13generateScaleE7scale_t+0x3b8>
    c636:	95 95       	asr	r25
    c638:	87 95       	ror	r24
    c63a:	2a 95       	dec	r18
    c63c:	e2 f7       	brpl	.-8      	; 0xc636 <_ZN4Pads13generateScaleE7scale_t+0x3b4>
    c63e:	81 70       	andi	r24, 0x01	; 1
    c640:	99 27       	eor	r25, r25
    c642:	0f c0       	rjmp	.+30     	; 0xc662 <_ZN4Pads13generateScaleE7scale_t+0x3e0>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    c644:	80 0f       	add	r24, r16
    c646:	91 1f       	adc	r25, r17
    c648:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    c64c:	0a c0       	rjmp	.+20     	; 0xc662 <_ZN4Pads13generateScaleE7scale_t+0x3e0>
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    c64e:	2d 81       	ldd	r18, Y+5	; 0x05
    c650:	3e 81       	ldd	r19, Y+6	; 0x06
    c652:	82 0f       	add	r24, r18
    c654:	93 1f       	adc	r25, r19
    c656:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    c65a:	03 c0       	rjmp	.+6      	; 0xc662 <_ZN4Pads13generateScaleE7scale_t+0x3e0>
            break;

        }   return 0;
    c65c:	80 e0       	ldi	r24, 0x00	; 0
    c65e:	01 c0       	rjmp	.+2      	; 0xc662 <_ZN4Pads13generateScaleE7scale_t+0x3e0>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    c660:	80 e0       	ldi	r24, 0x00	; 0

        for (int i=0; i<MAX_PADS; i++)    {

            for (int j=0; j<NOTES_PER_PAD; j++) {

                padNote[i][j] = configuration.readParameter(CONF_BLOCK_USER_SCALE, padNotesSection, noteID+j+(NOTES_PER_PAD*i));
    c662:	f4 01       	movw	r30, r8
    c664:	81 93       	st	Z+, r24
    c666:	4f 01       	movw	r8, r30
    c668:	0f 5f       	subi	r16, 0xFF	; 255
    c66a:	1f 4f       	sbci	r17, 0xFF	; 255
    c66c:	2d 81       	ldd	r18, Y+5	; 0x05
    c66e:	3e 81       	ldd	r19, Y+6	; 0x06
    c670:	2e 5f       	subi	r18, 0xFE	; 254
    c672:	3f 4f       	sbci	r19, 0xFF	; 255
    c674:	3e 83       	std	Y+6, r19	; 0x06
    c676:	2d 83       	std	Y+5, r18	; 0x05

        uint16_t noteID = (scale - NUMBER_OF_PREDEFINED_SCALES)*(MAX_PADS*NOTES_PER_PAD);

        for (int i=0; i<MAX_PADS; i++)    {

            for (int j=0; j<NOTES_PER_PAD; j++) {
    c678:	2e 15       	cp	r18, r14
    c67a:	3f 05       	cpc	r19, r15
    c67c:	09 f0       	breq	.+2      	; 0xc680 <_ZN4Pads13generateScaleE7scale_t+0x3fe>
    c67e:	b4 cf       	rjmp	.-152    	; 0xc5e8 <_ZN4Pads13generateScaleE7scale_t+0x366>
    c680:	89 81       	ldd	r24, Y+1	; 0x01
    c682:	9a 81       	ldd	r25, Y+2	; 0x02
    c684:	07 96       	adiw	r24, 0x07	; 7
    c686:	9a 83       	std	Y+2, r25	; 0x02
    c688:	89 83       	std	Y+1, r24	; 0x01
    c68a:	97 e0       	ldi	r25, 0x07	; 7
    c68c:	49 0e       	add	r4, r25
    c68e:	51 1c       	adc	r5, r1
    c690:	fe 82       	std	Y+6, r15	; 0x06
    c692:	ed 82       	std	Y+5, r14	; 0x05
            //printf("User scale %d\n", scale-NUMBER_OF_PREDEFINED_SCALES);
        //#endif

        uint16_t noteID = (scale - NUMBER_OF_PREDEFINED_SCALES)*(MAX_PADS*NOTES_PER_PAD);

        for (int i=0; i<MAX_PADS; i++)    {
    c694:	eb 81       	ldd	r30, Y+3	; 0x03
    c696:	fc 81       	ldd	r31, Y+4	; 0x04
    c698:	4e 16       	cp	r4, r30
    c69a:	5f 06       	cpc	r5, r31
    c69c:	21 f1       	breq	.+72     	; 0xc6e6 <_ZN4Pads13generateScaleE7scale_t+0x464>
    c69e:	ed 80       	ldd	r14, Y+5	; 0x05
    c6a0:	fe 80       	ldd	r15, Y+6	; 0x06
    c6a2:	fe e0       	ldi	r31, 0x0E	; 14
    c6a4:	ef 0e       	add	r14, r31
    c6a6:	f1 1c       	adc	r15, r1
            for (int i=0; i<noteShiftLevel; i++)
                shiftNote(false, true);

        }   else {

            for (int i=0; i<noteShiftLevel; i++)
    c6a8:	82 01       	movw	r16, r4
    c6aa:	89 80       	ldd	r8, Y+1	; 0x01
    c6ac:	9a 80       	ldd	r9, Y+2	; 0x02
    c6ae:	9c cf       	rjmp	.-200    	; 0xc5e8 <_ZN4Pads13generateScaleE7scale_t+0x366>
    c6b0:	80 e0       	ldi	r24, 0x00	; 0
    c6b2:	90 e0       	ldi	r25, 0x00	; 0

    if (isPredefinedScale(scale)) {

        //predefined scale
        uint8_t notesPerScale = getNotesPerScale(scale);
        uint8_t octave = configuration.readParameter(CONF_BLOCK_PROGRAM, programScalePredefinedSection, PREDEFINED_SCALE_OCTAVE_ID+((PREDEFINED_SCALE_PARAMETERS*NUMBER_OF_PREDEFINED_SCALES)*(uint16_t)activeProgram)+PREDEFINED_SCALE_PARAMETERS*(uint16_t)activeScale);
    c6b4:	08 2f       	mov	r16, r24
        note_t tonic = (note_t)configuration.readParameter(CONF_BLOCK_PROGRAM, programScalePredefinedSection, PREDEFINED_SCALE_TONIC_ID+((PREDEFINED_SCALE_PARAMETERS*NUMBER_OF_PREDEFINED_SCALES)*(uint16_t)activeProgram)+PREDEFINED_SCALE_PARAMETERS*(uint16_t)activeScale);
    c6b6:	42 01       	movw	r8, r4
    c6b8:	2f ef       	ldi	r18, 0xFF	; 255
    c6ba:	82 1a       	sub	r8, r18
    c6bc:	92 0a       	sbc	r9, r18
    c6be:	6c ce       	rjmp	.-808    	; 0xc398 <_ZN4Pads13generateScaleE7scale_t+0x116>
    c6c0:	80 e0       	ldi	r24, 0x00	; 0
    c6c2:	90 e0       	ldi	r25, 0x00	; 0
    c6c4:	98 2e       	mov	r9, r24
        noteShiftLevel = configuration.readParameter(CONF_BLOCK_PROGRAM, programScalePredefinedSection, PREDEFINED_SCALE_SHIFT_ID+((PREDEFINED_SCALE_PARAMETERS*NUMBER_OF_PREDEFINED_SCALES)*(uint16_t)activeProgram)+PREDEFINED_SCALE_PARAMETERS*(uint16_t)activeScale);
    c6c6:	32 e0       	ldi	r19, 0x02	; 2
    c6c8:	43 0e       	add	r4, r19
    c6ca:	51 1c       	adc	r5, r1
    c6cc:	a6 ce       	rjmp	.-692    	; 0xc41a <_ZN4Pads13generateScaleE7scale_t+0x198>
        //default notes in scale are now applied to pads
        //apply saved octave

        for (int i=0; i<MAX_PADS; i++)    {

            padNote[i][0] += (MIDI_NOTES*octave);
    c6ce:	80 2f       	mov	r24, r16
    c6d0:	88 0f       	add	r24, r24
    c6d2:	08 0f       	add	r16, r24
    c6d4:	00 0f       	add	r16, r16
    c6d6:	00 0f       	add	r16, r16
    c6d8:	f6 01       	movw	r30, r12
    c6da:	e1 5b       	subi	r30, 0xB1	; 177
    c6dc:	fe 4f       	sbci	r31, 0xFE	; 254
    c6de:	96 01       	movw	r18, r12
    c6e0:	22 57       	subi	r18, 0x72	; 114
    c6e2:	3e 4f       	sbci	r19, 0xFE	; 254
    c6e4:	10 cf       	rjmp	.-480    	; 0xc506 <_ZN4Pads13generateScaleE7scale_t+0x284>
                //printf("%d\n", padNote[i][j]);
//
        //}
    //#endif

}
    c6e6:	26 96       	adiw	r28, 0x06	; 6
    c6e8:	0f b6       	in	r0, 0x3f	; 63
    c6ea:	f8 94       	cli
    c6ec:	de bf       	out	0x3e, r29	; 62
    c6ee:	0f be       	out	0x3f, r0	; 63
    c6f0:	cd bf       	out	0x3d, r28	; 61
    c6f2:	df 91       	pop	r29
    c6f4:	cf 91       	pop	r28
    c6f6:	1f 91       	pop	r17
    c6f8:	0f 91       	pop	r16
    c6fa:	ff 90       	pop	r15
    c6fc:	ef 90       	pop	r14
    c6fe:	df 90       	pop	r13
    c700:	cf 90       	pop	r12
    c702:	bf 90       	pop	r11
    c704:	af 90       	pop	r10
    c706:	9f 90       	pop	r9
    c708:	8f 90       	pop	r8
    c70a:	7f 90       	pop	r7
    c70c:	6f 90       	pop	r6
    c70e:	5f 90       	pop	r5
    c710:	4f 90       	pop	r4
    c712:	3f 90       	pop	r3
    c714:	2f 90       	pop	r2
    c716:	08 95       	ret

0000c718 <_ZN4Pads18getScaleParametersEv>:
        leds.setLEDstate(LED_ON_OFF_Y, getMIDISendState(onOff_y, lastTouchedPad) ? ledStateFull : ledStateOff);
    #endif

}

void Pads::getScaleParameters()    {
    c718:	cf 93       	push	r28
    c71a:	df 93       	push	r29
    c71c:	ec 01       	movw	r28, r24
    c71e:	fc 01       	movw	r30, r24
    c720:	e1 5b       	subi	r30, 0xB1	; 177
    c722:	fe 4f       	sbci	r31, 0xFE	; 254
    c724:	ac 01       	movw	r20, r24
    c726:	42 57       	subi	r20, 0x72	; 114
    c728:	5e 4f       	sbci	r21, 0xFE	; 254
    //#endif

    //clear all pad notes before assigning new ones
    for (int i=0; i<MAX_PADS; i++)
        for (int j=0; j<NOTES_PER_PAD; j++)
            padNote[i][j] = BLANK_NOTE;
    c72a:	90 e8       	ldi	r25, 0x80	; 128
    c72c:	08 c0       	rjmp	.+16     	; 0xc73e <_ZN4Pads18getScaleParametersEv+0x26>
    c72e:	91 93       	st	Z+, r25
        //printf("Scale: %d\n", activeScale);
    //#endif

    //clear all pad notes before assigning new ones
    for (int i=0; i<MAX_PADS; i++)
        for (int j=0; j<NOTES_PER_PAD; j++)
    c730:	e2 17       	cp	r30, r18
    c732:	f3 07       	cpc	r31, r19
    c734:	e1 f7       	brne	.-8      	; 0xc72e <_ZN4Pads18getScaleParametersEv+0x16>
    c736:	f9 01       	movw	r30, r18
        //printf("Printing out scale settings\n");
        //printf("Scale: %d\n", activeScale);
    //#endif

    //clear all pad notes before assigning new ones
    for (int i=0; i<MAX_PADS; i++)
    c738:	42 17       	cp	r20, r18
    c73a:	53 07       	cpc	r21, r19
    c73c:	21 f0       	breq	.+8      	; 0xc746 <_ZN4Pads18getScaleParametersEv+0x2e>
    c73e:	9f 01       	movw	r18, r30
    c740:	29 5f       	subi	r18, 0xF9	; 249
    c742:	3f 4f       	sbci	r19, 0xFF	; 255
    c744:	f4 cf       	rjmp	.-24     	; 0xc72e <_ZN4Pads18getScaleParametersEv+0x16>
        for (int j=0; j<NOTES_PER_PAD; j++)
            padNote[i][j] = BLANK_NOTE;

    generateScale((scale_t)activeScale);
    c746:	fe 01       	movw	r30, r28
    c748:	e4 56       	subi	r30, 0x64	; 100
    c74a:	fe 4f       	sbci	r31, 0xFE	; 254
    c74c:	60 81       	ld	r22, Z
    c74e:	ce 01       	movw	r24, r28
    c750:	98 dd       	rcall	.-1232   	; 0xc282 <_ZN4Pads13generateScaleE7scale_t>

    //reset this variable first
    activeOctave = DEFAULT_OCTAVE;
    c752:	84 e0       	ldi	r24, 0x04	; 4
    c754:	fe 01       	movw	r30, r28
    c756:	e6 56       	subi	r30, 0x66	; 102
    c758:	fe 4f       	sbci	r31, 0xFE	; 254
    c75a:	80 83       	st	Z, r24

    for (int i=0; i<NOTES_PER_PAD; i++) {

        if (padNote[0][i] != BLANK_NOTE)    {
    c75c:	eb 54       	subi	r30, 0x4B	; 75
    c75e:	f1 09       	sbc	r31, r1
    c760:	90 81       	ld	r25, Z
    c762:	90 38       	cpi	r25, 0x80	; 128
    c764:	59 f4       	brne	.+22     	; 0xc77c <_ZN4Pads18getScaleParametersEv+0x64>
    c766:	31 96       	adiw	r30, 0x01	; 1
    c768:	9e 01       	movw	r18, r28
    c76a:	2a 5a       	subi	r18, 0xAA	; 170
    c76c:	3e 4f       	sbci	r19, 0xFE	; 254
    c76e:	91 91       	ld	r25, Z+
    c770:	90 38       	cpi	r25, 0x80	; 128
    c772:	21 f4       	brne	.+8      	; 0xc77c <_ZN4Pads18getScaleParametersEv+0x64>
    generateScale((scale_t)activeScale);

    //reset this variable first
    activeOctave = DEFAULT_OCTAVE;

    for (int i=0; i<NOTES_PER_PAD; i++) {
    c774:	e2 17       	cp	r30, r18
    c776:	f3 07       	cpc	r31, r19
    c778:	d1 f7       	brne	.-12     	; 0xc76e <_ZN4Pads18getScaleParametersEv+0x56>
    c77a:	0a c0       	rjmp	.+20     	; 0xc790 <_ZN4Pads18getScaleParametersEv+0x78>

        if (padNote[0][i] != BLANK_NOTE)    {

            activeOctave = getOctaveFromNote(padNote[0][i]);
    c77c:	c6 56       	subi	r28, 0x66	; 102
    c77e:	de 4f       	sbci	r29, 0xFE	; 254
}

uint8_t Pads::getOctaveFromNote(uint8_t note)  {

    if (note == BLANK_NOTE) return MIDI_OCTAVE_RANGE;
    return note / MIDI_NOTES;
    c780:	8b ea       	ldi	r24, 0xAB	; 171
    c782:	98 9f       	mul	r25, r24
    c784:	91 2d       	mov	r25, r1
    c786:	11 24       	eor	r1, r1
    c788:	96 95       	lsr	r25
    c78a:	96 95       	lsr	r25
    c78c:	96 95       	lsr	r25

    for (int i=0; i<NOTES_PER_PAD; i++) {

        if (padNote[0][i] != BLANK_NOTE)    {

            activeOctave = getOctaveFromNote(padNote[0][i]);
    c78e:	98 83       	st	Y, r25

        }

    }

}
    c790:	df 91       	pop	r29
    c792:	cf 91       	pop	r28
    c794:	08 95       	ret

0000c796 <_ZN4Pads20getProgramParametersEv>:

    aftertouchType = configuration.readParameter(CONF_BLOCK_MIDI, 0, MIDI_SETTING_AFTERTOUCH_TYPE_ID);

}

void Pads::getProgramParameters()   {
    c796:	ef 92       	push	r14
    c798:	ff 92       	push	r15
    c79a:	0f 93       	push	r16
    c79c:	1f 93       	push	r17
    c79e:	cf 93       	push	r28
    c7a0:	df 93       	push	r29
    c7a2:	ec 01       	movw	r28, r24
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    c7a4:	80 91 7b 04 	lds	r24, 0x047B
    c7a8:	90 91 7c 04 	lds	r25, 0x047C
    c7ac:	20 91 7d 04 	lds	r18, 0x047D
    c7b0:	30 91 7e 04 	lds	r19, 0x047E
    c7b4:	28 0f       	add	r18, r24
    c7b6:	39 1f       	adc	r19, r25
    c7b8:	2b 5f       	subi	r18, 0xFB	; 251
    c7ba:	3f 4f       	sbci	r19, 0xFF	; 255
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    c7bc:	80 91 a5 04 	lds	r24, 0x04A5
    c7c0:	81 30       	cpi	r24, 0x01	; 1
    c7c2:	71 f0       	breq	.+28     	; 0xc7e0 <_ZN4Pads20getProgramParametersEv+0x4a>
    c7c4:	18 f0       	brcs	.+6      	; 0xc7cc <_ZN4Pads20getProgramParametersEv+0x36>
    c7c6:	82 30       	cpi	r24, 0x02	; 2
    c7c8:	81 f0       	breq	.+32     	; 0xc7ea <_ZN4Pads20getProgramParametersEv+0x54>
    c7ca:	14 c0       	rjmp	.+40     	; 0xc7f4 <_ZN4Pads20getProgramParametersEv+0x5e>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
            if (startAddress > EEPROM_SIZE) {
    c7cc:	21 30       	cpi	r18, 0x01	; 1
    c7ce:	80 e1       	ldi	r24, 0x10	; 16
    c7d0:	38 07       	cpc	r19, r24
    c7d2:	98 f4       	brcc	.+38     	; 0xc7fa <_ZN4Pads20getProgramParametersEv+0x64>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    c7d4:	c9 01       	movw	r24, r18
    c7d6:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    c7da:	08 2f       	mov	r16, r24
    c7dc:	01 70       	andi	r16, 0x01	; 1
    c7de:	0f c0       	rjmp	.+30     	; 0xc7fe <_ZN4Pads20getProgramParametersEv+0x68>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    c7e0:	c9 01       	movw	r24, r18
    c7e2:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    c7e6:	08 2f       	mov	r16, r24
    c7e8:	0a c0       	rjmp	.+20     	; 0xc7fe <_ZN4Pads20getProgramParametersEv+0x68>
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    c7ea:	c9 01       	movw	r24, r18
    c7ec:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    c7f0:	8c 01       	movw	r16, r24
    c7f2:	05 c0       	rjmp	.+10     	; 0xc7fe <_ZN4Pads20getProgramParametersEv+0x68>
            break;

        }   return 0;
    c7f4:	00 e0       	ldi	r16, 0x00	; 0
    c7f6:	10 e0       	ldi	r17, 0x00	; 0
    c7f8:	02 c0       	rjmp	.+4      	; 0xc7fe <_ZN4Pads20getProgramParametersEv+0x68>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    c7fa:	00 e0       	ldi	r16, 0x00	; 0
    c7fc:	10 e0       	ldi	r17, 0x00	; 0

    #if MODE_SERIAL > 0
        printf("Printing out program settings\n");
    #endif

    activeProgram = configuration.readParameter(CONF_BLOCK_PROGRAM, programLastActiveProgramSection, 0);
    c7fe:	fe 01       	movw	r30, r28
    c800:	e3 56       	subi	r30, 0x63	; 99
    c802:	fe 4f       	sbci	r31, 0xFE	; 254
    c804:	00 83       	st	Z, r16
    activeScale = configuration.readParameter(CONF_BLOCK_PROGRAM, programLastActiveScaleSection, (uint16_t)activeProgram);
    c806:	00 2e       	mov	r0, r16
    c808:	00 0c       	add	r0, r0
    c80a:	11 0b       	sbc	r17, r17
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    c80c:	80 91 7b 04 	lds	r24, 0x047B
    c810:	90 91 7c 04 	lds	r25, 0x047C
    c814:	20 91 7f 04 	lds	r18, 0x047F
    c818:	30 91 80 04 	lds	r19, 0x0480
    c81c:	28 0f       	add	r18, r24
    c81e:	39 1f       	adc	r19, r25
    c820:	2b 5f       	subi	r18, 0xFB	; 251
    c822:	3f 4f       	sbci	r19, 0xFF	; 255
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    c824:	80 91 a6 04 	lds	r24, 0x04A6
    c828:	81 30       	cpi	r24, 0x01	; 1
    c82a:	09 f1       	breq	.+66     	; 0xc86e <_ZN4Pads20getProgramParametersEv+0xd8>
    c82c:	18 f0       	brcs	.+6      	; 0xc834 <_ZN4Pads20getProgramParametersEv+0x9e>
    c82e:	82 30       	cpi	r24, 0x02	; 2
    c830:	21 f1       	breq	.+72     	; 0xc87a <_ZN4Pads20getProgramParametersEv+0xe4>
    c832:	2b c0       	rjmp	.+86     	; 0xc88a <_ZN4Pads20getProgramParametersEv+0xf4>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    c834:	78 01       	movw	r14, r16
    c836:	f6 94       	lsr	r15
    c838:	e7 94       	ror	r14
    c83a:	f6 94       	lsr	r15
    c83c:	e7 94       	ror	r14
    c83e:	f6 94       	lsr	r15
    c840:	e7 94       	ror	r14
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    c842:	c9 01       	movw	r24, r18
    c844:	8e 0d       	add	r24, r14
    c846:	91 1d       	adc	r25, r1
            if (startAddress > EEPROM_SIZE) {
    c848:	81 30       	cpi	r24, 0x01	; 1
    c84a:	20 e1       	ldi	r18, 0x10	; 16
    c84c:	92 07       	cpc	r25, r18
    c84e:	00 f5       	brcc	.+64     	; 0xc890 <_ZN4Pads20getProgramParametersEv+0xfa>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    c850:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    c854:	90 e0       	ldi	r25, 0x00	; 0

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    c856:	ee 0c       	add	r14, r14
    c858:	ee 0c       	add	r14, r14
    c85a:	ee 0c       	add	r14, r14
    c85c:	0e 19       	sub	r16, r14
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    c85e:	02 c0       	rjmp	.+4      	; 0xc864 <_ZN4Pads20getProgramParametersEv+0xce>
    c860:	95 95       	asr	r25
    c862:	87 95       	ror	r24
    c864:	0a 95       	dec	r16
    c866:	e2 f7       	brpl	.-8      	; 0xc860 <_ZN4Pads20getProgramParametersEv+0xca>
    c868:	81 70       	andi	r24, 0x01	; 1
    c86a:	99 27       	eor	r25, r25
    c86c:	13 c0       	rjmp	.+38     	; 0xc894 <_ZN4Pads20getProgramParametersEv+0xfe>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    c86e:	c8 01       	movw	r24, r16
    c870:	82 0f       	add	r24, r18
    c872:	93 1f       	adc	r25, r19
    c874:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    c878:	0d c0       	rjmp	.+26     	; 0xc894 <_ZN4Pads20getProgramParametersEv+0xfe>
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
    c87a:	c8 01       	movw	r24, r16
    c87c:	88 0f       	add	r24, r24
    c87e:	99 1f       	adc	r25, r25
            return eeprom_read_word((uint16_t*)startAddress);
    c880:	82 0f       	add	r24, r18
    c882:	93 1f       	adc	r25, r19
    c884:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    c888:	05 c0       	rjmp	.+10     	; 0xc894 <_ZN4Pads20getProgramParametersEv+0xfe>
            break;

        }   return 0;
    c88a:	80 e0       	ldi	r24, 0x00	; 0
    c88c:	90 e0       	ldi	r25, 0x00	; 0
    c88e:	02 c0       	rjmp	.+4      	; 0xc894 <_ZN4Pads20getProgramParametersEv+0xfe>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    c890:	80 e0       	ldi	r24, 0x00	; 0
    c892:	90 e0       	ldi	r25, 0x00	; 0
    c894:	fe 01       	movw	r30, r28
    c896:	e4 56       	subi	r30, 0x64	; 100
    c898:	fe 4f       	sbci	r31, 0xFE	; 254
    c89a:	80 83       	st	Z, r24
    #if MODE_SERIAL > 0
        printf("Active program: %d\n", activeProgram+1);
        printf("Active scale: %d\n", activeScale);
    #endif

    getPadParameters();
    c89c:	ce 01       	movw	r24, r28
    c89e:	0e 94 92 56 	call	0xad24	; 0xad24 <_ZN4Pads16getPadParametersEv>
    //scale is contained within program, apply new parameters
    getScaleParameters();
    c8a2:	ce 01       	movw	r24, r28
    c8a4:	39 df       	rcall	.-398    	; 0xc718 <_ZN4Pads18getScaleParametersEv>

}
    c8a6:	df 91       	pop	r29
    c8a8:	cf 91       	pop	r28
    c8aa:	1f 91       	pop	r17
    c8ac:	0f 91       	pop	r16
    c8ae:	ff 90       	pop	r15
    c8b0:	ef 90       	pop	r14
    c8b2:	08 95       	ret

0000c8b4 <_ZN4Pads17getPressureLimitsEv>:
    getYLimits();
    getAftertouchLimits();

}

void Pads::getPressureLimits()  {
    c8b4:	2f 92       	push	r2
    c8b6:	3f 92       	push	r3
    c8b8:	4f 92       	push	r4
    c8ba:	5f 92       	push	r5
    c8bc:	6f 92       	push	r6
    c8be:	7f 92       	push	r7
    c8c0:	8f 92       	push	r8
    c8c2:	9f 92       	push	r9
    c8c4:	af 92       	push	r10
    c8c6:	bf 92       	push	r11
    c8c8:	cf 92       	push	r12
    c8ca:	df 92       	push	r13
    c8cc:	ef 92       	push	r14
    c8ce:	ff 92       	push	r15
    c8d0:	0f 93       	push	r16
    c8d2:	1f 93       	push	r17
    c8d4:	cf 93       	push	r28
    c8d6:	df 93       	push	r29
    c8d8:	00 d0       	rcall	.+0      	; 0xc8da <_ZN4Pads17getPressureLimitsEv+0x26>
    c8da:	00 d0       	rcall	.+0      	; 0xc8dc <_ZN4Pads17getPressureLimitsEv+0x28>
    c8dc:	cd b7       	in	r28, 0x3d	; 61
    c8de:	de b7       	in	r29, 0x3e	; 62
    c8e0:	8c 01       	movw	r16, r24
    c8e2:	01 54       	subi	r16, 0x41	; 65
    c8e4:	1f 4f       	sbci	r17, 0xFF	; 255
    c8e6:	21 2c       	mov	r2, r1
    c8e8:	31 2c       	mov	r3, r1

    //#if MODE_SERIAL > 0
        //printf("Printing out pressure limits for pads\n");
    //#endif

    for (int i=0; i<MAX_PADS; i++) {
    c8ea:	1c 82       	std	Y+4, r1	; 0x04
    c8ec:	1b 82       	std	Y+3, r1	; 0x03
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    c8ee:	0f 2e       	mov	r0, r31
    c8f0:	f7 ee       	ldi	r31, 0xE7	; 231
    c8f2:	cf 2e       	mov	r12, r31
    c8f4:	f4 e0       	ldi	r31, 0x04	; 4
    c8f6:	df 2e       	mov	r13, r31
    c8f8:	f0 2d       	mov	r31, r0
    c8fa:	0f 2e       	mov	r0, r31
    c8fc:	fb ee       	ldi	r31, 0xEB	; 235
    c8fe:	af 2e       	mov	r10, r31
    c900:	f4 e0       	ldi	r31, 0x04	; 4
    c902:	bf 2e       	mov	r11, r31
    c904:	f0 2d       	mov	r31, r0
        return blocks[blockID].blockStartAddress+START_OFFSET;

    };
    inline uint8_t getParameterType(uint8_t blockID, uint8_t sectionID) {

        return blocks[blockID].sectionParameterType[sectionID];
    c906:	0f 2e       	mov	r0, r31
    c908:	f2 e1       	ldi	r31, 0x12	; 18
    c90a:	8f 2e       	mov	r8, r31
    c90c:	f5 e0       	ldi	r31, 0x05	; 5
    c90e:	9f 2e       	mov	r9, r31
    c910:	f0 2d       	mov	r31, r0
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    c912:	0f 2e       	mov	r0, r31
    c914:	fd ee       	ldi	r31, 0xED	; 237
    c916:	6f 2e       	mov	r6, r31
    c918:	f4 e0       	ldi	r31, 0x04	; 4
    c91a:	7f 2e       	mov	r7, r31
    c91c:	f0 2d       	mov	r31, r0
        return blocks[blockID].blockStartAddress+START_OFFSET;

    };
    inline uint8_t getParameterType(uint8_t blockID, uint8_t sectionID) {

        return blocks[blockID].sectionParameterType[sectionID];
    c91e:	0f 2e       	mov	r0, r31
    c920:	f3 e1       	ldi	r31, 0x13	; 19
    c922:	4f 2e       	mov	r4, r31
    c924:	f5 e0       	ldi	r31, 0x05	; 5
    c926:	5f 2e       	mov	r5, r31
    c928:	f0 2d       	mov	r31, r0

        padPressureLimitLower[i] = configuration.readParameter(CONF_BLOCK_PAD_CALIBRATION, padCalibrationPressureLowerSection, i);
    c92a:	eb 80       	ldd	r14, Y+3	; 0x03
    c92c:	fc 80       	ldd	r15, Y+4	; 0x04
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    c92e:	f6 01       	movw	r30, r12
    c930:	20 81       	ld	r18, Z
    c932:	31 81       	ldd	r19, Z+1	; 0x01
    c934:	f5 01       	movw	r30, r10
    c936:	80 81       	ld	r24, Z
    c938:	91 81       	ldd	r25, Z+1	; 0x01
    c93a:	82 0f       	add	r24, r18
    c93c:	93 1f       	adc	r25, r19
    c93e:	05 96       	adiw	r24, 0x05	; 5
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    c940:	f4 01       	movw	r30, r8
    c942:	20 81       	ld	r18, Z
    c944:	21 30       	cpi	r18, 0x01	; 1
    c946:	21 f1       	breq	.+72     	; 0xc990 <_ZN4Pads17getPressureLimitsEv+0xdc>
    c948:	18 f0       	brcs	.+6      	; 0xc950 <_ZN4Pads17getPressureLimitsEv+0x9c>
    c94a:	22 30       	cpi	r18, 0x02	; 2
    c94c:	49 f1       	breq	.+82     	; 0xc9a0 <_ZN4Pads17getPressureLimitsEv+0xec>
    c94e:	2d c0       	rjmp	.+90     	; 0xc9aa <_ZN4Pads17getPressureLimitsEv+0xf6>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    c950:	97 01       	movw	r18, r14
    c952:	36 95       	lsr	r19
    c954:	27 95       	ror	r18
    c956:	36 95       	lsr	r19
    c958:	27 95       	ror	r18
    c95a:	36 95       	lsr	r19
    c95c:	27 95       	ror	r18
    c95e:	3a 83       	std	Y+2, r19	; 0x02
    c960:	29 83       	std	Y+1, r18	; 0x01
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    c962:	82 0f       	add	r24, r18
    c964:	91 1d       	adc	r25, r1
            if (startAddress > EEPROM_SIZE) {
    c966:	81 30       	cpi	r24, 0x01	; 1
    c968:	30 e1       	ldi	r19, 0x10	; 16
    c96a:	93 07       	cpc	r25, r19
    c96c:	08 f5       	brcc	.+66     	; 0xc9b0 <_ZN4Pads17getPressureLimitsEv+0xfc>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    c96e:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    c972:	90 e0       	ldi	r25, 0x00	; 0

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    c974:	29 81       	ldd	r18, Y+1	; 0x01
    c976:	22 0f       	add	r18, r18
    c978:	22 0f       	add	r18, r18
    c97a:	22 0f       	add	r18, r18
    c97c:	eb 81       	ldd	r30, Y+3	; 0x03
    c97e:	e2 1b       	sub	r30, r18
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    c980:	02 c0       	rjmp	.+4      	; 0xc986 <_ZN4Pads17getPressureLimitsEv+0xd2>
    c982:	95 95       	asr	r25
    c984:	87 95       	ror	r24
    c986:	ea 95       	dec	r30
    c988:	e2 f7       	brpl	.-8      	; 0xc982 <_ZN4Pads17getPressureLimitsEv+0xce>
    c98a:	81 70       	andi	r24, 0x01	; 1
    c98c:	99 27       	eor	r25, r25
    c98e:	12 c0       	rjmp	.+36     	; 0xc9b4 <_ZN4Pads17getPressureLimitsEv+0x100>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    c990:	2b 81       	ldd	r18, Y+3	; 0x03
    c992:	3c 81       	ldd	r19, Y+4	; 0x04
    c994:	82 0f       	add	r24, r18
    c996:	93 1f       	adc	r25, r19
    c998:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    c99c:	90 e0       	ldi	r25, 0x00	; 0
    c99e:	0a c0       	rjmp	.+20     	; 0xc9b4 <_ZN4Pads17getPressureLimitsEv+0x100>
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    c9a0:	82 0d       	add	r24, r2
    c9a2:	93 1d       	adc	r25, r3
    c9a4:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    c9a8:	05 c0       	rjmp	.+10     	; 0xc9b4 <_ZN4Pads17getPressureLimitsEv+0x100>
            break;

        }   return 0;
    c9aa:	80 e0       	ldi	r24, 0x00	; 0
    c9ac:	90 e0       	ldi	r25, 0x00	; 0
    c9ae:	02 c0       	rjmp	.+4      	; 0xc9b4 <_ZN4Pads17getPressureLimitsEv+0x100>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    c9b0:	80 e0       	ldi	r24, 0x00	; 0
    c9b2:	90 e0       	ldi	r25, 0x00	; 0
    c9b4:	f8 01       	movw	r30, r16
    c9b6:	81 93       	st	Z+, r24
    c9b8:	91 93       	st	Z+, r25
    c9ba:	8f 01       	movw	r16, r30
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    c9bc:	f6 01       	movw	r30, r12
    c9be:	20 81       	ld	r18, Z
    c9c0:	31 81       	ldd	r19, Z+1	; 0x01
    c9c2:	f3 01       	movw	r30, r6
    c9c4:	80 81       	ld	r24, Z
    c9c6:	91 81       	ldd	r25, Z+1	; 0x01
    c9c8:	82 0f       	add	r24, r18
    c9ca:	93 1f       	adc	r25, r19
    c9cc:	05 96       	adiw	r24, 0x05	; 5
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    c9ce:	f2 01       	movw	r30, r4
    c9d0:	20 81       	ld	r18, Z
    c9d2:	21 30       	cpi	r18, 0x01	; 1
    c9d4:	01 f1       	breq	.+64     	; 0xca16 <_ZN4Pads17getPressureLimitsEv+0x162>
    c9d6:	18 f0       	brcs	.+6      	; 0xc9de <_ZN4Pads17getPressureLimitsEv+0x12a>
    c9d8:	22 30       	cpi	r18, 0x02	; 2
    c9da:	19 f1       	breq	.+70     	; 0xca22 <_ZN4Pads17getPressureLimitsEv+0x16e>
    c9dc:	27 c0       	rjmp	.+78     	; 0xca2c <_ZN4Pads17getPressureLimitsEv+0x178>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    c9de:	f6 94       	lsr	r15
    c9e0:	e7 94       	ror	r14
    c9e2:	f6 94       	lsr	r15
    c9e4:	e7 94       	ror	r14
    c9e6:	f6 94       	lsr	r15
    c9e8:	e7 94       	ror	r14
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    c9ea:	8e 0d       	add	r24, r14
    c9ec:	91 1d       	adc	r25, r1
            if (startAddress > EEPROM_SIZE) {
    c9ee:	81 30       	cpi	r24, 0x01	; 1
    c9f0:	f0 e1       	ldi	r31, 0x10	; 16
    c9f2:	9f 07       	cpc	r25, r31
    c9f4:	f0 f4       	brcc	.+60     	; 0xca32 <_ZN4Pads17getPressureLimitsEv+0x17e>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    c9f6:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    c9fa:	90 e0       	ldi	r25, 0x00	; 0

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    c9fc:	ee 0c       	add	r14, r14
    c9fe:	ee 0c       	add	r14, r14
    ca00:	ee 0c       	add	r14, r14
    ca02:	2b 81       	ldd	r18, Y+3	; 0x03
    ca04:	2e 19       	sub	r18, r14
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    ca06:	02 c0       	rjmp	.+4      	; 0xca0c <_ZN4Pads17getPressureLimitsEv+0x158>
    ca08:	95 95       	asr	r25
    ca0a:	87 95       	ror	r24
    ca0c:	2a 95       	dec	r18
    ca0e:	e2 f7       	brpl	.-8      	; 0xca08 <_ZN4Pads17getPressureLimitsEv+0x154>
    ca10:	81 70       	andi	r24, 0x01	; 1
    ca12:	99 27       	eor	r25, r25
    ca14:	10 c0       	rjmp	.+32     	; 0xca36 <_ZN4Pads17getPressureLimitsEv+0x182>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    ca16:	8e 0d       	add	r24, r14
    ca18:	9f 1d       	adc	r25, r15
    ca1a:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    ca1e:	90 e0       	ldi	r25, 0x00	; 0
    ca20:	0a c0       	rjmp	.+20     	; 0xca36 <_ZN4Pads17getPressureLimitsEv+0x182>
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    ca22:	82 0d       	add	r24, r2
    ca24:	93 1d       	adc	r25, r3
    ca26:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    ca2a:	05 c0       	rjmp	.+10     	; 0xca36 <_ZN4Pads17getPressureLimitsEv+0x182>
            break;

        }   return 0;
    ca2c:	80 e0       	ldi	r24, 0x00	; 0
    ca2e:	90 e0       	ldi	r25, 0x00	; 0
    ca30:	02 c0       	rjmp	.+4      	; 0xca36 <_ZN4Pads17getPressureLimitsEv+0x182>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    ca32:	80 e0       	ldi	r24, 0x00	; 0
    ca34:	90 e0       	ldi	r25, 0x00	; 0
        padPressureLimitUpper[i] = configuration.readParameter(CONF_BLOCK_PAD_CALIBRATION, padCalibrationPressureUpperSection, i);
    ca36:	f8 01       	movw	r30, r16
    ca38:	91 8b       	std	Z+17, r25	; 0x11
    ca3a:	80 8b       	std	Z+16, r24	; 0x10

    //#if MODE_SERIAL > 0
        //printf("Printing out pressure limits for pads\n");
    //#endif

    for (int i=0; i<MAX_PADS; i++) {
    ca3c:	2b 81       	ldd	r18, Y+3	; 0x03
    ca3e:	3c 81       	ldd	r19, Y+4	; 0x04
    ca40:	2f 5f       	subi	r18, 0xFF	; 255
    ca42:	3f 4f       	sbci	r19, 0xFF	; 255
    ca44:	3c 83       	std	Y+4, r19	; 0x04
    ca46:	2b 83       	std	Y+3, r18	; 0x03
    ca48:	32 e0       	ldi	r19, 0x02	; 2
    ca4a:	23 0e       	add	r2, r19
    ca4c:	31 1c       	adc	r3, r1
    ca4e:	82 e1       	ldi	r24, 0x12	; 18
    ca50:	28 16       	cp	r2, r24
    ca52:	31 04       	cpc	r3, r1
    ca54:	09 f0       	breq	.+2      	; 0xca58 <_ZN4Pads17getPressureLimitsEv+0x1a4>
    ca56:	69 cf       	rjmp	.-302    	; 0xc92a <_ZN4Pads17getPressureLimitsEv+0x76>
            //printf("Upper pressure limit for pad %d: %d\n", i, padPressureLimitUpper[i]);
        //#endif

    }

}
    ca58:	0f 90       	pop	r0
    ca5a:	0f 90       	pop	r0
    ca5c:	0f 90       	pop	r0
    ca5e:	0f 90       	pop	r0
    ca60:	df 91       	pop	r29
    ca62:	cf 91       	pop	r28
    ca64:	1f 91       	pop	r17
    ca66:	0f 91       	pop	r16
    ca68:	ff 90       	pop	r15
    ca6a:	ef 90       	pop	r14
    ca6c:	df 90       	pop	r13
    ca6e:	cf 90       	pop	r12
    ca70:	bf 90       	pop	r11
    ca72:	af 90       	pop	r10
    ca74:	9f 90       	pop	r9
    ca76:	8f 90       	pop	r8
    ca78:	7f 90       	pop	r7
    ca7a:	6f 90       	pop	r6
    ca7c:	5f 90       	pop	r5
    ca7e:	4f 90       	pop	r4
    ca80:	3f 90       	pop	r3
    ca82:	2f 90       	pop	r2
    ca84:	08 95       	ret

0000ca86 <_ZN4Pads10getXLimitsEv>:

void Pads::getXLimits()  {
    ca86:	2f 92       	push	r2
    ca88:	3f 92       	push	r3
    ca8a:	4f 92       	push	r4
    ca8c:	5f 92       	push	r5
    ca8e:	6f 92       	push	r6
    ca90:	7f 92       	push	r7
    ca92:	8f 92       	push	r8
    ca94:	9f 92       	push	r9
    ca96:	af 92       	push	r10
    ca98:	bf 92       	push	r11
    ca9a:	cf 92       	push	r12
    ca9c:	df 92       	push	r13
    ca9e:	ef 92       	push	r14
    caa0:	ff 92       	push	r15
    caa2:	0f 93       	push	r16
    caa4:	1f 93       	push	r17
    caa6:	cf 93       	push	r28
    caa8:	df 93       	push	r29
    caaa:	00 d0       	rcall	.+0      	; 0xcaac <_ZN4Pads10getXLimitsEv+0x26>
    caac:	00 d0       	rcall	.+0      	; 0xcaae <_ZN4Pads10getXLimitsEv+0x28>
    caae:	cd b7       	in	r28, 0x3d	; 61
    cab0:	de b7       	in	r29, 0x3e	; 62
    cab2:	8c 01       	movw	r16, r24
    cab4:	0d 51       	subi	r16, 0x1D	; 29
    cab6:	1f 4f       	sbci	r17, 0xFF	; 255
    cab8:	21 2c       	mov	r2, r1
    caba:	31 2c       	mov	r3, r1

    //#if MODE_SERIAL > 0
        //printf("Printing out X limits for pads\n");
    //#endif

    for (int i=0; i<MAX_PADS; i++) {
    cabc:	1c 82       	std	Y+4, r1	; 0x04
    cabe:	1b 82       	std	Y+3, r1	; 0x03
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    cac0:	0f 2e       	mov	r0, r31
    cac2:	f7 ee       	ldi	r31, 0xE7	; 231
    cac4:	cf 2e       	mov	r12, r31
    cac6:	f4 e0       	ldi	r31, 0x04	; 4
    cac8:	df 2e       	mov	r13, r31
    caca:	f0 2d       	mov	r31, r0
    cacc:	0f 2e       	mov	r0, r31
    cace:	ff ee       	ldi	r31, 0xEF	; 239
    cad0:	af 2e       	mov	r10, r31
    cad2:	f4 e0       	ldi	r31, 0x04	; 4
    cad4:	bf 2e       	mov	r11, r31
    cad6:	f0 2d       	mov	r31, r0
        return blocks[blockID].blockStartAddress+START_OFFSET;

    };
    inline uint8_t getParameterType(uint8_t blockID, uint8_t sectionID) {

        return blocks[blockID].sectionParameterType[sectionID];
    cad8:	0f 2e       	mov	r0, r31
    cada:	f4 e1       	ldi	r31, 0x14	; 20
    cadc:	8f 2e       	mov	r8, r31
    cade:	f5 e0       	ldi	r31, 0x05	; 5
    cae0:	9f 2e       	mov	r9, r31
    cae2:	f0 2d       	mov	r31, r0
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    cae4:	0f 2e       	mov	r0, r31
    cae6:	f1 ef       	ldi	r31, 0xF1	; 241
    cae8:	6f 2e       	mov	r6, r31
    caea:	f4 e0       	ldi	r31, 0x04	; 4
    caec:	7f 2e       	mov	r7, r31
    caee:	f0 2d       	mov	r31, r0
        return blocks[blockID].blockStartAddress+START_OFFSET;

    };
    inline uint8_t getParameterType(uint8_t blockID, uint8_t sectionID) {

        return blocks[blockID].sectionParameterType[sectionID];
    caf0:	0f 2e       	mov	r0, r31
    caf2:	f5 e1       	ldi	r31, 0x15	; 21
    caf4:	4f 2e       	mov	r4, r31
    caf6:	f5 e0       	ldi	r31, 0x05	; 5
    caf8:	5f 2e       	mov	r5, r31
    cafa:	f0 2d       	mov	r31, r0

        padXLimitLower[i] = configuration.readParameter(CONF_BLOCK_PAD_CALIBRATION, padCalibrationXlowerSection, i);
    cafc:	eb 80       	ldd	r14, Y+3	; 0x03
    cafe:	fc 80       	ldd	r15, Y+4	; 0x04
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    cb00:	f6 01       	movw	r30, r12
    cb02:	20 81       	ld	r18, Z
    cb04:	31 81       	ldd	r19, Z+1	; 0x01
    cb06:	f5 01       	movw	r30, r10
    cb08:	80 81       	ld	r24, Z
    cb0a:	91 81       	ldd	r25, Z+1	; 0x01
    cb0c:	82 0f       	add	r24, r18
    cb0e:	93 1f       	adc	r25, r19
    cb10:	05 96       	adiw	r24, 0x05	; 5
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    cb12:	f4 01       	movw	r30, r8
    cb14:	20 81       	ld	r18, Z
    cb16:	21 30       	cpi	r18, 0x01	; 1
    cb18:	21 f1       	breq	.+72     	; 0xcb62 <_ZN4Pads10getXLimitsEv+0xdc>
    cb1a:	18 f0       	brcs	.+6      	; 0xcb22 <_ZN4Pads10getXLimitsEv+0x9c>
    cb1c:	22 30       	cpi	r18, 0x02	; 2
    cb1e:	49 f1       	breq	.+82     	; 0xcb72 <_ZN4Pads10getXLimitsEv+0xec>
    cb20:	2d c0       	rjmp	.+90     	; 0xcb7c <_ZN4Pads10getXLimitsEv+0xf6>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    cb22:	97 01       	movw	r18, r14
    cb24:	36 95       	lsr	r19
    cb26:	27 95       	ror	r18
    cb28:	36 95       	lsr	r19
    cb2a:	27 95       	ror	r18
    cb2c:	36 95       	lsr	r19
    cb2e:	27 95       	ror	r18
    cb30:	3a 83       	std	Y+2, r19	; 0x02
    cb32:	29 83       	std	Y+1, r18	; 0x01
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    cb34:	82 0f       	add	r24, r18
    cb36:	91 1d       	adc	r25, r1
            if (startAddress > EEPROM_SIZE) {
    cb38:	81 30       	cpi	r24, 0x01	; 1
    cb3a:	30 e1       	ldi	r19, 0x10	; 16
    cb3c:	93 07       	cpc	r25, r19
    cb3e:	08 f5       	brcc	.+66     	; 0xcb82 <_ZN4Pads10getXLimitsEv+0xfc>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    cb40:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    cb44:	90 e0       	ldi	r25, 0x00	; 0

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    cb46:	29 81       	ldd	r18, Y+1	; 0x01
    cb48:	22 0f       	add	r18, r18
    cb4a:	22 0f       	add	r18, r18
    cb4c:	22 0f       	add	r18, r18
    cb4e:	eb 81       	ldd	r30, Y+3	; 0x03
    cb50:	e2 1b       	sub	r30, r18
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    cb52:	02 c0       	rjmp	.+4      	; 0xcb58 <_ZN4Pads10getXLimitsEv+0xd2>
    cb54:	95 95       	asr	r25
    cb56:	87 95       	ror	r24
    cb58:	ea 95       	dec	r30
    cb5a:	e2 f7       	brpl	.-8      	; 0xcb54 <_ZN4Pads10getXLimitsEv+0xce>
    cb5c:	81 70       	andi	r24, 0x01	; 1
    cb5e:	99 27       	eor	r25, r25
    cb60:	12 c0       	rjmp	.+36     	; 0xcb86 <_ZN4Pads10getXLimitsEv+0x100>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    cb62:	2b 81       	ldd	r18, Y+3	; 0x03
    cb64:	3c 81       	ldd	r19, Y+4	; 0x04
    cb66:	82 0f       	add	r24, r18
    cb68:	93 1f       	adc	r25, r19
    cb6a:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    cb6e:	90 e0       	ldi	r25, 0x00	; 0
    cb70:	0a c0       	rjmp	.+20     	; 0xcb86 <_ZN4Pads10getXLimitsEv+0x100>
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    cb72:	82 0d       	add	r24, r2
    cb74:	93 1d       	adc	r25, r3
    cb76:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    cb7a:	05 c0       	rjmp	.+10     	; 0xcb86 <_ZN4Pads10getXLimitsEv+0x100>
            break;

        }   return 0;
    cb7c:	80 e0       	ldi	r24, 0x00	; 0
    cb7e:	90 e0       	ldi	r25, 0x00	; 0
    cb80:	02 c0       	rjmp	.+4      	; 0xcb86 <_ZN4Pads10getXLimitsEv+0x100>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    cb82:	80 e0       	ldi	r24, 0x00	; 0
    cb84:	90 e0       	ldi	r25, 0x00	; 0
    cb86:	f8 01       	movw	r30, r16
    cb88:	81 93       	st	Z+, r24
    cb8a:	91 93       	st	Z+, r25
    cb8c:	8f 01       	movw	r16, r30
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    cb8e:	f6 01       	movw	r30, r12
    cb90:	20 81       	ld	r18, Z
    cb92:	31 81       	ldd	r19, Z+1	; 0x01
    cb94:	f3 01       	movw	r30, r6
    cb96:	80 81       	ld	r24, Z
    cb98:	91 81       	ldd	r25, Z+1	; 0x01
    cb9a:	82 0f       	add	r24, r18
    cb9c:	93 1f       	adc	r25, r19
    cb9e:	05 96       	adiw	r24, 0x05	; 5
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    cba0:	f2 01       	movw	r30, r4
    cba2:	20 81       	ld	r18, Z
    cba4:	21 30       	cpi	r18, 0x01	; 1
    cba6:	01 f1       	breq	.+64     	; 0xcbe8 <_ZN4Pads10getXLimitsEv+0x162>
    cba8:	18 f0       	brcs	.+6      	; 0xcbb0 <_ZN4Pads10getXLimitsEv+0x12a>
    cbaa:	22 30       	cpi	r18, 0x02	; 2
    cbac:	19 f1       	breq	.+70     	; 0xcbf4 <_ZN4Pads10getXLimitsEv+0x16e>
    cbae:	27 c0       	rjmp	.+78     	; 0xcbfe <_ZN4Pads10getXLimitsEv+0x178>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    cbb0:	f6 94       	lsr	r15
    cbb2:	e7 94       	ror	r14
    cbb4:	f6 94       	lsr	r15
    cbb6:	e7 94       	ror	r14
    cbb8:	f6 94       	lsr	r15
    cbba:	e7 94       	ror	r14
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    cbbc:	8e 0d       	add	r24, r14
    cbbe:	91 1d       	adc	r25, r1
            if (startAddress > EEPROM_SIZE) {
    cbc0:	81 30       	cpi	r24, 0x01	; 1
    cbc2:	f0 e1       	ldi	r31, 0x10	; 16
    cbc4:	9f 07       	cpc	r25, r31
    cbc6:	f0 f4       	brcc	.+60     	; 0xcc04 <_ZN4Pads10getXLimitsEv+0x17e>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    cbc8:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    cbcc:	90 e0       	ldi	r25, 0x00	; 0

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    cbce:	ee 0c       	add	r14, r14
    cbd0:	ee 0c       	add	r14, r14
    cbd2:	ee 0c       	add	r14, r14
    cbd4:	2b 81       	ldd	r18, Y+3	; 0x03
    cbd6:	2e 19       	sub	r18, r14
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    cbd8:	02 c0       	rjmp	.+4      	; 0xcbde <_ZN4Pads10getXLimitsEv+0x158>
    cbda:	95 95       	asr	r25
    cbdc:	87 95       	ror	r24
    cbde:	2a 95       	dec	r18
    cbe0:	e2 f7       	brpl	.-8      	; 0xcbda <_ZN4Pads10getXLimitsEv+0x154>
    cbe2:	81 70       	andi	r24, 0x01	; 1
    cbe4:	99 27       	eor	r25, r25
    cbe6:	10 c0       	rjmp	.+32     	; 0xcc08 <_ZN4Pads10getXLimitsEv+0x182>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    cbe8:	8e 0d       	add	r24, r14
    cbea:	9f 1d       	adc	r25, r15
    cbec:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    cbf0:	90 e0       	ldi	r25, 0x00	; 0
    cbf2:	0a c0       	rjmp	.+20     	; 0xcc08 <_ZN4Pads10getXLimitsEv+0x182>
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    cbf4:	82 0d       	add	r24, r2
    cbf6:	93 1d       	adc	r25, r3
    cbf8:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    cbfc:	05 c0       	rjmp	.+10     	; 0xcc08 <_ZN4Pads10getXLimitsEv+0x182>
            break;

        }   return 0;
    cbfe:	80 e0       	ldi	r24, 0x00	; 0
    cc00:	90 e0       	ldi	r25, 0x00	; 0
    cc02:	02 c0       	rjmp	.+4      	; 0xcc08 <_ZN4Pads10getXLimitsEv+0x182>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    cc04:	80 e0       	ldi	r24, 0x00	; 0
    cc06:	90 e0       	ldi	r25, 0x00	; 0
        padXLimitUpper[i] = configuration.readParameter(CONF_BLOCK_PAD_CALIBRATION, padCalibrationXupperSection, i);
    cc08:	f8 01       	movw	r30, r16
    cc0a:	91 8b       	std	Z+17, r25	; 0x11
    cc0c:	80 8b       	std	Z+16, r24	; 0x10

    //#if MODE_SERIAL > 0
        //printf("Printing out X limits for pads\n");
    //#endif

    for (int i=0; i<MAX_PADS; i++) {
    cc0e:	2b 81       	ldd	r18, Y+3	; 0x03
    cc10:	3c 81       	ldd	r19, Y+4	; 0x04
    cc12:	2f 5f       	subi	r18, 0xFF	; 255
    cc14:	3f 4f       	sbci	r19, 0xFF	; 255
    cc16:	3c 83       	std	Y+4, r19	; 0x04
    cc18:	2b 83       	std	Y+3, r18	; 0x03
    cc1a:	32 e0       	ldi	r19, 0x02	; 2
    cc1c:	23 0e       	add	r2, r19
    cc1e:	31 1c       	adc	r3, r1
    cc20:	82 e1       	ldi	r24, 0x12	; 18
    cc22:	28 16       	cp	r2, r24
    cc24:	31 04       	cpc	r3, r1
    cc26:	09 f0       	breq	.+2      	; 0xcc2a <_ZN4Pads10getXLimitsEv+0x1a4>
    cc28:	69 cf       	rjmp	.-302    	; 0xcafc <_ZN4Pads10getXLimitsEv+0x76>
            //printf("Upper X limit for pad %d: %d\n", i, padXLimitUpper[i]);
        //#endif

    }

}
    cc2a:	0f 90       	pop	r0
    cc2c:	0f 90       	pop	r0
    cc2e:	0f 90       	pop	r0
    cc30:	0f 90       	pop	r0
    cc32:	df 91       	pop	r29
    cc34:	cf 91       	pop	r28
    cc36:	1f 91       	pop	r17
    cc38:	0f 91       	pop	r16
    cc3a:	ff 90       	pop	r15
    cc3c:	ef 90       	pop	r14
    cc3e:	df 90       	pop	r13
    cc40:	cf 90       	pop	r12
    cc42:	bf 90       	pop	r11
    cc44:	af 90       	pop	r10
    cc46:	9f 90       	pop	r9
    cc48:	8f 90       	pop	r8
    cc4a:	7f 90       	pop	r7
    cc4c:	6f 90       	pop	r6
    cc4e:	5f 90       	pop	r5
    cc50:	4f 90       	pop	r4
    cc52:	3f 90       	pop	r3
    cc54:	2f 90       	pop	r2
    cc56:	08 95       	ret

0000cc58 <_ZN4Pads10getYLimitsEv>:

void Pads::getYLimits()  {
    cc58:	2f 92       	push	r2
    cc5a:	3f 92       	push	r3
    cc5c:	4f 92       	push	r4
    cc5e:	5f 92       	push	r5
    cc60:	6f 92       	push	r6
    cc62:	7f 92       	push	r7
    cc64:	8f 92       	push	r8
    cc66:	9f 92       	push	r9
    cc68:	af 92       	push	r10
    cc6a:	bf 92       	push	r11
    cc6c:	cf 92       	push	r12
    cc6e:	df 92       	push	r13
    cc70:	ef 92       	push	r14
    cc72:	ff 92       	push	r15
    cc74:	0f 93       	push	r16
    cc76:	1f 93       	push	r17
    cc78:	cf 93       	push	r28
    cc7a:	df 93       	push	r29
    cc7c:	00 d0       	rcall	.+0      	; 0xcc7e <_ZN4Pads10getYLimitsEv+0x26>
    cc7e:	00 d0       	rcall	.+0      	; 0xcc80 <_ZN4Pads10getYLimitsEv+0x28>
    cc80:	cd b7       	in	r28, 0x3d	; 61
    cc82:	de b7       	in	r29, 0x3e	; 62
    cc84:	8c 01       	movw	r16, r24
    cc86:	09 5f       	subi	r16, 0xF9	; 249
    cc88:	1e 4f       	sbci	r17, 0xFE	; 254
    cc8a:	21 2c       	mov	r2, r1
    cc8c:	31 2c       	mov	r3, r1

    //#if MODE_SERIAL > 0
        //printf("Printing out Y limits for pads\n");
    //#endif

    for (int i=0; i<MAX_PADS; i++) {
    cc8e:	1c 82       	std	Y+4, r1	; 0x04
    cc90:	1b 82       	std	Y+3, r1	; 0x03
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    cc92:	0f 2e       	mov	r0, r31
    cc94:	f7 ee       	ldi	r31, 0xE7	; 231
    cc96:	cf 2e       	mov	r12, r31
    cc98:	f4 e0       	ldi	r31, 0x04	; 4
    cc9a:	df 2e       	mov	r13, r31
    cc9c:	f0 2d       	mov	r31, r0
    cc9e:	0f 2e       	mov	r0, r31
    cca0:	f3 ef       	ldi	r31, 0xF3	; 243
    cca2:	af 2e       	mov	r10, r31
    cca4:	f4 e0       	ldi	r31, 0x04	; 4
    cca6:	bf 2e       	mov	r11, r31
    cca8:	f0 2d       	mov	r31, r0
        return blocks[blockID].blockStartAddress+START_OFFSET;

    };
    inline uint8_t getParameterType(uint8_t blockID, uint8_t sectionID) {

        return blocks[blockID].sectionParameterType[sectionID];
    ccaa:	0f 2e       	mov	r0, r31
    ccac:	f6 e1       	ldi	r31, 0x16	; 22
    ccae:	8f 2e       	mov	r8, r31
    ccb0:	f5 e0       	ldi	r31, 0x05	; 5
    ccb2:	9f 2e       	mov	r9, r31
    ccb4:	f0 2d       	mov	r31, r0
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    ccb6:	0f 2e       	mov	r0, r31
    ccb8:	f5 ef       	ldi	r31, 0xF5	; 245
    ccba:	6f 2e       	mov	r6, r31
    ccbc:	f4 e0       	ldi	r31, 0x04	; 4
    ccbe:	7f 2e       	mov	r7, r31
    ccc0:	f0 2d       	mov	r31, r0
        return blocks[blockID].blockStartAddress+START_OFFSET;

    };
    inline uint8_t getParameterType(uint8_t blockID, uint8_t sectionID) {

        return blocks[blockID].sectionParameterType[sectionID];
    ccc2:	0f 2e       	mov	r0, r31
    ccc4:	f7 e1       	ldi	r31, 0x17	; 23
    ccc6:	4f 2e       	mov	r4, r31
    ccc8:	f5 e0       	ldi	r31, 0x05	; 5
    ccca:	5f 2e       	mov	r5, r31
    cccc:	f0 2d       	mov	r31, r0

        padYLimitLower[i] = configuration.readParameter(CONF_BLOCK_PAD_CALIBRATION, padCalibrationYlowerSection, i);
    ccce:	eb 80       	ldd	r14, Y+3	; 0x03
    ccd0:	fc 80       	ldd	r15, Y+4	; 0x04
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    ccd2:	f6 01       	movw	r30, r12
    ccd4:	20 81       	ld	r18, Z
    ccd6:	31 81       	ldd	r19, Z+1	; 0x01
    ccd8:	f5 01       	movw	r30, r10
    ccda:	80 81       	ld	r24, Z
    ccdc:	91 81       	ldd	r25, Z+1	; 0x01
    ccde:	82 0f       	add	r24, r18
    cce0:	93 1f       	adc	r25, r19
    cce2:	05 96       	adiw	r24, 0x05	; 5
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    cce4:	f4 01       	movw	r30, r8
    cce6:	20 81       	ld	r18, Z
    cce8:	21 30       	cpi	r18, 0x01	; 1
    ccea:	21 f1       	breq	.+72     	; 0xcd34 <_ZN4Pads10getYLimitsEv+0xdc>
    ccec:	18 f0       	brcs	.+6      	; 0xccf4 <_ZN4Pads10getYLimitsEv+0x9c>
    ccee:	22 30       	cpi	r18, 0x02	; 2
    ccf0:	49 f1       	breq	.+82     	; 0xcd44 <_ZN4Pads10getYLimitsEv+0xec>
    ccf2:	2d c0       	rjmp	.+90     	; 0xcd4e <_ZN4Pads10getYLimitsEv+0xf6>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    ccf4:	97 01       	movw	r18, r14
    ccf6:	36 95       	lsr	r19
    ccf8:	27 95       	ror	r18
    ccfa:	36 95       	lsr	r19
    ccfc:	27 95       	ror	r18
    ccfe:	36 95       	lsr	r19
    cd00:	27 95       	ror	r18
    cd02:	3a 83       	std	Y+2, r19	; 0x02
    cd04:	29 83       	std	Y+1, r18	; 0x01
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    cd06:	82 0f       	add	r24, r18
    cd08:	91 1d       	adc	r25, r1
            if (startAddress > EEPROM_SIZE) {
    cd0a:	81 30       	cpi	r24, 0x01	; 1
    cd0c:	30 e1       	ldi	r19, 0x10	; 16
    cd0e:	93 07       	cpc	r25, r19
    cd10:	08 f5       	brcc	.+66     	; 0xcd54 <_ZN4Pads10getYLimitsEv+0xfc>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    cd12:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    cd16:	90 e0       	ldi	r25, 0x00	; 0

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    cd18:	29 81       	ldd	r18, Y+1	; 0x01
    cd1a:	22 0f       	add	r18, r18
    cd1c:	22 0f       	add	r18, r18
    cd1e:	22 0f       	add	r18, r18
    cd20:	eb 81       	ldd	r30, Y+3	; 0x03
    cd22:	e2 1b       	sub	r30, r18
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    cd24:	02 c0       	rjmp	.+4      	; 0xcd2a <_ZN4Pads10getYLimitsEv+0xd2>
    cd26:	95 95       	asr	r25
    cd28:	87 95       	ror	r24
    cd2a:	ea 95       	dec	r30
    cd2c:	e2 f7       	brpl	.-8      	; 0xcd26 <_ZN4Pads10getYLimitsEv+0xce>
    cd2e:	81 70       	andi	r24, 0x01	; 1
    cd30:	99 27       	eor	r25, r25
    cd32:	12 c0       	rjmp	.+36     	; 0xcd58 <_ZN4Pads10getYLimitsEv+0x100>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    cd34:	2b 81       	ldd	r18, Y+3	; 0x03
    cd36:	3c 81       	ldd	r19, Y+4	; 0x04
    cd38:	82 0f       	add	r24, r18
    cd3a:	93 1f       	adc	r25, r19
    cd3c:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    cd40:	90 e0       	ldi	r25, 0x00	; 0
    cd42:	0a c0       	rjmp	.+20     	; 0xcd58 <_ZN4Pads10getYLimitsEv+0x100>
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    cd44:	82 0d       	add	r24, r2
    cd46:	93 1d       	adc	r25, r3
    cd48:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    cd4c:	05 c0       	rjmp	.+10     	; 0xcd58 <_ZN4Pads10getYLimitsEv+0x100>
            break;

        }   return 0;
    cd4e:	80 e0       	ldi	r24, 0x00	; 0
    cd50:	90 e0       	ldi	r25, 0x00	; 0
    cd52:	02 c0       	rjmp	.+4      	; 0xcd58 <_ZN4Pads10getYLimitsEv+0x100>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    cd54:	80 e0       	ldi	r24, 0x00	; 0
    cd56:	90 e0       	ldi	r25, 0x00	; 0
    cd58:	f8 01       	movw	r30, r16
    cd5a:	81 93       	st	Z+, r24
    cd5c:	91 93       	st	Z+, r25
    cd5e:	8f 01       	movw	r16, r30
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    cd60:	f6 01       	movw	r30, r12
    cd62:	20 81       	ld	r18, Z
    cd64:	31 81       	ldd	r19, Z+1	; 0x01
    cd66:	f3 01       	movw	r30, r6
    cd68:	80 81       	ld	r24, Z
    cd6a:	91 81       	ldd	r25, Z+1	; 0x01
    cd6c:	82 0f       	add	r24, r18
    cd6e:	93 1f       	adc	r25, r19
    cd70:	05 96       	adiw	r24, 0x05	; 5
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    cd72:	f2 01       	movw	r30, r4
    cd74:	20 81       	ld	r18, Z
    cd76:	21 30       	cpi	r18, 0x01	; 1
    cd78:	01 f1       	breq	.+64     	; 0xcdba <_ZN4Pads10getYLimitsEv+0x162>
    cd7a:	18 f0       	brcs	.+6      	; 0xcd82 <_ZN4Pads10getYLimitsEv+0x12a>
    cd7c:	22 30       	cpi	r18, 0x02	; 2
    cd7e:	19 f1       	breq	.+70     	; 0xcdc6 <_ZN4Pads10getYLimitsEv+0x16e>
    cd80:	27 c0       	rjmp	.+78     	; 0xcdd0 <_ZN4Pads10getYLimitsEv+0x178>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    cd82:	f6 94       	lsr	r15
    cd84:	e7 94       	ror	r14
    cd86:	f6 94       	lsr	r15
    cd88:	e7 94       	ror	r14
    cd8a:	f6 94       	lsr	r15
    cd8c:	e7 94       	ror	r14
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    cd8e:	8e 0d       	add	r24, r14
    cd90:	91 1d       	adc	r25, r1
            if (startAddress > EEPROM_SIZE) {
    cd92:	81 30       	cpi	r24, 0x01	; 1
    cd94:	f0 e1       	ldi	r31, 0x10	; 16
    cd96:	9f 07       	cpc	r25, r31
    cd98:	f0 f4       	brcc	.+60     	; 0xcdd6 <_ZN4Pads10getYLimitsEv+0x17e>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    cd9a:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    cd9e:	90 e0       	ldi	r25, 0x00	; 0

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    cda0:	ee 0c       	add	r14, r14
    cda2:	ee 0c       	add	r14, r14
    cda4:	ee 0c       	add	r14, r14
    cda6:	2b 81       	ldd	r18, Y+3	; 0x03
    cda8:	2e 19       	sub	r18, r14
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    cdaa:	02 c0       	rjmp	.+4      	; 0xcdb0 <_ZN4Pads10getYLimitsEv+0x158>
    cdac:	95 95       	asr	r25
    cdae:	87 95       	ror	r24
    cdb0:	2a 95       	dec	r18
    cdb2:	e2 f7       	brpl	.-8      	; 0xcdac <_ZN4Pads10getYLimitsEv+0x154>
    cdb4:	81 70       	andi	r24, 0x01	; 1
    cdb6:	99 27       	eor	r25, r25
    cdb8:	10 c0       	rjmp	.+32     	; 0xcdda <_ZN4Pads10getYLimitsEv+0x182>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    cdba:	8e 0d       	add	r24, r14
    cdbc:	9f 1d       	adc	r25, r15
    cdbe:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    cdc2:	90 e0       	ldi	r25, 0x00	; 0
    cdc4:	0a c0       	rjmp	.+20     	; 0xcdda <_ZN4Pads10getYLimitsEv+0x182>
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    cdc6:	82 0d       	add	r24, r2
    cdc8:	93 1d       	adc	r25, r3
    cdca:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    cdce:	05 c0       	rjmp	.+10     	; 0xcdda <_ZN4Pads10getYLimitsEv+0x182>
            break;

        }   return 0;
    cdd0:	80 e0       	ldi	r24, 0x00	; 0
    cdd2:	90 e0       	ldi	r25, 0x00	; 0
    cdd4:	02 c0       	rjmp	.+4      	; 0xcdda <_ZN4Pads10getYLimitsEv+0x182>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    cdd6:	80 e0       	ldi	r24, 0x00	; 0
    cdd8:	90 e0       	ldi	r25, 0x00	; 0
        padYLimitUpper[i] = configuration.readParameter(CONF_BLOCK_PAD_CALIBRATION, padCalibrationYupperSection, i);
    cdda:	f8 01       	movw	r30, r16
    cddc:	91 8b       	std	Z+17, r25	; 0x11
    cdde:	80 8b       	std	Z+16, r24	; 0x10

    //#if MODE_SERIAL > 0
        //printf("Printing out Y limits for pads\n");
    //#endif

    for (int i=0; i<MAX_PADS; i++) {
    cde0:	2b 81       	ldd	r18, Y+3	; 0x03
    cde2:	3c 81       	ldd	r19, Y+4	; 0x04
    cde4:	2f 5f       	subi	r18, 0xFF	; 255
    cde6:	3f 4f       	sbci	r19, 0xFF	; 255
    cde8:	3c 83       	std	Y+4, r19	; 0x04
    cdea:	2b 83       	std	Y+3, r18	; 0x03
    cdec:	32 e0       	ldi	r19, 0x02	; 2
    cdee:	23 0e       	add	r2, r19
    cdf0:	31 1c       	adc	r3, r1
    cdf2:	82 e1       	ldi	r24, 0x12	; 18
    cdf4:	28 16       	cp	r2, r24
    cdf6:	31 04       	cpc	r3, r1
    cdf8:	09 f0       	breq	.+2      	; 0xcdfc <_ZN4Pads10getYLimitsEv+0x1a4>
    cdfa:	69 cf       	rjmp	.-302    	; 0xccce <_ZN4Pads10getYLimitsEv+0x76>
            //printf("Upper Y limit for pad %d: %d\n", i, padYLimitUpper[i]);
        //#endif

    }

}
    cdfc:	0f 90       	pop	r0
    cdfe:	0f 90       	pop	r0
    ce00:	0f 90       	pop	r0
    ce02:	0f 90       	pop	r0
    ce04:	df 91       	pop	r29
    ce06:	cf 91       	pop	r28
    ce08:	1f 91       	pop	r17
    ce0a:	0f 91       	pop	r16
    ce0c:	ff 90       	pop	r15
    ce0e:	ef 90       	pop	r14
    ce10:	df 90       	pop	r13
    ce12:	cf 90       	pop	r12
    ce14:	bf 90       	pop	r11
    ce16:	af 90       	pop	r10
    ce18:	9f 90       	pop	r9
    ce1a:	8f 90       	pop	r8
    ce1c:	7f 90       	pop	r7
    ce1e:	6f 90       	pop	r6
    ce20:	5f 90       	pop	r5
    ce22:	4f 90       	pop	r4
    ce24:	3f 90       	pop	r3
    ce26:	2f 90       	pop	r2
    ce28:	08 95       	ret

0000ce2a <_ZN4Pads19getAftertouchLimitsEv>:

void Pads::getAftertouchLimits()    {
    ce2a:	4f 92       	push	r4
    ce2c:	5f 92       	push	r5
    ce2e:	6f 92       	push	r6
    ce30:	7f 92       	push	r7
    ce32:	af 92       	push	r10
    ce34:	bf 92       	push	r11
    ce36:	cf 92       	push	r12
    ce38:	df 92       	push	r13
    ce3a:	ef 92       	push	r14
    ce3c:	ff 92       	push	r15
    ce3e:	0f 93       	push	r16
    ce40:	1f 93       	push	r17
    ce42:	cf 93       	push	r28
    ce44:	df 93       	push	r29
    ce46:	8c 01       	movw	r16, r24
    ce48:	0f 52       	subi	r16, 0x2F	; 47
    ce4a:	1f 4f       	sbci	r17, 0xFF	; 255
    ce4c:	ec 01       	movw	r28, r24
    ce4e:	c5 5d       	subi	r28, 0xD5	; 213
    ce50:	de 4f       	sbci	r29, 0xFE	; 254
    ce52:	5c 01       	movw	r10, r24
    ce54:	23 ec       	ldi	r18, 0xC3	; 195
    ce56:	a2 1a       	sub	r10, r18
    ce58:	2e ef       	ldi	r18, 0xFE	; 254
    ce5a:	b2 0a       	sbc	r11, r18
        //printf("Printing out aftertouch limits for pads\n");
    //#endif

    for (int i=0; i<MAX_PADS; i++)    {

        int32_t lowerLimit = padPressureLimitUpper[i] + (int32_t)((padPressureLimitUpper[i] * (int32_t)100) * (uint32_t)AFTERTOUCH_PRESSURE_RATIO_LOWER) / 10000;
    ce5c:	0f 2e       	mov	r0, r31
    ce5e:	f0 e1       	ldi	r31, 0x10	; 16
    ce60:	4f 2e       	mov	r4, r31
    ce62:	f7 e2       	ldi	r31, 0x27	; 39
    ce64:	5f 2e       	mov	r5, r31
    ce66:	61 2c       	mov	r6, r1
    ce68:	71 2c       	mov	r7, r1
    ce6a:	f0 2d       	mov	r31, r0
    ce6c:	f8 01       	movw	r30, r16
    ce6e:	c1 90       	ld	r12, Z+
    ce70:	d1 90       	ld	r13, Z+
    ce72:	8f 01       	movw	r16, r30
    ce74:	0d 2c       	mov	r0, r13
    ce76:	00 0c       	add	r0, r0
    ce78:	ee 08       	sbc	r14, r14
    ce7a:	ff 08       	sbc	r15, r15
    ce7c:	a8 eb       	ldi	r26, 0xB8	; 184
    ce7e:	bb e0       	ldi	r27, 0x0B	; 11
    ce80:	a7 01       	movw	r20, r14
    ce82:	96 01       	movw	r18, r12
    ce84:	0e 94 9c 82 	call	0x10538	; 0x10538 <__muluhisi3>
    ce88:	a3 01       	movw	r20, r6
    ce8a:	92 01       	movw	r18, r4
    ce8c:	0e 94 68 82 	call	0x104d0	; 0x104d0 <__divmodsi4>
    ce90:	d7 01       	movw	r26, r14
    ce92:	c6 01       	movw	r24, r12
    ce94:	82 0f       	add	r24, r18
    ce96:	93 1f       	adc	r25, r19
    ce98:	a4 1f       	adc	r26, r20
    ce9a:	b5 1f       	adc	r27, r21
        int32_t upperLimit = padPressureLimitUpper[i] + (int32_t)((padPressureLimitUpper[i] * (int32_t)100) * (uint32_t)AFTERTOUCH_PRESSURE_RATIO_UPPER) / 10000;
        padAftertouchLimitLower[i] = lowerLimit;
    ce9c:	89 93       	st	Y+, r24
    ce9e:	99 93       	st	Y+, r25
    //#endif

    for (int i=0; i<MAX_PADS; i++)    {

        int32_t lowerLimit = padPressureLimitUpper[i] + (int32_t)((padPressureLimitUpper[i] * (int32_t)100) * (uint32_t)AFTERTOUCH_PRESSURE_RATIO_LOWER) / 10000;
        int32_t upperLimit = padPressureLimitUpper[i] + (int32_t)((padPressureLimitUpper[i] * (int32_t)100) * (uint32_t)AFTERTOUCH_PRESSURE_RATIO_UPPER) / 10000;
    cea0:	a4 e6       	ldi	r26, 0x64	; 100
    cea2:	b9 e1       	ldi	r27, 0x19	; 25
    cea4:	a7 01       	movw	r20, r14
    cea6:	96 01       	movw	r18, r12
    cea8:	0e 94 9c 82 	call	0x10538	; 0x10538 <__muluhisi3>
    ceac:	a3 01       	movw	r20, r6
    ceae:	92 01       	movw	r18, r4
    ceb0:	0e 94 68 82 	call	0x104d0	; 0x104d0 <__divmodsi4>
    ceb4:	c2 0e       	add	r12, r18
    ceb6:	d3 1e       	adc	r13, r19
    ceb8:	e4 1e       	adc	r14, r20
    ceba:	f5 1e       	adc	r15, r21
        padAftertouchLimitLower[i] = lowerLimit;
        padAftertouchLimitUpper[i] = upperLimit;
    cebc:	d9 8a       	std	Y+17, r13	; 0x11
    cebe:	c8 8a       	std	Y+16, r12	; 0x10

    //#if MODE_SERIAL > 0
        //printf("Printing out aftertouch limits for pads\n");
    //#endif

    for (int i=0; i<MAX_PADS; i++)    {
    cec0:	ca 15       	cp	r28, r10
    cec2:	db 05       	cpc	r29, r11
    cec4:	99 f6       	brne	.-90     	; 0xce6c <_ZN4Pads19getAftertouchLimitsEv+0x42>
            //printf("Upper aftertouch limit for pad %d: %d\n", i, padAftertouchLimitUpper[i]);
        //#endif

    }

}
    cec6:	df 91       	pop	r29
    cec8:	cf 91       	pop	r28
    ceca:	1f 91       	pop	r17
    cecc:	0f 91       	pop	r16
    cece:	ff 90       	pop	r15
    ced0:	ef 90       	pop	r14
    ced2:	df 90       	pop	r13
    ced4:	cf 90       	pop	r12
    ced6:	bf 90       	pop	r11
    ced8:	af 90       	pop	r10
    ceda:	7f 90       	pop	r7
    cedc:	6f 90       	pop	r6
    cede:	5f 90       	pop	r5
    cee0:	4f 90       	pop	r4
    cee2:	08 95       	ret

0000cee4 <_ZN4Pads12getPadLimitsEv>:
        //}
    //#endif

}

void Pads::getPadLimits()   {
    cee4:	cf 93       	push	r28
    cee6:	df 93       	push	r29
    cee8:	ec 01       	movw	r28, r24

    //#if MODE_SERIAL > 0
        //printf("Printing out limits for pads\n");
    //#endif

    getPressureLimits();
    ceea:	e4 dc       	rcall	.-1592   	; 0xc8b4 <_ZN4Pads17getPressureLimitsEv>
    getXLimits();
    ceec:	ce 01       	movw	r24, r28
    ceee:	cb dd       	rcall	.-1130   	; 0xca86 <_ZN4Pads10getXLimitsEv>
    getYLimits();
    cef0:	ce 01       	movw	r24, r28
    cef2:	b2 de       	rcall	.-668    	; 0xcc58 <_ZN4Pads10getYLimitsEv>
    getAftertouchLimits();
    cef4:	ce 01       	movw	r24, r28
    cef6:	99 df       	rcall	.-206    	; 0xce2a <_ZN4Pads19getAftertouchLimitsEv>

}
    cef8:	df 91       	pop	r29
    cefa:	cf 91       	pop	r28
    cefc:	08 95       	ret

0000cefe <_ZN4Pads16getConfigurationEv>:
#include "Pads.h"

//read from eeprom

void Pads::getConfiguration()   {
    cefe:	0f 93       	push	r16
    cf00:	1f 93       	push	r17
    cf02:	cf 93       	push	r28
    cf04:	df 93       	push	r29
    cf06:	ec 01       	movw	r28, r24

    //read pad configuration from EEPROM
    getProgramParameters();
    cf08:	46 dc       	rcall	.-1908   	; 0xc796 <_ZN4Pads20getProgramParametersEv>
    getPadLimits();
    cf0a:	ce 01       	movw	r24, r28
    cf0c:	eb df       	rcall	.-42     	; 0xcee4 <_ZN4Pads12getPadLimitsEv>
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    cf0e:	80 91 1d 05 	lds	r24, 0x051D
    cf12:	90 91 1e 05 	lds	r25, 0x051E
    cf16:	20 91 1f 05 	lds	r18, 0x051F
    cf1a:	30 91 20 05 	lds	r19, 0x0520
    cf1e:	28 0f       	add	r18, r24
    cf20:	39 1f       	adc	r19, r25
    cf22:	2b 5f       	subi	r18, 0xFB	; 251
    cf24:	3f 4f       	sbci	r19, 0xFF	; 255
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    cf26:	80 91 47 05 	lds	r24, 0x0547
    cf2a:	81 30       	cpi	r24, 0x01	; 1
    cf2c:	71 f0       	breq	.+28     	; 0xcf4a <_ZN4Pads16getConfigurationEv+0x4c>
    cf2e:	18 f0       	brcs	.+6      	; 0xcf36 <_ZN4Pads16getConfigurationEv+0x38>
    cf30:	82 30       	cpi	r24, 0x02	; 2
    cf32:	81 f0       	breq	.+32     	; 0xcf54 <_ZN4Pads16getConfigurationEv+0x56>
    cf34:	14 c0       	rjmp	.+40     	; 0xcf5e <_ZN4Pads16getConfigurationEv+0x60>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
            if (startAddress > EEPROM_SIZE) {
    cf36:	21 30       	cpi	r18, 0x01	; 1
    cf38:	80 e1       	ldi	r24, 0x10	; 16
    cf3a:	38 07       	cpc	r19, r24
    cf3c:	98 f4       	brcc	.+38     	; 0xcf64 <_ZN4Pads16getConfigurationEv+0x66>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    cf3e:	c9 01       	movw	r24, r18
    cf40:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    cf44:	08 2f       	mov	r16, r24
    cf46:	01 70       	andi	r16, 0x01	; 1
    cf48:	0f c0       	rjmp	.+30     	; 0xcf68 <_ZN4Pads16getConfigurationEv+0x6a>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    cf4a:	c9 01       	movw	r24, r18
    cf4c:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    cf50:	08 2f       	mov	r16, r24
    cf52:	0a c0       	rjmp	.+20     	; 0xcf68 <_ZN4Pads16getConfigurationEv+0x6a>
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    cf54:	c9 01       	movw	r24, r18
    cf56:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    cf5a:	8c 01       	movw	r16, r24
    cf5c:	05 c0       	rjmp	.+10     	; 0xcf68 <_ZN4Pads16getConfigurationEv+0x6a>
            break;

        }   return 0;
    cf5e:	00 e0       	ldi	r16, 0x00	; 0
    cf60:	10 e0       	ldi	r17, 0x00	; 0
    cf62:	02 c0       	rjmp	.+4      	; 0xcf68 <_ZN4Pads16getConfigurationEv+0x6a>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    cf64:	00 e0       	ldi	r16, 0x00	; 0
    cf66:	10 e0       	ldi	r17, 0x00	; 0

    aftertouchType = configuration.readParameter(CONF_BLOCK_MIDI, 0, MIDI_SETTING_AFTERTOUCH_TYPE_ID);
    cf68:	c9 56       	subi	r28, 0x69	; 105
    cf6a:	de 4f       	sbci	r29, 0xFE	; 254
    cf6c:	08 83       	st	Y, r16

}
    cf6e:	df 91       	pop	r29
    cf70:	cf 91       	pop	r28
    cf72:	1f 91       	pop	r17
    cf74:	0f 91       	pop	r16
    cf76:	08 95       	ret

0000cf78 <_ZN4Pads16getMIDISendStateE7onOff_th>:

}

bool Pads::getMIDISendState(onOff_t type, uint8_t padNumber)    {

    switch(type)    {
    cf78:	61 30       	cpi	r22, 0x01	; 1
    cf7a:	31 f0       	breq	.+12     	; 0xcf88 <_ZN4Pads16getMIDISendStateE7onOff_th+0x10>
    cf7c:	60 f0       	brcs	.+24     	; 0xcf96 <_ZN4Pads16getMIDISendStateE7onOff_th+0x1e>
    cf7e:	62 30       	cpi	r22, 0x02	; 2
    cf80:	89 f0       	breq	.+34     	; 0xcfa4 <_ZN4Pads16getMIDISendStateE7onOff_th+0x2c>
    cf82:	63 30       	cpi	r22, 0x03	; 3
    cf84:	b1 f0       	breq	.+44     	; 0xcfb2 <_ZN4Pads16getMIDISendStateE7onOff_th+0x3a>
    cf86:	1c c0       	rjmp	.+56     	; 0xcfc0 <_ZN4Pads16getMIDISendStateE7onOff_th+0x48>

        case onOff_aftertouch:
        return aftertouchSendEnabled[padNumber];
    cf88:	84 0f       	add	r24, r20
    cf8a:	91 1d       	adc	r25, r1
    cf8c:	fc 01       	movw	r30, r24
    cf8e:	ec 55       	subi	r30, 0x5C	; 92
    cf90:	ff 4f       	sbci	r31, 0xFF	; 255
    cf92:	80 81       	ld	r24, Z
    cf94:	08 95       	ret

        case onOff_notes:
        return noteSendEnabled[padNumber];
    cf96:	84 0f       	add	r24, r20
    cf98:	91 1d       	adc	r25, r1
    cf9a:	fc 01       	movw	r30, r24
    cf9c:	e5 56       	subi	r30, 0x65	; 101
    cf9e:	ff 4f       	sbci	r31, 0xFF	; 255
    cfa0:	80 81       	ld	r24, Z
    cfa2:	08 95       	ret

        case onOff_x:
        return xSendEnabled[padNumber];
    cfa4:	84 0f       	add	r24, r20
    cfa6:	91 1d       	adc	r25, r1
    cfa8:	fc 01       	movw	r30, r24
    cfaa:	e7 57       	subi	r30, 0x77	; 119
    cfac:	ff 4f       	sbci	r31, 0xFF	; 255
    cfae:	80 81       	ld	r24, Z
    cfb0:	08 95       	ret

        case onOff_y:
        return ySendEnabled[padNumber];
    cfb2:	84 0f       	add	r24, r20
    cfb4:	91 1d       	adc	r25, r1
    cfb6:	fc 01       	movw	r30, r24
    cfb8:	ee 56       	subi	r30, 0x6E	; 110
    cfba:	ff 4f       	sbci	r31, 0xFF	; 255
    cfbc:	80 81       	ld	r24, Z
    cfbe:	08 95       	ret

        default:
        return false;
    cfc0:	80 e0       	ldi	r24, 0x00	; 0

    }

}
    cfc2:	08 95       	ret

0000cfc4 <_ZN4Pads17getAftertouchTypeEv>:

aftertouchType_t Pads::getAftertouchType()  {

    return (aftertouchType_t)aftertouchType;
    cfc4:	fc 01       	movw	r30, r24
    cfc6:	e9 56       	subi	r30, 0x69	; 105
    cfc8:	fe 4f       	sbci	r31, 0xFE	; 254

}
    cfca:	80 81       	ld	r24, Z
    cfcc:	08 95       	ret

0000cfce <_ZN4Pads13getSplitStateEv>:

bool Pads::getSplitState()    {

    return splitEnabled;
    cfce:	fc 01       	movw	r30, r24
    cfd0:	e7 56       	subi	r30, 0x67	; 103
    cfd2:	fe 4f       	sbci	r31, 0xFE	; 254

}
    cfd4:	80 81       	ld	r24, Z
    cfd6:	08 95       	ret

0000cfd8 <_ZN4Pads16getActiveProgramEv>:

uint8_t Pads::getActiveProgram()    {

    return activeProgram;
    cfd8:	fc 01       	movw	r30, r24
    cfda:	e3 56       	subi	r30, 0x63	; 99
    cfdc:	fe 4f       	sbci	r31, 0xFE	; 254

}
    cfde:	80 81       	ld	r24, Z
    cfe0:	08 95       	ret

0000cfe2 <_ZN4Pads14getActiveScaleEv>:

uint8_t Pads::getActiveScale()    {

    return activeScale;
    cfe2:	fc 01       	movw	r30, r24
    cfe4:	e4 56       	subi	r30, 0x64	; 100
    cfe6:	fe 4f       	sbci	r31, 0xFE	; 254

}
    cfe8:	80 81       	ld	r24, Z
    cfea:	08 95       	ret

0000cfec <_ZN4Pads10getCCcurveE16coordinateType_th>:

uint8_t Pads::getCCcurve(coordinateType_t coordinate, uint8_t padNumber)    {

    switch(coordinate)   {
    cfec:	66 23       	and	r22, r22
    cfee:	19 f0       	breq	.+6      	; 0xcff6 <_ZN4Pads10getCCcurveE16coordinateType_th+0xa>
    cff0:	61 30       	cpi	r22, 0x01	; 1
    cff2:	41 f0       	breq	.+16     	; 0xd004 <_ZN4Pads10getCCcurveE16coordinateType_th+0x18>
    cff4:	0e c0       	rjmp	.+28     	; 0xd012 <_ZN4Pads10getCCcurveE16coordinateType_th+0x26>

        case coordinateX:
        return padCurveX[padNumber];
    cff6:	84 0f       	add	r24, r20
    cff8:	91 1d       	adc	r25, r1
    cffa:	fc 01       	movw	r30, r24
    cffc:	e3 55       	subi	r30, 0x53	; 83
    cffe:	ff 4f       	sbci	r31, 0xFF	; 255
    d000:	80 81       	ld	r24, Z
    d002:	08 95       	ret

        case coordinateY:
        return padCurveY[padNumber];
    d004:	84 0f       	add	r24, r20
    d006:	91 1d       	adc	r25, r1
    d008:	fc 01       	movw	r30, r24
    d00a:	ea 54       	subi	r30, 0x4A	; 74
    d00c:	ff 4f       	sbci	r31, 0xFF	; 255
    d00e:	80 81       	ld	r24, Z
    d010:	08 95       	ret

        default:
        return 0;
    d012:	80 e0       	ldi	r24, 0x00	; 0

    }

}
    d014:	08 95       	ret

0000d016 <_ZN4Pads15getCClimitValueE16coordinateType_t13ccLimitType_th>:

uint8_t Pads::getCClimitValue(coordinateType_t type, ccLimitType_t limitType, uint8_t padNumber)   {

    switch(type)  {
    d016:	66 23       	and	r22, r22
    d018:	19 f0       	breq	.+6      	; 0xd020 <_ZN4Pads15getCClimitValueE16coordinateType_t13ccLimitType_th+0xa>
    d01a:	61 30       	cpi	r22, 0x01	; 1
    d01c:	89 f0       	breq	.+34     	; 0xd040 <_ZN4Pads15getCClimitValueE16coordinateType_t13ccLimitType_th+0x2a>
    d01e:	20 c0       	rjmp	.+64     	; 0xd060 <_ZN4Pads15getCClimitValueE16coordinateType_t13ccLimitType_th+0x4a>

        case coordinateX:
        if (limitType == ccLimitTypeMax) return ccXmaxPad[padNumber];
    d020:	41 30       	cpi	r20, 0x01	; 1
    d022:	39 f4       	brne	.+14     	; 0xd032 <_ZN4Pads15getCClimitValueE16coordinateType_t13ccLimitType_th+0x1c>
    d024:	82 0f       	add	r24, r18
    d026:	91 1d       	adc	r25, r1
    d028:	fc 01       	movw	r30, r24
    d02a:	e2 59       	subi	r30, 0x92	; 146
    d02c:	ff 4f       	sbci	r31, 0xFF	; 255
    d02e:	80 81       	ld	r24, Z
    d030:	08 95       	ret
        else return ccXminPad[padNumber];
    d032:	82 0f       	add	r24, r18
    d034:	91 1d       	adc	r25, r1
    d036:	fc 01       	movw	r30, r24
    d038:	eb 59       	subi	r30, 0x9B	; 155
    d03a:	ff 4f       	sbci	r31, 0xFF	; 255
    d03c:	80 81       	ld	r24, Z
    d03e:	08 95       	ret

        case coordinateY:
        if (limitType == ccLimitTypeMax) return ccYmaxPad[padNumber];
    d040:	41 30       	cpi	r20, 0x01	; 1
    d042:	39 f4       	brne	.+14     	; 0xd052 <_ZN4Pads15getCClimitValueE16coordinateType_t13ccLimitType_th+0x3c>
    d044:	82 0f       	add	r24, r18
    d046:	91 1d       	adc	r25, r1
    d048:	fc 01       	movw	r30, r24
    d04a:	e0 58       	subi	r30, 0x80	; 128
    d04c:	ff 4f       	sbci	r31, 0xFF	; 255
    d04e:	80 81       	ld	r24, Z
    d050:	08 95       	ret
        else return ccYminPad[padNumber];
    d052:	82 0f       	add	r24, r18
    d054:	91 1d       	adc	r25, r1
    d056:	fc 01       	movw	r30, r24
    d058:	e9 58       	subi	r30, 0x89	; 137
    d05a:	ff 4f       	sbci	r31, 0xFF	; 255
    d05c:	80 81       	ld	r24, Z
    d05e:	08 95       	ret

        default:
        return 0;
    d060:	80 e0       	ldi	r24, 0x00	; 0

    }

}
    d062:	08 95       	ret

0000d064 <_ZN4Pads10getCCvalueE16coordinateType_th>:

uint8_t Pads::getCCvalue(coordinateType_t type, uint8_t padNumber)  {

    switch(type)  {
    d064:	66 23       	and	r22, r22
    d066:	19 f0       	breq	.+6      	; 0xd06e <_ZN4Pads10getCCvalueE16coordinateType_th+0xa>
    d068:	61 30       	cpi	r22, 0x01	; 1
    d06a:	41 f0       	breq	.+16     	; 0xd07c <_ZN4Pads10getCCvalueE16coordinateType_th+0x18>
    d06c:	0e c0       	rjmp	.+28     	; 0xd08a <_ZN4Pads10getCCvalueE16coordinateType_th+0x26>

        case coordinateX:
        return ccXPad[padNumber];
    d06e:	84 0f       	add	r24, r20
    d070:	91 1d       	adc	r25, r1
    d072:	fc 01       	movw	r30, r24
    d074:	ed 5a       	subi	r30, 0xAD	; 173
    d076:	ff 4f       	sbci	r31, 0xFF	; 255
    d078:	80 81       	ld	r24, Z
    d07a:	08 95       	ret

        case coordinateY:
        return ccYPad[padNumber];
    d07c:	84 0f       	add	r24, r20
    d07e:	91 1d       	adc	r25, r1
    d080:	fc 01       	movw	r30, r24
    d082:	e4 5a       	subi	r30, 0xA4	; 164
    d084:	ff 4f       	sbci	r31, 0xFF	; 255
    d086:	80 81       	ld	r24, Z
    d088:	08 95       	ret

        default:
        return 0;
    d08a:	80 e0       	ldi	r24, 0x00	; 0

    }

}
    d08c:	08 95       	ret

0000d08e <_ZN4Pads14getMIDIchannelEh>:

uint8_t Pads::getMIDIchannel(uint8_t pad) {

    return midiChannel[pad];
    d08e:	86 0f       	add	r24, r22
    d090:	91 1d       	adc	r25, r1
    d092:	fc 01       	movw	r30, r24
    d094:	e2 57       	subi	r30, 0x72	; 114
    d096:	fe 4f       	sbci	r31, 0xFE	; 254

}
    d098:	80 81       	ld	r24, Z
    d09a:	08 95       	ret

0000d09c <_ZN4Pads15getActiveOctaveEv>:

uint8_t Pads::getActiveOctave()    {

    return activeOctave;
    d09c:	fc 01       	movw	r30, r24
    d09e:	e6 56       	subi	r30, 0x66	; 102
    d0a0:	fe 4f       	sbci	r31, 0xFE	; 254

}
    d0a2:	80 81       	ld	r24, Z
    d0a4:	08 95       	ret

0000d0a6 <_ZN4Pads14getActiveTonicEv>:

note_t Pads::getActiveTonic()    {
    d0a6:	0f 93       	push	r16
    d0a8:	1f 93       	push	r17
    d0aa:	cf 93       	push	r28
    d0ac:	df 93       	push	r29
    d0ae:	fc 01       	movw	r30, r24

    if (isUserScale(activeScale)) {
    d0b0:	dc 01       	movw	r26, r24
    d0b2:	a4 56       	subi	r26, 0x64	; 100
    d0b4:	be 4f       	sbci	r27, 0xFE	; 254
    d0b6:	9c 91       	ld	r25, X
    d0b8:	97 30       	cpi	r25, 0x07	; 7
    d0ba:	78 f1       	brcs	.+94     	; 0xd11a <_ZN4Pads14getActiveTonicEv+0x74>

        //currentScaleTonic is first found note on first pad on user scales

        for (int i=0; i<NOTES_PER_PAD; i++)
            if (padNote[0][i] != BLANK_NOTE)
    d0bc:	ad 54       	subi	r26, 0x4D	; 77
    d0be:	b1 09       	sbc	r27, r1
    d0c0:	8c 91       	ld	r24, X
    d0c2:	80 38       	cpi	r24, 0x80	; 128
    d0c4:	39 f4       	brne	.+14     	; 0xd0d4 <_ZN4Pads14getActiveTonicEv+0x2e>
    d0c6:	11 96       	adiw	r26, 0x01	; 1

    if (isUserScale(activeScale)) {

        //currentScaleTonic is first found note on first pad on user scales

        for (int i=0; i<NOTES_PER_PAD; i++)
    d0c8:	21 e0       	ldi	r18, 0x01	; 1
    d0ca:	30 e0       	ldi	r19, 0x00	; 0
            if (padNote[0][i] != BLANK_NOTE)
    d0cc:	8d 91       	ld	r24, X+
    d0ce:	80 38       	cpi	r24, 0x80	; 128
    d0d0:	e9 f0       	breq	.+58     	; 0xd10c <_ZN4Pads14getActiveTonicEv+0x66>
    d0d2:	02 c0       	rjmp	.+4      	; 0xd0d8 <_ZN4Pads14getActiveTonicEv+0x32>
    d0d4:	20 e0       	ldi	r18, 0x00	; 0
    d0d6:	30 e0       	ldi	r19, 0x00	; 0
                return getTonicFromNote(padNote[0][i]+noteShiftAmount[i]);
    d0d8:	2e 0f       	add	r18, r30
    d0da:	3f 1f       	adc	r19, r31
    d0dc:	f9 01       	movw	r30, r18
    d0de:	ef 55       	subi	r30, 0x5F	; 95
    d0e0:	fd 4f       	sbci	r31, 0xFD	; 253
    d0e2:	20 81       	ld	r18, Z
    d0e4:	28 0f       	add	r18, r24

}

note_t Pads::getTonicFromNote(uint8_t note)    {

    if (note == BLANK_NOTE) return MIDI_NOTES;
    d0e6:	20 38       	cpi	r18, 0x80	; 128
    d0e8:	09 f4       	brne	.+2      	; 0xd0ec <_ZN4Pads14getActiveTonicEv+0x46>
    d0ea:	6a c0       	rjmp	.+212    	; 0xd1c0 <_ZN4Pads14getActiveTonicEv+0x11a>
    return (note_t)(note % MIDI_NOTES);
    d0ec:	9b ea       	ldi	r25, 0xAB	; 171
    d0ee:	29 9f       	mul	r18, r25
    d0f0:	81 2d       	mov	r24, r1
    d0f2:	11 24       	eor	r1, r1
    d0f4:	86 95       	lsr	r24
    d0f6:	86 95       	lsr	r24
    d0f8:	86 95       	lsr	r24
    d0fa:	98 2f       	mov	r25, r24
    d0fc:	99 0f       	add	r25, r25
    d0fe:	89 0f       	add	r24, r25
    d100:	98 2f       	mov	r25, r24
    d102:	99 0f       	add	r25, r25
    d104:	99 0f       	add	r25, r25
    d106:	82 2f       	mov	r24, r18
    d108:	89 1b       	sub	r24, r25
    d10a:	5b c0       	rjmp	.+182    	; 0xd1c2 <_ZN4Pads14getActiveTonicEv+0x11c>

    if (isUserScale(activeScale)) {

        //currentScaleTonic is first found note on first pad on user scales

        for (int i=0; i<NOTES_PER_PAD; i++)
    d10c:	2f 5f       	subi	r18, 0xFF	; 255
    d10e:	3f 4f       	sbci	r19, 0xFF	; 255
    d110:	27 30       	cpi	r18, 0x07	; 7
    d112:	31 05       	cpc	r19, r1
    d114:	d9 f6       	brne	.-74     	; 0xd0cc <_ZN4Pads14getActiveTonicEv+0x26>

        //predefined scale tonic is written in eeprom
        uint16_t tonicIndex = PREDEFINED_SCALE_TONIC_ID+((PREDEFINED_SCALE_PARAMETERS*NUMBER_OF_PREDEFINED_SCALES)*(uint16_t)activeProgram)+PREDEFINED_SCALE_PARAMETERS*(uint16_t)activeScale;
        return (note_t)configuration.readParameter(CONF_BLOCK_PROGRAM, programScalePredefinedSection, tonicIndex);

    }   return MIDI_NOTES;
    d116:	8c e0       	ldi	r24, 0x0C	; 12
    d118:	54 c0       	rjmp	.+168    	; 0xd1c2 <_ZN4Pads14getActiveTonicEv+0x11c>
                return getTonicFromNote(padNote[0][i]+noteShiftAmount[i]);

    }   else  {

        //predefined scale tonic is written in eeprom
        uint16_t tonicIndex = PREDEFINED_SCALE_TONIC_ID+((PREDEFINED_SCALE_PARAMETERS*NUMBER_OF_PREDEFINED_SCALES)*(uint16_t)activeProgram)+PREDEFINED_SCALE_PARAMETERS*(uint16_t)activeScale;
    d11a:	e3 56       	subi	r30, 0x63	; 99
    d11c:	fe 4f       	sbci	r31, 0xFE	; 254
    d11e:	20 81       	ld	r18, Z
    d120:	89 2f       	mov	r24, r25
    d122:	99 0f       	add	r25, r25
    d124:	99 0b       	sbc	r25, r25
    d126:	ac 01       	movw	r20, r24
    d128:	44 0f       	add	r20, r20
    d12a:	55 1f       	adc	r21, r21
    d12c:	84 0f       	add	r24, r20
    d12e:	95 1f       	adc	r25, r21
    d130:	35 e1       	ldi	r19, 0x15	; 21
    d132:	23 02       	muls	r18, r19
    d134:	80 0d       	add	r24, r0
    d136:	91 1d       	adc	r25, r1
    d138:	11 24       	eor	r1, r1
    d13a:	ec 01       	movw	r28, r24
    d13c:	21 96       	adiw	r28, 0x01	; 1
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    d13e:	20 91 7b 04 	lds	r18, 0x047B
    d142:	30 91 7c 04 	lds	r19, 0x047C
    d146:	80 91 85 04 	lds	r24, 0x0485
    d14a:	90 91 86 04 	lds	r25, 0x0486
    d14e:	82 0f       	add	r24, r18
    d150:	93 1f       	adc	r25, r19
    d152:	05 96       	adiw	r24, 0x05	; 5
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    d154:	20 91 a9 04 	lds	r18, 0x04A9
    d158:	21 30       	cpi	r18, 0x01	; 1
    d15a:	01 f1       	breq	.+64     	; 0xd19c <_ZN4Pads14getActiveTonicEv+0xf6>
    d15c:	18 f0       	brcs	.+6      	; 0xd164 <_ZN4Pads14getActiveTonicEv+0xbe>
    d15e:	22 30       	cpi	r18, 0x02	; 2
    d160:	11 f1       	breq	.+68     	; 0xd1a6 <_ZN4Pads14getActiveTonicEv+0x100>
    d162:	28 c0       	rjmp	.+80     	; 0xd1b4 <_ZN4Pads14getActiveTonicEv+0x10e>

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
    d164:	8e 01       	movw	r16, r28
    d166:	16 95       	lsr	r17
    d168:	07 95       	ror	r16
    d16a:	16 95       	lsr	r17
    d16c:	07 95       	ror	r16
    d16e:	16 95       	lsr	r17
    d170:	07 95       	ror	r16
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
    d172:	80 0f       	add	r24, r16
    d174:	91 1d       	adc	r25, r1
            if (startAddress > EEPROM_SIZE) {
    d176:	81 30       	cpi	r24, 0x01	; 1
    d178:	20 e1       	ldi	r18, 0x10	; 16
    d17a:	92 07       	cpc	r25, r18
    d17c:	f0 f4       	brcc	.+60     	; 0xd1ba <_ZN4Pads14getActiveTonicEv+0x114>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    d17e:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    d182:	90 e0       	ldi	r25, 0x00	; 0

        switch(parameterType)   {

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
    d184:	00 0f       	add	r16, r16
    d186:	00 0f       	add	r16, r16
    d188:	00 0f       	add	r16, r16
    d18a:	c0 1b       	sub	r28, r16
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    d18c:	02 c0       	rjmp	.+4      	; 0xd192 <_ZN4Pads14getActiveTonicEv+0xec>
    d18e:	95 95       	asr	r25
    d190:	87 95       	ror	r24
    d192:	ca 95       	dec	r28
    d194:	e2 f7       	brpl	.-8      	; 0xd18e <_ZN4Pads14getActiveTonicEv+0xe8>
    d196:	81 70       	andi	r24, 0x01	; 1
    d198:	99 27       	eor	r25, r25
    d19a:	13 c0       	rjmp	.+38     	; 0xd1c2 <_ZN4Pads14getActiveTonicEv+0x11c>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    d19c:	8c 0f       	add	r24, r28
    d19e:	9d 1f       	adc	r25, r29
    d1a0:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    d1a4:	0e c0       	rjmp	.+28     	; 0xd1c2 <_ZN4Pads14getActiveTonicEv+0x11c>
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
    d1a6:	cc 0f       	add	r28, r28
    d1a8:	dd 1f       	adc	r29, r29
            return eeprom_read_word((uint16_t*)startAddress);
    d1aa:	8c 0f       	add	r24, r28
    d1ac:	9d 1f       	adc	r25, r29
    d1ae:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    d1b2:	07 c0       	rjmp	.+14     	; 0xd1c2 <_ZN4Pads14getActiveTonicEv+0x11c>
            break;

        }   return 0;
    d1b4:	80 e0       	ldi	r24, 0x00	; 0
    d1b6:	90 e0       	ldi	r25, 0x00	; 0
    d1b8:	04 c0       	rjmp	.+8      	; 0xd1c2 <_ZN4Pads14getActiveTonicEv+0x11c>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    d1ba:	80 e0       	ldi	r24, 0x00	; 0
    d1bc:	90 e0       	ldi	r25, 0x00	; 0
        return (note_t)configuration.readParameter(CONF_BLOCK_PROGRAM, programScalePredefinedSection, tonicIndex);
    d1be:	01 c0       	rjmp	.+2      	; 0xd1c2 <_ZN4Pads14getActiveTonicEv+0x11c>

}

note_t Pads::getTonicFromNote(uint8_t note)    {

    if (note == BLANK_NOTE) return MIDI_NOTES;
    d1c0:	8c e0       	ldi	r24, 0x0C	; 12
        uint16_t tonicIndex = PREDEFINED_SCALE_TONIC_ID+((PREDEFINED_SCALE_PARAMETERS*NUMBER_OF_PREDEFINED_SCALES)*(uint16_t)activeProgram)+PREDEFINED_SCALE_PARAMETERS*(uint16_t)activeScale;
        return (note_t)configuration.readParameter(CONF_BLOCK_PROGRAM, programScalePredefinedSection, tonicIndex);

    }   return MIDI_NOTES;

}
    d1c2:	df 91       	pop	r29
    d1c4:	cf 91       	pop	r28
    d1c6:	1f 91       	pop	r17
    d1c8:	0f 91       	pop	r16
    d1ca:	08 95       	ret

0000d1cc <_ZN4Pads12getScaleTypeEa>:

scaleType_t Pads::getScaleType(int8_t scale) {

    switch(scale)   {
    d1cc:	66 23       	and	r22, r22
    d1ce:	34 f0       	brlt	.+12     	; 0xd1dc <_ZN4Pads12getScaleTypeEa+0x10>
    d1d0:	65 30       	cpi	r22, 0x05	; 5
    d1d2:	34 f0       	brlt	.+12     	; 0xd1e0 <_ZN4Pads12getScaleTypeEa+0x14>
    d1d4:	67 30       	cpi	r22, 0x07	; 7
    d1d6:	14 f4       	brge	.+4      	; 0xd1dc <_ZN4Pads12getScaleTypeEa+0x10>
        case scaleHarmonicMajor:
        return sevenNoteScale;

        case scaleMinorPentatonic:
        case scaleMajorPentatonic:
        return fiveNoteScale;
    d1d8:	85 e0       	ldi	r24, 0x05	; 5
    d1da:	08 95       	ret

        default:
        return userScale;
    d1dc:	88 e0       	ldi	r24, 0x08	; 8
    d1de:	08 95       	ret
        case scaleNaturalMinor:
        case scaleMelodicMinor:
        case scaleHarmonicMinor:
        case scaleMajor:
        case scaleHarmonicMajor:
        return sevenNoteScale;
    d1e0:	87 e0       	ldi	r24, 0x07	; 7
        default:
        return userScale;

    }

}
    d1e2:	08 95       	ret

0000d1e4 <_ZN4Pads11isUserScaleEh>:

bool Pads::isUserScale(uint8_t scale)   {

    return (scale >= NUMBER_OF_PREDEFINED_SCALES);
    d1e4:	81 e0       	ldi	r24, 0x01	; 1
    d1e6:	67 30       	cpi	r22, 0x07	; 7
    d1e8:	08 f4       	brcc	.+2      	; 0xd1ec <_ZN4Pads11isUserScaleEh+0x8>
    d1ea:	80 e0       	ldi	r24, 0x00	; 0

}
    d1ec:	08 95       	ret

0000d1ee <_ZN4Pads17isPredefinedScaleEh>:

bool Pads::isPredefinedScale(uint8_t scale) {

    return (scale < NUMBER_OF_PREDEFINED_SCALES);
    d1ee:	81 e0       	ldi	r24, 0x01	; 1
    d1f0:	67 30       	cpi	r22, 0x07	; 7
    d1f2:	08 f0       	brcs	.+2      	; 0xd1f6 <_ZN4Pads17isPredefinedScaleEh+0x8>
    d1f4:	80 e0       	ldi	r24, 0x00	; 0

}
    d1f6:	08 95       	ret

0000d1f8 <_ZN4Pads10getPadNoteEhh>:

uint8_t Pads::getPadNote(uint8_t pad, uint8_t note) {

    if (pad >= MAX_PADS) return 0;
    d1f8:	69 30       	cpi	r22, 0x09	; 9
    d1fa:	70 f4       	brcc	.+28     	; 0xd218 <_ZN4Pads10getPadNoteEhh+0x20>
    if (note >= NOTES_PER_PAD) return 0;
    d1fc:	47 30       	cpi	r20, 0x07	; 7
    d1fe:	70 f4       	brcc	.+28     	; 0xd21c <_ZN4Pads10getPadNoteEhh+0x24>

    return padNote[pad][note];
    d200:	27 e0       	ldi	r18, 0x07	; 7
    d202:	62 9f       	mul	r22, r18
    d204:	80 0d       	add	r24, r0
    d206:	91 1d       	adc	r25, r1
    d208:	11 24       	eor	r1, r1
    d20a:	84 0f       	add	r24, r20
    d20c:	91 1d       	adc	r25, r1
    d20e:	fc 01       	movw	r30, r24
    d210:	e1 5b       	subi	r30, 0xB1	; 177
    d212:	fe 4f       	sbci	r31, 0xFE	; 254
    d214:	80 81       	ld	r24, Z
    d216:	08 95       	ret

}

uint8_t Pads::getPadNote(uint8_t pad, uint8_t note) {

    if (pad >= MAX_PADS) return 0;
    d218:	80 e0       	ldi	r24, 0x00	; 0
    d21a:	08 95       	ret
    if (note >= NOTES_PER_PAD) return 0;
    d21c:	80 e0       	ldi	r24, 0x00	; 0

    return padNote[pad][note];

}
    d21e:	08 95       	ret

0000d220 <_ZN4Pads10noteActiveE6note_t>:

bool Pads::noteActive(note_t note) {
    d220:	ac 01       	movw	r20, r24
    d222:	4a 5a       	subi	r20, 0xAA	; 170
    d224:	5e 4f       	sbci	r21, 0xFE	; 254
    d226:	dc 01       	movw	r26, r24
    d228:	ab 56       	subi	r26, 0x6B	; 107
    d22a:	be 4f       	sbci	r27, 0xFE	; 254
}

note_t Pads::getTonicFromNote(uint8_t note)    {

    if (note == BLANK_NOTE) return MIDI_NOTES;
    return (note_t)(note % MIDI_NOTES);
    d22c:	7b ea       	ldi	r23, 0xAB	; 171
    d22e:	19 c0       	rjmp	.+50     	; 0xd262 <_ZN4Pads10noteActiveE6note_t+0x42>

    //return true if received note is among active notes on some pad

    for (int i=0; i<MAX_PADS; i++)
        for (int j=0; j<NOTES_PER_PAD; j++)
            if (padNote[i][j] != BLANK_NOTE)
    d230:	21 91       	ld	r18, Z+
    d232:	20 38       	cpi	r18, 0x80	; 128
    d234:	71 f0       	breq	.+28     	; 0xd252 <_ZN4Pads10noteActiveE6note_t+0x32>
}

note_t Pads::getTonicFromNote(uint8_t note)    {

    if (note == BLANK_NOTE) return MIDI_NOTES;
    return (note_t)(note % MIDI_NOTES);
    d236:	27 9f       	mul	r18, r23
    d238:	91 2d       	mov	r25, r1
    d23a:	11 24       	eor	r1, r1
    d23c:	96 95       	lsr	r25
    d23e:	96 95       	lsr	r25
    d240:	96 95       	lsr	r25
    d242:	39 2f       	mov	r19, r25
    d244:	33 0f       	add	r19, r19
    d246:	93 0f       	add	r25, r19
    d248:	99 0f       	add	r25, r25
    d24a:	99 0f       	add	r25, r25
    d24c:	29 1b       	sub	r18, r25
    //return true if received note is among active notes on some pad

    for (int i=0; i<MAX_PADS; i++)
        for (int j=0; j<NOTES_PER_PAD; j++)
            if (padNote[i][j] != BLANK_NOTE)
                if (getTonicFromNote(padNote[i][j]) == note)
    d24e:	62 17       	cp	r22, r18
    d250:	59 f0       	breq	.+22     	; 0xd268 <_ZN4Pads10noteActiveE6note_t+0x48>
bool Pads::noteActive(note_t note) {

    //return true if received note is among active notes on some pad

    for (int i=0; i<MAX_PADS; i++)
        for (int j=0; j<NOTES_PER_PAD; j++)
    d252:	e4 17       	cp	r30, r20
    d254:	f5 07       	cpc	r31, r21
    d256:	61 f7       	brne	.-40     	; 0xd230 <_ZN4Pads10noteActiveE6note_t+0x10>
    d258:	49 5f       	subi	r20, 0xF9	; 249
    d25a:	5f 4f       	sbci	r21, 0xFF	; 255

bool Pads::noteActive(note_t note) {

    //return true if received note is among active notes on some pad

    for (int i=0; i<MAX_PADS; i++)
    d25c:	4a 17       	cp	r20, r26
    d25e:	5b 07       	cpc	r21, r27
    d260:	29 f0       	breq	.+10     	; 0xd26c <_ZN4Pads10noteActiveE6note_t+0x4c>
    d262:	fa 01       	movw	r30, r20
    d264:	37 97       	sbiw	r30, 0x07	; 7
    d266:	e4 cf       	rjmp	.-56     	; 0xd230 <_ZN4Pads10noteActiveE6note_t+0x10>
        for (int j=0; j<NOTES_PER_PAD; j++)
            if (padNote[i][j] != BLANK_NOTE)
                if (getTonicFromNote(padNote[i][j]) == note)
                    return true;
    d268:	81 e0       	ldi	r24, 0x01	; 1
    d26a:	08 95       	ret

    return false;
    d26c:	80 e0       	ldi	r24, 0x00	; 0

}
    d26e:	08 95       	ret

0000d270 <_ZN4Pads17getLastTouchedPadEv>:

uint8_t Pads::getLastTouchedPad()   {

    return padPressHistory_buffer[padPressHistory_counter];
    d270:	fc 01       	movw	r30, r24
    d272:	eb 54       	subi	r30, 0x4B	; 75
    d274:	fd 4f       	sbci	r31, 0xFD	; 253
    d276:	20 81       	ld	r18, Z
    d278:	82 0f       	add	r24, r18
    d27a:	91 1d       	adc	r25, r1
    d27c:	fc 01       	movw	r30, r24
    d27e:	e4 55       	subi	r30, 0x54	; 84
    d280:	fd 4f       	sbci	r31, 0xFD	; 253

}
    d282:	80 81       	ld	r24, Z
    d284:	08 95       	ret

0000d286 <_ZN4Pads16getTonicFromNoteEh>:

note_t Pads::getTonicFromNote(uint8_t note)    {

    if (note == BLANK_NOTE) return MIDI_NOTES;
    d286:	60 38       	cpi	r22, 0x80	; 128
    d288:	79 f0       	breq	.+30     	; 0xd2a8 <_ZN4Pads16getTonicFromNoteEh+0x22>
    return (note_t)(note % MIDI_NOTES);
    d28a:	8b ea       	ldi	r24, 0xAB	; 171
    d28c:	68 9f       	mul	r22, r24
    d28e:	81 2d       	mov	r24, r1
    d290:	11 24       	eor	r1, r1
    d292:	86 95       	lsr	r24
    d294:	86 95       	lsr	r24
    d296:	86 95       	lsr	r24
    d298:	98 2f       	mov	r25, r24
    d29a:	99 0f       	add	r25, r25
    d29c:	89 0f       	add	r24, r25
    d29e:	88 0f       	add	r24, r24
    d2a0:	88 0f       	add	r24, r24
    d2a2:	68 1b       	sub	r22, r24
    d2a4:	86 2f       	mov	r24, r22
    d2a6:	08 95       	ret

}

note_t Pads::getTonicFromNote(uint8_t note)    {

    if (note == BLANK_NOTE) return MIDI_NOTES;
    d2a8:	8c e0       	ldi	r24, 0x0C	; 12
    return (note_t)(note % MIDI_NOTES);

}
    d2aa:	08 95       	ret

0000d2ac <_ZN4Pads17getOctaveFromNoteEh>:

uint8_t Pads::getOctaveFromNote(uint8_t note)  {

    if (note == BLANK_NOTE) return MIDI_OCTAVE_RANGE;
    d2ac:	60 38       	cpi	r22, 0x80	; 128
    d2ae:	41 f0       	breq	.+16     	; 0xd2c0 <_ZN4Pads17getOctaveFromNoteEh+0x14>
    return note / MIDI_NOTES;
    d2b0:	8b ea       	ldi	r24, 0xAB	; 171
    d2b2:	68 9f       	mul	r22, r24
    d2b4:	81 2d       	mov	r24, r1
    d2b6:	11 24       	eor	r1, r1
    d2b8:	86 95       	lsr	r24
    d2ba:	86 95       	lsr	r24
    d2bc:	86 95       	lsr	r24
    d2be:	08 95       	ret

}

uint8_t Pads::getOctaveFromNote(uint8_t note)  {

    if (note == BLANK_NOTE) return MIDI_OCTAVE_RANGE;
    d2c0:	8b e0       	ldi	r24, 0x0B	; 11
    return note / MIDI_NOTES;

}
    d2c2:	08 95       	ret

0000d2c4 <_ZN4Pads12isPadPressedEh>:

bool Pads::isPadPressed(uint8_t padNumber) {

    return bitRead(padPressed, padNumber);
    d2c4:	fc 01       	movw	r30, r24
    d2c6:	ef 5a       	subi	r30, 0xAF	; 175
    d2c8:	ff 4f       	sbci	r31, 0xFF	; 255
    d2ca:	80 81       	ld	r24, Z
    d2cc:	91 81       	ldd	r25, Z+1	; 0x01
    d2ce:	02 c0       	rjmp	.+4      	; 0xd2d4 <_ZN4Pads12isPadPressedEh+0x10>
    d2d0:	96 95       	lsr	r25
    d2d2:	87 95       	ror	r24
    d2d4:	6a 95       	dec	r22
    d2d6:	e2 f7       	brpl	.-8      	; 0xd2d0 <_ZN4Pads12isPadPressedEh+0xc>

}
    d2d8:	81 70       	andi	r24, 0x01	; 1
    d2da:	08 95       	ret

0000d2dc <_ZN4Pads15allPadsReleasedEv>:

}

bool Pads::isPadPressed(uint8_t padNumber) {

    return bitRead(padPressed, padNumber);
    d2dc:	fc 01       	movw	r30, r24
    d2de:	ef 5a       	subi	r30, 0xAF	; 175
    d2e0:	ff 4f       	sbci	r31, 0xFF	; 255
    d2e2:	40 81       	ld	r20, Z
    d2e4:	51 81       	ldd	r21, Z+1	; 0x01

bool Pads::allPadsReleased()   {

    //return true if all pads are released
    for (int i=0; i<MAX_PADS; i++)
        if (isPadPressed(i)) return false;
    d2e6:	40 fd       	sbrc	r20, 0
    d2e8:	11 c0       	rjmp	.+34     	; 0xd30c <_ZN4Pads15allPadsReleasedEv+0x30>
    d2ea:	81 e0       	ldi	r24, 0x01	; 1
    d2ec:	90 e0       	ldi	r25, 0x00	; 0

}

bool Pads::isPadPressed(uint8_t padNumber) {

    return bitRead(padPressed, padNumber);
    d2ee:	9a 01       	movw	r18, r20
    d2f0:	08 2e       	mov	r0, r24
    d2f2:	02 c0       	rjmp	.+4      	; 0xd2f8 <_ZN4Pads15allPadsReleasedEv+0x1c>
    d2f4:	36 95       	lsr	r19
    d2f6:	27 95       	ror	r18
    d2f8:	0a 94       	dec	r0
    d2fa:	e2 f7       	brpl	.-8      	; 0xd2f4 <_ZN4Pads15allPadsReleasedEv+0x18>

bool Pads::allPadsReleased()   {

    //return true if all pads are released
    for (int i=0; i<MAX_PADS; i++)
        if (isPadPressed(i)) return false;
    d2fc:	20 fd       	sbrc	r18, 0
    d2fe:	08 c0       	rjmp	.+16     	; 0xd310 <_ZN4Pads15allPadsReleasedEv+0x34>
}

bool Pads::allPadsReleased()   {

    //return true if all pads are released
    for (int i=0; i<MAX_PADS; i++)
    d300:	01 96       	adiw	r24, 0x01	; 1
    d302:	89 30       	cpi	r24, 0x09	; 9
    d304:	91 05       	cpc	r25, r1
    d306:	99 f7       	brne	.-26     	; 0xd2ee <_ZN4Pads15allPadsReleasedEv+0x12>
        if (isPadPressed(i)) return false;

    return true;
    d308:	81 e0       	ldi	r24, 0x01	; 1
    d30a:	08 95       	ret

bool Pads::allPadsReleased()   {

    //return true if all pads are released
    for (int i=0; i<MAX_PADS; i++)
        if (isPadPressed(i)) return false;
    d30c:	80 e0       	ldi	r24, 0x00	; 0
    d30e:	08 95       	ret
    d310:	80 e0       	ldi	r24, 0x00	; 0

    return true;

}
    d312:	08 95       	ret

0000d314 <_ZN4Pads11initPadPinsEv>:

}

void Pads::initPadPins() {

   setOutputMacro(MUX_COMMON_PIN_0_DDR, MUX_COMMON_PIN_0_INDEX);
    d314:	83 9a       	sbi	0x10, 3	; 16
   setOutputMacro(MUX_COMMON_PIN_1_DDR, MUX_COMMON_PIN_1_INDEX);
    d316:	81 9a       	sbi	0x10, 1	; 16
   setOutputMacro(MUX_COMMON_PIN_2_DDR, MUX_COMMON_PIN_2_INDEX);
    d318:	82 9a       	sbi	0x10, 2	; 16
   setOutputMacro(MUX_COMMON_PIN_3_DDR, MUX_COMMON_PIN_3_INDEX);
    d31a:	80 9a       	sbi	0x10, 0	; 16

   setOutputMacro(MUX_SELECT_PIN_0_DDR, MUX_SELECT_PIN_0_INDEX);
    d31c:	85 9a       	sbi	0x10, 5	; 16
   setOutputMacro(MUX_SELECT_PIN_1_DDR, MUX_SELECT_PIN_1_INDEX);
    d31e:	84 9a       	sbi	0x10, 4	; 16
   setOutputMacro(MUX_SELECT_PIN_2_DDR, MUX_SELECT_PIN_2_INDEX);
    d320:	86 9a       	sbi	0x10, 6	; 16
   setOutputMacro(MUX_SELECT_PIN_3_DDR, MUX_SELECT_PIN_3_INDEX);
    d322:	87 9a       	sbi	0x10, 7	; 16

   setLowMacro(MUX_SELECT_PIN_0_PORT, MUX_SELECT_PIN_0_INDEX);
    d324:	8d 98       	cbi	0x11, 5	; 17
   setLowMacro(MUX_SELECT_PIN_1_PORT, MUX_SELECT_PIN_1_INDEX);
    d326:	8c 98       	cbi	0x11, 4	; 17
   setLowMacro(MUX_SELECT_PIN_2_PORT, MUX_SELECT_PIN_2_INDEX);
    d328:	8e 98       	cbi	0x11, 6	; 17
   setLowMacro(MUX_SELECT_PIN_3_PORT, MUX_SELECT_PIN_3_INDEX);
    d32a:	8f 98       	cbi	0x11, 7	; 17

   setHighMacro(MUX_COMMON_PIN_0_PORT, MUX_COMMON_PIN_0_INDEX);
    d32c:	8b 9a       	sbi	0x11, 3	; 17
   setHighMacro(MUX_COMMON_PIN_1_PORT, MUX_COMMON_PIN_1_INDEX);
    d32e:	89 9a       	sbi	0x11, 1	; 17
   setHighMacro(MUX_COMMON_PIN_2_PORT, MUX_COMMON_PIN_2_INDEX);
    d330:	8a 9a       	sbi	0x11, 2	; 17
   setHighMacro(MUX_COMMON_PIN_3_PORT, MUX_COMMON_PIN_3_INDEX);
    d332:	88 9a       	sbi	0x11, 0	; 17
    d334:	08 95       	ret

0000d336 <_ZN4Pads11setMuxInputEh>:

}

void Pads::setMuxInput(uint8_t muxInput)   {

    bitRead(muxInput, 0) ? setHighMacro(MUX_SELECT_PIN_0_PORT, MUX_SELECT_PIN_0_INDEX) : setLowMacro(MUX_SELECT_PIN_0_PORT, MUX_SELECT_PIN_0_INDEX);
    d336:	60 ff       	sbrs	r22, 0
    d338:	02 c0       	rjmp	.+4      	; 0xd33e <_ZN4Pads11setMuxInputEh+0x8>
    d33a:	8d 9a       	sbi	0x11, 5	; 17
    d33c:	01 c0       	rjmp	.+2      	; 0xd340 <_ZN4Pads11setMuxInputEh+0xa>
    d33e:	8d 98       	cbi	0x11, 5	; 17
    bitRead(muxInput, 1) ? setHighMacro(MUX_SELECT_PIN_1_PORT, MUX_SELECT_PIN_1_INDEX) : setLowMacro(MUX_SELECT_PIN_1_PORT, MUX_SELECT_PIN_1_INDEX);
    d340:	61 ff       	sbrs	r22, 1
    d342:	02 c0       	rjmp	.+4      	; 0xd348 <_ZN4Pads11setMuxInputEh+0x12>
    d344:	8c 9a       	sbi	0x11, 4	; 17
    d346:	01 c0       	rjmp	.+2      	; 0xd34a <_ZN4Pads11setMuxInputEh+0x14>
    d348:	8c 98       	cbi	0x11, 4	; 17
    bitRead(muxInput, 2) ? setHighMacro(MUX_SELECT_PIN_2_PORT, MUX_SELECT_PIN_2_INDEX) : setLowMacro(MUX_SELECT_PIN_2_PORT, MUX_SELECT_PIN_2_INDEX);
    d34a:	62 ff       	sbrs	r22, 2
    d34c:	02 c0       	rjmp	.+4      	; 0xd352 <_ZN4Pads11setMuxInputEh+0x1c>
    d34e:	8e 9a       	sbi	0x11, 6	; 17
    d350:	01 c0       	rjmp	.+2      	; 0xd354 <_ZN4Pads11setMuxInputEh+0x1e>
    d352:	8e 98       	cbi	0x11, 6	; 17
    bitRead(muxInput, 3) ? setHighMacro(MUX_SELECT_PIN_3_PORT, MUX_SELECT_PIN_3_INDEX) : setLowMacro(MUX_SELECT_PIN_3_PORT, MUX_SELECT_PIN_3_INDEX);
    d354:	63 ff       	sbrs	r22, 3
    d356:	02 c0       	rjmp	.+4      	; 0xd35c <_ZN4Pads11setMuxInputEh+0x26>
    d358:	8f 9a       	sbi	0x11, 7	; 17
    d35a:	01 c0       	rjmp	.+2      	; 0xd35e <_ZN4Pads11setMuxInputEh+0x28>
    d35c:	8f 98       	cbi	0x11, 7	; 17

    _NOP(); _NOP(); _NOP();
    d35e:	00 00       	nop
    d360:	00 00       	nop
    d362:	00 00       	nop
    d364:	08 95       	ret

0000d366 <_ZN4Pads12initHardwareEv>:
    readX,
    readY

} padReadOrder;

void Pads::initHardware()   {
    d366:	cf 93       	push	r28
    d368:	df 93       	push	r29
    d36a:	ec 01       	movw	r28, r24

    initPadPins();
    d36c:	d3 df       	rcall	.-90     	; 0xd314 <_ZN4Pads11initPadPinsEv>
    setMuxInput(activePad);
    d36e:	fe 01       	movw	r30, r28
    d370:	ed 56       	subi	r30, 0x6D	; 109
    d372:	fd 4f       	sbci	r31, 0xFD	; 253
    d374:	60 81       	ld	r22, Z
    d376:	ce 01       	movw	r24, r28
    d378:	de df       	rcall	.-68     	; 0xd336 <_ZN4Pads11setMuxInputEh>
    initADC(ADC_PRESCALER_128, true, ADC_V_REF_AVCC); //prescaler 128, enable interrupts, AVCC voltage reference
    d37a:	41 e0       	ldi	r20, 0x01	; 1
    d37c:	61 e0       	ldi	r22, 0x01	; 1
    d37e:	83 e0       	ldi	r24, 0x03	; 3
    d380:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <_Z7initADC12adcPrescalerb7adcVRef>

}
    d384:	df 91       	pop	r29
    d386:	cf 91       	pop	r28
    d388:	08 95       	ret

0000d38a <_ZN4Pads13setupPressureEv>:

void Pads::setupPressure()  {

    //pressure is read from x+/y+
    //set 0/5V across x-/y-
    setInputMacro(MUX_COMMON_PIN_0_DDR, MUX_COMMON_PIN_0_INDEX);
    d38a:	83 98       	cbi	0x10, 3	; 16
    setOutputMacro(MUX_COMMON_PIN_1_DDR, MUX_COMMON_PIN_1_INDEX);
    d38c:	81 9a       	sbi	0x10, 1	; 16
    setInputMacro(MUX_COMMON_PIN_2_DDR, MUX_COMMON_PIN_2_INDEX);
    d38e:	82 98       	cbi	0x10, 2	; 16
    setOutputMacro(MUX_COMMON_PIN_3_DDR, MUX_COMMON_PIN_3_INDEX);
    d390:	80 9a       	sbi	0x10, 0	; 16

    setLowMacro(MUX_COMMON_PIN_0_PORT, MUX_COMMON_PIN_0_INDEX);
    d392:	8b 98       	cbi	0x11, 3	; 17
    setHighMacro(MUX_COMMON_PIN_1_PORT, MUX_COMMON_PIN_1_INDEX);
    d394:	89 9a       	sbi	0x11, 1	; 17
    setLowMacro(MUX_COMMON_PIN_2_PORT, MUX_COMMON_PIN_2_INDEX);
    d396:	8a 98       	cbi	0x11, 2	; 17
    setLowMacro(MUX_COMMON_PIN_3_PORT, MUX_COMMON_PIN_3_INDEX);
    d398:	88 98       	cbi	0x11, 0	; 17

    _NOP(); _NOP(); _NOP();
    d39a:	00 00       	nop
    d39c:	00 00       	nop
    d39e:	00 00       	nop
    d3a0:	08 95       	ret

0000d3a2 <_ZN4Pads6setupXEv>:

void Pads::setupX()  {

    //x is read from y+
    //set 0/5V across x+/x-
    setOutputMacro(MUX_COMMON_PIN_0_DDR, MUX_COMMON_PIN_0_INDEX);
    d3a2:	83 9a       	sbi	0x10, 3	; 16
    setOutputMacro(MUX_COMMON_PIN_1_DDR, MUX_COMMON_PIN_1_INDEX);
    d3a4:	81 9a       	sbi	0x10, 1	; 16
    setInputMacro(MUX_COMMON_PIN_2_DDR, MUX_COMMON_PIN_2_INDEX);
    d3a6:	82 98       	cbi	0x10, 2	; 16
    setInputMacro(MUX_COMMON_PIN_3_DDR, MUX_COMMON_PIN_3_INDEX);
    d3a8:	80 98       	cbi	0x10, 0	; 16

    setLowMacro(MUX_COMMON_PIN_0_PORT, MUX_COMMON_PIN_0_INDEX);
    d3aa:	8b 98       	cbi	0x11, 3	; 17
    setHighMacro(MUX_COMMON_PIN_1_PORT, MUX_COMMON_PIN_1_INDEX);
    d3ac:	89 9a       	sbi	0x11, 1	; 17
    setLowMacro(MUX_COMMON_PIN_2_PORT, MUX_COMMON_PIN_2_INDEX);
    d3ae:	8a 98       	cbi	0x11, 2	; 17
    setLowMacro(MUX_COMMON_PIN_3_PORT, MUX_COMMON_PIN_3_INDEX);
    d3b0:	88 98       	cbi	0x11, 0	; 17

    _NOP(); _NOP(); _NOP();
    d3b2:	00 00       	nop
    d3b4:	00 00       	nop
    d3b6:	00 00       	nop

    setADCchannel(adcPinReadOrder[readX]);
    d3b8:	80 91 68 0f 	lds	r24, 0x0F68
    d3bc:	0c 94 7f 0d 	jmp	0x1afe	; 0x1afe <_Z13setADCchannelh>
    d3c0:	08 95       	ret

0000d3c2 <_ZN4Pads6setupYEv>:

void Pads::setupY()  {

    //y is read from x+
    //set 0/5V across y+/y-
    setInputMacro(MUX_COMMON_PIN_0_DDR, MUX_COMMON_PIN_0_INDEX);
    d3c2:	83 98       	cbi	0x10, 3	; 16
    setInputMacro(MUX_COMMON_PIN_1_DDR, MUX_COMMON_PIN_1_INDEX);
    d3c4:	81 98       	cbi	0x10, 1	; 16
    setOutputMacro(MUX_COMMON_PIN_2_DDR, MUX_COMMON_PIN_2_INDEX);
    d3c6:	82 9a       	sbi	0x10, 2	; 16
    setOutputMacro(MUX_COMMON_PIN_3_DDR, MUX_COMMON_PIN_3_INDEX);
    d3c8:	80 9a       	sbi	0x10, 0	; 16

    setLowMacro(MUX_COMMON_PIN_0_PORT, MUX_COMMON_PIN_0_INDEX);
    d3ca:	8b 98       	cbi	0x11, 3	; 17
    setLowMacro(MUX_COMMON_PIN_1_PORT, MUX_COMMON_PIN_1_INDEX);
    d3cc:	89 98       	cbi	0x11, 1	; 17
    setLowMacro(MUX_COMMON_PIN_2_PORT, MUX_COMMON_PIN_2_INDEX);
    d3ce:	8a 98       	cbi	0x11, 2	; 17
    setHighMacro(MUX_COMMON_PIN_3_PORT, MUX_COMMON_PIN_3_INDEX);
    d3d0:	88 9a       	sbi	0x11, 0	; 17

    _NOP(); _NOP(); _NOP();
    d3d2:	00 00       	nop
    d3d4:	00 00       	nop
    d3d6:	00 00       	nop

    setADCchannel(adcPinReadOrder[readY]);
    d3d8:	80 91 69 0f 	lds	r24, 0x0F69
    d3dc:	0c 94 7f 0d 	jmp	0x1afe	; 0x1afe <_Z13setADCchannelh>
    d3e0:	08 95       	ret

0000d3e2 <_ZN4Pads11getPressureEv>:

}

int16_t Pads::getPressure()  {
    d3e2:	cf 93       	push	r28
    d3e4:	df 93       	push	r29
    d3e6:	ec 01       	movw	r28, r24
    static bool firstPin = true;

    static bool firstPressurePinFinished = false;
    static bool secondPressurePinFinished = false;

    bool readInitiated = analogReadInProgress();
    d3e8:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <_Z20analogReadInProgressv>
    int16_t returnValue = -1;

    //conversion isn't started yet, setup pressure and request first value
    if (!readInitiated && (!firstPressurePinFinished && !secondPressurePinFinished) && firstPin)   {
    d3ec:	81 11       	cpse	r24, r1
    d3ee:	57 c0       	rjmp	.+174    	; 0xd49e <_ZN4Pads11getPressureEv+0xbc>
    d3f0:	90 91 65 0f 	lds	r25, 0x0F65
    d3f4:	91 11       	cpse	r25, r1
    d3f6:	64 c0       	rjmp	.+200    	; 0xd4c0 <_ZN4Pads11getPressureEv+0xde>
    d3f8:	80 91 64 0f 	lds	r24, 0x0F64
    d3fc:	81 11       	cpse	r24, r1
    d3fe:	5b c0       	rjmp	.+182    	; 0xd4b6 <_ZN4Pads11getPressureEv+0xd4>
    d400:	80 91 2e 01 	lds	r24, 0x012E
    d404:	88 23       	and	r24, r24
    d406:	09 f4       	brne	.+2      	; 0xd40a <_ZN4Pads11getPressureEv+0x28>
    d408:	56 c0       	rjmp	.+172    	; 0xd4b6 <_ZN4Pads11getPressureEv+0xd4>

        setupPressure();
    d40a:	ce 01       	movw	r24, r28
    d40c:	be df       	rcall	.-132    	; 0xd38a <_ZN4Pads13setupPressureEv>
        setADCchannel(adcPinReadOrder[readPressure0]);
    d40e:	80 91 66 0f 	lds	r24, 0x0F66
    d412:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <_Z13setADCchannelh>
        startADCconversion();
    d416:	ea e7       	ldi	r30, 0x7A	; 122
    d418:	f0 e0       	ldi	r31, 0x00	; 0
    d41a:	80 81       	ld	r24, Z
    d41c:	80 64       	ori	r24, 0x40	; 64
    d41e:	80 83       	st	Z, r24
        firstPin = false;
    d420:	10 92 2e 01 	sts	0x012E, r1

    static bool firstPressurePinFinished = false;
    static bool secondPressurePinFinished = false;

    bool readInitiated = analogReadInProgress();
    int16_t returnValue = -1;
    d424:	8f ef       	ldi	r24, 0xFF	; 255
    d426:	9f ef       	ldi	r25, 0xFF	; 255
    if (!readInitiated && (!firstPressurePinFinished && !secondPressurePinFinished) && firstPin)   {

        setupPressure();
        setADCchannel(adcPinReadOrder[readPressure0]);
        startADCconversion();
        firstPin = false;
    d428:	4f c0       	rjmp	.+158    	; 0xd4c8 <_ZN4Pads11getPressureEv+0xe6>

    }   else

    //conversion finished, save first value and request second
    if (!readInitiated && !firstPressurePinFinished && !secondPressurePinFinished && !firstPin)   {
    d42a:	80 91 2e 01 	lds	r24, 0x012E
    d42e:	81 11       	cpse	r24, r1
    d430:	39 c0       	rjmp	.+114    	; 0xd4a4 <_ZN4Pads11getPressureEv+0xc2>

        firstPressurePinFinished = true;
    d432:	c1 e0       	ldi	r28, 0x01	; 1
    d434:	c0 93 65 0f 	sts	0x0F65, r28
        tempPressureValueZ1 = getADCvalue();
    d438:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <_Z11getADCvaluev>
    d43c:	90 93 63 0f 	sts	0x0F63, r25
    d440:	80 93 62 0f 	sts	0x0F62, r24
        setADCchannel(adcPinReadOrder[readPressure1]);
    d444:	80 91 67 0f 	lds	r24, 0x0F67
    d448:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <_Z13setADCchannelh>
        startADCconversion();
    d44c:	ea e7       	ldi	r30, 0x7A	; 122
    d44e:	f0 e0       	ldi	r31, 0x00	; 0
    d450:	80 81       	ld	r24, Z
    d452:	80 64       	ori	r24, 0x40	; 64
    d454:	80 83       	st	Z, r24
        firstPin = true;
    d456:	c0 93 2e 01 	sts	0x012E, r28

    static bool firstPressurePinFinished = false;
    static bool secondPressurePinFinished = false;

    bool readInitiated = analogReadInProgress();
    int16_t returnValue = -1;
    d45a:	8f ef       	ldi	r24, 0xFF	; 255
    d45c:	9f ef       	ldi	r25, 0xFF	; 255

        firstPressurePinFinished = true;
        tempPressureValueZ1 = getADCvalue();
        setADCchannel(adcPinReadOrder[readPressure1]);
        startADCconversion();
        firstPin = true;
    d45e:	34 c0       	rjmp	.+104    	; 0xd4c8 <_ZN4Pads11getPressureEv+0xe6>

    }   else

    //second conversion finished, save value
    if (!readInitiated && firstPressurePinFinished && !secondPressurePinFinished)    {
    d460:	80 91 64 0f 	lds	r24, 0x0F64
    d464:	81 11       	cpse	r24, r1
    d466:	21 c0       	rjmp	.+66     	; 0xd4aa <_ZN4Pads11getPressureEv+0xc8>

        secondPressurePinFinished = true;
    d468:	81 e0       	ldi	r24, 0x01	; 1
    d46a:	80 93 64 0f 	sts	0x0F64, r24
        tempPressureValueZ2 = getADCvalue();
    d46e:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <_Z11getADCvaluev>

        firstPressurePinFinished = false;
    d472:	10 92 65 0f 	sts	0x0F65, r1
        secondPressurePinFinished = false;
    d476:	10 92 64 0f 	sts	0x0F64, r1
        returnValue = (1023 - (tempPressureValueZ2 - tempPressureValueZ1));
    d47a:	20 91 62 0f 	lds	r18, 0x0F62
    d47e:	30 91 63 0f 	lds	r19, 0x0F63
    d482:	28 1b       	sub	r18, r24
    d484:	39 0b       	sbc	r19, r25
    d486:	c9 01       	movw	r24, r18
    d488:	81 50       	subi	r24, 0x01	; 1
    d48a:	9c 4f       	sbci	r25, 0xFC	; 252

        tempPressureValueZ1 = 0;
    d48c:	10 92 63 0f 	sts	0x0F63, r1
    d490:	10 92 62 0f 	sts	0x0F62, r1
        tempPressureValueZ2 = 0;
    d494:	10 92 61 0f 	sts	0x0F61, r1
    d498:	10 92 60 0f 	sts	0x0F60, r1
    d49c:	15 c0       	rjmp	.+42     	; 0xd4c8 <_ZN4Pads11getPressureEv+0xe6>

    static bool firstPressurePinFinished = false;
    static bool secondPressurePinFinished = false;

    bool readInitiated = analogReadInProgress();
    int16_t returnValue = -1;
    d49e:	8f ef       	ldi	r24, 0xFF	; 255
    d4a0:	9f ef       	ldi	r25, 0xFF	; 255
    d4a2:	12 c0       	rjmp	.+36     	; 0xd4c8 <_ZN4Pads11getPressureEv+0xe6>
    d4a4:	8f ef       	ldi	r24, 0xFF	; 255
    d4a6:	9f ef       	ldi	r25, 0xFF	; 255
    d4a8:	0f c0       	rjmp	.+30     	; 0xd4c8 <_ZN4Pads11getPressureEv+0xe6>
    d4aa:	8f ef       	ldi	r24, 0xFF	; 255
    d4ac:	9f ef       	ldi	r25, 0xFF	; 255
    d4ae:	0c c0       	rjmp	.+24     	; 0xd4c8 <_ZN4Pads11getPressureEv+0xe6>
    d4b0:	8f ef       	ldi	r24, 0xFF	; 255
    d4b2:	9f ef       	ldi	r25, 0xFF	; 255
    d4b4:	09 c0       	rjmp	.+18     	; 0xd4c8 <_ZN4Pads11getPressureEv+0xe6>
        firstPin = false;

    }   else

    //conversion finished, save first value and request second
    if (!readInitiated && !firstPressurePinFinished && !secondPressurePinFinished && !firstPin)   {
    d4b6:	80 91 64 0f 	lds	r24, 0x0F64
    d4ba:	81 11       	cpse	r24, r1
    d4bc:	f9 cf       	rjmp	.-14     	; 0xd4b0 <_ZN4Pads11getPressureEv+0xce>
    d4be:	b5 cf       	rjmp	.-150    	; 0xd42a <_ZN4Pads11getPressureEv+0x48>
        firstPin = true;

    }   else

    //second conversion finished, save value
    if (!readInitiated && firstPressurePinFinished && !secondPressurePinFinished)    {
    d4c0:	91 11       	cpse	r25, r1
    d4c2:	ce cf       	rjmp	.-100    	; 0xd460 <_ZN4Pads11getPressureEv+0x7e>

    static bool firstPressurePinFinished = false;
    static bool secondPressurePinFinished = false;

    bool readInitiated = analogReadInProgress();
    int16_t returnValue = -1;
    d4c4:	8f ef       	ldi	r24, 0xFF	; 255
    d4c6:	9f ef       	ldi	r25, 0xFF	; 255

    }

    return returnValue;

}
    d4c8:	df 91       	pop	r29
    d4ca:	cf 91       	pop	r28
    d4cc:	08 95       	ret

0000d4ce <_ZN4Pads4getXEv>:

int16_t Pads::getX()  {

    bool readInitiated = analogReadInProgress();
    d4ce:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <_Z20analogReadInProgressv>
    static bool xSwitched = false;

    if (!readInitiated && !xSwitched)   {
    d4d2:	81 11       	cpse	r24, r1
    d4d4:	0f c0       	rjmp	.+30     	; 0xd4f4 <_ZN4Pads4getXEv+0x26>
    d4d6:	80 91 5f 0f 	lds	r24, 0x0F5F
    d4da:	81 11       	cpse	r24, r1
    d4dc:	0f c0       	rjmp	.+30     	; 0xd4fc <_ZN4Pads4getXEv+0x2e>

        startADCconversion();
    d4de:	ea e7       	ldi	r30, 0x7A	; 122
    d4e0:	f0 e0       	ldi	r31, 0x00	; 0
    d4e2:	80 81       	ld	r24, Z
    d4e4:	80 64       	ori	r24, 0x40	; 64
    d4e6:	80 83       	st	Z, r24
        xSwitched = true;
    d4e8:	81 e0       	ldi	r24, 0x01	; 1
    d4ea:	80 93 5f 0f 	sts	0x0F5F, r24
        return -1;
    d4ee:	8f ef       	ldi	r24, 0xFF	; 255
    d4f0:	9f ef       	ldi	r25, 0xFF	; 255
    d4f2:	08 95       	ret

    }   else if (readInitiated && xSwitched)   return -1;
    d4f4:	80 91 5f 0f 	lds	r24, 0x0F5F
    d4f8:	81 11       	cpse	r24, r1
    d4fa:	05 c0       	rjmp	.+10     	; 0xd506 <_ZN4Pads4getXEv+0x38>
    else {

        xSwitched = false;
    d4fc:	10 92 5f 0f 	sts	0x0F5F, r1

        return getADCvalue();
    d500:	0c 94 8a 0d 	jmp	0x1b14	; 0x1b14 <_Z11getADCvaluev>
    d504:	08 95       	ret

        startADCconversion();
        xSwitched = true;
        return -1;

    }   else if (readInitiated && xSwitched)   return -1;
    d506:	8f ef       	ldi	r24, 0xFF	; 255
    d508:	9f ef       	ldi	r25, 0xFF	; 255

        return getADCvalue();

    }

}
    d50a:	08 95       	ret

0000d50c <_ZN4Pads4getYEv>:

int16_t Pads::getY()  {

    bool readInitiated = analogReadInProgress();
    d50c:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <_Z20analogReadInProgressv>
    static bool ySwitched = false;

    if (!readInitiated && !ySwitched)   {
    d510:	81 11       	cpse	r24, r1
    d512:	0f c0       	rjmp	.+30     	; 0xd532 <_ZN4Pads4getYEv+0x26>
    d514:	80 91 5e 0f 	lds	r24, 0x0F5E
    d518:	81 11       	cpse	r24, r1
    d51a:	0f c0       	rjmp	.+30     	; 0xd53a <_ZN4Pads4getYEv+0x2e>

        startADCconversion();
    d51c:	ea e7       	ldi	r30, 0x7A	; 122
    d51e:	f0 e0       	ldi	r31, 0x00	; 0
    d520:	80 81       	ld	r24, Z
    d522:	80 64       	ori	r24, 0x40	; 64
    d524:	80 83       	st	Z, r24
        ySwitched = true;
    d526:	81 e0       	ldi	r24, 0x01	; 1
    d528:	80 93 5e 0f 	sts	0x0F5E, r24
        return -1;
    d52c:	8f ef       	ldi	r24, 0xFF	; 255
    d52e:	9f ef       	ldi	r25, 0xFF	; 255
    d530:	08 95       	ret

    }   else if (readInitiated && ySwitched)   return -1;
    d532:	80 91 5e 0f 	lds	r24, 0x0F5E
    d536:	81 11       	cpse	r24, r1
    d538:	05 c0       	rjmp	.+10     	; 0xd544 <_ZN4Pads4getYEv+0x38>

    else {

        ySwitched = false;
    d53a:	10 92 5e 0f 	sts	0x0F5E, r1

        return getADCvalue();
    d53e:	0c 94 8a 0d 	jmp	0x1b14	; 0x1b14 <_Z11getADCvaluev>
    d542:	08 95       	ret

        startADCconversion();
        ySwitched = true;
        return -1;

    }   else if (readInitiated && ySwitched)   return -1;
    d544:	8f ef       	ldi	r24, 0xFF	; 255
    d546:	9f ef       	ldi	r25, 0xFF	; 255

        return getADCvalue();

    }

}
    d548:	08 95       	ret

0000d54a <_ZN4Pads10setNextPadEv>:

void Pads::setNextPad()    {

    switchToNextPad = false;
    d54a:	fc 01       	movw	r30, r24
    d54c:	ec 56       	subi	r30, 0x6C	; 108
    d54e:	fd 4f       	sbci	r31, 0xFD	; 253
    d550:	10 82       	st	Z, r1
    activePad++;
    d552:	31 97       	sbiw	r30, 0x01	; 1
    d554:	20 81       	ld	r18, Z
    d556:	2f 5f       	subi	r18, 0xFF	; 255
    if (activePad == CONNECTED_PADS) activePad = 0;
    d558:	29 30       	cpi	r18, 0x09	; 9
    d55a:	11 f0       	breq	.+4      	; 0xd560 <_ZN4Pads10setNextPadEv+0x16>
}

void Pads::setNextPad()    {

    switchToNextPad = false;
    activePad++;
    d55c:	20 83       	st	Z, r18
    d55e:	08 95       	ret
    if (activePad == CONNECTED_PADS) activePad = 0;
    d560:	fc 01       	movw	r30, r24
    d562:	ed 56       	subi	r30, 0x6D	; 109
    d564:	fd 4f       	sbci	r31, 0xFD	; 253
    d566:	10 82       	st	Z, r1
    d568:	08 95       	ret

0000d56a <_GLOBAL__sub_I_adcPinReadOrder>:
    muxCommonPinsAnalogRead[2], //pressure, first reading
    muxCommonPinsAnalogRead[0], //pressure, second reading
    muxCommonPinsAnalogRead[2], //x coordinate
    muxCommonPinsAnalogRead[0]  //y coordinate

};
    d56a:	e6 e6       	ldi	r30, 0x66	; 102
    d56c:	ff e0       	ldi	r31, 0x0F	; 15
    d56e:	92 e0       	ldi	r25, 0x02	; 2
    d570:	90 83       	st	Z, r25
    d572:	83 e0       	ldi	r24, 0x03	; 3
    d574:	81 83       	std	Z+1, r24	; 0x01
    d576:	92 83       	std	Z+2, r25	; 0x02
    d578:	83 83       	std	Z+3, r24	; 0x03
    d57a:	08 95       	ret

0000d57c <_ZN4PadsC1Ev>:
#include "Pads.h"
#include <avr/cpufunc.h>
#include <util/delay.h>

Pads::Pads()  {
    d57c:	af 92       	push	r10
    d57e:	bf 92       	push	r11
    d580:	cf 92       	push	r12
    d582:	df 92       	push	r13
    d584:	ef 92       	push	r14
    d586:	ff 92       	push	r15
    d588:	0f 93       	push	r16
    d58a:	1f 93       	push	r17
    d58c:	cf 93       	push	r28
    d58e:	df 93       	push	r29
    d590:	6c 01       	movw	r12, r24
    d592:	7c 01       	movw	r14, r24
    d594:	29 e0       	ldi	r18, 0x09	; 9
    d596:	e2 0e       	add	r14, r18
    d598:	f1 1c       	adc	r15, r1
    d59a:	8c 01       	movw	r16, r24
    d59c:	05 5e       	subi	r16, 0xE5	; 229
    d59e:	1f 4f       	sbci	r17, 0xFF	; 255
    d5a0:	bc 01       	movw	r22, r24
    d5a2:	64 55       	subi	r22, 0x54	; 84
    d5a4:	7d 4f       	sbci	r23, 0xFD	; 253
    d5a6:	ec 01       	movw	r28, r24
    d5a8:	ca 56       	subi	r28, 0x6A	; 106
    d5aa:	dd 4f       	sbci	r29, 0xFD	; 253
    d5ac:	dc 01       	movw	r26, r24
    d5ae:	af 55       	subi	r26, 0x5F	; 95
    d5b0:	bd 4f       	sbci	r27, 0xFD	; 253
    d5b2:	40 e0       	ldi	r20, 0x00	; 0
    d5b4:	50 e0       	ldi	r21, 0x00	; 0

    //default constructor

    for (int i=0; i<MAX_PADS; i++)        {

        lastXMIDIvalue[i] = DEFAULT_XY_AT_VALUE;
    d5b6:	aa 24       	eor	r10, r10
    d5b8:	aa 94       	dec	r10
        padPressHistory_buffer[i] = 0;
        octaveShiftAmount[i] = 0;
        noteShiftAmount[i] = 0;

        for (int j=0; j<NOTES_PER_PAD; j++)
            padNote[i][j] = BLANK_NOTE;
    d5ba:	68 94       	set
    d5bc:	bb 24       	eor	r11, r11
    d5be:	b7 f8       	bld	r11, 7

    //default constructor

    for (int i=0; i<MAX_PADS; i++)        {

        lastXMIDIvalue[i] = DEFAULT_XY_AT_VALUE;
    d5c0:	f6 01       	movw	r30, r12
    d5c2:	a1 92       	st	Z+, r10
    d5c4:	6f 01       	movw	r12, r30
        lastYMIDIvalue[i] = DEFAULT_XY_AT_VALUE;
    d5c6:	f7 01       	movw	r30, r14
    d5c8:	a1 92       	st	Z+, r10
    d5ca:	7f 01       	movw	r14, r30
        lastAftertouchValue[i] = DEFAULT_XY_AT_VALUE;
    d5cc:	f8 01       	movw	r30, r16
    d5ce:	a1 92       	st	Z+, r10
    d5d0:	8f 01       	movw	r16, r30
        padPressHistory_buffer[i] = 0;
    d5d2:	fb 01       	movw	r30, r22
    d5d4:	11 92       	st	Z+, r1
    d5d6:	bf 01       	movw	r22, r30
        octaveShiftAmount[i] = 0;
    d5d8:	19 92       	st	Y+, r1
        noteShiftAmount[i] = 0;
    d5da:	1d 92       	st	X+, r1
    d5dc:	fa 01       	movw	r30, r20
    d5de:	e1 5b       	subi	r30, 0xB1	; 177
    d5e0:	fe 4f       	sbci	r31, 0xFE	; 254
    d5e2:	e8 0f       	add	r30, r24
    d5e4:	f9 1f       	adc	r31, r25
    d5e6:	9a 01       	movw	r18, r20
    d5e8:	2a 5a       	subi	r18, 0xAA	; 170
    d5ea:	3e 4f       	sbci	r19, 0xFE	; 254
    d5ec:	28 0f       	add	r18, r24
    d5ee:	39 1f       	adc	r19, r25

        for (int j=0; j<NOTES_PER_PAD; j++)
            padNote[i][j] = BLANK_NOTE;
    d5f0:	b1 92       	st	Z+, r11
        lastAftertouchValue[i] = DEFAULT_XY_AT_VALUE;
        padPressHistory_buffer[i] = 0;
        octaveShiftAmount[i] = 0;
        noteShiftAmount[i] = 0;

        for (int j=0; j<NOTES_PER_PAD; j++)
    d5f2:	e2 17       	cp	r30, r18
    d5f4:	f3 07       	cpc	r31, r19
    d5f6:	e1 f7       	brne	.-8      	; 0xd5f0 <_ZN4PadsC1Ev+0x74>
    d5f8:	49 5f       	subi	r20, 0xF9	; 249
    d5fa:	5f 4f       	sbci	r21, 0xFF	; 255

Pads::Pads()  {

    //default constructor

    for (int i=0; i<MAX_PADS; i++)        {
    d5fc:	4f 33       	cpi	r20, 0x3F	; 63
    d5fe:	51 05       	cpc	r21, r1
    d600:	f9 f6       	brne	.-66     	; 0xd5c0 <_ZN4PadsC1Ev+0x44>
        for (int j=0; j<NOTES_PER_PAD; j++)
            padNote[i][j] = BLANK_NOTE;

    }

    activeProgram = -1;
    d602:	2f ef       	ldi	r18, 0xFF	; 255
    d604:	fc 01       	movw	r30, r24
    d606:	e3 56       	subi	r30, 0x63	; 99
    d608:	fe 4f       	sbci	r31, 0xFE	; 254
    d60a:	20 83       	st	Z, r18
    activeScale = -1;
    d60c:	31 97       	sbiw	r30, 0x01	; 1
    d60e:	20 83       	st	Z, r18
    activeOctave = 0;
    d610:	32 97       	sbiw	r30, 0x02	; 2
    d612:	10 82       	st	Z, r1
    octaveShiftPadBuffer = 0;
    d614:	eb 5f       	subi	r30, 0xFB	; 251
    d616:	fe 4f       	sbci	r31, 0xFE	; 254
    d618:	11 82       	std	Z+1, r1	; 0x01
    d61a:	10 82       	st	Z, r1
    scaleShiftPadBuffer = 0;
    d61c:	3b 96       	adiw	r30, 0x0b	; 11
    d61e:	11 82       	std	Z+1, r1	; 0x01
    d620:	10 82       	st	Z, r1
    calibrationEnabled = false;
    d622:	e2 53       	subi	r30, 0x32	; 50
    d624:	ff 4f       	sbci	r31, 0xFF	; 255
    d626:	10 82       	st	Z, r1
    d628:	9c 01       	movw	r18, r24
    d62a:	2a 50       	subi	r18, 0x0A	; 10
    d62c:	3d 4f       	sbci	r19, 0xFD	; 253
    d62e:	e2 5a       	subi	r30, 0xA2	; 162
    d630:	f1 09       	sbc	r31, r1
    d632:	ec 01       	movw	r28, r24
    d634:	ca 54       	subi	r28, 0x4A	; 74
    d636:	dd 4f       	sbci	r29, 0xFD	; 253
    d638:	d9 01       	movw	r26, r18

    for (int i=0; i<PAD_NOTE_BUFFER_SIZE; i++)  {

        pad_note_timer_buffer[i]    = 0;
    d63a:	1d 92       	st	X+, r1
    d63c:	1d 92       	st	X+, r1
    d63e:	1d 92       	st	X+, r1
    d640:	1d 92       	st	X+, r1
        velocity_buffer[i]          = 0;
    d642:	11 92       	st	Z+, r1
        pad_buffer[i]               = 0;
    d644:	19 92       	st	Y+, r1
    activeOctave = 0;
    octaveShiftPadBuffer = 0;
    scaleShiftPadBuffer = 0;
    calibrationEnabled = false;

    for (int i=0; i<PAD_NOTE_BUFFER_SIZE; i++)  {
    d646:	2e 17       	cp	r18, r30
    d648:	3f 07       	cpc	r19, r31
    d64a:	b9 f7       	brne	.-18     	; 0xd63a <_ZN4PadsC1Ev+0xbe>
        velocity_buffer[i]          = 0;
        pad_buffer[i]               = 0;

    }

    note_buffer_head = 0;
    d64c:	fc 01       	movw	r30, r24
    d64e:	ea 58       	subi	r30, 0x8A	; 138
    d650:	fc 4f       	sbci	r31, 0xFC	; 252
    d652:	10 82       	st	Z, r1
    note_buffer_tail = 0;
    d654:	31 96       	adiw	r30, 0x01	; 1
    d656:	10 82       	st	Z, r1

}
    d658:	df 91       	pop	r29
    d65a:	cf 91       	pop	r28
    d65c:	1f 91       	pop	r17
    d65e:	0f 91       	pop	r16
    d660:	ff 90       	pop	r15
    d662:	ef 90       	pop	r14
    d664:	df 90       	pop	r13
    d666:	cf 90       	pop	r12
    d668:	bf 90       	pop	r11
    d66a:	af 90       	pop	r10
    d66c:	08 95       	ret

0000d66e <_ZN4Pads4initEv>:

void Pads::init()   {
    d66e:	cf 93       	push	r28
    d670:	df 93       	push	r29
    d672:	ec 01       	movw	r28, r24

    initHardware();
    d674:	78 de       	rcall	.-784    	; 0xd366 <_ZN4Pads12initHardwareEv>
    getConfiguration();
    d676:	ce 01       	movw	r24, r28
    d678:	42 dc       	rcall	.-1916   	; 0xcefe <_ZN4Pads16getConfigurationEv>

}
    d67a:	df 91       	pop	r29
    d67c:	cf 91       	pop	r28
    d67e:	08 95       	ret

0000d680 <_GLOBAL__sub_I__ZN4PadsC2Ev>:

    d680:	8a e6       	ldi	r24, 0x6A	; 106
    d682:	9f e0       	ldi	r25, 0x0F	; 15
    d684:	7b cf       	rjmp	.-266    	; 0xd57c <_ZN4PadsC1Ev>
    d686:	08 95       	ret

0000d688 <_ZN4Pads3mapEmmmmm>:
#include "Pads.h"

uint32_t Pads::map(uint32_t x, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max)   {
    d688:	4f 92       	push	r4
    d68a:	5f 92       	push	r5
    d68c:	6f 92       	push	r6
    d68e:	7f 92       	push	r7
    d690:	8f 92       	push	r8
    d692:	9f 92       	push	r9
    d694:	af 92       	push	r10
    d696:	bf 92       	push	r11
    d698:	cf 92       	push	r12
    d69a:	df 92       	push	r13
    d69c:	ef 92       	push	r14
    d69e:	ff 92       	push	r15
    d6a0:	0f 93       	push	r16
    d6a2:	1f 93       	push	r17
    d6a4:	cf 93       	push	r28
    d6a6:	df 93       	push	r29
    d6a8:	cd b7       	in	r28, 0x3d	; 61
    d6aa:	de b7       	in	r29, 0x3e	; 62
    d6ac:	28 01       	movw	r4, r16
    d6ae:	39 01       	movw	r6, r18

    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    d6b0:	9a 01       	movw	r18, r20
    d6b2:	ab 01       	movw	r20, r22
    d6b4:	24 19       	sub	r18, r4
    d6b6:	35 09       	sbc	r19, r5
    d6b8:	46 09       	sbc	r20, r6
    d6ba:	57 09       	sbc	r21, r7
    d6bc:	8b 89       	ldd	r24, Y+19	; 0x13
    d6be:	9c 89       	ldd	r25, Y+20	; 0x14
    d6c0:	ad 89       	ldd	r26, Y+21	; 0x15
    d6c2:	be 89       	ldd	r27, Y+22	; 0x16
    d6c4:	bc 01       	movw	r22, r24
    d6c6:	cd 01       	movw	r24, r26
    d6c8:	68 19       	sub	r22, r8
    d6ca:	79 09       	sbc	r23, r9
    d6cc:	8a 09       	sbc	r24, r10
    d6ce:	9b 09       	sbc	r25, r11
    d6d0:	0e 94 37 82 	call	0x1046e	; 0x1046e <__mulsi3>
    d6d4:	a7 01       	movw	r20, r14
    d6d6:	96 01       	movw	r18, r12
    d6d8:	24 19       	sub	r18, r4
    d6da:	35 09       	sbc	r19, r5
    d6dc:	46 09       	sbc	r20, r6
    d6de:	57 09       	sbc	r21, r7
    d6e0:	0e 94 46 82 	call	0x1048c	; 0x1048c <__udivmodsi4>
    d6e4:	ca 01       	movw	r24, r20
    d6e6:	b9 01       	movw	r22, r18
    d6e8:	68 0d       	add	r22, r8
    d6ea:	79 1d       	adc	r23, r9
    d6ec:	8a 1d       	adc	r24, r10
    d6ee:	9b 1d       	adc	r25, r11

}
    d6f0:	df 91       	pop	r29
    d6f2:	cf 91       	pop	r28
    d6f4:	1f 91       	pop	r17
    d6f6:	0f 91       	pop	r16
    d6f8:	ff 90       	pop	r15
    d6fa:	ef 90       	pop	r14
    d6fc:	df 90       	pop	r13
    d6fe:	cf 90       	pop	r12
    d700:	bf 90       	pop	r11
    d702:	af 90       	pop	r10
    d704:	9f 90       	pop	r9
    d706:	8f 90       	pop	r8
    d708:	7f 90       	pop	r7
    d70a:	6f 90       	pop	r6
    d70c:	5f 90       	pop	r5
    d70e:	4f 90       	pop	r4
    d710:	08 95       	ret

0000d712 <_ZN4Pads13scalePressureEhi14pressureType_t>:

uint8_t Pads::scalePressure(uint8_t pad, int16_t pressure, pressureType_t type) {
    d712:	8f 92       	push	r8
    d714:	9f 92       	push	r9
    d716:	af 92       	push	r10
    d718:	bf 92       	push	r11
    d71a:	cf 92       	push	r12
    d71c:	df 92       	push	r13
    d71e:	ef 92       	push	r14
    d720:	ff 92       	push	r15

    switch(type)  {
    d722:	22 23       	and	r18, r18
    d724:	d1 f1       	breq	.+116    	; 0xd79a <_ZN4Pads13scalePressureEhi14pressureType_t+0x88>
    d726:	21 30       	cpi	r18, 0x01	; 1
    d728:	09 f0       	breq	.+2      	; 0xd72c <_ZN4Pads13scalePressureEhi14pressureType_t+0x1a>
    d72a:	6e c0       	rjmp	.+220    	; 0xd808 <_ZN4Pads13scalePressureEhi14pressureType_t+0xf6>

        case pressureAftertouch:
        return map(constrain(pressure, padAftertouchLimitLower[pad], padAftertouchLimitUpper[pad]), padAftertouchLimitLower[pad], padAftertouchLimitUpper[pad], 0, 127);
    d72c:	70 e0       	ldi	r23, 0x00	; 0
    d72e:	66 0f       	add	r22, r22
    d730:	77 1f       	adc	r23, r23
    d732:	86 0f       	add	r24, r22
    d734:	97 1f       	adc	r25, r23
    d736:	fc 01       	movw	r30, r24
    d738:	e3 5c       	subi	r30, 0xC3	; 195
    d73a:	fe 4f       	sbci	r31, 0xFE	; 254
    d73c:	60 81       	ld	r22, Z
    d73e:	71 81       	ldd	r23, Z+1	; 0x01
    d740:	6b 01       	movw	r12, r22
    d742:	07 2e       	mov	r0, r23
    d744:	00 0c       	add	r0, r0
    d746:	ee 08       	sbc	r14, r14
    d748:	ff 08       	sbc	r15, r15
    d74a:	72 97       	sbiw	r30, 0x12	; 18
    d74c:	20 81       	ld	r18, Z
    d74e:	31 81       	ldd	r19, Z+1	; 0x01
    d750:	49 01       	movw	r8, r18
    d752:	03 2e       	mov	r0, r19
    d754:	00 0c       	add	r0, r0
    d756:	aa 08       	sbc	r10, r10
    d758:	bb 08       	sbc	r11, r11
    d75a:	42 17       	cp	r20, r18
    d75c:	53 07       	cpc	r21, r19
    d75e:	2c f0       	brlt	.+10     	; 0xd76a <_ZN4Pads13scalePressureEhi14pressureType_t+0x58>
    d760:	9b 01       	movw	r18, r22
    d762:	46 17       	cp	r20, r22
    d764:	57 07       	cpc	r21, r23
    d766:	0c f4       	brge	.+2      	; 0xd76a <_ZN4Pads13scalePressureEhi14pressureType_t+0x58>
    d768:	9a 01       	movw	r18, r20
    d76a:	c9 01       	movw	r24, r18
    d76c:	33 0f       	add	r19, r19
    d76e:	aa 0b       	sbc	r26, r26
    d770:	bb 0b       	sbc	r27, r27
#include "Pads.h"

uint32_t Pads::map(uint32_t x, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max)   {

    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    d772:	9c 01       	movw	r18, r24
    d774:	ad 01       	movw	r20, r26
    d776:	28 19       	sub	r18, r8
    d778:	39 09       	sbc	r19, r9
    d77a:	4a 09       	sbc	r20, r10
    d77c:	5b 09       	sbc	r21, r11
    d77e:	af e7       	ldi	r26, 0x7F	; 127
    d780:	b0 e0       	ldi	r27, 0x00	; 0
    d782:	0e 94 9c 82 	call	0x10538	; 0x10538 <__muluhisi3>
    d786:	a7 01       	movw	r20, r14
    d788:	96 01       	movw	r18, r12
    d78a:	28 19       	sub	r18, r8
    d78c:	39 09       	sbc	r19, r9
    d78e:	4a 09       	sbc	r20, r10
    d790:	5b 09       	sbc	r21, r11
    d792:	0e 94 46 82 	call	0x1048c	; 0x1048c <__udivmodsi4>
uint8_t Pads::scalePressure(uint8_t pad, int16_t pressure, pressureType_t type) {

    switch(type)  {

        case pressureAftertouch:
        return map(constrain(pressure, padAftertouchLimitLower[pad], padAftertouchLimitUpper[pad]), padAftertouchLimitLower[pad], padAftertouchLimitUpper[pad], 0, 127);
    d796:	82 2f       	mov	r24, r18
    d798:	38 c0       	rjmp	.+112    	; 0xd80a <_ZN4Pads13scalePressureEhi14pressureType_t+0xf8>
        break;

        case pressureVelocity:
        return map(constrain(pressure, padPressureLimitLower[pad], padPressureLimitUpper[pad]), padPressureLimitLower[pad], padPressureLimitUpper[pad], 0, 127);
    d79a:	70 e0       	ldi	r23, 0x00	; 0
    d79c:	66 0f       	add	r22, r22
    d79e:	77 1f       	adc	r23, r23
    d7a0:	86 0f       	add	r24, r22
    d7a2:	97 1f       	adc	r25, r23
    d7a4:	fc 01       	movw	r30, r24
    d7a6:	ef 52       	subi	r30, 0x2F	; 47
    d7a8:	ff 4f       	sbci	r31, 0xFF	; 255
    d7aa:	60 81       	ld	r22, Z
    d7ac:	71 81       	ldd	r23, Z+1	; 0x01
    d7ae:	6b 01       	movw	r12, r22
    d7b0:	07 2e       	mov	r0, r23
    d7b2:	00 0c       	add	r0, r0
    d7b4:	ee 08       	sbc	r14, r14
    d7b6:	ff 08       	sbc	r15, r15
    d7b8:	72 97       	sbiw	r30, 0x12	; 18
    d7ba:	20 81       	ld	r18, Z
    d7bc:	31 81       	ldd	r19, Z+1	; 0x01
    d7be:	49 01       	movw	r8, r18
    d7c0:	03 2e       	mov	r0, r19
    d7c2:	00 0c       	add	r0, r0
    d7c4:	aa 08       	sbc	r10, r10
    d7c6:	bb 08       	sbc	r11, r11
    d7c8:	42 17       	cp	r20, r18
    d7ca:	53 07       	cpc	r21, r19
    d7cc:	2c f0       	brlt	.+10     	; 0xd7d8 <_ZN4Pads13scalePressureEhi14pressureType_t+0xc6>
    d7ce:	9b 01       	movw	r18, r22
    d7d0:	46 17       	cp	r20, r22
    d7d2:	57 07       	cpc	r21, r23
    d7d4:	0c f4       	brge	.+2      	; 0xd7d8 <_ZN4Pads13scalePressureEhi14pressureType_t+0xc6>
    d7d6:	9a 01       	movw	r18, r20
    d7d8:	c9 01       	movw	r24, r18
    d7da:	33 0f       	add	r19, r19
    d7dc:	aa 0b       	sbc	r26, r26
    d7de:	bb 0b       	sbc	r27, r27
#include "Pads.h"

uint32_t Pads::map(uint32_t x, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max)   {

    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    d7e0:	9c 01       	movw	r18, r24
    d7e2:	ad 01       	movw	r20, r26
    d7e4:	28 19       	sub	r18, r8
    d7e6:	39 09       	sbc	r19, r9
    d7e8:	4a 09       	sbc	r20, r10
    d7ea:	5b 09       	sbc	r21, r11
    d7ec:	af e7       	ldi	r26, 0x7F	; 127
    d7ee:	b0 e0       	ldi	r27, 0x00	; 0
    d7f0:	0e 94 9c 82 	call	0x10538	; 0x10538 <__muluhisi3>
    d7f4:	a7 01       	movw	r20, r14
    d7f6:	96 01       	movw	r18, r12
    d7f8:	28 19       	sub	r18, r8
    d7fa:	39 09       	sbc	r19, r9
    d7fc:	4a 09       	sbc	r20, r10
    d7fe:	5b 09       	sbc	r21, r11
    d800:	0e 94 46 82 	call	0x1048c	; 0x1048c <__udivmodsi4>
        case pressureAftertouch:
        return map(constrain(pressure, padAftertouchLimitLower[pad], padAftertouchLimitUpper[pad]), padAftertouchLimitLower[pad], padAftertouchLimitUpper[pad], 0, 127);
        break;

        case pressureVelocity:
        return map(constrain(pressure, padPressureLimitLower[pad], padPressureLimitUpper[pad]), padPressureLimitLower[pad], padPressureLimitUpper[pad], 0, 127);
    d804:	82 2f       	mov	r24, r18
    d806:	01 c0       	rjmp	.+2      	; 0xd80a <_ZN4Pads13scalePressureEhi14pressureType_t+0xf8>
        break;

    }

    return 0;
    d808:	80 e0       	ldi	r24, 0x00	; 0

}
    d80a:	ff 90       	pop	r15
    d80c:	ef 90       	pop	r14
    d80e:	df 90       	pop	r13
    d810:	cf 90       	pop	r12
    d812:	bf 90       	pop	r11
    d814:	af 90       	pop	r10
    d816:	9f 90       	pop	r9
    d818:	8f 90       	pop	r8
    d81a:	08 95       	ret

0000d81c <_ZN4Pads7scaleXYEhi16coordinateType_t>:

    return (max + min) - value;

}

uint8_t Pads::scaleXY(uint8_t pad, int16_t xyValue, coordinateType_t type) {
    d81c:	8f 92       	push	r8
    d81e:	9f 92       	push	r9
    d820:	af 92       	push	r10
    d822:	bf 92       	push	r11
    d824:	cf 92       	push	r12
    d826:	df 92       	push	r13
    d828:	ef 92       	push	r14
    d82a:	ff 92       	push	r15

    switch (type)   {
    d82c:	22 23       	and	r18, r18
    d82e:	19 f0       	breq	.+6      	; 0xd836 <_ZN4Pads7scaleXYEhi16coordinateType_t+0x1a>
    d830:	21 30       	cpi	r18, 0x01	; 1
    d832:	c1 f1       	breq	.+112    	; 0xd8a4 <_ZN4Pads7scaleXYEhi16coordinateType_t+0x88>
    d834:	6f c0       	rjmp	.+222    	; 0xd914 <_ZN4Pads7scaleXYEhi16coordinateType_t+0xf8>

        case coordinateX:
        #if XY_FLIP_VALUES > 0
            return invertRange(map(constrain(xyValue, padXLimitLower[pad], padXLimitUpper[pad]), padXLimitLower[pad], padXLimitUpper[pad], 0, 127), 0, 127);
        #else
            return map(constrain(xyValue, padXLimitLower[pad], padXLimitUpper[pad]), padXLimitLower[pad], padXLimitUpper[pad], 0, 127);
    d836:	70 e0       	ldi	r23, 0x00	; 0
    d838:	66 0f       	add	r22, r22
    d83a:	77 1f       	adc	r23, r23
    d83c:	86 0f       	add	r24, r22
    d83e:	97 1f       	adc	r25, r23
    d840:	fc 01       	movw	r30, r24
    d842:	eb 50       	subi	r30, 0x0B	; 11
    d844:	ff 4f       	sbci	r31, 0xFF	; 255
    d846:	60 81       	ld	r22, Z
    d848:	71 81       	ldd	r23, Z+1	; 0x01
    d84a:	6b 01       	movw	r12, r22
    d84c:	07 2e       	mov	r0, r23
    d84e:	00 0c       	add	r0, r0
    d850:	ee 08       	sbc	r14, r14
    d852:	ff 08       	sbc	r15, r15
    d854:	72 97       	sbiw	r30, 0x12	; 18
    d856:	20 81       	ld	r18, Z
    d858:	31 81       	ldd	r19, Z+1	; 0x01
    d85a:	49 01       	movw	r8, r18
    d85c:	03 2e       	mov	r0, r19
    d85e:	00 0c       	add	r0, r0
    d860:	aa 08       	sbc	r10, r10
    d862:	bb 08       	sbc	r11, r11
    d864:	42 17       	cp	r20, r18
    d866:	53 07       	cpc	r21, r19
    d868:	2c f0       	brlt	.+10     	; 0xd874 <_ZN4Pads7scaleXYEhi16coordinateType_t+0x58>
    d86a:	9b 01       	movw	r18, r22
    d86c:	46 17       	cp	r20, r22
    d86e:	57 07       	cpc	r21, r23
    d870:	0c f4       	brge	.+2      	; 0xd874 <_ZN4Pads7scaleXYEhi16coordinateType_t+0x58>
    d872:	9a 01       	movw	r18, r20
    d874:	c9 01       	movw	r24, r18
    d876:	33 0f       	add	r19, r19
    d878:	aa 0b       	sbc	r26, r26
    d87a:	bb 0b       	sbc	r27, r27
#include "Pads.h"

uint32_t Pads::map(uint32_t x, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max)   {

    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    d87c:	9c 01       	movw	r18, r24
    d87e:	ad 01       	movw	r20, r26
    d880:	28 19       	sub	r18, r8
    d882:	39 09       	sbc	r19, r9
    d884:	4a 09       	sbc	r20, r10
    d886:	5b 09       	sbc	r21, r11
    d888:	af e7       	ldi	r26, 0x7F	; 127
    d88a:	b0 e0       	ldi	r27, 0x00	; 0
    d88c:	0e 94 9c 82 	call	0x10538	; 0x10538 <__muluhisi3>
    d890:	a7 01       	movw	r20, r14
    d892:	96 01       	movw	r18, r12
    d894:	28 19       	sub	r18, r8
    d896:	39 09       	sbc	r19, r9
    d898:	4a 09       	sbc	r20, r10
    d89a:	5b 09       	sbc	r21, r11
    d89c:	0e 94 46 82 	call	0x1048c	; 0x1048c <__udivmodsi4>

        case coordinateX:
        #if XY_FLIP_VALUES > 0
            return invertRange(map(constrain(xyValue, padXLimitLower[pad], padXLimitUpper[pad]), padXLimitLower[pad], padXLimitUpper[pad], 0, 127), 0, 127);
        #else
            return map(constrain(xyValue, padXLimitLower[pad], padXLimitUpper[pad]), padXLimitLower[pad], padXLimitUpper[pad], 0, 127);
    d8a0:	82 2f       	mov	r24, r18
    d8a2:	39 c0       	rjmp	.+114    	; 0xd916 <_ZN4Pads7scaleXYEhi16coordinateType_t+0xfa>
        #endif
        case coordinateY:
        #if XY_FLIP_VALUES > 0
            return map(constrain(xyValue, padYLimitLower[pad], padYLimitUpper[pad]), padYLimitLower[pad], padYLimitUpper[pad], ccYminPad[pad], ccYmaxPad[pad]);
        #else
            return invertRange(map(constrain(xyValue, padYLimitLower[pad], padYLimitUpper[pad]), padYLimitLower[pad], padYLimitUpper[pad], 0, 127), 0, 127);
    d8a4:	70 e0       	ldi	r23, 0x00	; 0
    d8a6:	66 0f       	add	r22, r22
    d8a8:	77 1f       	adc	r23, r23
    d8aa:	86 0f       	add	r24, r22
    d8ac:	97 1f       	adc	r25, r23
    d8ae:	fc 01       	movw	r30, r24
    d8b0:	e7 5e       	subi	r30, 0xE7	; 231
    d8b2:	fe 4f       	sbci	r31, 0xFE	; 254
    d8b4:	60 81       	ld	r22, Z
    d8b6:	71 81       	ldd	r23, Z+1	; 0x01
    d8b8:	6b 01       	movw	r12, r22
    d8ba:	07 2e       	mov	r0, r23
    d8bc:	00 0c       	add	r0, r0
    d8be:	ee 08       	sbc	r14, r14
    d8c0:	ff 08       	sbc	r15, r15
    d8c2:	72 97       	sbiw	r30, 0x12	; 18
    d8c4:	20 81       	ld	r18, Z
    d8c6:	31 81       	ldd	r19, Z+1	; 0x01
    d8c8:	49 01       	movw	r8, r18
    d8ca:	03 2e       	mov	r0, r19
    d8cc:	00 0c       	add	r0, r0
    d8ce:	aa 08       	sbc	r10, r10
    d8d0:	bb 08       	sbc	r11, r11
    d8d2:	42 17       	cp	r20, r18
    d8d4:	53 07       	cpc	r21, r19
    d8d6:	2c f0       	brlt	.+10     	; 0xd8e2 <_ZN4Pads7scaleXYEhi16coordinateType_t+0xc6>
    d8d8:	9b 01       	movw	r18, r22
    d8da:	46 17       	cp	r20, r22
    d8dc:	57 07       	cpc	r21, r23
    d8de:	0c f4       	brge	.+2      	; 0xd8e2 <_ZN4Pads7scaleXYEhi16coordinateType_t+0xc6>
    d8e0:	9a 01       	movw	r18, r20
    d8e2:	c9 01       	movw	r24, r18
    d8e4:	33 0f       	add	r19, r19
    d8e6:	aa 0b       	sbc	r26, r26
    d8e8:	bb 0b       	sbc	r27, r27
#include "Pads.h"

uint32_t Pads::map(uint32_t x, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max)   {

    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    d8ea:	9c 01       	movw	r18, r24
    d8ec:	ad 01       	movw	r20, r26
    d8ee:	28 19       	sub	r18, r8
    d8f0:	39 09       	sbc	r19, r9
    d8f2:	4a 09       	sbc	r20, r10
    d8f4:	5b 09       	sbc	r21, r11
    d8f6:	af e7       	ldi	r26, 0x7F	; 127
    d8f8:	b0 e0       	ldi	r27, 0x00	; 0
    d8fa:	0e 94 9c 82 	call	0x10538	; 0x10538 <__muluhisi3>
    d8fe:	a7 01       	movw	r20, r14
    d900:	96 01       	movw	r18, r12
    d902:	28 19       	sub	r18, r8
    d904:	39 09       	sbc	r19, r9
    d906:	4a 09       	sbc	r20, r10
    d908:	5b 09       	sbc	r21, r11
    d90a:	0e 94 46 82 	call	0x1048c	; 0x1048c <__udivmodsi4>

}

inline uint8_t invertRange(uint8_t value, uint8_t min, uint8_t max) {

    return (max + min) - value;
    d90e:	8f e7       	ldi	r24, 0x7F	; 127
    d910:	82 1b       	sub	r24, r18
        #endif
        case coordinateY:
        #if XY_FLIP_VALUES > 0
            return map(constrain(xyValue, padYLimitLower[pad], padYLimitUpper[pad]), padYLimitLower[pad], padYLimitUpper[pad], ccYminPad[pad], ccYmaxPad[pad]);
        #else
            return invertRange(map(constrain(xyValue, padYLimitLower[pad], padYLimitUpper[pad]), padYLimitLower[pad], padYLimitUpper[pad], 0, 127), 0, 127);
    d912:	01 c0       	rjmp	.+2      	; 0xd916 <_ZN4Pads7scaleXYEhi16coordinateType_t+0xfa>
        #endif

        default:
        return 0;
    d914:	80 e0       	ldi	r24, 0x00	; 0

    }

    d916:	ff 90       	pop	r15
    d918:	ef 90       	pop	r14
    d91a:	df 90       	pop	r13
    d91c:	cf 90       	pop	r12
    d91e:	bf 90       	pop	r11
    d920:	af 90       	pop	r10
    d922:	9f 90       	pop	r9
    d924:	8f 90       	pop	r8
    d926:	08 95       	ret

0000d928 <_ZN4Pads16setMIDISendStateE7onOff_thb>:

}

void Pads::setPadPressed(uint8_t padNumber, bool padState) {

    bitWrite(padPressed, padNumber, padState);
    d928:	cf 92       	push	r12
    d92a:	df 92       	push	r13
    d92c:	ef 92       	push	r14
    d92e:	ff 92       	push	r15
    d930:	0f 93       	push	r16
    d932:	1f 93       	push	r17
    d934:	cf 93       	push	r28
    d936:	df 93       	push	r29
    d938:	f2 2e       	mov	r15, r18
    d93a:	61 30       	cpi	r22, 0x01	; 1
    d93c:	91 f0       	breq	.+36     	; 0xd962 <_ZN4Pads16setMIDISendStateE7onOff_thb+0x3a>
    d93e:	28 f0       	brcs	.+10     	; 0xd94a <_ZN4Pads16setMIDISendStateE7onOff_thb+0x22>
    d940:	62 30       	cpi	r22, 0x02	; 2
    d942:	d9 f0       	breq	.+54     	; 0xd97a <_ZN4Pads16setMIDISendStateE7onOff_thb+0x52>
    d944:	63 30       	cpi	r22, 0x03	; 3
    d946:	29 f1       	breq	.+74     	; 0xd992 <_ZN4Pads16setMIDISendStateE7onOff_thb+0x6a>
    d948:	74 c0       	rjmp	.+232    	; 0xda32 <_ZN4Pads16setMIDISendStateE7onOff_thb+0x10a>
    d94a:	ec 01       	movw	r28, r24
    d94c:	c5 56       	subi	r28, 0x65	; 101
    d94e:	df 4f       	sbci	r29, 0xFF	; 255
    d950:	fc 01       	movw	r30, r24
    d952:	e7 56       	subi	r30, 0x67	; 103
    d954:	fe 4f       	sbci	r31, 0xFE	; 254
    d956:	20 81       	ld	r18, Z
    d958:	21 11       	cpse	r18, r1
    d95a:	2c c0       	rjmp	.+88     	; 0xd9b4 <_ZN4Pads16setMIDISendStateE7onOff_thb+0x8c>
    d95c:	28 e0       	ldi	r18, 0x08	; 8
    d95e:	30 e0       	ldi	r19, 0x00	; 0
    d960:	52 c0       	rjmp	.+164    	; 0xda06 <_ZN4Pads16setMIDISendStateE7onOff_thb+0xde>
    d962:	ec 01       	movw	r28, r24
    d964:	cc 55       	subi	r28, 0x5C	; 92
    d966:	df 4f       	sbci	r29, 0xFF	; 255
    d968:	fc 01       	movw	r30, r24
    d96a:	e7 56       	subi	r30, 0x67	; 103
    d96c:	fe 4f       	sbci	r31, 0xFE	; 254
    d96e:	20 81       	ld	r18, Z
    d970:	21 11       	cpse	r18, r1
    d972:	23 c0       	rjmp	.+70     	; 0xd9ba <_ZN4Pads16setMIDISendStateE7onOff_thb+0x92>
    d974:	29 e0       	ldi	r18, 0x09	; 9
    d976:	30 e0       	ldi	r19, 0x00	; 0
    d978:	46 c0       	rjmp	.+140    	; 0xda06 <_ZN4Pads16setMIDISendStateE7onOff_thb+0xde>
    d97a:	ec 01       	movw	r28, r24
    d97c:	c7 57       	subi	r28, 0x77	; 119
    d97e:	df 4f       	sbci	r29, 0xFF	; 255
    d980:	fc 01       	movw	r30, r24
    d982:	e7 56       	subi	r30, 0x67	; 103
    d984:	fe 4f       	sbci	r31, 0xFE	; 254
    d986:	20 81       	ld	r18, Z
    d988:	21 11       	cpse	r18, r1
    d98a:	1a c0       	rjmp	.+52     	; 0xd9c0 <_ZN4Pads16setMIDISendStateE7onOff_thb+0x98>
    d98c:	26 e0       	ldi	r18, 0x06	; 6
    d98e:	30 e0       	ldi	r19, 0x00	; 0
    d990:	3a c0       	rjmp	.+116    	; 0xda06 <_ZN4Pads16setMIDISendStateE7onOff_thb+0xde>
    d992:	ec 01       	movw	r28, r24
    d994:	ce 56       	subi	r28, 0x6E	; 110
    d996:	df 4f       	sbci	r29, 0xFF	; 255
    d998:	fc 01       	movw	r30, r24
    d99a:	e7 56       	subi	r30, 0x67	; 103
    d99c:	fe 4f       	sbci	r31, 0xFE	; 254
    d99e:	20 81       	ld	r18, Z
    d9a0:	21 11       	cpse	r18, r1
    d9a2:	11 c0       	rjmp	.+34     	; 0xd9c6 <_ZN4Pads16setMIDISendStateE7onOff_thb+0x9e>
    d9a4:	27 e0       	ldi	r18, 0x07	; 7
    d9a6:	30 e0       	ldi	r19, 0x00	; 0
    d9a8:	2e c0       	rjmp	.+92     	; 0xda06 <_ZN4Pads16setMIDISendStateE7onOff_thb+0xde>
    d9aa:	f1 92       	st	Z+, r15
    d9ac:	e8 17       	cp	r30, r24
    d9ae:	f9 07       	cpc	r31, r25
    d9b0:	e1 f7       	brne	.-8      	; 0xd9aa <_ZN4Pads16setMIDISendStateE7onOff_thb+0x82>
    d9b2:	3f c0       	rjmp	.+126    	; 0xda32 <_ZN4Pads16setMIDISendStateE7onOff_thb+0x10a>
    d9b4:	62 e0       	ldi	r22, 0x02	; 2
    d9b6:	70 e0       	ldi	r23, 0x00	; 0
    d9b8:	08 c0       	rjmp	.+16     	; 0xd9ca <_ZN4Pads16setMIDISendStateE7onOff_thb+0xa2>
    d9ba:	63 e0       	ldi	r22, 0x03	; 3
    d9bc:	70 e0       	ldi	r23, 0x00	; 0
    d9be:	05 c0       	rjmp	.+10     	; 0xd9ca <_ZN4Pads16setMIDISendStateE7onOff_thb+0xa2>
    d9c0:	60 e0       	ldi	r22, 0x00	; 0
    d9c2:	70 e0       	ldi	r23, 0x00	; 0
    d9c4:	02 c0       	rjmp	.+4      	; 0xd9ca <_ZN4Pads16setMIDISendStateE7onOff_thb+0xa2>
    d9c6:	61 e0       	ldi	r22, 0x01	; 1
    d9c8:	70 e0       	ldi	r23, 0x00	; 0
    d9ca:	0f 2d       	mov	r16, r15
    d9cc:	10 e0       	ldi	r17, 0x00	; 0
    d9ce:	c4 2e       	mov	r12, r20
    d9d0:	d1 2c       	mov	r13, r1
    d9d2:	fc 01       	movw	r30, r24
    d9d4:	e3 56       	subi	r30, 0x63	; 99
    d9d6:	fe 4f       	sbci	r31, 0xFE	; 254
    d9d8:	80 81       	ld	r24, Z
    d9da:	95 e7       	ldi	r25, 0x75	; 117
    d9dc:	89 02       	muls	r24, r25
    d9de:	90 01       	movw	r18, r0
    d9e0:	11 24       	eor	r1, r1
    d9e2:	8d e0       	ldi	r24, 0x0D	; 13
    d9e4:	48 9f       	mul	r20, r24
    d9e6:	20 0d       	add	r18, r0
    d9e8:	31 1d       	adc	r19, r1
    d9ea:	11 24       	eor	r1, r1
    d9ec:	26 0f       	add	r18, r22
    d9ee:	37 1f       	adc	r19, r23
    d9f0:	e1 2c       	mov	r14, r1
    d9f2:	43 e0       	ldi	r20, 0x03	; 3
    d9f4:	60 e0       	ldi	r22, 0x00	; 0
    d9f6:	8c e0       	ldi	r24, 0x0C	; 12
    d9f8:	92 e0       	ldi	r25, 0x02	; 2
    d9fa:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN13Configuration14writeParameterEhhiib>
    d9fe:	cc 0d       	add	r28, r12
    da00:	dd 1d       	adc	r29, r13
    da02:	f8 82       	st	Y, r15
    da04:	16 c0       	rjmp	.+44     	; 0xda32 <_ZN4Pads16setMIDISendStateE7onOff_thb+0x10a>
    da06:	0f 2d       	mov	r16, r15
    da08:	10 e0       	ldi	r17, 0x00	; 0
    da0a:	fc 01       	movw	r30, r24
    da0c:	e3 56       	subi	r30, 0x63	; 99
    da0e:	fe 4f       	sbci	r31, 0xFE	; 254
    da10:	80 81       	ld	r24, Z
    da12:	93 e1       	ldi	r25, 0x13	; 19
    da14:	89 02       	muls	r24, r25
    da16:	20 0d       	add	r18, r0
    da18:	31 1d       	adc	r19, r1
    da1a:	11 24       	eor	r1, r1
    da1c:	e1 2c       	mov	r14, r1
    da1e:	42 e0       	ldi	r20, 0x02	; 2
    da20:	60 e0       	ldi	r22, 0x00	; 0
    da22:	8c e0       	ldi	r24, 0x0C	; 12
    da24:	92 e0       	ldi	r25, 0x02	; 2
    da26:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN13Configuration14writeParameterEhhiib>
    da2a:	fe 01       	movw	r30, r28
    da2c:	ce 01       	movw	r24, r28
    da2e:	09 96       	adiw	r24, 0x09	; 9
    da30:	bc cf       	rjmp	.-136    	; 0xd9aa <_ZN4Pads16setMIDISendStateE7onOff_thb+0x82>
    da32:	df 91       	pop	r29
    da34:	cf 91       	pop	r28
    da36:	1f 91       	pop	r17
    da38:	0f 91       	pop	r16
    da3a:	ff 90       	pop	r15
    da3c:	ef 90       	pop	r14
    da3e:	df 90       	pop	r13
    da40:	cf 90       	pop	r12
    da42:	08 95       	ret

0000da44 <_ZN4Pads10splitOnOffEv>:
    da44:	ef 92       	push	r14
    da46:	0f 93       	push	r16
    da48:	1f 93       	push	r17
    da4a:	cf 93       	push	r28
    da4c:	df 93       	push	r29
    da4e:	ec 01       	movw	r28, r24
    da50:	fc 01       	movw	r30, r24
    da52:	e7 56       	subi	r30, 0x67	; 103
    da54:	fe 4f       	sbci	r31, 0xFE	; 254
    da56:	00 81       	ld	r16, Z
    da58:	91 e0       	ldi	r25, 0x01	; 1
    da5a:	09 27       	eor	r16, r25
    da5c:	00 83       	st	Z, r16
    da5e:	10 e0       	ldi	r17, 0x00	; 0
    da60:	34 96       	adiw	r30, 0x04	; 4
    da62:	20 81       	ld	r18, Z
    da64:	83 e1       	ldi	r24, 0x13	; 19
    da66:	28 02       	muls	r18, r24
    da68:	90 01       	movw	r18, r0
    da6a:	11 24       	eor	r1, r1
    da6c:	2b 5f       	subi	r18, 0xFB	; 251
    da6e:	3f 4f       	sbci	r19, 0xFF	; 255
    da70:	e1 2c       	mov	r14, r1
    da72:	42 e0       	ldi	r20, 0x02	; 2
    da74:	60 e0       	ldi	r22, 0x00	; 0
    da76:	8c e0       	ldi	r24, 0x0C	; 12
    da78:	92 e0       	ldi	r25, 0x02	; 2
    da7a:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN13Configuration14writeParameterEhhiib>
    da7e:	ce 01       	movw	r24, r28
    da80:	0e 94 92 56 	call	0xad24	; 0xad24 <_ZN4Pads16getPadParametersEv>
    da84:	df 91       	pop	r29
    da86:	cf 91       	pop	r28
    da88:	1f 91       	pop	r17
    da8a:	0f 91       	pop	r16
    da8c:	ef 90       	pop	r14
    da8e:	08 95       	ret

0000da90 <_ZN4Pads9calibrateE16coordinateType_t20calibrationDirectionhj>:
    da90:	ef 92       	push	r14
    da92:	0f 93       	push	r16
    da94:	1f 93       	push	r17
    da96:	61 30       	cpi	r22, 0x01	; 1
    da98:	e9 f0       	breq	.+58     	; 0xdad4 <_ZN4Pads9calibrateE16coordinateType_t20calibrationDirectionhj+0x44>
    da9a:	78 f0       	brcs	.+30     	; 0xdaba <_ZN4Pads9calibrateE16coordinateType_t20calibrationDirectionhj+0x2a>
    da9c:	62 30       	cpi	r22, 0x02	; 2
    da9e:	e1 f5       	brne	.+120    	; 0xdb18 <_ZN4Pads9calibrateE16coordinateType_t20calibrationDirectionhj+0x88>
    daa0:	44 23       	and	r20, r20
    daa2:	19 f0       	breq	.+6      	; 0xdaaa <_ZN4Pads9calibrateE16coordinateType_t20calibrationDirectionhj+0x1a>
    daa4:	41 30       	cpi	r20, 0x01	; 1
    daa6:	29 f0       	breq	.+10     	; 0xdab2 <_ZN4Pads9calibrateE16coordinateType_t20calibrationDirectionhj+0x22>
    daa8:	39 c0       	rjmp	.+114    	; 0xdb1c <_ZN4Pads9calibrateE16coordinateType_t20calibrationDirectionhj+0x8c>
    daaa:	81 54       	subi	r24, 0x41	; 65
    daac:	9f 4f       	sbci	r25, 0xFF	; 255
    daae:	41 e0       	ldi	r20, 0x01	; 1
    dab0:	1d c0       	rjmp	.+58     	; 0xdaec <_ZN4Pads9calibrateE16coordinateType_t20calibrationDirectionhj+0x5c>
    dab2:	8f 52       	subi	r24, 0x2F	; 47
    dab4:	9f 4f       	sbci	r25, 0xFF	; 255
    dab6:	42 e0       	ldi	r20, 0x02	; 2
    dab8:	19 c0       	rjmp	.+50     	; 0xdaec <_ZN4Pads9calibrateE16coordinateType_t20calibrationDirectionhj+0x5c>
    daba:	44 23       	and	r20, r20
    dabc:	19 f0       	breq	.+6      	; 0xdac4 <_ZN4Pads9calibrateE16coordinateType_t20calibrationDirectionhj+0x34>
    dabe:	41 30       	cpi	r20, 0x01	; 1
    dac0:	29 f0       	breq	.+10     	; 0xdacc <_ZN4Pads9calibrateE16coordinateType_t20calibrationDirectionhj+0x3c>
    dac2:	2e c0       	rjmp	.+92     	; 0xdb20 <_ZN4Pads9calibrateE16coordinateType_t20calibrationDirectionhj+0x90>
    dac4:	8d 51       	subi	r24, 0x1D	; 29
    dac6:	9f 4f       	sbci	r25, 0xFF	; 255
    dac8:	43 e0       	ldi	r20, 0x03	; 3
    daca:	10 c0       	rjmp	.+32     	; 0xdaec <_ZN4Pads9calibrateE16coordinateType_t20calibrationDirectionhj+0x5c>
    dacc:	8b 50       	subi	r24, 0x0B	; 11
    dace:	9f 4f       	sbci	r25, 0xFF	; 255
    dad0:	44 e0       	ldi	r20, 0x04	; 4
    dad2:	0c c0       	rjmp	.+24     	; 0xdaec <_ZN4Pads9calibrateE16coordinateType_t20calibrationDirectionhj+0x5c>
    dad4:	44 23       	and	r20, r20
    dad6:	19 f0       	breq	.+6      	; 0xdade <_ZN4Pads9calibrateE16coordinateType_t20calibrationDirectionhj+0x4e>
    dad8:	41 30       	cpi	r20, 0x01	; 1
    dada:	29 f0       	breq	.+10     	; 0xdae6 <_ZN4Pads9calibrateE16coordinateType_t20calibrationDirectionhj+0x56>
    dadc:	23 c0       	rjmp	.+70     	; 0xdb24 <_ZN4Pads9calibrateE16coordinateType_t20calibrationDirectionhj+0x94>
    dade:	89 5f       	subi	r24, 0xF9	; 249
    dae0:	9e 4f       	sbci	r25, 0xFE	; 254
    dae2:	45 e0       	ldi	r20, 0x05	; 5
    dae4:	03 c0       	rjmp	.+6      	; 0xdaec <_ZN4Pads9calibrateE16coordinateType_t20calibrationDirectionhj+0x5c>
    dae6:	87 5e       	subi	r24, 0xE7	; 231
    dae8:	9e 4f       	sbci	r25, 0xFE	; 254
    daea:	46 e0       	ldi	r20, 0x06	; 6
    daec:	e2 2f       	mov	r30, r18
    daee:	f0 e0       	ldi	r31, 0x00	; 0
    daf0:	ee 0f       	add	r30, r30
    daf2:	ff 1f       	adc	r31, r31
    daf4:	e8 0f       	add	r30, r24
    daf6:	f9 1f       	adc	r31, r25
    daf8:	80 81       	ld	r24, Z
    dafa:	91 81       	ldd	r25, Z+1	; 0x01
    dafc:	08 17       	cp	r16, r24
    dafe:	19 07       	cpc	r17, r25
    db00:	99 f0       	breq	.+38     	; 0xdb28 <_ZN4Pads9calibrateE16coordinateType_t20calibrationDirectionhj+0x98>
    db02:	11 83       	std	Z+1, r17	; 0x01
    db04:	00 83       	st	Z, r16
    db06:	30 e0       	ldi	r19, 0x00	; 0
    db08:	e1 2c       	mov	r14, r1
    db0a:	62 e0       	ldi	r22, 0x02	; 2
    db0c:	8c e0       	ldi	r24, 0x0C	; 12
    db0e:	92 e0       	ldi	r25, 0x02	; 2
    db10:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN13Configuration14writeParameterEhhiib>
    db14:	81 e0       	ldi	r24, 0x01	; 1
    db16:	09 c0       	rjmp	.+18     	; 0xdb2a <_ZN4Pads9calibrateE16coordinateType_t20calibrationDirectionhj+0x9a>
    db18:	80 e0       	ldi	r24, 0x00	; 0
    db1a:	07 c0       	rjmp	.+14     	; 0xdb2a <_ZN4Pads9calibrateE16coordinateType_t20calibrationDirectionhj+0x9a>
    db1c:	80 e0       	ldi	r24, 0x00	; 0
    db1e:	05 c0       	rjmp	.+10     	; 0xdb2a <_ZN4Pads9calibrateE16coordinateType_t20calibrationDirectionhj+0x9a>
    db20:	80 e0       	ldi	r24, 0x00	; 0
    db22:	03 c0       	rjmp	.+6      	; 0xdb2a <_ZN4Pads9calibrateE16coordinateType_t20calibrationDirectionhj+0x9a>
    db24:	80 e0       	ldi	r24, 0x00	; 0
    db26:	01 c0       	rjmp	.+2      	; 0xdb2a <_ZN4Pads9calibrateE16coordinateType_t20calibrationDirectionhj+0x9a>
    db28:	80 e0       	ldi	r24, 0x00	; 0
    db2a:	1f 91       	pop	r17
    db2c:	0f 91       	pop	r16
    db2e:	ef 90       	pop	r14
    db30:	08 95       	ret

0000db32 <_ZN4Pads18setCalibrationModeEb16coordinateType_t>:
    db32:	fc 01       	movw	r30, r24
    db34:	e8 58       	subi	r30, 0x88	; 136
    db36:	fc 4f       	sbci	r31, 0xFC	; 252
    db38:	60 83       	st	Z, r22
    db3a:	35 96       	adiw	r30, 0x05	; 5
    db3c:	40 83       	st	Z, r20
    db3e:	34 97       	sbiw	r30, 0x04	; 4
    db40:	2f e0       	ldi	r18, 0x0F	; 15
    db42:	37 e2       	ldi	r19, 0x27	; 39
    db44:	31 83       	std	Z+1, r19	; 0x01
    db46:	20 83       	st	Z, r18
    db48:	32 96       	adiw	r30, 0x02	; 2
    db4a:	81 ef       	ldi	r24, 0xF1	; 241
    db4c:	98 ed       	ldi	r25, 0xD8	; 216
    db4e:	91 83       	std	Z+1, r25	; 0x01
    db50:	80 83       	st	Z, r24
    db52:	08 95       	ret

0000db54 <_ZN4Pads16resetCalibrationEv>:
    db54:	fc 01       	movw	r30, r24
    db56:	e7 58       	subi	r30, 0x87	; 135
    db58:	fc 4f       	sbci	r31, 0xFC	; 252
    db5a:	2f e0       	ldi	r18, 0x0F	; 15
    db5c:	37 e2       	ldi	r19, 0x27	; 39
    db5e:	31 83       	std	Z+1, r19	; 0x01
    db60:	20 83       	st	Z, r18
    db62:	32 96       	adiw	r30, 0x02	; 2
    db64:	81 ef       	ldi	r24, 0xF1	; 241
    db66:	98 ed       	ldi	r25, 0xD8	; 216
    db68:	91 83       	std	Z+1, r25	; 0x01
    db6a:	80 83       	st	Z, r24
    db6c:	08 95       	ret

0000db6e <_ZN4Pads16setActiveProgramEa>:
    db6e:	ef 92       	push	r14
    db70:	0f 93       	push	r16
    db72:	1f 93       	push	r17
    db74:	cf 93       	push	r28
    db76:	df 93       	push	r29
    db78:	6a 30       	cpi	r22, 0x0A	; 10
    db7a:	c8 f4       	brcc	.+50     	; 0xdbae <_ZN4Pads16setActiveProgramEa+0x40>
    db7c:	fc 01       	movw	r30, r24
    db7e:	e3 56       	subi	r30, 0x63	; 99
    db80:	fe 4f       	sbci	r31, 0xFE	; 254
    db82:	20 81       	ld	r18, Z
    db84:	26 17       	cp	r18, r22
    db86:	a9 f0       	breq	.+42     	; 0xdbb2 <_ZN4Pads16setActiveProgramEa+0x44>
    db88:	06 2f       	mov	r16, r22
    db8a:	ec 01       	movw	r28, r24
    db8c:	00 2e       	mov	r0, r16
    db8e:	00 0c       	add	r0, r0
    db90:	11 0b       	sbc	r17, r17
    db92:	e1 2c       	mov	r14, r1
    db94:	20 e0       	ldi	r18, 0x00	; 0
    db96:	30 e0       	ldi	r19, 0x00	; 0
    db98:	40 e0       	ldi	r20, 0x00	; 0
    db9a:	60 e0       	ldi	r22, 0x00	; 0
    db9c:	8c e0       	ldi	r24, 0x0C	; 12
    db9e:	92 e0       	ldi	r25, 0x02	; 2
    dba0:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN13Configuration14writeParameterEhhiib>
    dba4:	ce 01       	movw	r24, r28
    dba6:	0e 94 cb 63 	call	0xc796	; 0xc796 <_ZN4Pads20getProgramParametersEv>
    dbaa:	81 e0       	ldi	r24, 0x01	; 1
    dbac:	03 c0       	rjmp	.+6      	; 0xdbb4 <_ZN4Pads16setActiveProgramEa+0x46>
    dbae:	80 e0       	ldi	r24, 0x00	; 0
    dbb0:	01 c0       	rjmp	.+2      	; 0xdbb4 <_ZN4Pads16setActiveProgramEa+0x46>
    dbb2:	80 e0       	ldi	r24, 0x00	; 0
    dbb4:	df 91       	pop	r29
    dbb6:	cf 91       	pop	r28
    dbb8:	1f 91       	pop	r17
    dbba:	0f 91       	pop	r16
    dbbc:	ef 90       	pop	r14
    dbbe:	08 95       	ret

0000dbc0 <_ZN4Pads14setActiveScaleEa>:
    dbc0:	ef 92       	push	r14
    dbc2:	0f 93       	push	r16
    dbc4:	1f 93       	push	r17
    dbc6:	cf 93       	push	r28
    dbc8:	df 93       	push	r29
    dbca:	61 31       	cpi	r22, 0x11	; 17
    dbcc:	e8 f4       	brcc	.+58     	; 0xdc08 <_ZN4Pads14setActiveScaleEa+0x48>
    dbce:	fc 01       	movw	r30, r24
    dbd0:	e4 56       	subi	r30, 0x64	; 100
    dbd2:	fe 4f       	sbci	r31, 0xFE	; 254
    dbd4:	20 81       	ld	r18, Z
    dbd6:	26 17       	cp	r18, r22
    dbd8:	c9 f0       	breq	.+50     	; 0xdc0c <_ZN4Pads14setActiveScaleEa+0x4c>
    dbda:	06 2f       	mov	r16, r22
    dbdc:	ec 01       	movw	r28, r24
    dbde:	60 83       	st	Z, r22
    dbe0:	00 2e       	mov	r0, r16
    dbe2:	00 0c       	add	r0, r0
    dbe4:	11 0b       	sbc	r17, r17
    dbe6:	31 96       	adiw	r30, 0x01	; 1
    dbe8:	20 81       	ld	r18, Z
    dbea:	02 2e       	mov	r0, r18
    dbec:	00 0c       	add	r0, r0
    dbee:	33 0b       	sbc	r19, r19
    dbf0:	e1 2c       	mov	r14, r1
    dbf2:	41 e0       	ldi	r20, 0x01	; 1
    dbf4:	60 e0       	ldi	r22, 0x00	; 0
    dbf6:	8c e0       	ldi	r24, 0x0C	; 12
    dbf8:	92 e0       	ldi	r25, 0x02	; 2
    dbfa:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN13Configuration14writeParameterEhhiib>
    dbfe:	ce 01       	movw	r24, r28
    dc00:	0e 94 8c 63 	call	0xc718	; 0xc718 <_ZN4Pads18getScaleParametersEv>
    dc04:	81 e0       	ldi	r24, 0x01	; 1
    dc06:	03 c0       	rjmp	.+6      	; 0xdc0e <_ZN4Pads14setActiveScaleEa+0x4e>
    dc08:	80 e0       	ldi	r24, 0x00	; 0
    dc0a:	01 c0       	rjmp	.+2      	; 0xdc0e <_ZN4Pads14setActiveScaleEa+0x4e>
    dc0c:	80 e0       	ldi	r24, 0x00	; 0
    dc0e:	df 91       	pop	r29
    dc10:	cf 91       	pop	r28
    dc12:	1f 91       	pop	r17
    dc14:	0f 91       	pop	r16
    dc16:	ef 90       	pop	r14
    dc18:	08 95       	ret

0000dc1a <_ZN4Pads17setAftertouchTypeE16aftertouchType_t>:
    dc1a:	cf 92       	push	r12
    dc1c:	df 92       	push	r13
    dc1e:	ef 92       	push	r14
    dc20:	0f 93       	push	r16
    dc22:	1f 93       	push	r17
    dc24:	cf 93       	push	r28
    dc26:	62 30       	cpi	r22, 0x02	; 2
    dc28:	88 f4       	brcc	.+34     	; 0xdc4c <_ZN4Pads17setAftertouchTypeE16aftertouchType_t+0x32>
    dc2a:	c6 2f       	mov	r28, r22
    dc2c:	6c 01       	movw	r12, r24
    dc2e:	06 2f       	mov	r16, r22
    dc30:	10 e0       	ldi	r17, 0x00	; 0
    dc32:	e1 2c       	mov	r14, r1
    dc34:	20 e0       	ldi	r18, 0x00	; 0
    dc36:	30 e0       	ldi	r19, 0x00	; 0
    dc38:	40 e0       	ldi	r20, 0x00	; 0
    dc3a:	63 e0       	ldi	r22, 0x03	; 3
    dc3c:	8c e0       	ldi	r24, 0x0C	; 12
    dc3e:	92 e0       	ldi	r25, 0x02	; 2
    dc40:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN13Configuration14writeParameterEhhiib>
    dc44:	f6 01       	movw	r30, r12
    dc46:	e9 56       	subi	r30, 0x69	; 105
    dc48:	fe 4f       	sbci	r31, 0xFE	; 254
    dc4a:	c0 83       	st	Z, r28
    dc4c:	cf 91       	pop	r28
    dc4e:	1f 91       	pop	r17
    dc50:	0f 91       	pop	r16
    dc52:	ef 90       	pop	r14
    dc54:	df 90       	pop	r13
    dc56:	cf 90       	pop	r12
    dc58:	08 95       	ret

0000dc5a <_ZN4Pads18changeActiveOctaveEb>:
    dc5a:	66 23       	and	r22, r22
    dc5c:	39 f0       	breq	.+14     	; 0xdc6c <_ZN4Pads18changeActiveOctaveEb+0x12>
    dc5e:	fc 01       	movw	r30, r24
    dc60:	e6 56       	subi	r30, 0x66	; 102
    dc62:	fe 4f       	sbci	r31, 0xFE	; 254
    dc64:	20 81       	ld	r18, Z
    dc66:	2f 5f       	subi	r18, 0xFF	; 255
    dc68:	20 83       	st	Z, r18
    dc6a:	06 c0       	rjmp	.+12     	; 0xdc78 <_ZN4Pads18changeActiveOctaveEb+0x1e>
    dc6c:	fc 01       	movw	r30, r24
    dc6e:	e6 56       	subi	r30, 0x66	; 102
    dc70:	fe 4f       	sbci	r31, 0xFE	; 254
    dc72:	20 81       	ld	r18, Z
    dc74:	21 50       	subi	r18, 0x01	; 1
    dc76:	20 83       	st	Z, r18
    dc78:	fc 01       	movw	r30, r24
    dc7a:	e6 56       	subi	r30, 0x66	; 102
    dc7c:	fe 4f       	sbci	r31, 0xFE	; 254
    dc7e:	20 81       	ld	r18, Z
    dc80:	2b 30       	cpi	r18, 0x0B	; 11
    dc82:	14 f0       	brlt	.+4      	; 0xdc88 <_ZN4Pads18changeActiveOctaveEb+0x2e>
    dc84:	21 50       	subi	r18, 0x01	; 1
    dc86:	20 83       	st	Z, r18
    dc88:	fc 01       	movw	r30, r24
    dc8a:	e6 56       	subi	r30, 0x66	; 102
    dc8c:	fe 4f       	sbci	r31, 0xFE	; 254
    dc8e:	20 81       	ld	r18, Z
    dc90:	22 23       	and	r18, r18
    dc92:	14 f4       	brge	.+4      	; 0xdc98 <_ZN4Pads18changeActiveOctaveEb+0x3e>
    dc94:	2f 5f       	subi	r18, 0xFF	; 255
    dc96:	20 83       	st	Z, r18
    dc98:	08 95       	ret

0000dc9a <_ZN4Pads8changeCCEb16coordinateType_ta>:
    dc9a:	af 92       	push	r10
    dc9c:	bf 92       	push	r11
    dc9e:	cf 92       	push	r12
    dca0:	df 92       	push	r13
    dca2:	ef 92       	push	r14
    dca4:	ff 92       	push	r15
    dca6:	0f 93       	push	r16
    dca8:	1f 93       	push	r17
    dcaa:	cf 93       	push	r28
    dcac:	df 93       	push	r29
    dcae:	ec 01       	movw	r28, r24
    dcb0:	06 2f       	mov	r16, r22
    dcb2:	d4 2e       	mov	r13, r20
    dcb4:	12 2f       	mov	r17, r18
    dcb6:	fc 01       	movw	r30, r24
    dcb8:	e7 56       	subi	r30, 0x67	; 103
    dcba:	fe 4f       	sbci	r31, 0xFE	; 254
    dcbc:	80 81       	ld	r24, Z
    dcbe:	88 23       	and	r24, r24
    dcc0:	19 f0       	breq	.+6      	; 0xdcc8 <_ZN4Pads8changeCCEb16coordinateType_ta+0x2e>
    dcc2:	ce 01       	movw	r24, r28
    dcc4:	d5 da       	rcall	.-2646   	; 0xd270 <_ZN4Pads17getLastTouchedPadEv>
    dcc6:	01 c0       	rjmp	.+2      	; 0xdcca <_ZN4Pads8changeCCEb16coordinateType_ta+0x30>
    dcc8:	80 e0       	ldi	r24, 0x00	; 0
    dcca:	01 11       	cpse	r16, r1
    dccc:	03 c0       	rjmp	.+6      	; 0xdcd4 <_ZN4Pads8changeCCEb16coordinateType_ta+0x3a>
    dcce:	11 95       	neg	r17
    dcd0:	f1 2c       	mov	r15, r1
    dcd2:	04 c0       	rjmp	.+8      	; 0xdcdc <_ZN4Pads8changeCCEb16coordinateType_ta+0x42>
    dcd4:	0f 2e       	mov	r0, r31
    dcd6:	ff e7       	ldi	r31, 0x7F	; 127
    dcd8:	ff 2e       	mov	r15, r31
    dcda:	f0 2d       	mov	r31, r0
    dcdc:	dd 20       	and	r13, r13
    dcde:	21 f0       	breq	.+8      	; 0xdce8 <_ZN4Pads8changeCCEb16coordinateType_ta+0x4e>
    dce0:	61 e0       	ldi	r22, 0x01	; 1
    dce2:	d6 16       	cp	r13, r22
    dce4:	71 f0       	breq	.+28     	; 0xdd02 <_ZN4Pads8changeCCEb16coordinateType_ta+0x68>
    dce6:	8f c0       	rjmp	.+286    	; 0xde06 <_ZN4Pads8changeCCEb16coordinateType_ta+0x16c>
    dce8:	6e 01       	movw	r12, r28
    dcea:	73 e5       	ldi	r23, 0x53	; 83
    dcec:	c7 0e       	add	r12, r23
    dcee:	d1 1c       	adc	r13, r1
    dcf0:	fe 01       	movw	r30, r28
    dcf2:	e7 56       	subi	r30, 0x67	; 103
    dcf4:	fe 4f       	sbci	r31, 0xFE	; 254
    dcf6:	90 81       	ld	r25, Z
    dcf8:	99 23       	and	r25, r25
    dcfa:	81 f0       	breq	.+32     	; 0xdd1c <_ZN4Pads8changeCCEb16coordinateType_ta+0x82>
    dcfc:	25 e0       	ldi	r18, 0x05	; 5
    dcfe:	30 e0       	ldi	r19, 0x00	; 0
    dd00:	12 c0       	rjmp	.+36     	; 0xdd26 <_ZN4Pads8changeCCEb16coordinateType_ta+0x8c>
    dd02:	6e 01       	movw	r12, r28
    dd04:	9c e5       	ldi	r25, 0x5C	; 92
    dd06:	c9 0e       	add	r12, r25
    dd08:	d1 1c       	adc	r13, r1
    dd0a:	fe 01       	movw	r30, r28
    dd0c:	e7 56       	subi	r30, 0x67	; 103
    dd0e:	fe 4f       	sbci	r31, 0xFE	; 254
    dd10:	90 81       	ld	r25, Z
    dd12:	99 23       	and	r25, r25
    dd14:	31 f0       	breq	.+12     	; 0xdd22 <_ZN4Pads8changeCCEb16coordinateType_ta+0x88>
    dd16:	26 e0       	ldi	r18, 0x06	; 6
    dd18:	30 e0       	ldi	r19, 0x00	; 0
    dd1a:	05 c0       	rjmp	.+10     	; 0xdd26 <_ZN4Pads8changeCCEb16coordinateType_ta+0x8c>
    dd1c:	2b e0       	ldi	r18, 0x0B	; 11
    dd1e:	30 e0       	ldi	r19, 0x00	; 0
    dd20:	02 c0       	rjmp	.+4      	; 0xdd26 <_ZN4Pads8changeCCEb16coordinateType_ta+0x8c>
    dd22:	2c e0       	ldi	r18, 0x0C	; 12
    dd24:	30 e0       	ldi	r19, 0x00	; 0
    dd26:	00 23       	and	r16, r16
    dd28:	91 f0       	breq	.+36     	; 0xdd4e <_ZN4Pads8changeCCEb16coordinateType_ta+0xb4>
    dd2a:	f6 01       	movw	r30, r12
    dd2c:	e8 0f       	add	r30, r24
    dd2e:	f1 1d       	adc	r31, r1
    dd30:	90 81       	ld	r25, Z
    dd32:	61 2f       	mov	r22, r17
    dd34:	01 2e       	mov	r0, r17
    dd36:	00 0c       	add	r0, r0
    dd38:	77 0b       	sbc	r23, r23
    dd3a:	69 0f       	add	r22, r25
    dd3c:	71 1d       	adc	r23, r1
    dd3e:	4f 2d       	mov	r20, r15
    dd40:	50 e0       	ldi	r21, 0x00	; 0
    dd42:	91 e0       	ldi	r25, 0x01	; 1
    dd44:	46 17       	cp	r20, r22
    dd46:	57 07       	cpc	r21, r23
    dd48:	9c f0       	brlt	.+38     	; 0xdd70 <_ZN4Pads8changeCCEb16coordinateType_ta+0xd6>
    dd4a:	90 e0       	ldi	r25, 0x00	; 0
    dd4c:	11 c0       	rjmp	.+34     	; 0xdd70 <_ZN4Pads8changeCCEb16coordinateType_ta+0xd6>
    dd4e:	f6 01       	movw	r30, r12
    dd50:	e8 0f       	add	r30, r24
    dd52:	f1 1d       	adc	r31, r1
    dd54:	90 81       	ld	r25, Z
    dd56:	61 2f       	mov	r22, r17
    dd58:	01 2e       	mov	r0, r17
    dd5a:	00 0c       	add	r0, r0
    dd5c:	77 0b       	sbc	r23, r23
    dd5e:	69 0f       	add	r22, r25
    dd60:	71 1d       	adc	r23, r1
    dd62:	4f 2d       	mov	r20, r15
    dd64:	50 e0       	ldi	r21, 0x00	; 0
    dd66:	91 e0       	ldi	r25, 0x01	; 1
    dd68:	64 17       	cp	r22, r20
    dd6a:	75 07       	cpc	r23, r21
    dd6c:	0c f0       	brlt	.+2      	; 0xdd70 <_ZN4Pads8changeCCEb16coordinateType_ta+0xd6>
    dd6e:	90 e0       	ldi	r25, 0x00	; 0
    dd70:	91 11       	cpse	r25, r1
    dd72:	06 c0       	rjmp	.+12     	; 0xdd80 <_ZN4Pads8changeCCEb16coordinateType_ta+0xe6>
    dd74:	f6 01       	movw	r30, r12
    dd76:	e8 0f       	add	r30, r24
    dd78:	f1 1d       	adc	r31, r1
    dd7a:	f0 80       	ld	r15, Z
    dd7c:	f1 0e       	add	r15, r17
    dd7e:	45 c0       	rjmp	.+138    	; 0xde0a <_ZN4Pads8changeCCEb16coordinateType_ta+0x170>
    dd80:	f6 01       	movw	r30, r12
    dd82:	e8 0f       	add	r30, r24
    dd84:	f1 1d       	adc	r31, r1
    dd86:	90 81       	ld	r25, Z
    dd88:	9f 11       	cpse	r25, r15
    dd8a:	3f c0       	rjmp	.+126    	; 0xde0a <_ZN4Pads8changeCCEb16coordinateType_ta+0x170>
    dd8c:	80 e0       	ldi	r24, 0x00	; 0
    dd8e:	45 c0       	rjmp	.+138    	; 0xde1a <_ZN4Pads8changeCCEb16coordinateType_ta+0x180>
    dd90:	0f 2d       	mov	r16, r15
    dd92:	10 e0       	ldi	r17, 0x00	; 0
    dd94:	a8 2e       	mov	r10, r24
    dd96:	b1 2c       	mov	r11, r1
    dd98:	c3 56       	subi	r28, 0x63	; 99
    dd9a:	de 4f       	sbci	r29, 0xFE	; 254
    dd9c:	48 81       	ld	r20, Y
    dd9e:	e5 e7       	ldi	r30, 0x75	; 117
    dda0:	4e 02       	muls	r20, r30
    dda2:	a0 01       	movw	r20, r0
    dda4:	11 24       	eor	r1, r1
    dda6:	ba 01       	movw	r22, r20
    dda8:	ed e0       	ldi	r30, 0x0D	; 13
    ddaa:	8e 9f       	mul	r24, r30
    ddac:	60 0d       	add	r22, r0
    ddae:	71 1d       	adc	r23, r1
    ddb0:	11 24       	eor	r1, r1
    ddb2:	26 0f       	add	r18, r22
    ddb4:	37 1f       	adc	r19, r23
    ddb6:	e1 2c       	mov	r14, r1
    ddb8:	43 e0       	ldi	r20, 0x03	; 3
    ddba:	60 e0       	ldi	r22, 0x00	; 0
    ddbc:	8c e0       	ldi	r24, 0x0C	; 12
    ddbe:	92 e0       	ldi	r25, 0x02	; 2
    ddc0:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN13Configuration14writeParameterEhhiib>
    ddc4:	f6 01       	movw	r30, r12
    ddc6:	ea 0d       	add	r30, r10
    ddc8:	fb 1d       	adc	r31, r11
    ddca:	f0 82       	st	Z, r15
    ddcc:	81 e0       	ldi	r24, 0x01	; 1
    ddce:	25 c0       	rjmp	.+74     	; 0xde1a <_ZN4Pads8changeCCEb16coordinateType_ta+0x180>
    ddd0:	0f 2d       	mov	r16, r15
    ddd2:	10 e0       	ldi	r17, 0x00	; 0
    ddd4:	c3 56       	subi	r28, 0x63	; 99
    ddd6:	de 4f       	sbci	r29, 0xFE	; 254
    ddd8:	88 81       	ld	r24, Y
    ddda:	63 e1       	ldi	r22, 0x13	; 19
    dddc:	86 02       	muls	r24, r22
    ddde:	20 0d       	add	r18, r0
    dde0:	31 1d       	adc	r19, r1
    dde2:	11 24       	eor	r1, r1
    dde4:	e1 2c       	mov	r14, r1
    dde6:	42 e0       	ldi	r20, 0x02	; 2
    dde8:	60 e0       	ldi	r22, 0x00	; 0
    ddea:	8c e0       	ldi	r24, 0x0C	; 12
    ddec:	92 e0       	ldi	r25, 0x02	; 2
    ddee:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN13Configuration14writeParameterEhhiib>
    ddf2:	f6 01       	movw	r30, r12
    ddf4:	79 e0       	ldi	r23, 0x09	; 9
    ddf6:	c7 0e       	add	r12, r23
    ddf8:	d1 1c       	adc	r13, r1
    ddfa:	f1 92       	st	Z+, r15
    ddfc:	ec 15       	cp	r30, r12
    ddfe:	fd 05       	cpc	r31, r13
    de00:	e1 f7       	brne	.-8      	; 0xddfa <_ZN4Pads8changeCCEb16coordinateType_ta+0x160>
    de02:	81 e0       	ldi	r24, 0x01	; 1
    de04:	0a c0       	rjmp	.+20     	; 0xde1a <_ZN4Pads8changeCCEb16coordinateType_ta+0x180>
    de06:	80 e0       	ldi	r24, 0x00	; 0
    de08:	08 c0       	rjmp	.+16     	; 0xde1a <_ZN4Pads8changeCCEb16coordinateType_ta+0x180>
    de0a:	fe 01       	movw	r30, r28
    de0c:	e7 56       	subi	r30, 0x67	; 103
    de0e:	fe 4f       	sbci	r31, 0xFE	; 254
    de10:	90 81       	ld	r25, Z
    de12:	91 30       	cpi	r25, 0x01	; 1
    de14:	09 f4       	brne	.+2      	; 0xde18 <_ZN4Pads8changeCCEb16coordinateType_ta+0x17e>
    de16:	bc cf       	rjmp	.-136    	; 0xdd90 <_ZN4Pads8changeCCEb16coordinateType_ta+0xf6>
    de18:	db cf       	rjmp	.-74     	; 0xddd0 <_ZN4Pads8changeCCEb16coordinateType_ta+0x136>
    de1a:	df 91       	pop	r29
    de1c:	cf 91       	pop	r28
    de1e:	1f 91       	pop	r17
    de20:	0f 91       	pop	r16
    de22:	ff 90       	pop	r15
    de24:	ef 90       	pop	r14
    de26:	df 90       	pop	r13
    de28:	cf 90       	pop	r12
    de2a:	bf 90       	pop	r11
    de2c:	af 90       	pop	r10
    de2e:	08 95       	ret

0000de30 <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta>:
    de30:	af 92       	push	r10
    de32:	bf 92       	push	r11
    de34:	cf 92       	push	r12
    de36:	df 92       	push	r13
    de38:	ef 92       	push	r14
    de3a:	ff 92       	push	r15
    de3c:	0f 93       	push	r16
    de3e:	1f 93       	push	r17
    de40:	cf 93       	push	r28
    de42:	df 93       	push	r29
    de44:	ec 01       	movw	r28, r24
    de46:	e6 2e       	mov	r14, r22
    de48:	14 2f       	mov	r17, r20
    de4a:	d2 2e       	mov	r13, r18
    de4c:	11 da       	rcall	.-3038   	; 0xd270 <_ZN4Pads17getLastTouchedPadEv>
    de4e:	fe 01       	movw	r30, r28
    de50:	e7 56       	subi	r30, 0x67	; 103
    de52:	fe 4f       	sbci	r31, 0xFE	; 254
    de54:	90 81       	ld	r25, Z
    de56:	99 23       	and	r25, r25
    de58:	11 f0       	breq	.+4      	; 0xde5e <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0x2e>
    de5a:	38 2f       	mov	r19, r24
    de5c:	01 c0       	rjmp	.+2      	; 0xde60 <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0x30>
    de5e:	30 e0       	ldi	r19, 0x00	; 0
    de60:	e1 10       	cpse	r14, r1
    de62:	03 c0       	rjmp	.+6      	; 0xde6a <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0x3a>
    de64:	01 95       	neg	r16
    de66:	f1 2c       	mov	r15, r1
    de68:	04 c0       	rjmp	.+8      	; 0xde72 <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0x42>
    de6a:	0f 2e       	mov	r0, r31
    de6c:	ff e7       	ldi	r31, 0x7F	; 127
    de6e:	ff 2e       	mov	r15, r31
    de70:	f0 2d       	mov	r31, r0
    de72:	11 23       	and	r17, r17
    de74:	19 f0       	breq	.+6      	; 0xde7c <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0x4c>
    de76:	11 30       	cpi	r17, 0x01	; 1
    de78:	c1 f0       	breq	.+48     	; 0xdeaa <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0x7a>
    de7a:	ab c0       	rjmp	.+342    	; 0xdfd2 <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0x1a2>
    de7c:	dd 20       	and	r13, r13
    de7e:	61 f0       	breq	.+24     	; 0xde98 <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0x68>
    de80:	21 e0       	ldi	r18, 0x01	; 1
    de82:	d2 12       	cpse	r13, r18
    de84:	a8 c0       	rjmp	.+336    	; 0xdfd6 <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0x1a6>
    de86:	6e 01       	movw	r12, r28
    de88:	4e e6       	ldi	r20, 0x6E	; 110
    de8a:	c4 0e       	add	r12, r20
    de8c:	d1 1c       	adc	r13, r1
    de8e:	99 23       	and	r25, r25
    de90:	19 f1       	breq	.+70     	; 0xded8 <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0xa8>
    de92:	68 e0       	ldi	r22, 0x08	; 8
    de94:	70 e0       	ldi	r23, 0x00	; 0
    de96:	2b c0       	rjmp	.+86     	; 0xdeee <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0xbe>
    de98:	6e 01       	movw	r12, r28
    de9a:	55 e6       	ldi	r21, 0x65	; 101
    de9c:	c5 0e       	add	r12, r21
    de9e:	d1 1c       	adc	r13, r1
    dea0:	99 23       	and	r25, r25
    dea2:	e9 f0       	breq	.+58     	; 0xdede <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0xae>
    dea4:	67 e0       	ldi	r22, 0x07	; 7
    dea6:	70 e0       	ldi	r23, 0x00	; 0
    dea8:	22 c0       	rjmp	.+68     	; 0xdeee <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0xbe>
    deaa:	dd 20       	and	r13, r13
    deac:	61 f0       	breq	.+24     	; 0xdec6 <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0x96>
    deae:	e1 e0       	ldi	r30, 0x01	; 1
    deb0:	de 12       	cpse	r13, r30
    deb2:	93 c0       	rjmp	.+294    	; 0xdfda <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0x1aa>
    deb4:	6e 01       	movw	r12, r28
    deb6:	20 e8       	ldi	r18, 0x80	; 128
    deb8:	c2 0e       	add	r12, r18
    deba:	d1 1c       	adc	r13, r1
    debc:	99 23       	and	r25, r25
    debe:	91 f0       	breq	.+36     	; 0xdee4 <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0xb4>
    dec0:	6a e0       	ldi	r22, 0x0A	; 10
    dec2:	70 e0       	ldi	r23, 0x00	; 0
    dec4:	14 c0       	rjmp	.+40     	; 0xdeee <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0xbe>
    dec6:	6e 01       	movw	r12, r28
    dec8:	47 e7       	ldi	r20, 0x77	; 119
    deca:	c4 0e       	add	r12, r20
    decc:	d1 1c       	adc	r13, r1
    dece:	99 23       	and	r25, r25
    ded0:	61 f0       	breq	.+24     	; 0xdeea <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0xba>
    ded2:	69 e0       	ldi	r22, 0x09	; 9
    ded4:	70 e0       	ldi	r23, 0x00	; 0
    ded6:	0b c0       	rjmp	.+22     	; 0xdeee <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0xbe>
    ded8:	6e e0       	ldi	r22, 0x0E	; 14
    deda:	70 e0       	ldi	r23, 0x00	; 0
    dedc:	08 c0       	rjmp	.+16     	; 0xdeee <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0xbe>
    dede:	6d e0       	ldi	r22, 0x0D	; 13
    dee0:	70 e0       	ldi	r23, 0x00	; 0
    dee2:	05 c0       	rjmp	.+10     	; 0xdeee <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0xbe>
    dee4:	60 e1       	ldi	r22, 0x10	; 16
    dee6:	70 e0       	ldi	r23, 0x00	; 0
    dee8:	02 c0       	rjmp	.+4      	; 0xdeee <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0xbe>
    deea:	6f e0       	ldi	r22, 0x0F	; 15
    deec:	70 e0       	ldi	r23, 0x00	; 0
    deee:	ee 20       	and	r14, r14
    def0:	91 f0       	breq	.+36     	; 0xdf16 <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0xe6>
    def2:	f6 01       	movw	r30, r12
    def4:	e8 0f       	add	r30, r24
    def6:	f1 1d       	adc	r31, r1
    def8:	20 81       	ld	r18, Z
    defa:	a0 2f       	mov	r26, r16
    defc:	00 2e       	mov	r0, r16
    defe:	00 0c       	add	r0, r0
    df00:	bb 0b       	sbc	r27, r27
    df02:	a2 0f       	add	r26, r18
    df04:	b1 1d       	adc	r27, r1
    df06:	ef 2d       	mov	r30, r15
    df08:	f0 e0       	ldi	r31, 0x00	; 0
    df0a:	41 e0       	ldi	r20, 0x01	; 1
    df0c:	ea 17       	cp	r30, r26
    df0e:	fb 07       	cpc	r31, r27
    df10:	9c f0       	brlt	.+38     	; 0xdf38 <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0x108>
    df12:	40 e0       	ldi	r20, 0x00	; 0
    df14:	11 c0       	rjmp	.+34     	; 0xdf38 <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0x108>
    df16:	f6 01       	movw	r30, r12
    df18:	e8 0f       	add	r30, r24
    df1a:	f1 1d       	adc	r31, r1
    df1c:	20 81       	ld	r18, Z
    df1e:	a0 2f       	mov	r26, r16
    df20:	00 2e       	mov	r0, r16
    df22:	00 0c       	add	r0, r0
    df24:	bb 0b       	sbc	r27, r27
    df26:	a2 0f       	add	r26, r18
    df28:	b1 1d       	adc	r27, r1
    df2a:	ef 2d       	mov	r30, r15
    df2c:	f0 e0       	ldi	r31, 0x00	; 0
    df2e:	41 e0       	ldi	r20, 0x01	; 1
    df30:	ae 17       	cp	r26, r30
    df32:	bf 07       	cpc	r27, r31
    df34:	0c f0       	brlt	.+2      	; 0xdf38 <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0x108>
    df36:	40 e0       	ldi	r20, 0x00	; 0
    df38:	41 11       	cpse	r20, r1
    df3a:	06 c0       	rjmp	.+12     	; 0xdf48 <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0x118>
    df3c:	f6 01       	movw	r30, r12
    df3e:	e8 0f       	add	r30, r24
    df40:	f1 1d       	adc	r31, r1
    df42:	f0 80       	ld	r15, Z
    df44:	f0 0e       	add	r15, r16
    df46:	4b c0       	rjmp	.+150    	; 0xdfde <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0x1ae>
    df48:	f6 01       	movw	r30, r12
    df4a:	e8 0f       	add	r30, r24
    df4c:	f1 1d       	adc	r31, r1
    df4e:	80 81       	ld	r24, Z
    df50:	8f 11       	cpse	r24, r15
    df52:	45 c0       	rjmp	.+138    	; 0xdfde <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0x1ae>
    df54:	80 e0       	ldi	r24, 0x00	; 0
    df56:	47 c0       	rjmp	.+142    	; 0xdfe6 <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0x1b6>
    df58:	0f 2d       	mov	r16, r15
    df5a:	10 e0       	ldi	r17, 0x00	; 0
    df5c:	a3 2e       	mov	r10, r19
    df5e:	b1 2c       	mov	r11, r1
    df60:	c3 56       	subi	r28, 0x63	; 99
    df62:	de 4f       	sbci	r29, 0xFE	; 254
    df64:	28 81       	ld	r18, Y
    df66:	55 e7       	ldi	r21, 0x75	; 117
    df68:	25 02       	muls	r18, r21
    df6a:	c0 01       	movw	r24, r0
    df6c:	11 24       	eor	r1, r1
    df6e:	ac 01       	movw	r20, r24
    df70:	ed e0       	ldi	r30, 0x0D	; 13
    df72:	3e 9f       	mul	r19, r30
    df74:	40 0d       	add	r20, r0
    df76:	51 1d       	adc	r21, r1
    df78:	11 24       	eor	r1, r1
    df7a:	9a 01       	movw	r18, r20
    df7c:	26 0f       	add	r18, r22
    df7e:	37 1f       	adc	r19, r23
    df80:	e1 2c       	mov	r14, r1
    df82:	43 e0       	ldi	r20, 0x03	; 3
    df84:	60 e0       	ldi	r22, 0x00	; 0
    df86:	8c e0       	ldi	r24, 0x0C	; 12
    df88:	92 e0       	ldi	r25, 0x02	; 2
    df8a:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN13Configuration14writeParameterEhhiib>
    df8e:	f6 01       	movw	r30, r12
    df90:	ea 0d       	add	r30, r10
    df92:	fb 1d       	adc	r31, r11
    df94:	f0 82       	st	Z, r15
    df96:	81 e0       	ldi	r24, 0x01	; 1
    df98:	26 c0       	rjmp	.+76     	; 0xdfe6 <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0x1b6>
    df9a:	0f 2d       	mov	r16, r15
    df9c:	10 e0       	ldi	r17, 0x00	; 0
    df9e:	c3 56       	subi	r28, 0x63	; 99
    dfa0:	de 4f       	sbci	r29, 0xFE	; 254
    dfa2:	88 81       	ld	r24, Y
    dfa4:	9b 01       	movw	r18, r22
    dfa6:	43 e1       	ldi	r20, 0x13	; 19
    dfa8:	84 02       	muls	r24, r20
    dfaa:	20 0d       	add	r18, r0
    dfac:	31 1d       	adc	r19, r1
    dfae:	11 24       	eor	r1, r1
    dfb0:	e1 2c       	mov	r14, r1
    dfb2:	42 e0       	ldi	r20, 0x02	; 2
    dfb4:	60 e0       	ldi	r22, 0x00	; 0
    dfb6:	8c e0       	ldi	r24, 0x0C	; 12
    dfb8:	92 e0       	ldi	r25, 0x02	; 2
    dfba:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN13Configuration14writeParameterEhhiib>
    dfbe:	f6 01       	movw	r30, r12
    dfc0:	59 e0       	ldi	r21, 0x09	; 9
    dfc2:	c5 0e       	add	r12, r21
    dfc4:	d1 1c       	adc	r13, r1
    dfc6:	f1 92       	st	Z+, r15
    dfc8:	ec 15       	cp	r30, r12
    dfca:	fd 05       	cpc	r31, r13
    dfcc:	e1 f7       	brne	.-8      	; 0xdfc6 <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0x196>
    dfce:	81 e0       	ldi	r24, 0x01	; 1
    dfd0:	0a c0       	rjmp	.+20     	; 0xdfe6 <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0x1b6>
    dfd2:	80 e0       	ldi	r24, 0x00	; 0
    dfd4:	08 c0       	rjmp	.+16     	; 0xdfe6 <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0x1b6>
    dfd6:	80 e0       	ldi	r24, 0x00	; 0
    dfd8:	06 c0       	rjmp	.+12     	; 0xdfe6 <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0x1b6>
    dfda:	80 e0       	ldi	r24, 0x00	; 0
    dfdc:	04 c0       	rjmp	.+8      	; 0xdfe6 <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0x1b6>
    dfde:	91 30       	cpi	r25, 0x01	; 1
    dfe0:	09 f4       	brne	.+2      	; 0xdfe4 <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0x1b4>
    dfe2:	ba cf       	rjmp	.-140    	; 0xdf58 <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0x128>
    dfe4:	da cf       	rjmp	.-76     	; 0xdf9a <_ZN4Pads14changeCClimitsEb16coordinateType_t13ccLimitType_ta+0x16a>
    dfe6:	df 91       	pop	r29
    dfe8:	cf 91       	pop	r28
    dfea:	1f 91       	pop	r17
    dfec:	0f 91       	pop	r16
    dfee:	ff 90       	pop	r15
    dff0:	ef 90       	pop	r14
    dff2:	df 90       	pop	r13
    dff4:	cf 90       	pop	r12
    dff6:	bf 90       	pop	r11
    dff8:	af 90       	pop	r10
    dffa:	08 95       	ret

0000dffc <_ZN4Pads10setCCcurveEb16coordinateType_ta>:
    dffc:	af 92       	push	r10
    dffe:	bf 92       	push	r11
    e000:	cf 92       	push	r12
    e002:	df 92       	push	r13
    e004:	ef 92       	push	r14
    e006:	ff 92       	push	r15
    e008:	0f 93       	push	r16
    e00a:	1f 93       	push	r17
    e00c:	cf 93       	push	r28
    e00e:	df 93       	push	r29
    e010:	7c 01       	movw	r14, r24
    e012:	16 2f       	mov	r17, r22
    e014:	04 2f       	mov	r16, r20
    e016:	d2 2f       	mov	r29, r18
    e018:	2b d9       	rcall	.-3498   	; 0xd270 <_ZN4Pads17getLastTouchedPadEv>
    e01a:	f7 01       	movw	r30, r14
    e01c:	e7 56       	subi	r30, 0x67	; 103
    e01e:	fe 4f       	sbci	r31, 0xFE	; 254
    e020:	90 81       	ld	r25, Z
    e022:	91 11       	cpse	r25, r1
    e024:	01 c0       	rjmp	.+2      	; 0xe028 <_ZN4Pads10setCCcurveEb16coordinateType_ta+0x2c>
    e026:	80 e0       	ldi	r24, 0x00	; 0
    e028:	11 11       	cpse	r17, r1
    e02a:	03 c0       	rjmp	.+6      	; 0xe032 <_ZN4Pads10setCCcurveEb16coordinateType_ta+0x36>
    e02c:	d1 95       	neg	r29
    e02e:	c1 e0       	ldi	r28, 0x01	; 1
    e030:	01 c0       	rjmp	.+2      	; 0xe034 <_ZN4Pads10setCCcurveEb16coordinateType_ta+0x38>
    e032:	c9 e0       	ldi	r28, 0x09	; 9
    e034:	00 23       	and	r16, r16
    e036:	19 f0       	breq	.+6      	; 0xe03e <_ZN4Pads10setCCcurveEb16coordinateType_ta+0x42>
    e038:	01 30       	cpi	r16, 0x01	; 1
    e03a:	51 f0       	breq	.+20     	; 0xe050 <_ZN4Pads10setCCcurveEb16coordinateType_ta+0x54>
    e03c:	94 c0       	rjmp	.+296    	; 0xe166 <_ZN4Pads10setCCcurveEb16coordinateType_ta+0x16a>
    e03e:	67 01       	movw	r12, r14
    e040:	2d ea       	ldi	r18, 0xAD	; 173
    e042:	c2 0e       	add	r12, r18
    e044:	d1 1c       	adc	r13, r1
    e046:	99 23       	and	r25, r25
    e048:	61 f0       	breq	.+24     	; 0xe062 <_ZN4Pads10setCCcurveEb16coordinateType_ta+0x66>
    e04a:	4b e0       	ldi	r20, 0x0B	; 11
    e04c:	50 e0       	ldi	r21, 0x00	; 0
    e04e:	0e c0       	rjmp	.+28     	; 0xe06c <_ZN4Pads10setCCcurveEb16coordinateType_ta+0x70>
    e050:	67 01       	movw	r12, r14
    e052:	26 eb       	ldi	r18, 0xB6	; 182
    e054:	c2 0e       	add	r12, r18
    e056:	d1 1c       	adc	r13, r1
    e058:	99 23       	and	r25, r25
    e05a:	31 f0       	breq	.+12     	; 0xe068 <_ZN4Pads10setCCcurveEb16coordinateType_ta+0x6c>
    e05c:	4c e0       	ldi	r20, 0x0C	; 12
    e05e:	50 e0       	ldi	r21, 0x00	; 0
    e060:	05 c0       	rjmp	.+10     	; 0xe06c <_ZN4Pads10setCCcurveEb16coordinateType_ta+0x70>
    e062:	41 e1       	ldi	r20, 0x11	; 17
    e064:	50 e0       	ldi	r21, 0x00	; 0
    e066:	02 c0       	rjmp	.+4      	; 0xe06c <_ZN4Pads10setCCcurveEb16coordinateType_ta+0x70>
    e068:	42 e1       	ldi	r20, 0x12	; 18
    e06a:	50 e0       	ldi	r21, 0x00	; 0
    e06c:	11 23       	and	r17, r17
    e06e:	a1 f0       	breq	.+40     	; 0xe098 <_ZN4Pads10setCCcurveEb16coordinateType_ta+0x9c>
    e070:	f6 01       	movw	r30, r12
    e072:	e8 0f       	add	r30, r24
    e074:	f1 1d       	adc	r31, r1
    e076:	20 81       	ld	r18, Z
    e078:	ed 2f       	mov	r30, r29
    e07a:	0d 2e       	mov	r0, r29
    e07c:	00 0c       	add	r0, r0
    e07e:	ff 0b       	sbc	r31, r31
    e080:	e2 0f       	add	r30, r18
    e082:	f1 1d       	adc	r31, r1
    e084:	27 fd       	sbrc	r18, 7
    e086:	fa 95       	dec	r31
    e088:	6c 2f       	mov	r22, r28
    e08a:	70 e0       	ldi	r23, 0x00	; 0
    e08c:	31 e0       	ldi	r19, 0x01	; 1
    e08e:	6e 17       	cp	r22, r30
    e090:	7f 07       	cpc	r23, r31
    e092:	ac f0       	brlt	.+42     	; 0xe0be <_ZN4Pads10setCCcurveEb16coordinateType_ta+0xc2>
    e094:	30 e0       	ldi	r19, 0x00	; 0
    e096:	13 c0       	rjmp	.+38     	; 0xe0be <_ZN4Pads10setCCcurveEb16coordinateType_ta+0xc2>
    e098:	f6 01       	movw	r30, r12
    e09a:	e8 0f       	add	r30, r24
    e09c:	f1 1d       	adc	r31, r1
    e09e:	20 81       	ld	r18, Z
    e0a0:	ed 2f       	mov	r30, r29
    e0a2:	0d 2e       	mov	r0, r29
    e0a4:	00 0c       	add	r0, r0
    e0a6:	ff 0b       	sbc	r31, r31
    e0a8:	e2 0f       	add	r30, r18
    e0aa:	f1 1d       	adc	r31, r1
    e0ac:	27 fd       	sbrc	r18, 7
    e0ae:	fa 95       	dec	r31
    e0b0:	6c 2f       	mov	r22, r28
    e0b2:	70 e0       	ldi	r23, 0x00	; 0
    e0b4:	31 e0       	ldi	r19, 0x01	; 1
    e0b6:	e6 17       	cp	r30, r22
    e0b8:	f7 07       	cpc	r31, r23
    e0ba:	0c f0       	brlt	.+2      	; 0xe0be <_ZN4Pads10setCCcurveEb16coordinateType_ta+0xc2>
    e0bc:	30 e0       	ldi	r19, 0x00	; 0
    e0be:	31 11       	cpse	r19, r1
    e0c0:	06 c0       	rjmp	.+12     	; 0xe0ce <_ZN4Pads10setCCcurveEb16coordinateType_ta+0xd2>
    e0c2:	f6 01       	movw	r30, r12
    e0c4:	e8 0f       	add	r30, r24
    e0c6:	f1 1d       	adc	r31, r1
    e0c8:	c0 81       	ld	r28, Z
    e0ca:	cd 0f       	add	r28, r29
    e0cc:	4e c0       	rjmp	.+156    	; 0xe16a <_ZN4Pads10setCCcurveEb16coordinateType_ta+0x16e>
    e0ce:	f6 01       	movw	r30, r12
    e0d0:	e8 0f       	add	r30, r24
    e0d2:	f1 1d       	adc	r31, r1
    e0d4:	20 81       	ld	r18, Z
    e0d6:	02 2e       	mov	r0, r18
    e0d8:	00 0c       	add	r0, r0
    e0da:	33 0b       	sbc	r19, r19
    e0dc:	6c 2f       	mov	r22, r28
    e0de:	70 e0       	ldi	r23, 0x00	; 0
    e0e0:	26 17       	cp	r18, r22
    e0e2:	37 07       	cpc	r19, r23
    e0e4:	09 f0       	breq	.+2      	; 0xe0e8 <_ZN4Pads10setCCcurveEb16coordinateType_ta+0xec>
    e0e6:	41 c0       	rjmp	.+130    	; 0xe16a <_ZN4Pads10setCCcurveEb16coordinateType_ta+0x16e>
    e0e8:	80 e0       	ldi	r24, 0x00	; 0
    e0ea:	43 c0       	rjmp	.+134    	; 0xe172 <_ZN4Pads10setCCcurveEb16coordinateType_ta+0x176>
    e0ec:	0c 2f       	mov	r16, r28
    e0ee:	10 e0       	ldi	r17, 0x00	; 0
    e0f0:	a8 2e       	mov	r10, r24
    e0f2:	b1 2c       	mov	r11, r1
    e0f4:	f7 01       	movw	r30, r14
    e0f6:	e3 56       	subi	r30, 0x63	; 99
    e0f8:	fe 4f       	sbci	r31, 0xFE	; 254
    e0fa:	20 81       	ld	r18, Z
    e0fc:	95 e7       	ldi	r25, 0x75	; 117
    e0fe:	29 02       	muls	r18, r25
    e100:	90 01       	movw	r18, r0
    e102:	11 24       	eor	r1, r1
    e104:	9d e0       	ldi	r25, 0x0D	; 13
    e106:	89 9f       	mul	r24, r25
    e108:	20 0d       	add	r18, r0
    e10a:	31 1d       	adc	r19, r1
    e10c:	11 24       	eor	r1, r1
    e10e:	24 0f       	add	r18, r20
    e110:	35 1f       	adc	r19, r21
    e112:	e1 2c       	mov	r14, r1
    e114:	43 e0       	ldi	r20, 0x03	; 3
    e116:	60 e0       	ldi	r22, 0x00	; 0
    e118:	8c e0       	ldi	r24, 0x0C	; 12
    e11a:	92 e0       	ldi	r25, 0x02	; 2
    e11c:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN13Configuration14writeParameterEhhiib>
    e120:	f6 01       	movw	r30, r12
    e122:	ea 0d       	add	r30, r10
    e124:	fb 1d       	adc	r31, r11
    e126:	c0 83       	st	Z, r28
    e128:	81 e0       	ldi	r24, 0x01	; 1
    e12a:	23 c0       	rjmp	.+70     	; 0xe172 <_ZN4Pads10setCCcurveEb16coordinateType_ta+0x176>
    e12c:	0c 2f       	mov	r16, r28
    e12e:	10 e0       	ldi	r17, 0x00	; 0
    e130:	f7 01       	movw	r30, r14
    e132:	e3 56       	subi	r30, 0x63	; 99
    e134:	fe 4f       	sbci	r31, 0xFE	; 254
    e136:	80 81       	ld	r24, Z
    e138:	9a 01       	movw	r18, r20
    e13a:	93 e1       	ldi	r25, 0x13	; 19
    e13c:	89 02       	muls	r24, r25
    e13e:	20 0d       	add	r18, r0
    e140:	31 1d       	adc	r19, r1
    e142:	11 24       	eor	r1, r1
    e144:	e1 2c       	mov	r14, r1
    e146:	42 e0       	ldi	r20, 0x02	; 2
    e148:	60 e0       	ldi	r22, 0x00	; 0
    e14a:	8c e0       	ldi	r24, 0x0C	; 12
    e14c:	92 e0       	ldi	r25, 0x02	; 2
    e14e:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN13Configuration14writeParameterEhhiib>
    e152:	f6 01       	movw	r30, r12
    e154:	29 e0       	ldi	r18, 0x09	; 9
    e156:	c2 0e       	add	r12, r18
    e158:	d1 1c       	adc	r13, r1
    e15a:	c1 93       	st	Z+, r28
    e15c:	ec 15       	cp	r30, r12
    e15e:	fd 05       	cpc	r31, r13
    e160:	e1 f7       	brne	.-8      	; 0xe15a <_ZN4Pads10setCCcurveEb16coordinateType_ta+0x15e>
    e162:	81 e0       	ldi	r24, 0x01	; 1
    e164:	06 c0       	rjmp	.+12     	; 0xe172 <_ZN4Pads10setCCcurveEb16coordinateType_ta+0x176>
    e166:	84 e0       	ldi	r24, 0x04	; 4
    e168:	04 c0       	rjmp	.+8      	; 0xe172 <_ZN4Pads10setCCcurveEb16coordinateType_ta+0x176>
    e16a:	91 30       	cpi	r25, 0x01	; 1
    e16c:	09 f4       	brne	.+2      	; 0xe170 <_ZN4Pads10setCCcurveEb16coordinateType_ta+0x174>
    e16e:	be cf       	rjmp	.-132    	; 0xe0ec <_ZN4Pads10setCCcurveEb16coordinateType_ta+0xf0>
    e170:	dd cf       	rjmp	.-70     	; 0xe12c <_ZN4Pads10setCCcurveEb16coordinateType_ta+0x130>
    e172:	df 91       	pop	r29
    e174:	cf 91       	pop	r28
    e176:	1f 91       	pop	r17
    e178:	0f 91       	pop	r16
    e17a:	ff 90       	pop	r15
    e17c:	ef 90       	pop	r14
    e17e:	df 90       	pop	r13
    e180:	cf 90       	pop	r12
    e182:	bf 90       	pop	r11
    e184:	af 90       	pop	r10
    e186:	08 95       	ret

0000e188 <_ZN4Pads14setMIDIchannelEhh>:
    e188:	ef 92       	push	r14
    e18a:	0f 93       	push	r16
    e18c:	1f 93       	push	r17
    e18e:	cf 93       	push	r28
    e190:	70 e0       	ldi	r23, 0x00	; 0
    e192:	fc 01       	movw	r30, r24
    e194:	e6 0f       	add	r30, r22
    e196:	f7 1f       	adc	r31, r23
    e198:	e2 57       	subi	r30, 0x72	; 114
    e19a:	fe 4f       	sbci	r31, 0xFE	; 254
    e19c:	20 81       	ld	r18, Z
    e19e:	24 17       	cp	r18, r20
    e1a0:	09 f4       	brne	.+2      	; 0xe1a4 <_ZN4Pads14setMIDIchannelEhh+0x1c>
    e1a2:	44 c0       	rjmp	.+136    	; 0xe22c <_ZN4Pads14setMIDIchannelEhh+0xa4>
    e1a4:	9c 01       	movw	r18, r24
    e1a6:	fc 01       	movw	r30, r24
    e1a8:	e7 56       	subi	r30, 0x67	; 103
    e1aa:	fe 4f       	sbci	r31, 0xFE	; 254
    e1ac:	c0 81       	ld	r28, Z
    e1ae:	c1 11       	cpse	r28, r1
    e1b0:	1c c0       	rjmp	.+56     	; 0xe1ea <_ZN4Pads14setMIDIchannelEhh+0x62>
    e1b2:	3b 97       	sbiw	r30, 0x0b	; 11
    e1b4:	89 56       	subi	r24, 0x69	; 105
    e1b6:	9e 4f       	sbci	r25, 0xFE	; 254
    e1b8:	41 93       	st	Z+, r20
    e1ba:	e8 17       	cp	r30, r24
    e1bc:	f9 07       	cpc	r31, r25
    e1be:	e1 f7       	brne	.-8      	; 0xe1b8 <_ZN4Pads14setMIDIchannelEhh+0x30>
    e1c0:	04 2f       	mov	r16, r20
    e1c2:	10 e0       	ldi	r17, 0x00	; 0
    e1c4:	f9 01       	movw	r30, r18
    e1c6:	e3 56       	subi	r30, 0x63	; 99
    e1c8:	fe 4f       	sbci	r31, 0xFE	; 254
    e1ca:	20 81       	ld	r18, Z
    e1cc:	83 e1       	ldi	r24, 0x13	; 19
    e1ce:	28 02       	muls	r18, r24
    e1d0:	90 01       	movw	r18, r0
    e1d2:	11 24       	eor	r1, r1
    e1d4:	26 5f       	subi	r18, 0xF6	; 246
    e1d6:	3f 4f       	sbci	r19, 0xFF	; 255
    e1d8:	e1 2c       	mov	r14, r1
    e1da:	42 e0       	ldi	r20, 0x02	; 2
    e1dc:	60 e0       	ldi	r22, 0x00	; 0
    e1de:	8c e0       	ldi	r24, 0x0C	; 12
    e1e0:	92 e0       	ldi	r25, 0x02	; 2
    e1e2:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN13Configuration14writeParameterEhhiib>
    e1e6:	c1 e0       	ldi	r28, 0x01	; 1
    e1e8:	22 c0       	rjmp	.+68     	; 0xe22e <_ZN4Pads14setMIDIchannelEhh+0xa6>
    e1ea:	fc 01       	movw	r30, r24
    e1ec:	e6 0f       	add	r30, r22
    e1ee:	f7 1f       	adc	r31, r23
    e1f0:	e2 57       	subi	r30, 0x72	; 114
    e1f2:	fe 4f       	sbci	r31, 0xFE	; 254
    e1f4:	40 83       	st	Z, r20
    e1f6:	04 2f       	mov	r16, r20
    e1f8:	10 e0       	ldi	r17, 0x00	; 0
    e1fa:	fc 01       	movw	r30, r24
    e1fc:	e3 56       	subi	r30, 0x63	; 99
    e1fe:	fe 4f       	sbci	r31, 0xFE	; 254
    e200:	80 81       	ld	r24, Z
    e202:	25 e7       	ldi	r18, 0x75	; 117
    e204:	82 02       	muls	r24, r18
    e206:	c0 01       	movw	r24, r0
    e208:	11 24       	eor	r1, r1
    e20a:	04 96       	adiw	r24, 0x04	; 4
    e20c:	4d e0       	ldi	r20, 0x0D	; 13
    e20e:	46 9f       	mul	r20, r22
    e210:	90 01       	movw	r18, r0
    e212:	47 9f       	mul	r20, r23
    e214:	30 0d       	add	r19, r0
    e216:	11 24       	eor	r1, r1
    e218:	28 0f       	add	r18, r24
    e21a:	39 1f       	adc	r19, r25
    e21c:	e1 2c       	mov	r14, r1
    e21e:	43 e0       	ldi	r20, 0x03	; 3
    e220:	60 e0       	ldi	r22, 0x00	; 0
    e222:	8c e0       	ldi	r24, 0x0C	; 12
    e224:	92 e0       	ldi	r25, 0x02	; 2
    e226:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN13Configuration14writeParameterEhhiib>
    e22a:	01 c0       	rjmp	.+2      	; 0xe22e <_ZN4Pads14setMIDIchannelEhh+0xa6>
    e22c:	c0 e0       	ldi	r28, 0x00	; 0
    e22e:	8c 2f       	mov	r24, r28
    e230:	cf 91       	pop	r28
    e232:	1f 91       	pop	r17
    e234:	0f 91       	pop	r16
    e236:	ef 90       	pop	r14
    e238:	08 95       	ret

0000e23a <_ZN4Pads13assignPadNoteEh6note_t>:
    e23a:	6f 92       	push	r6
    e23c:	7f 92       	push	r7
    e23e:	8f 92       	push	r8
    e240:	9f 92       	push	r9
    e242:	af 92       	push	r10
    e244:	bf 92       	push	r11
    e246:	cf 92       	push	r12
    e248:	df 92       	push	r13
    e24a:	ef 92       	push	r14
    e24c:	ff 92       	push	r15
    e24e:	0f 93       	push	r16
    e250:	1f 93       	push	r17
    e252:	cf 93       	push	r28
    e254:	df 93       	push	r29
    e256:	cd b7       	in	r28, 0x3d	; 61
    e258:	de b7       	in	r29, 0x3e	; 62
    e25a:	27 97       	sbiw	r28, 0x07	; 7
    e25c:	0f b6       	in	r0, 0x3f	; 63
    e25e:	f8 94       	cli
    e260:	de bf       	out	0x3e, r29	; 62
    e262:	0f be       	out	0x3f, r0	; 63
    e264:	cd bf       	out	0x3d, r28	; 61
    e266:	7c 01       	movw	r14, r24
    e268:	16 2f       	mov	r17, r22
    e26a:	04 2f       	mov	r16, r20
    e26c:	0e 94 4e 68 	call	0xd09c	; 0xd09c <_ZN4Pads15getActiveOctaveEv>
    e270:	48 2f       	mov	r20, r24
    e272:	44 0f       	add	r20, r20
    e274:	84 0f       	add	r24, r20
    e276:	88 0f       	add	r24, r24
    e278:	88 0f       	add	r24, r24
    e27a:	48 2f       	mov	r20, r24
    e27c:	40 0f       	add	r20, r16
    e27e:	72 f0       	brmi	.+28     	; 0xe29c <_ZN4Pads13assignPadNoteEh6note_t+0x62>
    e280:	61 2f       	mov	r22, r17
    e282:	70 e0       	ldi	r23, 0x00	; 0
    e284:	f7 01       	movw	r30, r14
    e286:	87 e0       	ldi	r24, 0x07	; 7
    e288:	18 9f       	mul	r17, r24
    e28a:	e0 0d       	add	r30, r0
    e28c:	f1 1d       	adc	r31, r1
    e28e:	11 24       	eor	r1, r1
    e290:	e1 5b       	subi	r30, 0xB1	; 177
    e292:	fe 4f       	sbci	r31, 0xFE	; 254
    e294:	80 81       	ld	r24, Z
    e296:	84 13       	cpse	r24, r20
    e298:	07 c0       	rjmp	.+14     	; 0xe2a8 <_ZN4Pads13assignPadNoteEh6note_t+0x6e>
    e29a:	14 c0       	rjmp	.+40     	; 0xe2c4 <_ZN4Pads13assignPadNoteEh6note_t+0x8a>
    e29c:	82 e6       	ldi	r24, 0x62	; 98
    e29e:	9c e0       	ldi	r25, 0x0C	; 12
    e2a0:	0e 94 69 32 	call	0x64d2	; 0x64d2 <_ZN3LCD17displayOutOfRangeEv>
    e2a4:	82 e0       	ldi	r24, 0x02	; 2
    e2a6:	da c0       	rjmp	.+436    	; 0xe45c <_ZN4Pads13assignPadNoteEh6note_t+0x222>
    e2a8:	f7 01       	movw	r30, r14
    e2aa:	97 e0       	ldi	r25, 0x07	; 7
    e2ac:	19 9f       	mul	r17, r25
    e2ae:	e0 0d       	add	r30, r0
    e2b0:	f1 1d       	adc	r31, r1
    e2b2:	11 24       	eor	r1, r1
    e2b4:	e0 5b       	subi	r30, 0xB0	; 176
    e2b6:	fe 4f       	sbci	r31, 0xFE	; 254
    e2b8:	21 e0       	ldi	r18, 0x01	; 1
    e2ba:	30 e0       	ldi	r19, 0x00	; 0
    e2bc:	81 91       	ld	r24, Z+
    e2be:	84 13       	cpse	r24, r20
    e2c0:	38 c0       	rjmp	.+112    	; 0xe332 <_ZN4Pads13assignPadNoteEh6note_t+0xf8>
    e2c2:	02 c0       	rjmp	.+4      	; 0xe2c8 <_ZN4Pads13assignPadNoteEh6note_t+0x8e>
    e2c4:	20 e0       	ldi	r18, 0x00	; 0
    e2c6:	30 e0       	ldi	r19, 0x00	; 0
    e2c8:	a9 01       	movw	r20, r18
    e2ca:	f7 01       	movw	r30, r14
    e2cc:	e4 56       	subi	r30, 0x64	; 100
    e2ce:	fe 4f       	sbci	r31, 0xFE	; 254
    e2d0:	80 81       	ld	r24, Z
    e2d2:	ef e3       	ldi	r30, 0x3F	; 63
    e2d4:	8e 02       	muls	r24, r30
    e2d6:	30 01       	movw	r6, r0
    e2d8:	11 24       	eor	r1, r1
    e2da:	f9 eb       	ldi	r31, 0xB9	; 185
    e2dc:	6f 1a       	sub	r6, r31
    e2de:	f1 e0       	ldi	r31, 0x01	; 1
    e2e0:	7f 0a       	sbc	r7, r31
    e2e2:	fb 01       	movw	r30, r22
    e2e4:	ee 0f       	add	r30, r30
    e2e6:	ff 1f       	adc	r31, r31
    e2e8:	ee 0f       	add	r30, r30
    e2ea:	ff 1f       	adc	r31, r31
    e2ec:	ee 0f       	add	r30, r30
    e2ee:	ff 1f       	adc	r31, r31
    e2f0:	e6 1b       	sub	r30, r22
    e2f2:	f7 0b       	sbc	r31, r23
    e2f4:	ee 0d       	add	r30, r14
    e2f6:	ff 1d       	adc	r31, r15
    e2f8:	e2 0f       	add	r30, r18
    e2fa:	f3 1f       	adc	r31, r19
    e2fc:	e1 5b       	subi	r30, 0xB1	; 177
    e2fe:	fe 4f       	sbci	r31, 0xFE	; 254
    e300:	80 e8       	ldi	r24, 0x80	; 128
    e302:	80 83       	st	Z, r24
    e304:	e7 e0       	ldi	r30, 0x07	; 7
    e306:	1e 9f       	mul	r17, r30
    e308:	c0 01       	movw	r24, r0
    e30a:	11 24       	eor	r1, r1
    e30c:	4c 01       	movw	r8, r24
    e30e:	f1 eb       	ldi	r31, 0xB1	; 177
    e310:	8f 1a       	sub	r8, r31
    e312:	fe ef       	ldi	r31, 0xFE	; 254
    e314:	9f 0a       	sbc	r9, r31
    e316:	67 01       	movw	r12, r14
    e318:	c8 0c       	add	r12, r8
    e31a:	d9 1c       	adc	r13, r9
    e31c:	de 01       	movw	r26, r28
    e31e:	11 96       	adiw	r26, 0x01	; 1
    e320:	5c 01       	movw	r10, r24
    e322:	ea ea       	ldi	r30, 0xAA	; 170
    e324:	ae 1a       	sub	r10, r30
    e326:	ee ef       	ldi	r30, 0xFE	; 254
    e328:	be 0a       	sbc	r11, r30
    e32a:	ae 0c       	add	r10, r14
    e32c:	bf 1c       	adc	r11, r15
    e32e:	f6 01       	movw	r30, r12
    e330:	3c c0       	rjmp	.+120    	; 0xe3aa <_ZN4Pads13assignPadNoteEh6note_t+0x170>
    e332:	2f 5f       	subi	r18, 0xFF	; 255
    e334:	3f 4f       	sbci	r19, 0xFF	; 255
    e336:	27 30       	cpi	r18, 0x07	; 7
    e338:	31 05       	cpc	r19, r1
    e33a:	09 f0       	breq	.+2      	; 0xe33e <_ZN4Pads13assignPadNoteEh6note_t+0x104>
    e33c:	bf cf       	rjmp	.-130    	; 0xe2bc <_ZN4Pads13assignPadNoteEh6note_t+0x82>
    e33e:	79 c0       	rjmp	.+242    	; 0xe432 <_ZN4Pads13assignPadNoteEh6note_t+0x1f8>
    e340:	81 91       	ld	r24, Z+
    e342:	80 38       	cpi	r24, 0x80	; 128
    e344:	09 f0       	breq	.+2      	; 0xe348 <_ZN4Pads13assignPadNoteEh6note_t+0x10e>
    e346:	11 96       	adiw	r26, 0x01	; 1
    e348:	e0 17       	cp	r30, r16
    e34a:	f1 07       	cpc	r31, r17
    e34c:	c9 f7       	brne	.-14     	; 0xe340 <_ZN4Pads13assignPadNoteEh6note_t+0x106>
    e34e:	a7 30       	cpi	r26, 0x07	; 7
    e350:	b1 05       	cpc	r27, r1
    e352:	31 f4       	brne	.+12     	; 0xe360 <_ZN4Pads13assignPadNoteEh6note_t+0x126>
    e354:	82 e6       	ldi	r24, 0x62	; 98
    e356:	9c e0       	ldi	r25, 0x0C	; 12
    e358:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <_ZN3LCD18displayMaxNotesSetEv>
    e35c:	83 e0       	ldi	r24, 0x03	; 3
    e35e:	7e c0       	rjmp	.+252    	; 0xe45c <_ZN4Pads13assignPadNoteEh6note_t+0x222>
    e360:	fb 01       	movw	r30, r22
    e362:	ee 0f       	add	r30, r30
    e364:	ff 1f       	adc	r31, r31
    e366:	ee 0f       	add	r30, r30
    e368:	ff 1f       	adc	r31, r31
    e36a:	ee 0f       	add	r30, r30
    e36c:	ff 1f       	adc	r31, r31
    e36e:	e6 1b       	sub	r30, r22
    e370:	f7 0b       	sbc	r31, r23
    e372:	ee 0e       	add	r14, r30
    e374:	ff 1e       	adc	r15, r31
    e376:	ea 0e       	add	r14, r26
    e378:	fb 1e       	adc	r15, r27
    e37a:	f7 01       	movw	r30, r14
    e37c:	e1 5b       	subi	r30, 0xB1	; 177
    e37e:	fe 4f       	sbci	r31, 0xFE	; 254
    e380:	40 83       	st	Z, r20
    e382:	04 2f       	mov	r16, r20
    e384:	10 e0       	ldi	r17, 0x00	; 0
    e386:	ff e3       	ldi	r31, 0x3F	; 63
    e388:	9f 02       	muls	r25, r31
    e38a:	20 0d       	add	r18, r0
    e38c:	31 1d       	adc	r19, r1
    e38e:	11 24       	eor	r1, r1
    e390:	29 5b       	subi	r18, 0xB9	; 185
    e392:	31 40       	sbci	r19, 0x01	; 1
    e394:	2a 0f       	add	r18, r26
    e396:	3b 1f       	adc	r19, r27
    e398:	e1 2c       	mov	r14, r1
    e39a:	40 e0       	ldi	r20, 0x00	; 0
    e39c:	61 e0       	ldi	r22, 0x01	; 1
    e39e:	8c e0       	ldi	r24, 0x0C	; 12
    e3a0:	92 e0       	ldi	r25, 0x02	; 2
    e3a2:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN13Configuration14writeParameterEhhiib>
    e3a6:	81 e0       	ldi	r24, 0x01	; 1
    e3a8:	59 c0       	rjmp	.+178    	; 0xe45c <_ZN4Pads13assignPadNoteEh6note_t+0x222>
    e3aa:	01 91       	ld	r16, Z+
    e3ac:	0d 93       	st	X+, r16
    e3ae:	ea 15       	cp	r30, r10
    e3b0:	fb 05       	cpc	r31, r11
    e3b2:	d9 f7       	brne	.-10     	; 0xe3aa <_ZN4Pads13assignPadNoteEh6note_t+0x170>
    e3b4:	26 30       	cpi	r18, 0x06	; 6
    e3b6:	31 05       	cpc	r19, r1
    e3b8:	9c f4       	brge	.+38     	; 0xe3e0 <_ZN4Pads13assignPadNoteEh6note_t+0x1a6>
    e3ba:	fe 01       	movw	r30, r28
    e3bc:	e4 0f       	add	r30, r20
    e3be:	f5 1f       	adc	r31, r21
    e3c0:	32 96       	adiw	r30, 0x02	; 2
    e3c2:	48 0d       	add	r20, r8
    e3c4:	59 1d       	adc	r21, r9
    e3c6:	d7 01       	movw	r26, r14
    e3c8:	a4 0f       	add	r26, r20
    e3ca:	b5 1f       	adc	r27, r21
    e3cc:	9c 01       	movw	r18, r24
    e3ce:	2b 5a       	subi	r18, 0xAB	; 171
    e3d0:	3e 4f       	sbci	r19, 0xFE	; 254
    e3d2:	2e 0d       	add	r18, r14
    e3d4:	3f 1d       	adc	r19, r15
    e3d6:	91 91       	ld	r25, Z+
    e3d8:	9d 93       	st	X+, r25
    e3da:	a2 17       	cp	r26, r18
    e3dc:	b3 07       	cpc	r27, r19
    e3de:	d9 f7       	brne	.-10     	; 0xe3d6 <_ZN4Pads13assignPadNoteEh6note_t+0x19c>
    e3e0:	fb 01       	movw	r30, r22
    e3e2:	ee 0f       	add	r30, r30
    e3e4:	ff 1f       	adc	r31, r31
    e3e6:	ee 0f       	add	r30, r30
    e3e8:	ff 1f       	adc	r31, r31
    e3ea:	ee 0f       	add	r30, r30
    e3ec:	ff 1f       	adc	r31, r31
    e3ee:	e6 1b       	sub	r30, r22
    e3f0:	f7 0b       	sbc	r31, r23
    e3f2:	ee 0e       	add	r14, r30
    e3f4:	ff 1e       	adc	r15, r31
    e3f6:	f7 01       	movw	r30, r14
    e3f8:	eb 5a       	subi	r30, 0xAB	; 171
    e3fa:	fe 4f       	sbci	r31, 0xFE	; 254
    e3fc:	80 e8       	ldi	r24, 0x80	; 128
    e3fe:	80 83       	st	Z, r24
    e400:	87 e0       	ldi	r24, 0x07	; 7
    e402:	18 9f       	mul	r17, r24
    e404:	60 0c       	add	r6, r0
    e406:	71 1c       	adc	r7, r1
    e408:	11 24       	eor	r1, r1
    e40a:	f6 01       	movw	r30, r12
    e40c:	01 91       	ld	r16, Z+
    e40e:	6f 01       	movw	r12, r30
    e410:	10 e0       	ldi	r17, 0x00	; 0
    e412:	e1 2c       	mov	r14, r1
    e414:	93 01       	movw	r18, r6
    e416:	40 e0       	ldi	r20, 0x00	; 0
    e418:	61 e0       	ldi	r22, 0x01	; 1
    e41a:	8c e0       	ldi	r24, 0x0C	; 12
    e41c:	92 e0       	ldi	r25, 0x02	; 2
    e41e:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN13Configuration14writeParameterEhhiib>
    e422:	ff ef       	ldi	r31, 0xFF	; 255
    e424:	6f 1a       	sub	r6, r31
    e426:	7f 0a       	sbc	r7, r31
    e428:	ca 14       	cp	r12, r10
    e42a:	db 04       	cpc	r13, r11
    e42c:	71 f7       	brne	.-36     	; 0xe40a <_ZN4Pads13assignPadNoteEh6note_t+0x1d0>
    e42e:	81 e0       	ldi	r24, 0x01	; 1
    e430:	15 c0       	rjmp	.+42     	; 0xe45c <_ZN4Pads13assignPadNoteEh6note_t+0x222>
    e432:	f7 01       	movw	r30, r14
    e434:	e4 56       	subi	r30, 0x64	; 100
    e436:	fe 4f       	sbci	r31, 0xFE	; 254
    e438:	90 81       	ld	r25, Z
    e43a:	87 e0       	ldi	r24, 0x07	; 7
    e43c:	18 9f       	mul	r17, r24
    e43e:	90 01       	movw	r18, r0
    e440:	11 24       	eor	r1, r1
    e442:	f9 01       	movw	r30, r18
    e444:	e1 5b       	subi	r30, 0xB1	; 177
    e446:	fe 4f       	sbci	r31, 0xFE	; 254
    e448:	ee 0d       	add	r30, r14
    e44a:	ff 1d       	adc	r31, r15
    e44c:	89 01       	movw	r16, r18
    e44e:	0a 5a       	subi	r16, 0xAA	; 170
    e450:	1e 4f       	sbci	r17, 0xFE	; 254
    e452:	0e 0d       	add	r16, r14
    e454:	1f 1d       	adc	r17, r15
    e456:	a0 e0       	ldi	r26, 0x00	; 0
    e458:	b0 e0       	ldi	r27, 0x00	; 0
    e45a:	72 cf       	rjmp	.-284    	; 0xe340 <_ZN4Pads13assignPadNoteEh6note_t+0x106>
    e45c:	27 96       	adiw	r28, 0x07	; 7
    e45e:	0f b6       	in	r0, 0x3f	; 63
    e460:	f8 94       	cli
    e462:	de bf       	out	0x3e, r29	; 62
    e464:	0f be       	out	0x3f, r0	; 63
    e466:	cd bf       	out	0x3d, r28	; 61
    e468:	df 91       	pop	r29
    e46a:	cf 91       	pop	r28
    e46c:	1f 91       	pop	r17
    e46e:	0f 91       	pop	r16
    e470:	ff 90       	pop	r15
    e472:	ef 90       	pop	r14
    e474:	df 90       	pop	r13
    e476:	cf 90       	pop	r12
    e478:	bf 90       	pop	r11
    e47a:	af 90       	pop	r10
    e47c:	9f 90       	pop	r9
    e47e:	8f 90       	pop	r8
    e480:	7f 90       	pop	r7
    e482:	6f 90       	pop	r6
    e484:	08 95       	ret

0000e486 <_ZN4Pads9shiftNoteEbb>:
    e486:	cf 92       	push	r12
    e488:	df 92       	push	r13
    e48a:	ef 92       	push	r14
    e48c:	0f 93       	push	r16
    e48e:	1f 93       	push	r17
    e490:	cf 93       	push	r28
    e492:	df 93       	push	r29
    e494:	cd b7       	in	r28, 0x3d	; 61
    e496:	de b7       	in	r29, 0x3e	; 62
    e498:	62 97       	sbiw	r28, 0x12	; 18
    e49a:	0f b6       	in	r0, 0x3f	; 63
    e49c:	f8 94       	cli
    e49e:	de bf       	out	0x3e, r29	; 62
    e4a0:	0f be       	out	0x3f, r0	; 63
    e4a2:	cd bf       	out	0x3d, r28	; 61
    e4a4:	6c 01       	movw	r12, r24
    e4a6:	06 2f       	mov	r16, r22
    e4a8:	14 2f       	mov	r17, r20
    e4aa:	fc 01       	movw	r30, r24
    e4ac:	e4 56       	subi	r30, 0x64	; 100
    e4ae:	fe 4f       	sbci	r31, 0xFE	; 254
    e4b0:	60 81       	ld	r22, Z
    e4b2:	0e 94 e6 68 	call	0xd1cc	; 0xd1cc <_ZN4Pads12getScaleTypeEa>
    e4b6:	88 30       	cpi	r24, 0x08	; 8
    e4b8:	09 f4       	brne	.+2      	; 0xe4bc <_ZN4Pads9shiftNoteEbb+0x36>
    e4ba:	9e c0       	rjmp	.+316    	; 0xe5f8 <_ZN4Pads9shiftNoteEbb+0x172>
    e4bc:	01 30       	cpi	r16, 0x01	; 1
    e4be:	91 f5       	brne	.+100    	; 0xe524 <_ZN4Pads9shiftNoteEbb+0x9e>
    e4c0:	29 e0       	ldi	r18, 0x09	; 9
    e4c2:	30 e0       	ldi	r19, 0x00	; 0
    e4c4:	28 1b       	sub	r18, r24
    e4c6:	31 09       	sbc	r19, r1
    e4c8:	f9 01       	movw	r30, r18
    e4ca:	ee 0f       	add	r30, r30
    e4cc:	ff 1f       	adc	r31, r31
    e4ce:	ee 0f       	add	r30, r30
    e4d0:	ff 1f       	adc	r31, r31
    e4d2:	ee 0f       	add	r30, r30
    e4d4:	ff 1f       	adc	r31, r31
    e4d6:	e2 1b       	sub	r30, r18
    e4d8:	f3 0b       	sbc	r31, r19
    e4da:	ec 0d       	add	r30, r12
    e4dc:	fd 1d       	adc	r31, r13
    e4de:	e1 5b       	subi	r30, 0xB1	; 177
    e4e0:	fe 4f       	sbci	r31, 0xFE	; 254
    e4e2:	20 81       	ld	r18, Z
    e4e4:	30 e0       	ldi	r19, 0x00	; 0
    e4e6:	24 5f       	subi	r18, 0xF4	; 244
    e4e8:	3f 4f       	sbci	r19, 0xFF	; 255
    e4ea:	3a 8b       	std	Y+18, r19	; 0x12
    e4ec:	29 8b       	std	Y+17, r18	; 0x11
    e4ee:	20 38       	cpi	r18, 0x80	; 128
    e4f0:	31 05       	cpc	r19, r1
    e4f2:	0c f0       	brlt	.+2      	; 0xe4f6 <_ZN4Pads9shiftNoteEbb+0x70>
    e4f4:	83 c0       	rjmp	.+262    	; 0xe5fc <_ZN4Pads9shiftNoteEbb+0x176>
    e4f6:	f6 01       	movw	r30, r12
    e4f8:	ea 5a       	subi	r30, 0xAA	; 170
    e4fa:	fe 4f       	sbci	r31, 0xFE	; 254
    e4fc:	de 01       	movw	r26, r28
    e4fe:	11 96       	adiw	r26, 0x01	; 1
    e500:	a6 01       	movw	r20, r12
    e502:	42 57       	subi	r20, 0x72	; 114
    e504:	5e 4f       	sbci	r21, 0xFE	; 254
    e506:	20 81       	ld	r18, Z
    e508:	30 e0       	ldi	r19, 0x00	; 0
    e50a:	2d 93       	st	X+, r18
    e50c:	3d 93       	st	X+, r19
    e50e:	37 96       	adiw	r30, 0x07	; 7
    e510:	e4 17       	cp	r30, r20
    e512:	f5 07       	cpc	r31, r21
    e514:	c1 f7       	brne	.-16     	; 0xe506 <_ZN4Pads9shiftNoteEbb+0x80>
    e516:	f6 01       	movw	r30, r12
    e518:	e5 56       	subi	r30, 0x65	; 101
    e51a:	fe 4f       	sbci	r31, 0xFE	; 254
    e51c:	90 81       	ld	r25, Z
    e51e:	9f 5f       	subi	r25, 0xFF	; 255
    e520:	90 83       	st	Z, r25
    e522:	30 c0       	rjmp	.+96     	; 0xe584 <_ZN4Pads9shiftNoteEbb+0xfe>
    e524:	28 2f       	mov	r18, r24
    e526:	30 e0       	ldi	r19, 0x00	; 0
    e528:	21 50       	subi	r18, 0x01	; 1
    e52a:	31 09       	sbc	r19, r1
    e52c:	f9 01       	movw	r30, r18
    e52e:	ee 0f       	add	r30, r30
    e530:	ff 1f       	adc	r31, r31
    e532:	ee 0f       	add	r30, r30
    e534:	ff 1f       	adc	r31, r31
    e536:	ee 0f       	add	r30, r30
    e538:	ff 1f       	adc	r31, r31
    e53a:	e2 1b       	sub	r30, r18
    e53c:	f3 0b       	sbc	r31, r19
    e53e:	ec 0d       	add	r30, r12
    e540:	fd 1d       	adc	r31, r13
    e542:	e1 5b       	subi	r30, 0xB1	; 177
    e544:	fe 4f       	sbci	r31, 0xFE	; 254
    e546:	20 81       	ld	r18, Z
    e548:	30 e0       	ldi	r19, 0x00	; 0
    e54a:	2c 50       	subi	r18, 0x0C	; 12
    e54c:	31 09       	sbc	r19, r1
    e54e:	3a 83       	std	Y+2, r19	; 0x02
    e550:	29 83       	std	Y+1, r18	; 0x01
    e552:	33 23       	and	r19, r19
    e554:	0c f4       	brge	.+2      	; 0xe558 <_ZN4Pads9shiftNoteEbb+0xd2>
    e556:	54 c0       	rjmp	.+168    	; 0xe600 <_ZN4Pads9shiftNoteEbb+0x17a>
    e558:	d6 01       	movw	r26, r12
    e55a:	a1 5b       	subi	r26, 0xB1	; 177
    e55c:	be 4f       	sbci	r27, 0xFE	; 254
    e55e:	fe 01       	movw	r30, r28
    e560:	33 96       	adiw	r30, 0x03	; 3
    e562:	ae 01       	movw	r20, r28
    e564:	4d 5e       	subi	r20, 0xED	; 237
    e566:	5f 4f       	sbci	r21, 0xFF	; 255
    e568:	2c 91       	ld	r18, X
    e56a:	30 e0       	ldi	r19, 0x00	; 0
    e56c:	21 93       	st	Z+, r18
    e56e:	31 93       	st	Z+, r19
    e570:	17 96       	adiw	r26, 0x07	; 7
    e572:	e4 17       	cp	r30, r20
    e574:	f5 07       	cpc	r31, r21
    e576:	c1 f7       	brne	.-16     	; 0xe568 <_ZN4Pads9shiftNoteEbb+0xe2>
    e578:	f6 01       	movw	r30, r12
    e57a:	e5 56       	subi	r30, 0x65	; 101
    e57c:	fe 4f       	sbci	r31, 0xFE	; 254
    e57e:	90 81       	ld	r25, Z
    e580:	91 50       	subi	r25, 0x01	; 1
    e582:	90 83       	st	Z, r25
    e584:	f6 01       	movw	r30, r12
    e586:	e5 56       	subi	r30, 0x65	; 101
    e588:	fe 4f       	sbci	r31, 0xFE	; 254
    e58a:	20 81       	ld	r18, Z
    e58c:	02 2e       	mov	r0, r18
    e58e:	00 0c       	add	r0, r0
    e590:	33 0b       	sbc	r19, r19
    e592:	33 23       	and	r19, r19
    e594:	1c f4       	brge	.+6      	; 0xe59c <_ZN4Pads9shiftNoteEbb+0x116>
    e596:	31 95       	neg	r19
    e598:	21 95       	neg	r18
    e59a:	31 09       	sbc	r19, r1
    e59c:	90 e0       	ldi	r25, 0x00	; 0
    e59e:	28 17       	cp	r18, r24
    e5a0:	39 07       	cpc	r19, r25
    e5a2:	21 f4       	brne	.+8      	; 0xe5ac <_ZN4Pads9shiftNoteEbb+0x126>
    e5a4:	f6 01       	movw	r30, r12
    e5a6:	e5 56       	subi	r30, 0x65	; 101
    e5a8:	fe 4f       	sbci	r31, 0xFE	; 254
    e5aa:	10 82       	st	Z, r1
    e5ac:	11 11       	cpse	r17, r1
    e5ae:	2a c0       	rjmp	.+84     	; 0xe604 <_ZN4Pads9shiftNoteEbb+0x17e>
    e5b0:	f6 01       	movw	r30, r12
    e5b2:	e5 56       	subi	r30, 0x65	; 101
    e5b4:	fe 4f       	sbci	r31, 0xFE	; 254
    e5b6:	00 81       	ld	r16, Z
    e5b8:	00 2e       	mov	r0, r16
    e5ba:	00 0c       	add	r0, r0
    e5bc:	11 0b       	sbc	r17, r17
    e5be:	31 96       	adiw	r30, 0x01	; 1
    e5c0:	80 81       	ld	r24, Z
    e5c2:	08 2e       	mov	r0, r24
    e5c4:	00 0c       	add	r0, r0
    e5c6:	99 0b       	sbc	r25, r25
    e5c8:	9c 01       	movw	r18, r24
    e5ca:	22 0f       	add	r18, r18
    e5cc:	33 1f       	adc	r19, r19
    e5ce:	28 0f       	add	r18, r24
    e5d0:	39 1f       	adc	r19, r25
    e5d2:	2e 5f       	subi	r18, 0xFE	; 254
    e5d4:	3f 4f       	sbci	r19, 0xFF	; 255
    e5d6:	e1 2c       	mov	r14, r1
    e5d8:	44 e0       	ldi	r20, 0x04	; 4
    e5da:	60 e0       	ldi	r22, 0x00	; 0
    e5dc:	8c e0       	ldi	r24, 0x0C	; 12
    e5de:	92 e0       	ldi	r25, 0x02	; 2
    e5e0:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN13Configuration14writeParameterEhhiib>
    e5e4:	0f c0       	rjmp	.+30     	; 0xe604 <_ZN4Pads9shiftNoteEbb+0x17e>
    e5e6:	8c 91       	ld	r24, X
    e5e8:	12 96       	adiw	r26, 0x02	; 2
    e5ea:	80 83       	st	Z, r24
    e5ec:	37 96       	adiw	r30, 0x07	; 7
    e5ee:	ec 15       	cp	r30, r12
    e5f0:	fd 05       	cpc	r31, r13
    e5f2:	c9 f7       	brne	.-14     	; 0xe5e6 <_ZN4Pads9shiftNoteEbb+0x160>
    e5f4:	81 e0       	ldi	r24, 0x01	; 1
    e5f6:	10 c0       	rjmp	.+32     	; 0xe618 <_ZN4Pads9shiftNoteEbb+0x192>
    e5f8:	84 e0       	ldi	r24, 0x04	; 4
    e5fa:	0e c0       	rjmp	.+28     	; 0xe618 <_ZN4Pads9shiftNoteEbb+0x192>
    e5fc:	82 e0       	ldi	r24, 0x02	; 2
    e5fe:	0c c0       	rjmp	.+24     	; 0xe618 <_ZN4Pads9shiftNoteEbb+0x192>
    e600:	82 e0       	ldi	r24, 0x02	; 2
    e602:	0a c0       	rjmp	.+20     	; 0xe618 <_ZN4Pads9shiftNoteEbb+0x192>
    e604:	de 01       	movw	r26, r28
    e606:	11 96       	adiw	r26, 0x01	; 1
    e608:	f6 01       	movw	r30, r12
    e60a:	e1 5b       	subi	r30, 0xB1	; 177
    e60c:	fe 4f       	sbci	r31, 0xFE	; 254
    e60e:	82 e7       	ldi	r24, 0x72	; 114
    e610:	c8 1a       	sub	r12, r24
    e612:	8e ef       	ldi	r24, 0xFE	; 254
    e614:	d8 0a       	sbc	r13, r24
    e616:	e7 cf       	rjmp	.-50     	; 0xe5e6 <_ZN4Pads9shiftNoteEbb+0x160>
    e618:	62 96       	adiw	r28, 0x12	; 18
    e61a:	0f b6       	in	r0, 0x3f	; 63
    e61c:	f8 94       	cli
    e61e:	de bf       	out	0x3e, r29	; 62
    e620:	0f be       	out	0x3f, r0	; 63
    e622:	cd bf       	out	0x3d, r28	; 61
    e624:	df 91       	pop	r29
    e626:	cf 91       	pop	r28
    e628:	1f 91       	pop	r17
    e62a:	0f 91       	pop	r16
    e62c:	ef 90       	pop	r14
    e62e:	df 90       	pop	r13
    e630:	cf 90       	pop	r12
    e632:	08 95       	ret

0000e634 <_ZN4Pads11shiftOctaveEb>:
    e634:	2f 92       	push	r2
    e636:	3f 92       	push	r3
    e638:	4f 92       	push	r4
    e63a:	5f 92       	push	r5
    e63c:	6f 92       	push	r6
    e63e:	7f 92       	push	r7
    e640:	8f 92       	push	r8
    e642:	9f 92       	push	r9
    e644:	af 92       	push	r10
    e646:	bf 92       	push	r11
    e648:	cf 92       	push	r12
    e64a:	df 92       	push	r13
    e64c:	ef 92       	push	r14
    e64e:	ff 92       	push	r15
    e650:	0f 93       	push	r16
    e652:	1f 93       	push	r17
    e654:	cf 93       	push	r28
    e656:	df 93       	push	r29
    e658:	cd b7       	in	r28, 0x3d	; 61
    e65a:	de b7       	in	r29, 0x3e	; 62
    e65c:	28 97       	sbiw	r28, 0x08	; 8
    e65e:	0f b6       	in	r0, 0x3f	; 63
    e660:	f8 94       	cli
    e662:	de bf       	out	0x3e, r29	; 62
    e664:	0f be       	out	0x3f, r0	; 63
    e666:	cd bf       	out	0x3d, r28	; 61
    e668:	9c 01       	movw	r18, r24
    e66a:	2a 5a       	subi	r18, 0xAA	; 170
    e66c:	3e 4f       	sbci	r19, 0xFE	; 254
    e66e:	3c 83       	std	Y+4, r19	; 0x04
    e670:	2b 83       	std	Y+3, r18	; 0x03
    e672:	4c 01       	movw	r8, r24
    e674:	31 eb       	ldi	r19, 0xB1	; 177
    e676:	83 1a       	sub	r8, r19
    e678:	3e ef       	ldi	r19, 0xFE	; 254
    e67a:	93 0a       	sbc	r9, r19
    e67c:	dc 01       	movw	r26, r24
    e67e:	aa 56       	subi	r26, 0x6A	; 106
    e680:	bd 4f       	sbci	r27, 0xFD	; 253
    e682:	ba 83       	std	Y+2, r27	; 0x02
    e684:	a9 83       	std	Y+1, r26	; 0x01
    e686:	7c 01       	movw	r14, r24
    e688:	bb e6       	ldi	r27, 0x6B	; 107
    e68a:	eb 1a       	sub	r14, r27
    e68c:	be ef       	ldi	r27, 0xFE	; 254
    e68e:	fb 0a       	sbc	r15, r27
    e690:	09 81       	ldd	r16, Y+1	; 0x01
    e692:	1a 81       	ldd	r17, Y+2	; 0x02
    e694:	d4 01       	movw	r26, r8
    e696:	2b 81       	ldd	r18, Y+3	; 0x03
    e698:	3c 81       	ldd	r19, Y+4	; 0x04
    e69a:	71 e0       	ldi	r23, 0x01	; 1
    e69c:	b1 2c       	mov	r11, r1
    e69e:	a8 01       	movw	r20, r16
    e6a0:	1c 01       	movw	r2, r24
    e6a2:	2a 01       	movw	r4, r20
    e6a4:	61 11       	cpse	r22, r1
    e6a6:	1d c0       	rjmp	.+58     	; 0xe6e2 <_ZN4Pads11shiftOctaveEb+0xae>
    e6a8:	f2 01       	movw	r30, r4
    e6aa:	40 81       	ld	r20, Z
    e6ac:	04 2e       	mov	r0, r20
    e6ae:	00 0c       	add	r0, r0
    e6b0:	55 0b       	sbc	r21, r21
    e6b2:	fa 01       	movw	r30, r20
    e6b4:	ee 0f       	add	r30, r30
    e6b6:	ff 1f       	adc	r31, r31
    e6b8:	4e 0f       	add	r20, r30
    e6ba:	5f 1f       	adc	r21, r31
    e6bc:	44 0f       	add	r20, r20
    e6be:	55 1f       	adc	r21, r21
    e6c0:	44 0f       	add	r20, r20
    e6c2:	55 1f       	adc	r21, r21
    e6c4:	fd 01       	movw	r30, r26
    e6c6:	d1 90       	ld	r13, Z+
    e6c8:	3a 01       	movw	r6, r20
    e6ca:	6d 0c       	add	r6, r13
    e6cc:	71 1c       	adc	r7, r1
    e6ce:	8c e0       	ldi	r24, 0x0C	; 12
    e6d0:	68 16       	cp	r6, r24
    e6d2:	71 04       	cpc	r7, r1
    e6d4:	5c f1       	brlt	.+86     	; 0xe72c <_ZN4Pads11shiftOctaveEb+0xf8>
    e6d6:	77 23       	and	r23, r23
    e6d8:	61 f1       	breq	.+88     	; 0xe732 <_ZN4Pads11shiftOctaveEb+0xfe>
    e6da:	2e 17       	cp	r18, r30
    e6dc:	3f 07       	cpc	r19, r31
    e6de:	99 f7       	brne	.-26     	; 0xe6c6 <_ZN4Pads11shiftOctaveEb+0x92>
    e6e0:	28 c0       	rjmp	.+80     	; 0xe732 <_ZN4Pads11shiftOctaveEb+0xfe>
    e6e2:	f2 01       	movw	r30, r4
    e6e4:	40 81       	ld	r20, Z
    e6e6:	04 2e       	mov	r0, r20
    e6e8:	00 0c       	add	r0, r0
    e6ea:	55 0b       	sbc	r21, r21
    e6ec:	fa 01       	movw	r30, r20
    e6ee:	ee 0f       	add	r30, r30
    e6f0:	ff 1f       	adc	r31, r31
    e6f2:	4e 0f       	add	r20, r30
    e6f4:	5f 1f       	adc	r21, r31
    e6f6:	44 0f       	add	r20, r20
    e6f8:	55 1f       	adc	r21, r21
    e6fa:	44 0f       	add	r20, r20
    e6fc:	55 1f       	adc	r21, r21
    e6fe:	fd 01       	movw	r30, r26
    e700:	d1 90       	ld	r13, Z+
    e702:	3a 01       	movw	r6, r20
    e704:	6d 0c       	add	r6, r13
    e706:	71 1c       	adc	r7, r1
    e708:	63 01       	movw	r12, r6
    e70a:	80 e8       	ldi	r24, 0x80	; 128
    e70c:	68 16       	cp	r6, r24
    e70e:	71 04       	cpc	r7, r1
    e710:	39 f0       	breq	.+14     	; 0xe720 <_ZN4Pads11shiftOctaveEb+0xec>
    e712:	9c e0       	ldi	r25, 0x0C	; 12
    e714:	c9 0e       	add	r12, r25
    e716:	d1 1c       	adc	r13, r1
    e718:	80 e8       	ldi	r24, 0x80	; 128
    e71a:	c8 16       	cp	r12, r24
    e71c:	d1 04       	cpc	r13, r1
    e71e:	44 f4       	brge	.+16     	; 0xe730 <_ZN4Pads11shiftOctaveEb+0xfc>
    e720:	77 23       	and	r23, r23
    e722:	39 f0       	breq	.+14     	; 0xe732 <_ZN4Pads11shiftOctaveEb+0xfe>
    e724:	2e 17       	cp	r18, r30
    e726:	3f 07       	cpc	r19, r31
    e728:	59 f7       	brne	.-42     	; 0xe700 <_ZN4Pads11shiftOctaveEb+0xcc>
    e72a:	03 c0       	rjmp	.+6      	; 0xe732 <_ZN4Pads11shiftOctaveEb+0xfe>
    e72c:	7b 2d       	mov	r23, r11
    e72e:	01 c0       	rjmp	.+2      	; 0xe732 <_ZN4Pads11shiftOctaveEb+0xfe>
    e730:	7b 2d       	mov	r23, r11
    e732:	29 5f       	subi	r18, 0xF9	; 249
    e734:	3f 4f       	sbci	r19, 0xFF	; 255
    e736:	17 96       	adiw	r26, 0x07	; 7
    e738:	9f ef       	ldi	r25, 0xFF	; 255
    e73a:	49 1a       	sub	r4, r25
    e73c:	59 0a       	sbc	r5, r25
    e73e:	2e 15       	cp	r18, r14
    e740:	3f 05       	cpc	r19, r15
    e742:	09 f0       	breq	.+2      	; 0xe746 <_ZN4Pads11shiftOctaveEb+0x112>
    e744:	af cf       	rjmp	.-162    	; 0xe6a4 <_ZN4Pads11shiftOctaveEb+0x70>
    e746:	1a 83       	std	Y+2, r17	; 0x02
    e748:	09 83       	std	Y+1, r16	; 0x01
    e74a:	c1 01       	movw	r24, r2
    e74c:	77 23       	and	r23, r23
    e74e:	09 f4       	brne	.+2      	; 0xe752 <_ZN4Pads11shiftOctaveEb+0x11e>
    e750:	84 c1       	rjmp	.+776    	; 0xea5a <_ZN4Pads11shiftOctaveEb+0x426>
    e752:	f6 2e       	mov	r15, r22
    e754:	f1 01       	movw	r30, r2
    e756:	e4 56       	subi	r30, 0x64	; 100
    e758:	fe 4f       	sbci	r31, 0xFE	; 254
    e75a:	60 81       	ld	r22, Z
    e75c:	0e 94 f7 68 	call	0xd1ee	; 0xd1ee <_ZN4Pads17isPredefinedScaleEh>
    e760:	88 23       	and	r24, r24
    e762:	09 f4       	brne	.+2      	; 0xe766 <_ZN4Pads11shiftOctaveEb+0x132>
    e764:	c3 c0       	rjmp	.+390    	; 0xe8ec <_ZN4Pads11shiftOctaveEb+0x2b8>
    e766:	f1 01       	movw	r30, r2
    e768:	e4 56       	subi	r30, 0x64	; 100
    e76a:	fe 4f       	sbci	r31, 0xFE	; 254
    e76c:	80 81       	ld	r24, Z
    e76e:	08 2e       	mov	r0, r24
    e770:	00 0c       	add	r0, r0
    e772:	99 0b       	sbc	r25, r25
    e774:	6c 01       	movw	r12, r24
    e776:	cc 0c       	add	r12, r12
    e778:	dd 1c       	adc	r13, r13
    e77a:	c8 0e       	add	r12, r24
    e77c:	d9 1e       	adc	r13, r25
    e77e:	31 96       	adiw	r30, 0x01	; 1
    e780:	80 81       	ld	r24, Z
    e782:	a5 e1       	ldi	r26, 0x15	; 21
    e784:	8a 02       	muls	r24, r26
    e786:	c0 0c       	add	r12, r0
    e788:	d1 1c       	adc	r13, r1
    e78a:	11 24       	eor	r1, r1
    e78c:	20 91 7b 04 	lds	r18, 0x047B
    e790:	30 91 7c 04 	lds	r19, 0x047C
    e794:	80 91 85 04 	lds	r24, 0x0485
    e798:	90 91 86 04 	lds	r25, 0x0486
    e79c:	82 0f       	add	r24, r18
    e79e:	93 1f       	adc	r25, r19
    e7a0:	05 96       	adiw	r24, 0x05	; 5
    e7a2:	20 91 a9 04 	lds	r18, 0x04A9
    e7a6:	21 30       	cpi	r18, 0x01	; 1
    e7a8:	09 f1       	breq	.+66     	; 0xe7ec <_ZN4Pads11shiftOctaveEb+0x1b8>
    e7aa:	18 f0       	brcs	.+6      	; 0xe7b2 <_ZN4Pads11shiftOctaveEb+0x17e>
    e7ac:	22 30       	cpi	r18, 0x02	; 2
    e7ae:	19 f1       	breq	.+70     	; 0xe7f6 <_ZN4Pads11shiftOctaveEb+0x1c2>
    e7b0:	2a c0       	rjmp	.+84     	; 0xe806 <_ZN4Pads11shiftOctaveEb+0x1d2>
    e7b2:	86 01       	movw	r16, r12
    e7b4:	16 95       	lsr	r17
    e7b6:	07 95       	ror	r16
    e7b8:	16 95       	lsr	r17
    e7ba:	07 95       	ror	r16
    e7bc:	16 95       	lsr	r17
    e7be:	07 95       	ror	r16
    e7c0:	80 0f       	add	r24, r16
    e7c2:	91 1d       	adc	r25, r1
    e7c4:	81 30       	cpi	r24, 0x01	; 1
    e7c6:	b0 e1       	ldi	r27, 0x10	; 16
    e7c8:	9b 07       	cpc	r25, r27
    e7ca:	00 f5       	brcc	.+64     	; 0xe80c <_ZN4Pads11shiftOctaveEb+0x1d8>
    e7cc:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    e7d0:	90 e0       	ldi	r25, 0x00	; 0
    e7d2:	00 0f       	add	r16, r16
    e7d4:	00 0f       	add	r16, r16
    e7d6:	00 0f       	add	r16, r16
    e7d8:	2c 2d       	mov	r18, r12
    e7da:	20 1b       	sub	r18, r16
    e7dc:	02 c0       	rjmp	.+4      	; 0xe7e2 <_ZN4Pads11shiftOctaveEb+0x1ae>
    e7de:	95 95       	asr	r25
    e7e0:	87 95       	ror	r24
    e7e2:	2a 95       	dec	r18
    e7e4:	e2 f7       	brpl	.-8      	; 0xe7de <_ZN4Pads11shiftOctaveEb+0x1aa>
    e7e6:	81 70       	andi	r24, 0x01	; 1
    e7e8:	99 27       	eor	r25, r25
    e7ea:	12 c0       	rjmp	.+36     	; 0xe810 <_ZN4Pads11shiftOctaveEb+0x1dc>
    e7ec:	8c 0d       	add	r24, r12
    e7ee:	9d 1d       	adc	r25, r13
    e7f0:	0e 94 14 83 	call	0x10628	; 0x10628 <eeprom_read_byte>
    e7f4:	0d c0       	rjmp	.+26     	; 0xe810 <_ZN4Pads11shiftOctaveEb+0x1dc>
    e7f6:	96 01       	movw	r18, r12
    e7f8:	22 0f       	add	r18, r18
    e7fa:	33 1f       	adc	r19, r19
    e7fc:	82 0f       	add	r24, r18
    e7fe:	93 1f       	adc	r25, r19
    e800:	0e 94 1c 83 	call	0x10638	; 0x10638 <eeprom_read_word>
    e804:	05 c0       	rjmp	.+10     	; 0xe810 <_ZN4Pads11shiftOctaveEb+0x1dc>
    e806:	80 e0       	ldi	r24, 0x00	; 0
    e808:	90 e0       	ldi	r25, 0x00	; 0
    e80a:	02 c0       	rjmp	.+4      	; 0xe810 <_ZN4Pads11shiftOctaveEb+0x1dc>
    e80c:	80 e0       	ldi	r24, 0x00	; 0
    e80e:	90 e0       	ldi	r25, 0x00	; 0
    e810:	ff 20       	and	r15, r15
    e812:	11 f0       	breq	.+4      	; 0xe818 <_ZN4Pads11shiftOctaveEb+0x1e4>
    e814:	8f 5f       	subi	r24, 0xFF	; 255
    e816:	01 c0       	rjmp	.+2      	; 0xe81a <_ZN4Pads11shiftOctaveEb+0x1e6>
    e818:	81 50       	subi	r24, 0x01	; 1
    e81a:	08 2f       	mov	r16, r24
    e81c:	10 e0       	ldi	r17, 0x00	; 0
    e81e:	e1 2c       	mov	r14, r1
    e820:	96 01       	movw	r18, r12
    e822:	44 e0       	ldi	r20, 0x04	; 4
    e824:	60 e0       	ldi	r22, 0x00	; 0
    e826:	8c e0       	ldi	r24, 0x0C	; 12
    e828:	92 e0       	ldi	r25, 0x02	; 2
    e82a:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN13Configuration14writeParameterEhhiib>
    e82e:	00 e0       	ldi	r16, 0x00	; 0
    e830:	10 e0       	ldi	r17, 0x00	; 0
    e832:	61 01       	movw	r12, r2
    e834:	e1 e6       	ldi	r30, 0x61	; 97
    e836:	ce 1a       	sub	r12, r30
    e838:	ed ef       	ldi	r30, 0xFD	; 253
    e83a:	de 0a       	sbc	r13, r30
    e83c:	41 2c       	mov	r4, r1
    e83e:	51 2c       	mov	r5, r1
    e840:	32 01       	movw	r6, r4
    e842:	43 94       	inc	r4
    e844:	af 2c       	mov	r10, r15
    e846:	e9 80       	ldd	r14, Y+1	; 0x01
    e848:	fa 80       	ldd	r15, Y+2	; 0x02
    e84a:	9a 82       	std	Y+2, r9	; 0x02
    e84c:	89 82       	std	Y+1, r8	; 0x01
    e84e:	aa 20       	and	r10, r10
    e850:	a1 f0       	breq	.+40     	; 0xe87a <_ZN4Pads11shiftOctaveEb+0x246>
    e852:	a9 81       	ldd	r26, Y+1	; 0x01
    e854:	ba 81       	ldd	r27, Y+2	; 0x02
    e856:	9c 90       	ld	r9, X
    e858:	f7 01       	movw	r30, r14
    e85a:	b0 80       	ld	r11, Z
    e85c:	60 2f       	mov	r22, r16
    e85e:	c1 01       	movw	r24, r2
    e860:	0e 94 62 69 	call	0xd2c4	; 0xd2c4 <_ZN4Pads12isPadPressedEh>
    e864:	81 11       	cpse	r24, r1
    e866:	fb c0       	rjmp	.+502    	; 0xea5e <_ZN4Pads11shiftOctaveEb+0x42a>
    e868:	8c e0       	ldi	r24, 0x0C	; 12
    e86a:	89 0d       	add	r24, r9
    e86c:	9b 2d       	mov	r25, r11
    e86e:	99 0f       	add	r25, r25
    e870:	b9 0e       	add	r11, r25
    e872:	bb 0c       	add	r11, r11
    e874:	bb 0c       	add	r11, r11
    e876:	8b 0d       	add	r24, r11
    e878:	13 c0       	rjmp	.+38     	; 0xe8a0 <_ZN4Pads11shiftOctaveEb+0x26c>
    e87a:	a9 81       	ldd	r26, Y+1	; 0x01
    e87c:	ba 81       	ldd	r27, Y+2	; 0x02
    e87e:	9c 90       	ld	r9, X
    e880:	f7 01       	movw	r30, r14
    e882:	b0 80       	ld	r11, Z
    e884:	60 2f       	mov	r22, r16
    e886:	c1 01       	movw	r24, r2
    e888:	0e 94 62 69 	call	0xd2c4	; 0xd2c4 <_ZN4Pads12isPadPressedEh>
    e88c:	81 11       	cpse	r24, r1
    e88e:	fe c0       	rjmp	.+508    	; 0xea8c <_ZN4Pads11shiftOctaveEb+0x458>
    e890:	84 ef       	ldi	r24, 0xF4	; 244
    e892:	89 0d       	add	r24, r9
    e894:	9b 2d       	mov	r25, r11
    e896:	99 0f       	add	r25, r25
    e898:	b9 0e       	add	r11, r25
    e89a:	bb 0c       	add	r11, r11
    e89c:	bb 0c       	add	r11, r11
    e89e:	8b 0d       	add	r24, r11
    e8a0:	a9 81       	ldd	r26, Y+1	; 0x01
    e8a2:	ba 81       	ldd	r27, Y+2	; 0x02
    e8a4:	8c 93       	st	X, r24
    e8a6:	0f 5f       	subi	r16, 0xFF	; 255
    e8a8:	1f 4f       	sbci	r17, 0xFF	; 255
    e8aa:	e9 81       	ldd	r30, Y+1	; 0x01
    e8ac:	fa 81       	ldd	r31, Y+2	; 0x02
    e8ae:	37 96       	adiw	r30, 0x07	; 7
    e8b0:	fa 83       	std	Y+2, r31	; 0x02
    e8b2:	e9 83       	std	Y+1, r30	; 0x01
    e8b4:	ff ef       	ldi	r31, 0xFF	; 255
    e8b6:	ef 1a       	sub	r14, r31
    e8b8:	ff 0a       	sbc	r15, r31
    e8ba:	09 30       	cpi	r16, 0x09	; 9
    e8bc:	11 05       	cpc	r17, r1
    e8be:	39 f6       	brne	.-114    	; 0xe84e <_ZN4Pads11shiftOctaveEb+0x21a>
    e8c0:	f1 01       	movw	r30, r2
    e8c2:	ea 56       	subi	r30, 0x6A	; 106
    e8c4:	fd 4f       	sbci	r31, 0xFD	; 253
    e8c6:	80 81       	ld	r24, Z
    e8c8:	98 2f       	mov	r25, r24
    e8ca:	99 0f       	add	r25, r25
    e8cc:	89 0f       	add	r24, r25
    e8ce:	88 0f       	add	r24, r24
    e8d0:	88 0f       	add	r24, r24
    e8d2:	e7 54       	subi	r30, 0x47	; 71
    e8d4:	f1 40       	sbci	r31, 0x01	; 1
    e8d6:	60 81       	ld	r22, Z
    e8d8:	68 0f       	add	r22, r24
    e8da:	c1 01       	movw	r24, r2
    e8dc:	0e 94 56 69 	call	0xd2ac	; 0xd2ac <_ZN4Pads17getOctaveFromNoteEh>
    e8e0:	f1 01       	movw	r30, r2
    e8e2:	e6 56       	subi	r30, 0x66	; 102
    e8e4:	fe 4f       	sbci	r31, 0xFE	; 254
    e8e6:	80 83       	st	Z, r24
    e8e8:	81 e0       	ldi	r24, 0x01	; 1
    e8ea:	ed c0       	rjmp	.+474    	; 0xeac6 <_ZN4Pads11shiftOctaveEb+0x492>
    e8ec:	f1 01       	movw	r30, r2
    e8ee:	e4 56       	subi	r30, 0x64	; 100
    e8f0:	fe 4f       	sbci	r31, 0xFE	; 254
    e8f2:	80 81       	ld	r24, Z
    e8f4:	2f e3       	ldi	r18, 0x3F	; 63
    e8f6:	82 02       	muls	r24, r18
    e8f8:	30 01       	movw	r6, r0
    e8fa:	11 24       	eor	r1, r1
    e8fc:	32 eb       	ldi	r19, 0xB2	; 178
    e8fe:	63 1a       	sub	r6, r19
    e900:	31 e0       	ldi	r19, 0x01	; 1
    e902:	73 0a       	sbc	r7, r19
    e904:	41 2c       	mov	r4, r1
    e906:	00 e0       	ldi	r16, 0x00	; 0
    e908:	10 e0       	ldi	r17, 0x00	; 0
    e90a:	c1 01       	movw	r24, r2
    e90c:	81 56       	subi	r24, 0x61	; 97
    e90e:	9d 4f       	sbci	r25, 0xFD	; 253
    e910:	9e 83       	std	Y+6, r25	; 0x06
    e912:	8d 83       	std	Y+5, r24	; 0x05
    e914:	a9 80       	ldd	r10, Y+1	; 0x01
    e916:	ba 80       	ldd	r11, Y+2	; 0x02
    e918:	3a 82       	std	Y+2, r3	; 0x02
    e91a:	29 82       	std	Y+1, r2	; 0x01
    e91c:	18 01       	movw	r2, r16
    e91e:	64 2d       	mov	r22, r4
    e920:	89 81       	ldd	r24, Y+1	; 0x01
    e922:	9a 81       	ldd	r25, Y+2	; 0x02
    e924:	0e 94 62 69 	call	0xd2c4	; 0xd2c4 <_ZN4Pads12isPadPressedEh>
    e928:	88 23       	and	r24, r24
    e92a:	09 f4       	brne	.+2      	; 0xe92e <_ZN4Pads11shiftOctaveEb+0x2fa>
    e92c:	c5 c0       	rjmp	.+394    	; 0xeab8 <_ZN4Pads11shiftOctaveEb+0x484>
    e92e:	ad 81       	ldd	r26, Y+5	; 0x05
    e930:	be 81       	ldd	r27, Y+6	; 0x06
    e932:	2d 91       	ld	r18, X+
    e934:	3c 91       	ld	r19, X
    e936:	81 e0       	ldi	r24, 0x01	; 1
    e938:	90 e0       	ldi	r25, 0x00	; 0
    e93a:	a0 e0       	ldi	r26, 0x00	; 0
    e93c:	b0 e0       	ldi	r27, 0x00	; 0
    e93e:	02 2c       	mov	r0, r2
    e940:	04 c0       	rjmp	.+8      	; 0xe94a <_ZN4Pads11shiftOctaveEb+0x316>
    e942:	88 0f       	add	r24, r24
    e944:	99 1f       	adc	r25, r25
    e946:	aa 1f       	adc	r26, r26
    e948:	bb 1f       	adc	r27, r27
    e94a:	0a 94       	dec	r0
    e94c:	d2 f7       	brpl	.-12     	; 0xe942 <_ZN4Pads11shiftOctaveEb+0x30e>
    e94e:	82 2b       	or	r24, r18
    e950:	93 2b       	or	r25, r19
    e952:	ed 81       	ldd	r30, Y+5	; 0x05
    e954:	fe 81       	ldd	r31, Y+6	; 0x06
    e956:	91 83       	std	Z+1, r25	; 0x01
    e958:	80 83       	st	Z, r24
    e95a:	ff 20       	and	r15, r15
    e95c:	29 f0       	breq	.+10     	; 0xe968 <_ZN4Pads11shiftOctaveEb+0x334>
    e95e:	d5 01       	movw	r26, r10
    e960:	8c 91       	ld	r24, X
    e962:	8f 5f       	subi	r24, 0xFF	; 255
    e964:	8c 93       	st	X, r24
    e966:	a8 c0       	rjmp	.+336    	; 0xeab8 <_ZN4Pads11shiftOctaveEb+0x484>
    e968:	f5 01       	movw	r30, r10
    e96a:	80 81       	ld	r24, Z
    e96c:	81 50       	subi	r24, 0x01	; 1
    e96e:	80 83       	st	Z, r24
    e970:	a3 c0       	rjmp	.+326    	; 0xeab8 <_ZN4Pads11shiftOctaveEb+0x484>
    e972:	af 81       	ldd	r26, Y+7	; 0x07
    e974:	b8 85       	ldd	r27, Y+8	; 0x08
    e976:	9d 91       	ld	r25, X+
    e978:	b8 87       	std	Y+8, r27	; 0x08
    e97a:	af 83       	std	Y+7, r26	; 0x07
    e97c:	90 38       	cpi	r25, 0x80	; 128
    e97e:	69 f1       	breq	.+90     	; 0xe9da <_ZN4Pads11shiftOctaveEb+0x3a6>
    e980:	ff 20       	and	r15, r15
    e982:	59 f0       	breq	.+22     	; 0xe99a <_ZN4Pads11shiftOctaveEb+0x366>
    e984:	f5 01       	movw	r30, r10
    e986:	80 81       	ld	r24, Z
    e988:	58 2e       	mov	r5, r24
    e98a:	55 0c       	add	r5, r5
    e98c:	85 0d       	add	r24, r5
    e98e:	88 0f       	add	r24, r24
    e990:	88 0f       	add	r24, r24
    e992:	84 5f       	subi	r24, 0xF4	; 244
    e994:	58 2e       	mov	r5, r24
    e996:	59 0e       	add	r5, r25
    e998:	0a c0       	rjmp	.+20     	; 0xe9ae <_ZN4Pads11shiftOctaveEb+0x37a>
    e99a:	d5 01       	movw	r26, r10
    e99c:	8c 91       	ld	r24, X
    e99e:	58 2e       	mov	r5, r24
    e9a0:	55 0c       	add	r5, r5
    e9a2:	85 0d       	add	r24, r5
    e9a4:	88 0f       	add	r24, r24
    e9a6:	88 0f       	add	r24, r24
    e9a8:	8c 50       	subi	r24, 0x0C	; 12
    e9aa:	58 2e       	mov	r5, r24
    e9ac:	59 0e       	add	r5, r25
    e9ae:	05 2d       	mov	r16, r5
    e9b0:	10 e0       	ldi	r17, 0x00	; 0
    e9b2:	ee 24       	eor	r14, r14
    e9b4:	e3 94       	inc	r14
    e9b6:	96 01       	movw	r18, r12
    e9b8:	40 e0       	ldi	r20, 0x00	; 0
    e9ba:	61 e0       	ldi	r22, 0x01	; 1
    e9bc:	8c e0       	ldi	r24, 0x0C	; 12
    e9be:	92 e0       	ldi	r25, 0x02	; 2
    e9c0:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN13Configuration14writeParameterEhhiib>
    e9c4:	64 2d       	mov	r22, r4
    e9c6:	89 81       	ldd	r24, Y+1	; 0x01
    e9c8:	9a 81       	ldd	r25, Y+2	; 0x02
    e9ca:	0e 94 62 69 	call	0xd2c4	; 0xd2c4 <_ZN4Pads12isPadPressedEh>
    e9ce:	81 11       	cpse	r24, r1
    e9d0:	04 c0       	rjmp	.+8      	; 0xe9da <_ZN4Pads11shiftOctaveEb+0x3a6>
    e9d2:	ef 81       	ldd	r30, Y+7	; 0x07
    e9d4:	f8 85       	ldd	r31, Y+8	; 0x08
    e9d6:	31 97       	sbiw	r30, 0x01	; 1
    e9d8:	50 82       	st	Z, r5
    e9da:	bf ef       	ldi	r27, 0xFF	; 255
    e9dc:	cb 1a       	sub	r12, r27
    e9de:	db 0a       	sbc	r13, r27
    e9e0:	6c 14       	cp	r6, r12
    e9e2:	7d 04       	cpc	r7, r13
    e9e4:	31 f6       	brne	.-116    	; 0xe972 <_ZN4Pads11shiftOctaveEb+0x33e>
    e9e6:	ef ef       	ldi	r30, 0xFF	; 255
    e9e8:	2e 1a       	sub	r2, r30
    e9ea:	3e 0a       	sbc	r3, r30
    e9ec:	43 94       	inc	r4
    e9ee:	f7 e0       	ldi	r31, 0x07	; 7
    e9f0:	6f 0e       	add	r6, r31
    e9f2:	71 1c       	adc	r7, r1
    e9f4:	27 e0       	ldi	r18, 0x07	; 7
    e9f6:	82 0e       	add	r8, r18
    e9f8:	91 1c       	adc	r9, r1
    e9fa:	3f ef       	ldi	r19, 0xFF	; 255
    e9fc:	a3 1a       	sub	r10, r19
    e9fe:	b3 0a       	sbc	r11, r19
    ea00:	89 e0       	ldi	r24, 0x09	; 9
    ea02:	48 12       	cpse	r4, r24
    ea04:	8c cf       	rjmp	.-232    	; 0xe91e <_ZN4Pads11shiftOctaveEb+0x2ea>
    ea06:	29 80       	ldd	r2, Y+1	; 0x01
    ea08:	3a 80       	ldd	r3, Y+2	; 0x02
    ea0a:	84 e0       	ldi	r24, 0x04	; 4
    ea0c:	f1 01       	movw	r30, r2
    ea0e:	e6 56       	subi	r30, 0x66	; 102
    ea10:	fe 4f       	sbci	r31, 0xFE	; 254
    ea12:	80 83       	st	Z, r24
    ea14:	eb 54       	subi	r30, 0x4B	; 75
    ea16:	f1 09       	sbc	r31, r1
    ea18:	80 81       	ld	r24, Z
    ea1a:	80 38       	cpi	r24, 0x80	; 128
    ea1c:	31 f4       	brne	.+12     	; 0xea2a <_ZN4Pads11shiftOctaveEb+0x3f6>
    ea1e:	31 96       	adiw	r30, 0x01	; 1
    ea20:	2b 81       	ldd	r18, Y+3	; 0x03
    ea22:	3c 81       	ldd	r19, Y+4	; 0x04
    ea24:	81 91       	ld	r24, Z+
    ea26:	80 38       	cpi	r24, 0x80	; 128
    ea28:	99 f0       	breq	.+38     	; 0xea50 <_ZN4Pads11shiftOctaveEb+0x41c>
    ea2a:	f1 01       	movw	r30, r2
    ea2c:	ea 56       	subi	r30, 0x6A	; 106
    ea2e:	fd 4f       	sbci	r31, 0xFD	; 253
    ea30:	90 81       	ld	r25, Z
    ea32:	69 2f       	mov	r22, r25
    ea34:	66 0f       	add	r22, r22
    ea36:	69 0f       	add	r22, r25
    ea38:	66 0f       	add	r22, r22
    ea3a:	66 0f       	add	r22, r22
    ea3c:	68 0f       	add	r22, r24
    ea3e:	c1 01       	movw	r24, r2
    ea40:	0e 94 56 69 	call	0xd2ac	; 0xd2ac <_ZN4Pads17getOctaveFromNoteEh>
    ea44:	f1 01       	movw	r30, r2
    ea46:	e6 56       	subi	r30, 0x66	; 102
    ea48:	fe 4f       	sbci	r31, 0xFE	; 254
    ea4a:	80 83       	st	Z, r24
    ea4c:	81 e0       	ldi	r24, 0x01	; 1
    ea4e:	3b c0       	rjmp	.+118    	; 0xeac6 <_ZN4Pads11shiftOctaveEb+0x492>
    ea50:	e2 17       	cp	r30, r18
    ea52:	f3 07       	cpc	r31, r19
    ea54:	39 f7       	brne	.-50     	; 0xea24 <_ZN4Pads11shiftOctaveEb+0x3f0>
    ea56:	81 e0       	ldi	r24, 0x01	; 1
    ea58:	36 c0       	rjmp	.+108    	; 0xeac6 <_ZN4Pads11shiftOctaveEb+0x492>
    ea5a:	82 e0       	ldi	r24, 0x02	; 2
    ea5c:	34 c0       	rjmp	.+104    	; 0xeac6 <_ZN4Pads11shiftOctaveEb+0x492>
    ea5e:	d6 01       	movw	r26, r12
    ea60:	2d 91       	ld	r18, X+
    ea62:	3c 91       	ld	r19, X
    ea64:	d3 01       	movw	r26, r6
    ea66:	c2 01       	movw	r24, r4
    ea68:	00 2e       	mov	r0, r16
    ea6a:	04 c0       	rjmp	.+8      	; 0xea74 <_ZN4Pads11shiftOctaveEb+0x440>
    ea6c:	88 0f       	add	r24, r24
    ea6e:	99 1f       	adc	r25, r25
    ea70:	aa 1f       	adc	r26, r26
    ea72:	bb 1f       	adc	r27, r27
    ea74:	0a 94       	dec	r0
    ea76:	d2 f7       	brpl	.-12     	; 0xea6c <_ZN4Pads11shiftOctaveEb+0x438>
    ea78:	82 2b       	or	r24, r18
    ea7a:	93 2b       	or	r25, r19
    ea7c:	f6 01       	movw	r30, r12
    ea7e:	91 83       	std	Z+1, r25	; 0x01
    ea80:	80 83       	st	Z, r24
    ea82:	d7 01       	movw	r26, r14
    ea84:	8c 91       	ld	r24, X
    ea86:	8f 5f       	subi	r24, 0xFF	; 255
    ea88:	8c 93       	st	X, r24
    ea8a:	0d cf       	rjmp	.-486    	; 0xe8a6 <_ZN4Pads11shiftOctaveEb+0x272>
    ea8c:	f6 01       	movw	r30, r12
    ea8e:	20 81       	ld	r18, Z
    ea90:	31 81       	ldd	r19, Z+1	; 0x01
    ea92:	d3 01       	movw	r26, r6
    ea94:	c2 01       	movw	r24, r4
    ea96:	00 2e       	mov	r0, r16
    ea98:	04 c0       	rjmp	.+8      	; 0xeaa2 <_ZN4Pads11shiftOctaveEb+0x46e>
    ea9a:	88 0f       	add	r24, r24
    ea9c:	99 1f       	adc	r25, r25
    ea9e:	aa 1f       	adc	r26, r26
    eaa0:	bb 1f       	adc	r27, r27
    eaa2:	0a 94       	dec	r0
    eaa4:	d2 f7       	brpl	.-12     	; 0xea9a <_ZN4Pads11shiftOctaveEb+0x466>
    eaa6:	82 2b       	or	r24, r18
    eaa8:	93 2b       	or	r25, r19
    eaaa:	91 83       	std	Z+1, r25	; 0x01
    eaac:	80 83       	st	Z, r24
    eaae:	d7 01       	movw	r26, r14
    eab0:	8c 91       	ld	r24, X
    eab2:	81 50       	subi	r24, 0x01	; 1
    eab4:	8c 93       	st	X, r24
    eab6:	f7 ce       	rjmp	.-530    	; 0xe8a6 <_ZN4Pads11shiftOctaveEb+0x272>
    eab8:	63 01       	movw	r12, r6
    eaba:	b7 e0       	ldi	r27, 0x07	; 7
    eabc:	cb 1a       	sub	r12, r27
    eabe:	d1 08       	sbc	r13, r1
    eac0:	98 86       	std	Y+8, r9	; 0x08
    eac2:	8f 82       	std	Y+7, r8	; 0x07
    eac4:	56 cf       	rjmp	.-340    	; 0xe972 <_ZN4Pads11shiftOctaveEb+0x33e>
    eac6:	28 96       	adiw	r28, 0x08	; 8
    eac8:	0f b6       	in	r0, 0x3f	; 63
    eaca:	f8 94       	cli
    eacc:	de bf       	out	0x3e, r29	; 62
    eace:	0f be       	out	0x3f, r0	; 63
    ead0:	cd bf       	out	0x3d, r28	; 61
    ead2:	df 91       	pop	r29
    ead4:	cf 91       	pop	r28
    ead6:	1f 91       	pop	r17
    ead8:	0f 91       	pop	r16
    eada:	ff 90       	pop	r15
    eadc:	ef 90       	pop	r14
    eade:	df 90       	pop	r13
    eae0:	cf 90       	pop	r12
    eae2:	bf 90       	pop	r11
    eae4:	af 90       	pop	r10
    eae6:	9f 90       	pop	r9
    eae8:	8f 90       	pop	r8
    eaea:	7f 90       	pop	r7
    eaec:	6f 90       	pop	r6
    eaee:	5f 90       	pop	r5
    eaf0:	4f 90       	pop	r4
    eaf2:	3f 90       	pop	r3
    eaf4:	2f 90       	pop	r2
    eaf6:	08 95       	ret

0000eaf8 <_ZN4Pads25checkRemainingOctaveShiftEv>:
    eaf8:	4f 92       	push	r4
    eafa:	5f 92       	push	r5
    eafc:	6f 92       	push	r6
    eafe:	7f 92       	push	r7
    eb00:	af 92       	push	r10
    eb02:	bf 92       	push	r11
    eb04:	cf 92       	push	r12
    eb06:	df 92       	push	r13
    eb08:	ef 92       	push	r14
    eb0a:	ff 92       	push	r15
    eb0c:	0f 93       	push	r16
    eb0e:	1f 93       	push	r17
    eb10:	cf 93       	push	r28
    eb12:	df 93       	push	r29
    eb14:	fc 01       	movw	r30, r24
    eb16:	e1 56       	subi	r30, 0x61	; 97
    eb18:	fd 4f       	sbci	r31, 0xFD	; 253
    eb1a:	20 81       	ld	r18, Z
    eb1c:	31 81       	ldd	r19, Z+1	; 0x01
    eb1e:	23 2b       	or	r18, r19
    eb20:	09 f4       	brne	.+2      	; 0xeb24 <_ZN4Pads25checkRemainingOctaveShiftEv+0x2c>
    eb22:	53 c0       	rjmp	.+166    	; 0xebca <_ZN4Pads25checkRemainingOctaveShiftEv+0xd2>
    eb24:	5c 01       	movw	r10, r24
    eb26:	7c 01       	movw	r14, r24
    eb28:	2a e6       	ldi	r18, 0x6A	; 106
    eb2a:	e2 1a       	sub	r14, r18
    eb2c:	2d ef       	ldi	r18, 0xFD	; 253
    eb2e:	f2 0a       	sbc	r15, r18
    eb30:	8c 01       	movw	r16, r24
    eb32:	0a 5a       	subi	r16, 0xAA	; 170
    eb34:	1e 4f       	sbci	r17, 0xFE	; 254
    eb36:	c0 e0       	ldi	r28, 0x00	; 0
    eb38:	d0 e0       	ldi	r29, 0x00	; 0
    eb3a:	6f 01       	movw	r12, r30
    eb3c:	41 2c       	mov	r4, r1
    eb3e:	51 2c       	mov	r5, r1
    eb40:	32 01       	movw	r6, r4
    eb42:	43 94       	inc	r4
    eb44:	d6 01       	movw	r26, r12
    eb46:	8d 91       	ld	r24, X+
    eb48:	9c 91       	ld	r25, X
    eb4a:	0c 2e       	mov	r0, r28
    eb4c:	02 c0       	rjmp	.+4      	; 0xeb52 <_ZN4Pads25checkRemainingOctaveShiftEv+0x5a>
    eb4e:	96 95       	lsr	r25
    eb50:	87 95       	ror	r24
    eb52:	0a 94       	dec	r0
    eb54:	e2 f7       	brpl	.-8      	; 0xeb4e <_ZN4Pads25checkRemainingOctaveShiftEv+0x56>
    eb56:	80 ff       	sbrs	r24, 0
    eb58:	2e c0       	rjmp	.+92     	; 0xebb6 <_ZN4Pads25checkRemainingOctaveShiftEv+0xbe>
    eb5a:	6c 2f       	mov	r22, r28
    eb5c:	c5 01       	movw	r24, r10
    eb5e:	0e 94 62 69 	call	0xd2c4	; 0xd2c4 <_ZN4Pads12isPadPressedEh>
    eb62:	81 11       	cpse	r24, r1
    eb64:	28 c0       	rjmp	.+80     	; 0xebb6 <_ZN4Pads25checkRemainingOctaveShiftEv+0xbe>
    eb66:	f8 01       	movw	r30, r16
    eb68:	37 97       	sbiw	r30, 0x07	; 7
    eb6a:	90 81       	ld	r25, Z
    eb6c:	90 38       	cpi	r25, 0x80	; 128
    eb6e:	49 f0       	breq	.+18     	; 0xeb82 <_ZN4Pads25checkRemainingOctaveShiftEv+0x8a>
    eb70:	d7 01       	movw	r26, r14
    eb72:	8c 91       	ld	r24, X
    eb74:	28 2f       	mov	r18, r24
    eb76:	22 0f       	add	r18, r18
    eb78:	82 0f       	add	r24, r18
    eb7a:	88 0f       	add	r24, r24
    eb7c:	88 0f       	add	r24, r24
    eb7e:	89 0f       	add	r24, r25
    eb80:	80 83       	st	Z, r24
    eb82:	31 96       	adiw	r30, 0x01	; 1
    eb84:	e0 17       	cp	r30, r16
    eb86:	f1 07       	cpc	r31, r17
    eb88:	81 f7       	brne	.-32     	; 0xeb6a <_ZN4Pads25checkRemainingOctaveShiftEv+0x72>
    eb8a:	d3 01       	movw	r26, r6
    eb8c:	c2 01       	movw	r24, r4
    eb8e:	0c 2e       	mov	r0, r28
    eb90:	04 c0       	rjmp	.+8      	; 0xeb9a <_ZN4Pads25checkRemainingOctaveShiftEv+0xa2>
    eb92:	88 0f       	add	r24, r24
    eb94:	99 1f       	adc	r25, r25
    eb96:	aa 1f       	adc	r26, r26
    eb98:	bb 1f       	adc	r27, r27
    eb9a:	0a 94       	dec	r0
    eb9c:	d2 f7       	brpl	.-12     	; 0xeb92 <_ZN4Pads25checkRemainingOctaveShiftEv+0x9a>
    eb9e:	80 95       	com	r24
    eba0:	90 95       	com	r25
    eba2:	d6 01       	movw	r26, r12
    eba4:	2d 91       	ld	r18, X+
    eba6:	3c 91       	ld	r19, X
    eba8:	11 97       	sbiw	r26, 0x01	; 1
    ebaa:	82 23       	and	r24, r18
    ebac:	93 23       	and	r25, r19
    ebae:	8d 93       	st	X+, r24
    ebb0:	9c 93       	st	X, r25
    ebb2:	f7 01       	movw	r30, r14
    ebb4:	10 82       	st	Z, r1
    ebb6:	21 96       	adiw	r28, 0x01	; 1
    ebb8:	ff ef       	ldi	r31, 0xFF	; 255
    ebba:	ef 1a       	sub	r14, r31
    ebbc:	ff 0a       	sbc	r15, r31
    ebbe:	09 5f       	subi	r16, 0xF9	; 249
    ebc0:	1f 4f       	sbci	r17, 0xFF	; 255
    ebc2:	c9 30       	cpi	r28, 0x09	; 9
    ebc4:	d1 05       	cpc	r29, r1
    ebc6:	09 f0       	breq	.+2      	; 0xebca <_ZN4Pads25checkRemainingOctaveShiftEv+0xd2>
    ebc8:	bd cf       	rjmp	.-134    	; 0xeb44 <_ZN4Pads25checkRemainingOctaveShiftEv+0x4c>
    ebca:	df 91       	pop	r29
    ebcc:	cf 91       	pop	r28
    ebce:	1f 91       	pop	r17
    ebd0:	0f 91       	pop	r16
    ebd2:	ff 90       	pop	r15
    ebd4:	ef 90       	pop	r14
    ebd6:	df 90       	pop	r13
    ebd8:	cf 90       	pop	r12
    ebda:	bf 90       	pop	r11
    ebdc:	af 90       	pop	r10
    ebde:	7f 90       	pop	r7
    ebe0:	6f 90       	pop	r6
    ebe2:	5f 90       	pop	r5
    ebe4:	4f 90       	pop	r4
    ebe6:	08 95       	ret

0000ebe8 <_ZN4Pads8setTonicE6note_tb>:
    ebe8:	2f 92       	push	r2
    ebea:	3f 92       	push	r3
    ebec:	4f 92       	push	r4
    ebee:	5f 92       	push	r5
    ebf0:	6f 92       	push	r6
    ebf2:	7f 92       	push	r7
    ebf4:	8f 92       	push	r8
    ebf6:	9f 92       	push	r9
    ebf8:	af 92       	push	r10
    ebfa:	bf 92       	push	r11
    ebfc:	cf 92       	push	r12
    ebfe:	df 92       	push	r13
    ec00:	ef 92       	push	r14
    ec02:	ff 92       	push	r15
    ec04:	0f 93       	push	r16
    ec06:	1f 93       	push	r17
    ec08:	cf 93       	push	r28
    ec0a:	df 93       	push	r29
    ec0c:	cd b7       	in	r28, 0x3d	; 61
    ec0e:	de b7       	in	r29, 0x3e	; 62
    ec10:	2a 97       	sbiw	r28, 0x0a	; 10
    ec12:	0f b6       	in	r0, 0x3f	; 63
    ec14:	f8 94       	cli
    ec16:	de bf       	out	0x3e, r29	; 62
    ec18:	0f be       	out	0x3f, r0	; 63
    ec1a:	cd bf       	out	0x3d, r28	; 61
    ec1c:	5c 01       	movw	r10, r24
    ec1e:	36 2e       	mov	r3, r22
    ec20:	84 2e       	mov	r8, r20
    ec22:	44 23       	and	r20, r20
    ec24:	39 f0       	breq	.+14     	; 0xec34 <_ZN4Pads8setTonicE6note_tb+0x4c>
    ec26:	fc 01       	movw	r30, r24
    ec28:	e1 5b       	subi	r30, 0xB1	; 177
    ec2a:	fe 4f       	sbci	r31, 0xFE	; 254
    ec2c:	60 81       	ld	r22, Z
    ec2e:	0e 94 43 69 	call	0xd286	; 0xd286 <_ZN4Pads16getTonicFromNoteEh>
    ec32:	02 c0       	rjmp	.+4      	; 0xec38 <_ZN4Pads8setTonicE6note_tb+0x50>
    ec34:	0e 94 53 68 	call	0xd0a6	; 0xd0a6 <_ZN4Pads14getActiveTonicEv>
    ec38:	8c 30       	cpi	r24, 0x0C	; 12
    ec3a:	09 f4       	brne	.+2      	; 0xec3e <_ZN4Pads8setTonicE6note_tb+0x56>
    ec3c:	f2 c0       	rjmp	.+484    	; 0xee22 <_ZN4Pads8setTonicE6note_tb+0x23a>
    ec3e:	03 2d       	mov	r16, r3
    ec40:	10 e0       	ldi	r17, 0x00	; 0
    ec42:	48 2f       	mov	r20, r24
    ec44:	50 e0       	ldi	r21, 0x00	; 0
    ec46:	40 1b       	sub	r20, r16
    ec48:	51 0b       	sbc	r21, r17
    ec4a:	9a 01       	movw	r18, r20
    ec4c:	22 f4       	brpl	.+8      	; 0xec56 <_ZN4Pads8setTonicE6note_tb+0x6e>
    ec4e:	22 27       	eor	r18, r18
    ec50:	33 27       	eor	r19, r19
    ec52:	24 1b       	sub	r18, r20
    ec54:	35 0b       	sbc	r19, r21
    ec56:	79 01       	movw	r14, r18
    ec58:	92 2e       	mov	r9, r18
    ec5a:	22 23       	and	r18, r18
    ec5c:	09 f4       	brne	.+2      	; 0xec60 <_ZN4Pads8setTonicE6note_tb+0x78>
    ec5e:	e3 c0       	rjmp	.+454    	; 0xee26 <_ZN4Pads8setTonicE6note_tb+0x23e>
    ec60:	66 24       	eor	r6, r6
    ec62:	63 94       	inc	r6
    ec64:	83 15       	cp	r24, r3
    ec66:	08 f0       	brcs	.+2      	; 0xec6a <_ZN4Pads8setTonicE6note_tb+0x82>
    ec68:	61 2c       	mov	r6, r1
    ec6a:	a5 01       	movw	r20, r10
    ec6c:	4a 5a       	subi	r20, 0xAA	; 170
    ec6e:	5e 4f       	sbci	r21, 0xFE	; 254
    ec70:	25 01       	movw	r4, r10
    ec72:	9f e5       	ldi	r25, 0x5F	; 95
    ec74:	49 1a       	sub	r4, r25
    ec76:	9d ef       	ldi	r25, 0xFD	; 253
    ec78:	59 0a       	sbc	r5, r25
    ec7a:	b5 01       	movw	r22, r10
    ec7c:	62 57       	subi	r22, 0x72	; 114
    ec7e:	7e 4f       	sbci	r23, 0xFE	; 254
    ec80:	d2 01       	movw	r26, r4
    ec82:	cc 24       	eor	r12, r12
    ec84:	c3 94       	inc	r12
    ec86:	ff 24       	eor	r15, r15
    ec88:	d1 2c       	mov	r13, r1
    ec8a:	06 c0       	rjmp	.+12     	; 0xec98 <_ZN4Pads8setTonicE6note_tb+0xb0>
    ec8c:	49 5f       	subi	r20, 0xF9	; 249
    ec8e:	5f 4f       	sbci	r21, 0xFF	; 255
    ec90:	11 96       	adiw	r26, 0x01	; 1
    ec92:	22 23       	and	r18, r18
    ec94:	09 f4       	brne	.+2      	; 0xec98 <_ZN4Pads8setTonicE6note_tb+0xb0>
    ec96:	c9 c0       	rjmp	.+402    	; 0xee2a <_ZN4Pads8setTonicE6note_tb+0x242>
    ec98:	fa 01       	movw	r30, r20
    ec9a:	37 97       	sbiw	r30, 0x07	; 7
    ec9c:	9c 2d       	mov	r25, r12
    ec9e:	66 20       	and	r6, r6
    eca0:	89 f0       	breq	.+34     	; 0xecc4 <_ZN4Pads8setTonicE6note_tb+0xdc>
    eca2:	70 80       	ld	r7, Z
    eca4:	2c 91       	ld	r18, X
    eca6:	02 2e       	mov	r0, r18
    eca8:	00 0c       	add	r0, r0
    ecaa:	33 0b       	sbc	r19, r19
    ecac:	27 0d       	add	r18, r7
    ecae:	31 1d       	adc	r19, r1
    ecb0:	20 38       	cpi	r18, 0x80	; 128
    ecb2:	31 05       	cpc	r19, r1
    ecb4:	b9 f0       	breq	.+46     	; 0xece4 <_ZN4Pads8setTonicE6note_tb+0xfc>
    ecb6:	2e 0d       	add	r18, r14
    ecb8:	3f 1d       	adc	r19, r15
    ecba:	20 38       	cpi	r18, 0x80	; 128
    ecbc:	31 05       	cpc	r19, r1
    ecbe:	94 f0       	brlt	.+36     	; 0xece4 <_ZN4Pads8setTonicE6note_tb+0xfc>
    ecc0:	9d 2d       	mov	r25, r13
    ecc2:	10 c0       	rjmp	.+32     	; 0xece4 <_ZN4Pads8setTonicE6note_tb+0xfc>
    ecc4:	38 16       	cp	r3, r24
    ecc6:	70 f4       	brcc	.+28     	; 0xece4 <_ZN4Pads8setTonicE6note_tb+0xfc>
    ecc8:	70 80       	ld	r7, Z
    ecca:	2c 91       	ld	r18, X
    eccc:	02 2e       	mov	r0, r18
    ecce:	00 0c       	add	r0, r0
    ecd0:	33 0b       	sbc	r19, r19
    ecd2:	27 0d       	add	r18, r7
    ecd4:	31 1d       	adc	r19, r1
    ecd6:	20 38       	cpi	r18, 0x80	; 128
    ecd8:	31 05       	cpc	r19, r1
    ecda:	21 f0       	breq	.+8      	; 0xece4 <_ZN4Pads8setTonicE6note_tb+0xfc>
    ecdc:	2e 19       	sub	r18, r14
    ecde:	3f 09       	sbc	r19, r15
    ece0:	0a f4       	brpl	.+2      	; 0xece4 <_ZN4Pads8setTonicE6note_tb+0xfc>
    ece2:	9d 2d       	mov	r25, r13
    ece4:	31 96       	adiw	r30, 0x01	; 1
    ece6:	e4 17       	cp	r30, r20
    ece8:	f5 07       	cpc	r31, r21
    ecea:	c9 f6       	brne	.-78     	; 0xec9e <_ZN4Pads8setTonicE6note_tb+0xb6>
    ecec:	29 2f       	mov	r18, r25
    ecee:	46 17       	cp	r20, r22
    ecf0:	57 07       	cpc	r21, r23
    ecf2:	61 f6       	brne	.-104    	; 0xec8c <_ZN4Pads8setTonicE6note_tb+0xa4>
    ecf4:	99 23       	and	r25, r25
    ecf6:	09 f4       	brne	.+2      	; 0xecfa <_ZN4Pads8setTonicE6note_tb+0x112>
    ecf8:	9a c0       	rjmp	.+308    	; 0xee2e <_ZN4Pads8setTonicE6note_tb+0x246>
    ecfa:	f5 01       	movw	r30, r10
    ecfc:	e4 56       	subi	r30, 0x64	; 100
    ecfe:	fe 4f       	sbci	r31, 0xFE	; 254
    ed00:	60 81       	ld	r22, Z
    ed02:	ef e3       	ldi	r30, 0x3F	; 63
    ed04:	6e 02       	muls	r22, r30
    ed06:	10 01       	movw	r2, r0
    ed08:	11 24       	eor	r1, r1
    ed0a:	c5 01       	movw	r24, r10
    ed0c:	0e 94 f7 68 	call	0xd1ee	; 0xd1ee <_ZN4Pads17isPredefinedScaleEh>
    ed10:	88 23       	and	r24, r24
    ed12:	19 f0       	breq	.+6      	; 0xed1a <_ZN4Pads8setTonicE6note_tb+0x132>
    ed14:	88 20       	and	r8, r8
    ed16:	09 f4       	brne	.+2      	; 0xed1a <_ZN4Pads8setTonicE6note_tb+0x132>
    ed18:	8c c0       	rjmp	.+280    	; 0xee32 <_ZN4Pads8setTonicE6note_tb+0x24a>
    ed1a:	f2 eb       	ldi	r31, 0xB2	; 178
    ed1c:	2f 1a       	sub	r2, r31
    ed1e:	f1 e0       	ldi	r31, 0x01	; 1
    ed20:	3f 0a       	sbc	r3, r31
    ed22:	c5 01       	movw	r24, r10
    ed24:	81 5b       	subi	r24, 0xB1	; 177
    ed26:	9e 4f       	sbci	r25, 0xFE	; 254
    ed28:	9c 83       	std	Y+4, r25	; 0x04
    ed2a:	8b 83       	std	Y+3, r24	; 0x03
    ed2c:	f1 2c       	mov	r15, r1
    ed2e:	1e 82       	std	Y+6, r1	; 0x06
    ed30:	1d 82       	std	Y+5, r1	; 0x05
    ed32:	f5 01       	movw	r30, r10
    ed34:	e6 55       	subi	r30, 0x56	; 86
    ed36:	fd 4f       	sbci	r31, 0xFD	; 253
    ed38:	f8 87       	std	Y+8, r31	; 0x08
    ed3a:	ef 83       	std	Y+7, r30	; 0x07
    ed3c:	83 5b       	subi	r24, 0xB3	; 179
    ed3e:	9f 4f       	sbci	r25, 0xFF	; 255
    ed40:	9a 83       	std	Y+2, r25	; 0x02
    ed42:	89 83       	std	Y+1, r24	; 0x01
    ed44:	6f 2d       	mov	r22, r15
    ed46:	c5 01       	movw	r24, r10
    ed48:	0e 94 62 69 	call	0xd2c4	; 0xd2c4 <_ZN4Pads12isPadPressedEh>
    ed4c:	88 23       	and	r24, r24
    ed4e:	09 f4       	brne	.+2      	; 0xed52 <_ZN4Pads8setTonicE6note_tb+0x16a>
    ed50:	8d c0       	rjmp	.+282    	; 0xee6c <_ZN4Pads8setTonicE6note_tb+0x284>
    ed52:	66 20       	and	r6, r6
    ed54:	29 f0       	breq	.+10     	; 0xed60 <_ZN4Pads8setTonicE6note_tb+0x178>
    ed56:	f2 01       	movw	r30, r4
    ed58:	80 81       	ld	r24, Z
    ed5a:	89 0d       	add	r24, r9
    ed5c:	80 83       	st	Z, r24
    ed5e:	04 c0       	rjmp	.+8      	; 0xed68 <_ZN4Pads8setTonicE6note_tb+0x180>
    ed60:	f2 01       	movw	r30, r4
    ed62:	80 81       	ld	r24, Z
    ed64:	89 19       	sub	r24, r9
    ed66:	80 83       	st	Z, r24
    ed68:	ef 81       	ldd	r30, Y+7	; 0x07
    ed6a:	f8 85       	ldd	r31, Y+8	; 0x08
    ed6c:	20 81       	ld	r18, Z
    ed6e:	31 81       	ldd	r19, Z+1	; 0x01
    ed70:	81 e0       	ldi	r24, 0x01	; 1
    ed72:	90 e0       	ldi	r25, 0x00	; 0
    ed74:	a0 e0       	ldi	r26, 0x00	; 0
    ed76:	b0 e0       	ldi	r27, 0x00	; 0
    ed78:	0d 80       	ldd	r0, Y+5	; 0x05
    ed7a:	04 c0       	rjmp	.+8      	; 0xed84 <_ZN4Pads8setTonicE6note_tb+0x19c>
    ed7c:	88 0f       	add	r24, r24
    ed7e:	99 1f       	adc	r25, r25
    ed80:	aa 1f       	adc	r26, r26
    ed82:	bb 1f       	adc	r27, r27
    ed84:	0a 94       	dec	r0
    ed86:	d2 f7       	brpl	.-12     	; 0xed7c <_ZN4Pads8setTonicE6note_tb+0x194>
    ed88:	82 2b       	or	r24, r18
    ed8a:	93 2b       	or	r25, r19
    ed8c:	91 83       	std	Z+1, r25	; 0x01
    ed8e:	80 83       	st	Z, r24
    ed90:	6d c0       	rjmp	.+218    	; 0xee6c <_ZN4Pads8setTonicE6note_tb+0x284>
    ed92:	e9 85       	ldd	r30, Y+9	; 0x09
    ed94:	fa 85       	ldd	r31, Y+10	; 0x0a
    ed96:	71 90       	ld	r7, Z+
    ed98:	fa 87       	std	Y+10, r31	; 0x0a
    ed9a:	e9 87       	std	Y+9, r30	; 0x09
    ed9c:	f2 01       	movw	r30, r4
    ed9e:	80 81       	ld	r24, Z
    eda0:	28 2f       	mov	r18, r24
    eda2:	08 2e       	mov	r0, r24
    eda4:	00 0c       	add	r0, r0
    eda6:	33 0b       	sbc	r19, r19
    eda8:	27 0d       	add	r18, r7
    edaa:	31 1d       	adc	r19, r1
    edac:	20 38       	cpi	r18, 0x80	; 128
    edae:	31 05       	cpc	r19, r1
    edb0:	e1 f0       	breq	.+56     	; 0xedea <_ZN4Pads8setTonicE6note_tb+0x202>
    edb2:	66 20       	and	r6, r6
    edb4:	19 f0       	breq	.+6      	; 0xedbc <_ZN4Pads8setTonicE6note_tb+0x1d4>
    edb6:	89 0d       	add	r24, r9
    edb8:	78 0e       	add	r7, r24
    edba:	02 c0       	rjmp	.+4      	; 0xedc0 <_ZN4Pads8setTonicE6note_tb+0x1d8>
    edbc:	89 19       	sub	r24, r9
    edbe:	78 0e       	add	r7, r24
    edc0:	e9 81       	ldd	r30, Y+1	; 0x01
    edc2:	fa 81       	ldd	r31, Y+2	; 0x02
    edc4:	60 81       	ld	r22, Z
    edc6:	c5 01       	movw	r24, r10
    edc8:	0e 94 f2 68 	call	0xd1e4	; 0xd1e4 <_ZN4Pads11isUserScaleEh>
    edcc:	88 23       	and	r24, r24
    edce:	19 f0       	breq	.+6      	; 0xedd6 <_ZN4Pads8setTonicE6note_tb+0x1ee>
    edd0:	88 20       	and	r8, r8
    edd2:	09 f4       	brne	.+2      	; 0xedd6 <_ZN4Pads8setTonicE6note_tb+0x1ee>
    edd4:	54 c0       	rjmp	.+168    	; 0xee7e <_ZN4Pads8setTonicE6note_tb+0x296>
    edd6:	6f 2d       	mov	r22, r15
    edd8:	c5 01       	movw	r24, r10
    edda:	0e 94 62 69 	call	0xd2c4	; 0xd2c4 <_ZN4Pads12isPadPressedEh>
    edde:	81 11       	cpse	r24, r1
    ede0:	04 c0       	rjmp	.+8      	; 0xedea <_ZN4Pads8setTonicE6note_tb+0x202>
    ede2:	e9 85       	ldd	r30, Y+9	; 0x09
    ede4:	fa 85       	ldd	r31, Y+10	; 0x0a
    ede6:	31 97       	sbiw	r30, 0x01	; 1
    ede8:	70 82       	st	Z, r7
    edea:	ff ef       	ldi	r31, 0xFF	; 255
    edec:	cf 1a       	sub	r12, r31
    edee:	df 0a       	sbc	r13, r31
    edf0:	c2 14       	cp	r12, r2
    edf2:	d3 04       	cpc	r13, r3
    edf4:	71 f6       	brne	.-100    	; 0xed92 <_ZN4Pads8setTonicE6note_tb+0x1aa>
    edf6:	8d 81       	ldd	r24, Y+5	; 0x05
    edf8:	9e 81       	ldd	r25, Y+6	; 0x06
    edfa:	01 96       	adiw	r24, 0x01	; 1
    edfc:	9e 83       	std	Y+6, r25	; 0x06
    edfe:	8d 83       	std	Y+5, r24	; 0x05
    ee00:	f3 94       	inc	r15
    ee02:	97 e0       	ldi	r25, 0x07	; 7
    ee04:	29 0e       	add	r2, r25
    ee06:	31 1c       	adc	r3, r1
    ee08:	eb 81       	ldd	r30, Y+3	; 0x03
    ee0a:	fc 81       	ldd	r31, Y+4	; 0x04
    ee0c:	37 96       	adiw	r30, 0x07	; 7
    ee0e:	fc 83       	std	Y+4, r31	; 0x04
    ee10:	eb 83       	std	Y+3, r30	; 0x03
    ee12:	ff ef       	ldi	r31, 0xFF	; 255
    ee14:	4f 1a       	sub	r4, r31
    ee16:	5f 0a       	sbc	r5, r31
    ee18:	89 e0       	ldi	r24, 0x09	; 9
    ee1a:	f8 12       	cpse	r15, r24
    ee1c:	93 cf       	rjmp	.-218    	; 0xed44 <_ZN4Pads8setTonicE6note_tb+0x15c>
    ee1e:	81 e0       	ldi	r24, 0x01	; 1
    ee20:	3a c0       	rjmp	.+116    	; 0xee96 <_ZN4Pads8setTonicE6note_tb+0x2ae>
    ee22:	80 e0       	ldi	r24, 0x00	; 0
    ee24:	38 c0       	rjmp	.+112    	; 0xee96 <_ZN4Pads8setTonicE6note_tb+0x2ae>
    ee26:	80 e0       	ldi	r24, 0x00	; 0
    ee28:	36 c0       	rjmp	.+108    	; 0xee96 <_ZN4Pads8setTonicE6note_tb+0x2ae>
    ee2a:	82 e0       	ldi	r24, 0x02	; 2
    ee2c:	34 c0       	rjmp	.+104    	; 0xee96 <_ZN4Pads8setTonicE6note_tb+0x2ae>
    ee2e:	82 e0       	ldi	r24, 0x02	; 2
    ee30:	32 c0       	rjmp	.+100    	; 0xee96 <_ZN4Pads8setTonicE6note_tb+0x2ae>
    ee32:	f5 01       	movw	r30, r10
    ee34:	e4 56       	subi	r30, 0x64	; 100
    ee36:	fe 4f       	sbci	r31, 0xFE	; 254
    ee38:	80 81       	ld	r24, Z
    ee3a:	08 2e       	mov	r0, r24
    ee3c:	00 0c       	add	r0, r0
    ee3e:	99 0b       	sbc	r25, r25
    ee40:	9c 01       	movw	r18, r24
    ee42:	22 0f       	add	r18, r18
    ee44:	33 1f       	adc	r19, r19
    ee46:	28 0f       	add	r18, r24
    ee48:	39 1f       	adc	r19, r25
    ee4a:	31 96       	adiw	r30, 0x01	; 1
    ee4c:	80 81       	ld	r24, Z
    ee4e:	95 e1       	ldi	r25, 0x15	; 21
    ee50:	89 02       	muls	r24, r25
    ee52:	20 0d       	add	r18, r0
    ee54:	31 1d       	adc	r19, r1
    ee56:	11 24       	eor	r1, r1
    ee58:	2f 5f       	subi	r18, 0xFF	; 255
    ee5a:	3f 4f       	sbci	r19, 0xFF	; 255
    ee5c:	e1 2c       	mov	r14, r1
    ee5e:	44 e0       	ldi	r20, 0x04	; 4
    ee60:	60 e0       	ldi	r22, 0x00	; 0
    ee62:	8c e0       	ldi	r24, 0x0C	; 12
    ee64:	92 e0       	ldi	r25, 0x02	; 2
    ee66:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN13Configuration14writeParameterEhhiib>
    ee6a:	57 cf       	rjmp	.-338    	; 0xed1a <_ZN4Pads8setTonicE6note_tb+0x132>
    ee6c:	61 01       	movw	r12, r2
    ee6e:	e7 e0       	ldi	r30, 0x07	; 7
    ee70:	ce 1a       	sub	r12, r30
    ee72:	d1 08       	sbc	r13, r1
    ee74:	0b 81       	ldd	r16, Y+3	; 0x03
    ee76:	1c 81       	ldd	r17, Y+4	; 0x04
    ee78:	1a 87       	std	Y+10, r17	; 0x0a
    ee7a:	09 87       	std	Y+9, r16	; 0x09
    ee7c:	8a cf       	rjmp	.-236    	; 0xed92 <_ZN4Pads8setTonicE6note_tb+0x1aa>
    ee7e:	07 2d       	mov	r16, r7
    ee80:	10 e0       	ldi	r17, 0x00	; 0
    ee82:	ee 24       	eor	r14, r14
    ee84:	e3 94       	inc	r14
    ee86:	96 01       	movw	r18, r12
    ee88:	40 e0       	ldi	r20, 0x00	; 0
    ee8a:	61 e0       	ldi	r22, 0x01	; 1
    ee8c:	8c e0       	ldi	r24, 0x0C	; 12
    ee8e:	92 e0       	ldi	r25, 0x02	; 2
    ee90:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN13Configuration14writeParameterEhhiib>
    ee94:	a0 cf       	rjmp	.-192    	; 0xedd6 <_ZN4Pads8setTonicE6note_tb+0x1ee>
    ee96:	2a 96       	adiw	r28, 0x0a	; 10
    ee98:	0f b6       	in	r0, 0x3f	; 63
    ee9a:	f8 94       	cli
    ee9c:	de bf       	out	0x3e, r29	; 62
    ee9e:	0f be       	out	0x3f, r0	; 63
    eea0:	cd bf       	out	0x3d, r28	; 61
    eea2:	df 91       	pop	r29
    eea4:	cf 91       	pop	r28
    eea6:	1f 91       	pop	r17
    eea8:	0f 91       	pop	r16
    eeaa:	ff 90       	pop	r15
    eeac:	ef 90       	pop	r14
    eeae:	df 90       	pop	r13
    eeb0:	cf 90       	pop	r12
    eeb2:	bf 90       	pop	r11
    eeb4:	af 90       	pop	r10
    eeb6:	9f 90       	pop	r9
    eeb8:	8f 90       	pop	r8
    eeba:	7f 90       	pop	r7
    eebc:	6f 90       	pop	r6
    eebe:	5f 90       	pop	r5
    eec0:	4f 90       	pop	r4
    eec2:	3f 90       	pop	r3
    eec4:	2f 90       	pop	r2
    eec6:	08 95       	ret

0000eec8 <_ZN4Pads23checkRemainingNoteShiftEv>:
    eec8:	4f 92       	push	r4
    eeca:	5f 92       	push	r5
    eecc:	6f 92       	push	r6
    eece:	7f 92       	push	r7
    eed0:	8f 92       	push	r8
    eed2:	9f 92       	push	r9
    eed4:	af 92       	push	r10
    eed6:	bf 92       	push	r11
    eed8:	cf 92       	push	r12
    eeda:	df 92       	push	r13
    eedc:	ef 92       	push	r14
    eede:	ff 92       	push	r15
    eee0:	0f 93       	push	r16
    eee2:	1f 93       	push	r17
    eee4:	cf 93       	push	r28
    eee6:	df 93       	push	r29
    eee8:	cd b7       	in	r28, 0x3d	; 61
    eeea:	de b7       	in	r29, 0x3e	; 62
    eeec:	ef 97       	sbiw	r28, 0x3f	; 63
    eeee:	0f b6       	in	r0, 0x3f	; 63
    eef0:	f8 94       	cli
    eef2:	de bf       	out	0x3e, r29	; 62
    eef4:	0f be       	out	0x3f, r0	; 63
    eef6:	cd bf       	out	0x3d, r28	; 61
    eef8:	8c 01       	movw	r16, r24
    eefa:	fc 01       	movw	r30, r24
    eefc:	e6 55       	subi	r30, 0x56	; 86
    eefe:	fd 4f       	sbci	r31, 0xFD	; 253
    ef00:	80 81       	ld	r24, Z
    ef02:	91 81       	ldd	r25, Z+1	; 0x01
    ef04:	89 2b       	or	r24, r25
    ef06:	09 f4       	brne	.+2      	; 0xef0a <_ZN4Pads23checkRemainingNoteShiftEv+0x42>
    ef08:	9d c0       	rjmp	.+314    	; 0xf044 <_ZN4Pads23checkRemainingNoteShiftEv+0x17c>
    ef0a:	40 e0       	ldi	r20, 0x00	; 0
    ef0c:	50 e0       	ldi	r21, 0x00	; 0
    ef0e:	0a c0       	rjmp	.+20     	; 0xef24 <_ZN4Pads23checkRemainingNoteShiftEv+0x5c>
    ef10:	91 91       	ld	r25, Z+
    ef12:	9d 93       	st	X+, r25
    ef14:	e2 17       	cp	r30, r18
    ef16:	f3 07       	cpc	r31, r19
    ef18:	d9 f7       	brne	.-10     	; 0xef10 <_ZN4Pads23checkRemainingNoteShiftEv+0x48>
    ef1a:	49 5f       	subi	r20, 0xF9	; 249
    ef1c:	5f 4f       	sbci	r21, 0xFF	; 255
    ef1e:	4f 33       	cpi	r20, 0x3F	; 63
    ef20:	51 05       	cpc	r21, r1
    ef22:	89 f0       	breq	.+34     	; 0xef46 <_ZN4Pads23checkRemainingNoteShiftEv+0x7e>
    ef24:	fa 01       	movw	r30, r20
    ef26:	e1 5b       	subi	r30, 0xB1	; 177
    ef28:	fe 4f       	sbci	r31, 0xFE	; 254
    ef2a:	e0 0f       	add	r30, r16
    ef2c:	f1 1f       	adc	r31, r17
    ef2e:	a1 e0       	ldi	r26, 0x01	; 1
    ef30:	b0 e0       	ldi	r27, 0x00	; 0
    ef32:	ac 0f       	add	r26, r28
    ef34:	bd 1f       	adc	r27, r29
    ef36:	a4 0f       	add	r26, r20
    ef38:	b5 1f       	adc	r27, r21
    ef3a:	9a 01       	movw	r18, r20
    ef3c:	2a 5a       	subi	r18, 0xAA	; 170
    ef3e:	3e 4f       	sbci	r19, 0xFE	; 254
    ef40:	20 0f       	add	r18, r16
    ef42:	31 1f       	adc	r19, r17
    ef44:	e5 cf       	rjmp	.-54     	; 0xef10 <_ZN4Pads23checkRemainingNoteShiftEv+0x48>
    ef46:	58 01       	movw	r10, r16
    ef48:	8f e5       	ldi	r24, 0x5F	; 95
    ef4a:	a8 1a       	sub	r10, r24
    ef4c:	8d ef       	ldi	r24, 0xFD	; 253
    ef4e:	b8 0a       	sbc	r11, r24
    ef50:	68 01       	movw	r12, r16
    ef52:	9a ea       	ldi	r25, 0xAA	; 170
    ef54:	c9 1a       	sub	r12, r25
    ef56:	9e ef       	ldi	r25, 0xFE	; 254
    ef58:	d9 0a       	sbc	r13, r25
    ef5a:	e1 2c       	mov	r14, r1
    ef5c:	f1 2c       	mov	r15, r1
    ef5e:	48 01       	movw	r8, r16
    ef60:	a6 e5       	ldi	r26, 0x56	; 86
    ef62:	8a 1a       	sub	r8, r26
    ef64:	ad ef       	ldi	r26, 0xFD	; 253
    ef66:	9a 0a       	sbc	r9, r26
    ef68:	41 2c       	mov	r4, r1
    ef6a:	51 2c       	mov	r5, r1
    ef6c:	32 01       	movw	r6, r4
    ef6e:	43 94       	inc	r4
    ef70:	f4 01       	movw	r30, r8
    ef72:	80 81       	ld	r24, Z
    ef74:	91 81       	ldd	r25, Z+1	; 0x01
    ef76:	0e 2c       	mov	r0, r14
    ef78:	02 c0       	rjmp	.+4      	; 0xef7e <_ZN4Pads23checkRemainingNoteShiftEv+0xb6>
    ef7a:	96 95       	lsr	r25
    ef7c:	87 95       	ror	r24
    ef7e:	0a 94       	dec	r0
    ef80:	e2 f7       	brpl	.-8      	; 0xef7a <_ZN4Pads23checkRemainingNoteShiftEv+0xb2>
    ef82:	80 ff       	sbrs	r24, 0
    ef84:	28 c0       	rjmp	.+80     	; 0xefd6 <_ZN4Pads23checkRemainingNoteShiftEv+0x10e>
    ef86:	6e 2d       	mov	r22, r14
    ef88:	c8 01       	movw	r24, r16
    ef8a:	0e 94 62 69 	call	0xd2c4	; 0xd2c4 <_ZN4Pads12isPadPressedEh>
    ef8e:	81 11       	cpse	r24, r1
    ef90:	22 c0       	rjmp	.+68     	; 0xefd6 <_ZN4Pads23checkRemainingNoteShiftEv+0x10e>
    ef92:	f6 01       	movw	r30, r12
    ef94:	37 97       	sbiw	r30, 0x07	; 7
    ef96:	90 81       	ld	r25, Z
    ef98:	90 38       	cpi	r25, 0x80	; 128
    ef9a:	21 f0       	breq	.+8      	; 0xefa4 <_ZN4Pads23checkRemainingNoteShiftEv+0xdc>
    ef9c:	d5 01       	movw	r26, r10
    ef9e:	8c 91       	ld	r24, X
    efa0:	89 0f       	add	r24, r25
    efa2:	80 83       	st	Z, r24
    efa4:	31 96       	adiw	r30, 0x01	; 1
    efa6:	ce 16       	cp	r12, r30
    efa8:	df 06       	cpc	r13, r31
    efaa:	a9 f7       	brne	.-22     	; 0xef96 <_ZN4Pads23checkRemainingNoteShiftEv+0xce>
    efac:	d3 01       	movw	r26, r6
    efae:	c2 01       	movw	r24, r4
    efb0:	0e 2c       	mov	r0, r14
    efb2:	04 c0       	rjmp	.+8      	; 0xefbc <_ZN4Pads23checkRemainingNoteShiftEv+0xf4>
    efb4:	88 0f       	add	r24, r24
    efb6:	99 1f       	adc	r25, r25
    efb8:	aa 1f       	adc	r26, r26
    efba:	bb 1f       	adc	r27, r27
    efbc:	0a 94       	dec	r0
    efbe:	d2 f7       	brpl	.-12     	; 0xefb4 <_ZN4Pads23checkRemainingNoteShiftEv+0xec>
    efc0:	80 95       	com	r24
    efc2:	90 95       	com	r25
    efc4:	f4 01       	movw	r30, r8
    efc6:	20 81       	ld	r18, Z
    efc8:	31 81       	ldd	r19, Z+1	; 0x01
    efca:	82 23       	and	r24, r18
    efcc:	93 23       	and	r25, r19
    efce:	91 83       	std	Z+1, r25	; 0x01
    efd0:	80 83       	st	Z, r24
    efd2:	d5 01       	movw	r26, r10
    efd4:	1c 92       	st	X, r1
    efd6:	bf ef       	ldi	r27, 0xFF	; 255
    efd8:	eb 1a       	sub	r14, r27
    efda:	fb 0a       	sbc	r15, r27
    efdc:	ef ef       	ldi	r30, 0xFF	; 255
    efde:	ae 1a       	sub	r10, r30
    efe0:	be 0a       	sbc	r11, r30
    efe2:	f7 e0       	ldi	r31, 0x07	; 7
    efe4:	cf 0e       	add	r12, r31
    efe6:	d1 1c       	adc	r13, r1
    efe8:	89 e0       	ldi	r24, 0x09	; 9
    efea:	e8 16       	cp	r14, r24
    efec:	f1 04       	cpc	r15, r1
    efee:	09 f0       	breq	.+2      	; 0xeff2 <_ZN4Pads23checkRemainingNoteShiftEv+0x12a>
    eff0:	bf cf       	rjmp	.-130    	; 0xef70 <_ZN4Pads23checkRemainingNoteShiftEv+0xa8>
    eff2:	de 01       	movw	r26, r28
    eff4:	11 96       	adiw	r26, 0x01	; 1
    eff6:	7d 01       	movw	r14, r26
    eff8:	4e 01       	movw	r8, r28
    effa:	b0 e4       	ldi	r27, 0x40	; 64
    effc:	8b 0e       	add	r8, r27
    effe:	91 1c       	adc	r9, r1
    f000:	1c c0       	rjmp	.+56     	; 0xf03a <_ZN4Pads23checkRemainingNoteShiftEv+0x172>
    f002:	f7 01       	movw	r30, r14
    f004:	61 91       	ld	r22, Z+
    f006:	7f 01       	movw	r14, r30
    f008:	60 38       	cpi	r22, 0x80	; 128
    f00a:	81 f0       	breq	.+32     	; 0xf02c <_ZN4Pads23checkRemainingNoteShiftEv+0x164>
    f00c:	c8 01       	movw	r24, r16
    f00e:	0e 94 43 69 	call	0xd286	; 0xd286 <_ZN4Pads16getTonicFromNoteEh>
    f012:	b8 2e       	mov	r11, r24
    f014:	68 2f       	mov	r22, r24
    f016:	c8 01       	movw	r24, r16
    f018:	0e 94 10 69 	call	0xd220	; 0xd220 <_ZN4Pads10noteActiveE6note_t>
    f01c:	81 11       	cpse	r24, r1
    f01e:	06 c0       	rjmp	.+12     	; 0xf02c <_ZN4Pads23checkRemainingNoteShiftEv+0x164>
    f020:	40 e0       	ldi	r20, 0x00	; 0
    f022:	6b 2d       	mov	r22, r11
    f024:	80 ed       	ldi	r24, 0xD0	; 208
    f026:	9e e0       	ldi	r25, 0x0E	; 14
    f028:	0e 94 94 46 	call	0x8d28	; 0x8d28 <_ZN4LEDs15setNoteLEDstateE6note_t10ledState_t>
    f02c:	ec 14       	cp	r14, r12
    f02e:	fd 04       	cpc	r15, r13
    f030:	41 f7       	brne	.-48     	; 0xf002 <_ZN4Pads23checkRemainingNoteShiftEv+0x13a>
    f032:	76 01       	movw	r14, r12
    f034:	8c 14       	cp	r8, r12
    f036:	9d 04       	cpc	r9, r13
    f038:	29 f0       	breq	.+10     	; 0xf044 <_ZN4Pads23checkRemainingNoteShiftEv+0x17c>
    f03a:	67 01       	movw	r12, r14
    f03c:	f7 e0       	ldi	r31, 0x07	; 7
    f03e:	cf 0e       	add	r12, r31
    f040:	d1 1c       	adc	r13, r1
    f042:	df cf       	rjmp	.-66     	; 0xf002 <_ZN4Pads23checkRemainingNoteShiftEv+0x13a>
    f044:	ef 96       	adiw	r28, 0x3f	; 63
    f046:	0f b6       	in	r0, 0x3f	; 63
    f048:	f8 94       	cli
    f04a:	de bf       	out	0x3e, r29	; 62
    f04c:	0f be       	out	0x3f, r0	; 63
    f04e:	cd bf       	out	0x3d, r28	; 61
    f050:	df 91       	pop	r29
    f052:	cf 91       	pop	r28
    f054:	1f 91       	pop	r17
    f056:	0f 91       	pop	r16
    f058:	ff 90       	pop	r15
    f05a:	ef 90       	pop	r14
    f05c:	df 90       	pop	r13
    f05e:	cf 90       	pop	r12
    f060:	bf 90       	pop	r11
    f062:	af 90       	pop	r10
    f064:	9f 90       	pop	r9
    f066:	8f 90       	pop	r8
    f068:	7f 90       	pop	r7
    f06a:	6f 90       	pop	r6
    f06c:	5f 90       	pop	r5
    f06e:	4f 90       	pop	r4
    f070:	08 95       	ret

0000f072 <_ZN4Pads13midiSendOnOffE7onOff_t>:
    f072:	df 92       	push	r13
    f074:	ef 92       	push	r14
    f076:	ff 92       	push	r15
    f078:	0f 93       	push	r16
    f07a:	1f 93       	push	r17
    f07c:	cf 93       	push	r28
    f07e:	df 93       	push	r29
    f080:	61 30       	cpi	r22, 0x01	; 1
    f082:	a9 f0       	breq	.+42     	; 0xf0ae <_ZN4Pads13midiSendOnOffE7onOff_t+0x3c>
    f084:	28 f0       	brcs	.+10     	; 0xf090 <_ZN4Pads13midiSendOnOffE7onOff_t+0x1e>
    f086:	62 30       	cpi	r22, 0x02	; 2
    f088:	41 f0       	breq	.+16     	; 0xf09a <_ZN4Pads13midiSendOnOffE7onOff_t+0x28>
    f08a:	63 30       	cpi	r22, 0x03	; 3
    f08c:	59 f0       	breq	.+22     	; 0xf0a4 <_ZN4Pads13midiSendOnOffE7onOff_t+0x32>
    f08e:	60 c0       	rjmp	.+192    	; 0xf150 <_ZN4Pads13midiSendOnOffE7onOff_t+0xde>
    f090:	7c 01       	movw	r14, r24
    f092:	2b e9       	ldi	r18, 0x9B	; 155
    f094:	e2 0e       	add	r14, r18
    f096:	f1 1c       	adc	r15, r1
    f098:	0e c0       	rjmp	.+28     	; 0xf0b6 <_ZN4Pads13midiSendOnOffE7onOff_t+0x44>
    f09a:	7c 01       	movw	r14, r24
    f09c:	e9 e8       	ldi	r30, 0x89	; 137
    f09e:	ee 0e       	add	r14, r30
    f0a0:	f1 1c       	adc	r15, r1
    f0a2:	09 c0       	rjmp	.+18     	; 0xf0b6 <_ZN4Pads13midiSendOnOffE7onOff_t+0x44>
    f0a4:	7c 01       	movw	r14, r24
    f0a6:	f2 e9       	ldi	r31, 0x92	; 146
    f0a8:	ef 0e       	add	r14, r31
    f0aa:	f1 1c       	adc	r15, r1
    f0ac:	04 c0       	rjmp	.+8      	; 0xf0b6 <_ZN4Pads13midiSendOnOffE7onOff_t+0x44>
    f0ae:	7c 01       	movw	r14, r24
    f0b0:	24 ea       	ldi	r18, 0xA4	; 164
    f0b2:	e2 0e       	add	r14, r18
    f0b4:	f1 1c       	adc	r15, r1
    f0b6:	d6 2f       	mov	r29, r22
    f0b8:	8c 01       	movw	r16, r24
    f0ba:	fc 01       	movw	r30, r24
    f0bc:	e7 56       	subi	r30, 0x67	; 103
    f0be:	fe 4f       	sbci	r31, 0xFE	; 254
    f0c0:	80 81       	ld	r24, Z
    f0c2:	81 11       	cpse	r24, r1
    f0c4:	24 c0       	rjmp	.+72     	; 0xf10e <_ZN4Pads13midiSendOnOffE7onOff_t+0x9c>
    f0c6:	f7 01       	movw	r30, r14
    f0c8:	e0 80       	ld	r14, Z
    f0ca:	81 e0       	ldi	r24, 0x01	; 1
    f0cc:	fe 2c       	mov	r15, r14
    f0ce:	f8 26       	eor	r15, r24
    f0d0:	c0 e0       	ldi	r28, 0x00	; 0
    f0d2:	2f 2d       	mov	r18, r15
    f0d4:	4c 2f       	mov	r20, r28
    f0d6:	6d 2f       	mov	r22, r29
    f0d8:	c8 01       	movw	r24, r16
    f0da:	0e 94 94 6c 	call	0xd928	; 0xd928 <_ZN4Pads16setMIDISendStateE7onOff_thb>
    f0de:	cf 5f       	subi	r28, 0xFF	; 255
    f0e0:	c9 30       	cpi	r28, 0x09	; 9
    f0e2:	b9 f7       	brne	.-18     	; 0xf0d2 <_ZN4Pads13midiSendOnOffE7onOff_t+0x60>
    f0e4:	ee 20       	and	r14, r14
    f0e6:	a1 f1       	breq	.+104    	; 0xf150 <_ZN4Pads13midiSendOnOffE7onOff_t+0xde>
    f0e8:	d1 11       	cpse	r29, r1
    f0ea:	32 c0       	rjmp	.+100    	; 0xf150 <_ZN4Pads13midiSendOnOffE7onOff_t+0xde>
    f0ec:	c0 e0       	ldi	r28, 0x00	; 0
    f0ee:	6c 2f       	mov	r22, r28
    f0f0:	c8 01       	movw	r24, r16
    f0f2:	0e 94 62 69 	call	0xd2c4	; 0xd2c4 <_ZN4Pads12isPadPressedEh>
    f0f6:	88 23       	and	r24, r24
    f0f8:	31 f0       	breq	.+12     	; 0xf106 <_ZN4Pads13midiSendOnOffE7onOff_t+0x94>
    f0fa:	20 e0       	ldi	r18, 0x00	; 0
    f0fc:	40 e0       	ldi	r20, 0x00	; 0
    f0fe:	6c 2f       	mov	r22, r28
    f100:	c8 01       	movw	r24, r16
    f102:	0e 94 eb 4a 	call	0x95d6	; 0x95d6 <_ZN4Pads9sendNotesEhhb>
    f106:	cf 5f       	subi	r28, 0xFF	; 255
    f108:	c9 30       	cpi	r28, 0x09	; 9
    f10a:	89 f7       	brne	.-30     	; 0xf0ee <_ZN4Pads13midiSendOnOffE7onOff_t+0x7c>
    f10c:	21 c0       	rjmp	.+66     	; 0xf150 <_ZN4Pads13midiSendOnOffE7onOff_t+0xde>
    f10e:	c8 01       	movw	r24, r16
    f110:	0e 94 38 69 	call	0xd270	; 0xd270 <_ZN4Pads17getLastTouchedPadEv>
    f114:	d8 2e       	mov	r13, r24
    f116:	f7 01       	movw	r30, r14
    f118:	e8 0f       	add	r30, r24
    f11a:	f1 1d       	adc	r31, r1
    f11c:	c0 81       	ld	r28, Z
    f11e:	21 e0       	ldi	r18, 0x01	; 1
    f120:	2c 27       	eor	r18, r28
    f122:	48 2f       	mov	r20, r24
    f124:	6d 2f       	mov	r22, r29
    f126:	c8 01       	movw	r24, r16
    f128:	0e 94 94 6c 	call	0xd928	; 0xd928 <_ZN4Pads16setMIDISendStateE7onOff_thb>
    f12c:	cc 23       	and	r28, r28
    f12e:	81 f0       	breq	.+32     	; 0xf150 <_ZN4Pads13midiSendOnOffE7onOff_t+0xde>
    f130:	d1 11       	cpse	r29, r1
    f132:	0e c0       	rjmp	.+28     	; 0xf150 <_ZN4Pads13midiSendOnOffE7onOff_t+0xde>
    f134:	c0 e0       	ldi	r28, 0x00	; 0
    f136:	6c 2f       	mov	r22, r28
    f138:	c8 01       	movw	r24, r16
    f13a:	0e 94 62 69 	call	0xd2c4	; 0xd2c4 <_ZN4Pads12isPadPressedEh>
    f13e:	cf 5f       	subi	r28, 0xFF	; 255
    f140:	c9 30       	cpi	r28, 0x09	; 9
    f142:	c9 f7       	brne	.-14     	; 0xf136 <_ZN4Pads13midiSendOnOffE7onOff_t+0xc4>
    f144:	20 e0       	ldi	r18, 0x00	; 0
    f146:	40 e0       	ldi	r20, 0x00	; 0
    f148:	6d 2d       	mov	r22, r13
    f14a:	c8 01       	movw	r24, r16
    f14c:	0e 94 eb 4a 	call	0x95d6	; 0x95d6 <_ZN4Pads9sendNotesEhhb>
    f150:	df 91       	pop	r29
    f152:	cf 91       	pop	r28
    f154:	1f 91       	pop	r17
    f156:	0f 91       	pop	r16
    f158:	ff 90       	pop	r15
    f15a:	ef 90       	pop	r14
    f15c:	df 90       	pop	r13
    f15e:	08 95       	ret

0000f160 <_ZN4Pads15setFunctionLEDsEh>:

}

void Pads::setFunctionLEDs(uint8_t padNumber)   {
    f160:	1f 93       	push	r17
    f162:	cf 93       	push	r28
    f164:	df 93       	push	r29

    #ifdef MODULE_LEDS
        if (splitEnabled)  {
    f166:	fc 01       	movw	r30, r24
    f168:	e7 56       	subi	r30, 0x67	; 103
    f16a:	fe 4f       	sbci	r31, 0xFE	; 254
    f16c:	20 81       	ld	r18, Z
    f16e:	22 23       	and	r18, r18
    f170:	09 f4       	brne	.+2      	; 0xf174 <_ZN4Pads15setFunctionLEDsEh+0x14>
    f172:	56 c0       	rjmp	.+172    	; 0xf220 <_ZN4Pads15setFunctionLEDsEh+0xc0>
    f174:	16 2f       	mov	r17, r22
    f176:	ec 01       	movw	r28, r24

            //split is on
            //turn off function LEDs first
            leds.setLEDstate(LED_ON_OFF_AFTERTOUCH, ledStateOff);
    f178:	40 e0       	ldi	r20, 0x00	; 0
    f17a:	61 e0       	ldi	r22, 0x01	; 1
    f17c:	80 ed       	ldi	r24, 0xD0	; 208
    f17e:	9e e0       	ldi	r25, 0x0E	; 14
    f180:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
            leds.setLEDstate(LED_ON_OFF_NOTES, ledStateOff);
    f184:	40 e0       	ldi	r20, 0x00	; 0
    f186:	62 e0       	ldi	r22, 0x02	; 2
    f188:	80 ed       	ldi	r24, 0xD0	; 208
    f18a:	9e e0       	ldi	r25, 0x0E	; 14
    f18c:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
            leds.setLEDstate(LED_ON_OFF_X, ledStateOff);
    f190:	40 e0       	ldi	r20, 0x00	; 0
    f192:	63 e0       	ldi	r22, 0x03	; 3
    f194:	80 ed       	ldi	r24, 0xD0	; 208
    f196:	9e e0       	ldi	r25, 0x0E	; 14
    f198:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
            leds.setLEDstate(LED_ON_OFF_Y, ledStateOff);
    f19c:	40 e0       	ldi	r20, 0x00	; 0
    f19e:	60 e0       	ldi	r22, 0x00	; 0
    f1a0:	80 ed       	ldi	r24, 0xD0	; 208
    f1a2:	9e e0       	ldi	r25, 0x0E	; 14
    f1a4:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>

            //turn on feature LEDs depending on enabled features for last touched pad
            leds.setLEDstate(LED_ON_OFF_AFTERTOUCH, getMIDISendState(onOff_aftertouch, padNumber) ? ledStateFull : ledStateOff);
    f1a8:	41 2f       	mov	r20, r17
    f1aa:	61 e0       	ldi	r22, 0x01	; 1
    f1ac:	ce 01       	movw	r24, r28
    f1ae:	0e 94 bc 67 	call	0xcf78	; 0xcf78 <_ZN4Pads16getMIDISendStateE7onOff_th>
    f1b2:	81 11       	cpse	r24, r1
    f1b4:	02 c0       	rjmp	.+4      	; 0xf1ba <_ZN4Pads15setFunctionLEDsEh+0x5a>
    f1b6:	40 e0       	ldi	r20, 0x00	; 0
    f1b8:	01 c0       	rjmp	.+2      	; 0xf1bc <_ZN4Pads15setFunctionLEDsEh+0x5c>
    f1ba:	42 e0       	ldi	r20, 0x02	; 2
    f1bc:	61 e0       	ldi	r22, 0x01	; 1
    f1be:	80 ed       	ldi	r24, 0xD0	; 208
    f1c0:	9e e0       	ldi	r25, 0x0E	; 14
    f1c2:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
            leds.setLEDstate(LED_ON_OFF_NOTES, getMIDISendState(onOff_aftertouch, padNumber) ? ledStateFull : ledStateOff);
    f1c6:	41 2f       	mov	r20, r17
    f1c8:	61 e0       	ldi	r22, 0x01	; 1
    f1ca:	ce 01       	movw	r24, r28
    f1cc:	0e 94 bc 67 	call	0xcf78	; 0xcf78 <_ZN4Pads16getMIDISendStateE7onOff_th>
    f1d0:	81 11       	cpse	r24, r1
    f1d2:	02 c0       	rjmp	.+4      	; 0xf1d8 <_ZN4Pads15setFunctionLEDsEh+0x78>
    f1d4:	40 e0       	ldi	r20, 0x00	; 0
    f1d6:	01 c0       	rjmp	.+2      	; 0xf1da <_ZN4Pads15setFunctionLEDsEh+0x7a>
    f1d8:	42 e0       	ldi	r20, 0x02	; 2
    f1da:	62 e0       	ldi	r22, 0x02	; 2
    f1dc:	80 ed       	ldi	r24, 0xD0	; 208
    f1de:	9e e0       	ldi	r25, 0x0E	; 14
    f1e0:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
            leds.setLEDstate(LED_ON_OFF_X, getMIDISendState(onOff_x, padNumber) ? ledStateFull : ledStateOff);
    f1e4:	41 2f       	mov	r20, r17
    f1e6:	62 e0       	ldi	r22, 0x02	; 2
    f1e8:	ce 01       	movw	r24, r28
    f1ea:	0e 94 bc 67 	call	0xcf78	; 0xcf78 <_ZN4Pads16getMIDISendStateE7onOff_th>
    f1ee:	81 11       	cpse	r24, r1
    f1f0:	02 c0       	rjmp	.+4      	; 0xf1f6 <_ZN4Pads15setFunctionLEDsEh+0x96>
    f1f2:	40 e0       	ldi	r20, 0x00	; 0
    f1f4:	01 c0       	rjmp	.+2      	; 0xf1f8 <_ZN4Pads15setFunctionLEDsEh+0x98>
    f1f6:	42 e0       	ldi	r20, 0x02	; 2
    f1f8:	63 e0       	ldi	r22, 0x03	; 3
    f1fa:	80 ed       	ldi	r24, 0xD0	; 208
    f1fc:	9e e0       	ldi	r25, 0x0E	; 14
    f1fe:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>
            leds.setLEDstate(LED_ON_OFF_Y, getMIDISendState(onOff_y, padNumber) ? ledStateFull : ledStateOff);
    f202:	41 2f       	mov	r20, r17
    f204:	63 e0       	ldi	r22, 0x03	; 3
    f206:	ce 01       	movw	r24, r28
    f208:	0e 94 bc 67 	call	0xcf78	; 0xcf78 <_ZN4Pads16getMIDISendStateE7onOff_th>
    f20c:	81 11       	cpse	r24, r1
    f20e:	02 c0       	rjmp	.+4      	; 0xf214 <_ZN4Pads15setFunctionLEDsEh+0xb4>
    f210:	40 e0       	ldi	r20, 0x00	; 0
    f212:	01 c0       	rjmp	.+2      	; 0xf216 <_ZN4Pads15setFunctionLEDsEh+0xb6>
    f214:	42 e0       	ldi	r20, 0x02	; 2
    f216:	60 e0       	ldi	r22, 0x00	; 0
    f218:	80 ed       	ldi	r24, 0xD0	; 208
    f21a:	9e e0       	ldi	r25, 0x0E	; 14
    f21c:	0e 94 6f 46 	call	0x8cde	; 0x8cde <_ZN4LEDs11setLEDstateEh10ledState_t>

        }
    #endif

    f220:	df 91       	pop	r29
    f222:	cf 91       	pop	r28
    f224:	1f 91       	pop	r17
    f226:	08 95       	ret

0000f228 <_ZN5SysExC1Ev>:

bool SysEx::configurationEnabled()  {

    return sysExEnabled;

}
    f228:	fc 01       	movw	r30, r24
    f22a:	11 82       	std	Z+1, r1	; 0x01
    f22c:	10 82       	st	Z, r1
    f22e:	13 82       	std	Z+3, r1	; 0x03
    f230:	12 82       	std	Z+2, r1	; 0x02
    f232:	15 82       	std	Z+5, r1	; 0x05
    f234:	14 82       	std	Z+4, r1	; 0x04
    f236:	17 82       	std	Z+7, r1	; 0x07
    f238:	16 82       	std	Z+6, r1	; 0x06
    f23a:	11 86       	std	Z+9, r1	; 0x09
    f23c:	10 86       	std	Z+8, r1	; 0x08
    f23e:	12 86       	std	Z+10, r1	; 0x0a
    f240:	ac 01       	movw	r20, r24
    f242:	4e 5e       	subi	r20, 0xEE	; 238
    f244:	5f 4f       	sbci	r21, 0xFF	; 255
    f246:	bc 01       	movw	r22, r24
    f248:	6c 51       	subi	r22, 0x1C	; 28
    f24a:	7f 4f       	sbci	r23, 0xFF	; 255
    f24c:	80 e8       	ldi	r24, 0x80	; 128
    f24e:	fa 01       	movw	r30, r20
    f250:	35 97       	sbiw	r30, 0x05	; 5
    f252:	80 83       	st	Z, r24
    f254:	31 96       	adiw	r30, 0x01	; 1
    f256:	80 83       	st	Z, r24
    f258:	9a 01       	movw	r18, r20
    f25a:	24 5e       	subi	r18, 0xE4	; 228
    f25c:	3f 4f       	sbci	r19, 0xFF	; 255
    f25e:	fa 01       	movw	r30, r20
    f260:	df 01       	movw	r26, r30
    f262:	13 97       	sbiw	r26, 0x03	; 3
    f264:	8c 93       	st	X, r24
    f266:	11 96       	adiw	r26, 0x01	; 1
    f268:	8c 93       	st	X, r24
    f26a:	11 96       	adiw	r26, 0x01	; 1
    f26c:	8c 93       	st	X, r24
    f26e:	80 83       	st	Z, r24
    f270:	34 96       	adiw	r30, 0x04	; 4
    f272:	e2 17       	cp	r30, r18
    f274:	f3 07       	cpc	r31, r19
    f276:	a1 f7       	brne	.-24     	; 0xf260 <_ZN5SysExC1Ev+0x38>
    f278:	42 5e       	subi	r20, 0xE2	; 226
    f27a:	5f 4f       	sbci	r21, 0xFF	; 255
    f27c:	46 17       	cp	r20, r22
    f27e:	57 07       	cpc	r21, r23
    f280:	31 f7       	brne	.-52     	; 0xf24e <_ZN5SysExC1Ev+0x26>
    f282:	08 95       	ret

0000f284 <_ZN5SysEx11disableConfEv>:
    f284:	fc 01       	movw	r30, r24
    f286:	12 86       	std	Z+10, r1	; 0x0a
    f288:	08 95       	ret

0000f28a <_ZN5SysEx7checkIDE19sysExManufacturerID>:
    f28a:	41 11       	cpse	r20, r1
    f28c:	07 c0       	rjmp	.+14     	; 0xf29c <_ZN5SysEx7checkIDE19sysExManufacturerID+0x12>
    f28e:	53 35       	cpi	r21, 0x53	; 83
    f290:	39 f4       	brne	.+14     	; 0xf2a0 <_ZN5SysEx7checkIDE19sysExManufacturerID+0x16>
    f292:	81 e0       	ldi	r24, 0x01	; 1
    f294:	63 34       	cpi	r22, 0x43	; 67
    f296:	29 f0       	breq	.+10     	; 0xf2a2 <_ZN5SysEx7checkIDE19sysExManufacturerID+0x18>
    f298:	80 e0       	ldi	r24, 0x00	; 0
    f29a:	08 95       	ret
    f29c:	80 e0       	ldi	r24, 0x00	; 0
    f29e:	08 95       	ret
    f2a0:	80 e0       	ldi	r24, 0x00	; 0
    f2a2:	08 95       	ret

0000f2a4 <_ZN5SysEx10checkBlockEh>:
    f2a4:	fc 01       	movw	r30, r24
    f2a6:	2e e1       	ldi	r18, 0x1E	; 30
    f2a8:	62 9f       	mul	r22, r18
    f2aa:	e0 0d       	add	r30, r0
    f2ac:	f1 1d       	adc	r31, r1
    f2ae:	11 24       	eor	r1, r1
    f2b0:	81 e0       	ldi	r24, 0x01	; 1
    f2b2:	95 85       	ldd	r25, Z+13	; 0x0d
    f2b4:	69 13       	cpse	r22, r25
    f2b6:	80 e0       	ldi	r24, 0x00	; 0
    f2b8:	08 95       	ret

0000f2ba <_ZN5SysEx17checkNewParameterEhhhh>:
    f2ba:	0f 93       	push	r16
    f2bc:	e4 2f       	mov	r30, r20
    f2be:	f0 e0       	ldi	r31, 0x00	; 0
    f2c0:	2e e1       	ldi	r18, 0x1E	; 30
    f2c2:	62 9f       	mul	r22, r18
    f2c4:	b0 01       	movw	r22, r0
    f2c6:	11 24       	eor	r1, r1
    f2c8:	db 01       	movw	r26, r22
    f2ca:	24 e0       	ldi	r18, 0x04	; 4
    f2cc:	42 9f       	mul	r20, r18
    f2ce:	a0 0d       	add	r26, r0
    f2d0:	b1 1d       	adc	r27, r1
    f2d2:	11 24       	eor	r1, r1
    f2d4:	a8 0f       	add	r26, r24
    f2d6:	b9 1f       	adc	r27, r25
    f2d8:	50 96       	adiw	r26, 0x10	; 16
    f2da:	2c 91       	ld	r18, X
    f2dc:	31 96       	adiw	r30, 0x01	; 1
    f2de:	ee 0f       	add	r30, r30
    f2e0:	ff 1f       	adc	r31, r31
    f2e2:	ee 0f       	add	r30, r30
    f2e4:	ff 1f       	adc	r31, r31
    f2e6:	6e 0f       	add	r22, r30
    f2e8:	7f 1f       	adc	r23, r31
    f2ea:	fc 01       	movw	r30, r24
    f2ec:	e6 0f       	add	r30, r22
    f2ee:	f7 1f       	adc	r31, r23
    f2f0:	95 85       	ldd	r25, Z+13	; 0x0d
    f2f2:	2f 3f       	cpi	r18, 0xFF	; 255
    f2f4:	71 f0       	breq	.+28     	; 0xf312 <_ZN5SysEx17checkNewParameterEhhhh+0x58>
    f2f6:	9f 3f       	cpi	r25, 0xFF	; 255
    f2f8:	39 f0       	breq	.+14     	; 0xf308 <_ZN5SysEx17checkNewParameterEhhhh+0x4e>
    f2fa:	02 17       	cp	r16, r18
    f2fc:	88 f0       	brcs	.+34     	; 0xf320 <_ZN5SysEx17checkNewParameterEhhhh+0x66>
    f2fe:	81 e0       	ldi	r24, 0x01	; 1
    f300:	90 17       	cp	r25, r16
    f302:	88 f4       	brcc	.+34     	; 0xf326 <_ZN5SysEx17checkNewParameterEhhhh+0x6c>
    f304:	80 e0       	ldi	r24, 0x00	; 0
    f306:	0f c0       	rjmp	.+30     	; 0xf326 <_ZN5SysEx17checkNewParameterEhhhh+0x6c>
    f308:	81 e0       	ldi	r24, 0x01	; 1
    f30a:	02 17       	cp	r16, r18
    f30c:	60 f4       	brcc	.+24     	; 0xf326 <_ZN5SysEx17checkNewParameterEhhhh+0x6c>
    f30e:	80 e0       	ldi	r24, 0x00	; 0
    f310:	0a c0       	rjmp	.+20     	; 0xf326 <_ZN5SysEx17checkNewParameterEhhhh+0x6c>
    f312:	9f 3f       	cpi	r25, 0xFF	; 255
    f314:	39 f0       	breq	.+14     	; 0xf324 <_ZN5SysEx17checkNewParameterEhhhh+0x6a>
    f316:	81 e0       	ldi	r24, 0x01	; 1
    f318:	90 17       	cp	r25, r16
    f31a:	28 f4       	brcc	.+10     	; 0xf326 <_ZN5SysEx17checkNewParameterEhhhh+0x6c>
    f31c:	80 e0       	ldi	r24, 0x00	; 0
    f31e:	03 c0       	rjmp	.+6      	; 0xf326 <_ZN5SysEx17checkNewParameterEhhhh+0x6c>
    f320:	80 e0       	ldi	r24, 0x00	; 0
    f322:	01 c0       	rjmp	.+2      	; 0xf326 <_ZN5SysEx17checkNewParameterEhhhh+0x6c>
    f324:	81 e0       	ldi	r24, 0x01	; 1
    f326:	0f 91       	pop	r16
    f328:	08 95       	ret

0000f32a <_ZN5SysEx24generateMinMessageLenghtEhhhh>:
    f32a:	0f 93       	push	r16
    f32c:	41 11       	cpse	r20, r1
    f32e:	04 c0       	rjmp	.+8      	; 0xf338 <_ZN5SysEx24generateMinMessageLenghtEhhhh+0xe>
    f330:	6d 7f       	andi	r22, 0xFD	; 253
    f332:	b1 f0       	breq	.+44     	; 0xf360 <_ZN5SysEx24generateMinMessageLenghtEhhhh+0x36>
    f334:	8b e0       	ldi	r24, 0x0B	; 11
    f336:	19 c0       	rjmp	.+50     	; 0xf36a <_ZN5SysEx24generateMinMessageLenghtEhhhh+0x40>
    f338:	41 30       	cpi	r20, 0x01	; 1
    f33a:	a1 f4       	brne	.+40     	; 0xf364 <_ZN5SysEx24generateMinMessageLenghtEhhhh+0x3a>
    f33c:	6d 7f       	andi	r22, 0xFD	; 253
    f33e:	a1 f0       	breq	.+40     	; 0xf368 <_ZN5SysEx24generateMinMessageLenghtEhhhh+0x3e>
    f340:	e0 2f       	mov	r30, r16
    f342:	f0 e0       	ldi	r31, 0x00	; 0
    f344:	ee 0f       	add	r30, r30
    f346:	ff 1f       	adc	r31, r31
    f348:	ee 0f       	add	r30, r30
    f34a:	ff 1f       	adc	r31, r31
    f34c:	3e e1       	ldi	r19, 0x1E	; 30
    f34e:	23 9f       	mul	r18, r19
    f350:	e0 0d       	add	r30, r0
    f352:	f1 1d       	adc	r31, r1
    f354:	11 24       	eor	r1, r1
    f356:	e8 0f       	add	r30, r24
    f358:	f9 1f       	adc	r31, r25
    f35a:	87 85       	ldd	r24, Z+15	; 0x0f
    f35c:	87 5f       	subi	r24, 0xF7	; 247
    f35e:	05 c0       	rjmp	.+10     	; 0xf36a <_ZN5SysEx24generateMinMessageLenghtEhhhh+0x40>
    f360:	8a e0       	ldi	r24, 0x0A	; 10
    f362:	03 c0       	rjmp	.+6      	; 0xf36a <_ZN5SysEx24generateMinMessageLenghtEhhhh+0x40>
    f364:	80 e0       	ldi	r24, 0x00	; 0
    f366:	01 c0       	rjmp	.+2      	; 0xf36a <_ZN5SysEx24generateMinMessageLenghtEhhhh+0x40>
    f368:	89 e0       	ldi	r24, 0x09	; 9
    f36a:	0f 91       	pop	r16
    f36c:	08 95       	ret

0000f36e <_ZN5SysEx9sendErrorE10sysExError>:
    f36e:	0f 93       	push	r16
    f370:	1f 93       	push	r17
    f372:	cf 93       	push	r28
    f374:	df 93       	push	r29
    f376:	00 d0       	rcall	.+0      	; 0xf378 <_ZN5SysEx9sendErrorE10sysExError+0xa>
    f378:	00 d0       	rcall	.+0      	; 0xf37a <_ZN5SysEx9sendErrorE10sysExError+0xc>
    f37a:	1f 92       	push	r1
    f37c:	cd b7       	in	r28, 0x3d	; 61
    f37e:	de b7       	in	r29, 0x3e	; 62
    f380:	8c 01       	movw	r16, r24
    f382:	19 82       	std	Y+1, r1	; 0x01
    f384:	83 e5       	ldi	r24, 0x53	; 83
    f386:	8a 83       	std	Y+2, r24	; 0x02
    f388:	83 e4       	ldi	r24, 0x43	; 67
    f38a:	8b 83       	std	Y+3, r24	; 0x03
    f38c:	86 e4       	ldi	r24, 0x46	; 70
    f38e:	8c 83       	std	Y+4, r24	; 0x04
    f390:	6d 83       	std	Y+5, r22	; 0x05
    f392:	45 e0       	ldi	r20, 0x05	; 5
    f394:	be 01       	movw	r22, r28
    f396:	6f 5f       	subi	r22, 0xFF	; 255
    f398:	7f 4f       	sbci	r23, 0xFF	; 255
    f39a:	87 ec       	ldi	r24, 0xC7	; 199
    f39c:	93 e1       	ldi	r25, 0x13	; 19
    f39e:	20 d4       	rcall	.+2112   	; 0xfbe0 <_ZN4MIDI9sendSysExEPhh>
    f3a0:	f8 01       	movw	r30, r16
    f3a2:	14 86       	std	Z+12, r1	; 0x0c
    f3a4:	0f 90       	pop	r0
    f3a6:	0f 90       	pop	r0
    f3a8:	0f 90       	pop	r0
    f3aa:	0f 90       	pop	r0
    f3ac:	0f 90       	pop	r0
    f3ae:	df 91       	pop	r29
    f3b0:	cf 91       	pop	r28
    f3b2:	1f 91       	pop	r17
    f3b4:	0f 91       	pop	r16
    f3b6:	08 95       	ret

0000f3b8 <_ZN5SysEx20checkMessageValidityEPhh>:
    f3b8:	7f 92       	push	r7
    f3ba:	8f 92       	push	r8
    f3bc:	9f 92       	push	r9
    f3be:	af 92       	push	r10
    f3c0:	bf 92       	push	r11
    f3c2:	cf 92       	push	r12
    f3c4:	df 92       	push	r13
    f3c6:	ef 92       	push	r14
    f3c8:	ff 92       	push	r15
    f3ca:	0f 93       	push	r16
    f3cc:	1f 93       	push	r17
    f3ce:	cf 93       	push	r28
    f3d0:	df 93       	push	r29
    f3d2:	7c 01       	movw	r14, r24
    f3d4:	eb 01       	movw	r28, r22
    f3d6:	84 2e       	mov	r8, r20
    f3d8:	cc 80       	ldd	r12, Y+4	; 0x04
    f3da:	82 e0       	ldi	r24, 0x02	; 2
    f3dc:	8c 15       	cp	r24, r12
    f3de:	28 f4       	brcc	.+10     	; 0xf3ea <_ZN5SysEx20checkMessageValidityEPhh+0x32>
    f3e0:	61 e0       	ldi	r22, 0x01	; 1
    f3e2:	c7 01       	movw	r24, r14
    f3e4:	c4 df       	rcall	.-120    	; 0xf36e <_ZN5SysEx9sendErrorE10sysExError>
    f3e6:	10 e0       	ldi	r17, 0x00	; 0
    f3e8:	79 c0       	rjmp	.+242    	; 0xf4dc <_ZN5SysEx20checkMessageValidityEPhh+0x124>
    f3ea:	bd 80       	ldd	r11, Y+5	; 0x05
    f3ec:	81 e0       	ldi	r24, 0x01	; 1
    f3ee:	8b 15       	cp	r24, r11
    f3f0:	28 f4       	brcc	.+10     	; 0xf3fc <_ZN5SysEx20checkMessageValidityEPhh+0x44>
    f3f2:	62 e0       	ldi	r22, 0x02	; 2
    f3f4:	c7 01       	movw	r24, r14
    f3f6:	bb df       	rcall	.-138    	; 0xf36e <_ZN5SysEx9sendErrorE10sysExError>
    f3f8:	10 e0       	ldi	r17, 0x00	; 0
    f3fa:	70 c0       	rjmp	.+224    	; 0xf4dc <_ZN5SysEx20checkMessageValidityEPhh+0x124>
    f3fc:	de 80       	ldd	r13, Y+6	; 0x06
    f3fe:	6d 2d       	mov	r22, r13
    f400:	c7 01       	movw	r24, r14
    f402:	50 df       	rcall	.-352    	; 0xf2a4 <_ZN5SysEx10checkBlockEh>
    f404:	18 2f       	mov	r17, r24
    f406:	81 11       	cpse	r24, r1
    f408:	04 c0       	rjmp	.+8      	; 0xf412 <_ZN5SysEx20checkMessageValidityEPhh+0x5a>
    f40a:	63 e0       	ldi	r22, 0x03	; 3
    f40c:	c7 01       	movw	r24, r14
    f40e:	af df       	rcall	.-162    	; 0xf36e <_ZN5SysEx9sendErrorE10sysExError>
    f410:	65 c0       	rjmp	.+202    	; 0xf4dc <_ZN5SysEx20checkMessageValidityEPhh+0x124>
    f412:	7f 80       	ldd	r7, Y+7	; 0x07
    f414:	07 2d       	mov	r16, r7
    f416:	2d 2d       	mov	r18, r13
    f418:	4b 2d       	mov	r20, r11
    f41a:	6c 2d       	mov	r22, r12
    f41c:	c7 01       	movw	r24, r14
    f41e:	85 df       	rcall	.-246    	; 0xf32a <_ZN5SysEx24generateMinMessageLenghtEhhhh>
    f420:	88 16       	cp	r8, r24
    f422:	28 f4       	brcc	.+10     	; 0xf42e <_ZN5SysEx20checkMessageValidityEPhh+0x76>
    f424:	67 e0       	ldi	r22, 0x07	; 7
    f426:	c7 01       	movw	r24, r14
    f428:	a2 df       	rcall	.-188    	; 0xf36e <_ZN5SysEx9sendErrorE10sysExError>
    f42a:	10 e0       	ldi	r17, 0x00	; 0
    f42c:	57 c0       	rjmp	.+174    	; 0xf4dc <_ZN5SysEx20checkMessageValidityEPhh+0x124>
    f42e:	4d 2d       	mov	r20, r13
    f430:	50 e0       	ldi	r21, 0x00	; 0
    f432:	f7 01       	movw	r30, r14
    f434:	8e e1       	ldi	r24, 0x1E	; 30
    f436:	d8 9e       	mul	r13, r24
    f438:	e0 0d       	add	r30, r0
    f43a:	f1 1d       	adc	r31, r1
    f43c:	11 24       	eor	r1, r1
    f43e:	86 85       	ldd	r24, Z+14	; 0x0e
    f440:	78 16       	cp	r7, r24
    f442:	28 f0       	brcs	.+10     	; 0xf44e <_ZN5SysEx20checkMessageValidityEPhh+0x96>
    f444:	64 e0       	ldi	r22, 0x04	; 4
    f446:	c7 01       	movw	r24, r14
    f448:	92 df       	rcall	.-220    	; 0xf36e <_ZN5SysEx9sendErrorE10sysExError>
    f44a:	10 e0       	ldi	r17, 0x00	; 0
    f44c:	47 c0       	rjmp	.+142    	; 0xf4dc <_ZN5SysEx20checkMessageValidityEPhh+0x124>
    f44e:	b1 10       	cpse	r11, r1
    f450:	25 c0       	rjmp	.+74     	; 0xf49c <_ZN5SysEx20checkMessageValidityEPhh+0xe4>
    f452:	28 85       	ldd	r18, Y+8	; 0x08
    f454:	8e e1       	ldi	r24, 0x1E	; 30
    f456:	84 9f       	mul	r24, r20
    f458:	f0 01       	movw	r30, r0
    f45a:	85 9f       	mul	r24, r21
    f45c:	f0 0d       	add	r31, r0
    f45e:	11 24       	eor	r1, r1
    f460:	84 e0       	ldi	r24, 0x04	; 4
    f462:	78 9e       	mul	r7, r24
    f464:	e0 0d       	add	r30, r0
    f466:	f1 1d       	adc	r31, r1
    f468:	11 24       	eor	r1, r1
    f46a:	ee 0d       	add	r30, r14
    f46c:	ff 1d       	adc	r31, r15
    f46e:	87 85       	ldd	r24, Z+15	; 0x0f
    f470:	28 17       	cp	r18, r24
    f472:	28 f0       	brcs	.+10     	; 0xf47e <_ZN5SysEx20checkMessageValidityEPhh+0xc6>
    f474:	65 e0       	ldi	r22, 0x05	; 5
    f476:	c7 01       	movw	r24, r14
    f478:	7a df       	rcall	.-268    	; 0xf36e <_ZN5SysEx9sendErrorE10sysExError>
    f47a:	10 e0       	ldi	r17, 0x00	; 0
    f47c:	2f c0       	rjmp	.+94     	; 0xf4dc <_ZN5SysEx20checkMessageValidityEPhh+0x124>
    f47e:	81 e0       	ldi	r24, 0x01	; 1
    f480:	c8 12       	cpse	r12, r24
    f482:	2c c0       	rjmp	.+88     	; 0xf4dc <_ZN5SysEx20checkMessageValidityEPhh+0x124>
    f484:	09 85       	ldd	r16, Y+9	; 0x09
    f486:	47 2d       	mov	r20, r7
    f488:	6d 2d       	mov	r22, r13
    f48a:	c7 01       	movw	r24, r14
    f48c:	16 df       	rcall	.-468    	; 0xf2ba <_ZN5SysEx17checkNewParameterEhhhh>
    f48e:	18 2f       	mov	r17, r24
    f490:	81 11       	cpse	r24, r1
    f492:	24 c0       	rjmp	.+72     	; 0xf4dc <_ZN5SysEx20checkMessageValidityEPhh+0x124>
    f494:	66 e0       	ldi	r22, 0x06	; 6
    f496:	c7 01       	movw	r24, r14
    f498:	6a df       	rcall	.-300    	; 0xf36e <_ZN5SysEx9sendErrorE10sysExError>
    f49a:	20 c0       	rjmp	.+64     	; 0xf4dc <_ZN5SysEx20checkMessageValidityEPhh+0x124>
    f49c:	81 e0       	ldi	r24, 0x01	; 1
    f49e:	c8 12       	cpse	r12, r24
    f4a0:	1d c0       	rjmp	.+58     	; 0xf4dc <_ZN5SysEx20checkMessageValidityEPhh+0x124>
    f4a2:	91 2c       	mov	r9, r1
    f4a4:	89 e0       	ldi	r24, 0x09	; 9
    f4a6:	88 1a       	sub	r8, r24
    f4a8:	91 08       	sbc	r9, r1
    f4aa:	18 14       	cp	r1, r8
    f4ac:	19 04       	cpc	r1, r9
    f4ae:	b4 f4       	brge	.+44     	; 0xf4dc <_ZN5SysEx20checkMessageValidityEPhh+0x124>
    f4b0:	28 96       	adiw	r28, 0x08	; 8
    f4b2:	a1 2c       	mov	r10, r1
    f4b4:	b1 2c       	mov	r11, r1
    f4b6:	09 91       	ld	r16, Y+
    f4b8:	2a 2d       	mov	r18, r10
    f4ba:	47 2d       	mov	r20, r7
    f4bc:	6d 2d       	mov	r22, r13
    f4be:	c7 01       	movw	r24, r14
    f4c0:	fc de       	rcall	.-520    	; 0xf2ba <_ZN5SysEx17checkNewParameterEhhhh>
    f4c2:	18 2f       	mov	r17, r24
    f4c4:	81 11       	cpse	r24, r1
    f4c6:	04 c0       	rjmp	.+8      	; 0xf4d0 <_ZN5SysEx20checkMessageValidityEPhh+0x118>
    f4c8:	66 e0       	ldi	r22, 0x06	; 6
    f4ca:	c7 01       	movw	r24, r14
    f4cc:	50 df       	rcall	.-352    	; 0xf36e <_ZN5SysEx9sendErrorE10sysExError>
    f4ce:	06 c0       	rjmp	.+12     	; 0xf4dc <_ZN5SysEx20checkMessageValidityEPhh+0x124>
    f4d0:	8f ef       	ldi	r24, 0xFF	; 255
    f4d2:	a8 1a       	sub	r10, r24
    f4d4:	b8 0a       	sbc	r11, r24
    f4d6:	a8 14       	cp	r10, r8
    f4d8:	b9 04       	cpc	r11, r9
    f4da:	6c f3       	brlt	.-38     	; 0xf4b6 <_ZN5SysEx20checkMessageValidityEPhh+0xfe>
    f4dc:	81 2f       	mov	r24, r17
    f4de:	df 91       	pop	r29
    f4e0:	cf 91       	pop	r28
    f4e2:	1f 91       	pop	r17
    f4e4:	0f 91       	pop	r16
    f4e6:	ff 90       	pop	r15
    f4e8:	ef 90       	pop	r14
    f4ea:	df 90       	pop	r13
    f4ec:	cf 90       	pop	r12
    f4ee:	bf 90       	pop	r11
    f4f0:	af 90       	pop	r10
    f4f2:	9f 90       	pop	r9
    f4f4:	8f 90       	pop	r8
    f4f6:	7f 90       	pop	r7
    f4f8:	08 95       	ret

0000f4fa <_ZN5SysEx17sendHelloResponseEv>:
    f4fa:	cf 93       	push	r28
    f4fc:	df 93       	push	r29
    f4fe:	cd b7       	in	r28, 0x3d	; 61
    f500:	de b7       	in	r29, 0x3e	; 62
    f502:	27 97       	sbiw	r28, 0x07	; 7
    f504:	0f b6       	in	r0, 0x3f	; 63
    f506:	f8 94       	cli
    f508:	de bf       	out	0x3e, r29	; 62
    f50a:	0f be       	out	0x3f, r0	; 63
    f50c:	cd bf       	out	0x3d, r28	; 61
    f50e:	19 82       	std	Y+1, r1	; 0x01
    f510:	23 e5       	ldi	r18, 0x53	; 83
    f512:	2a 83       	std	Y+2, r18	; 0x02
    f514:	23 e4       	ldi	r18, 0x43	; 67
    f516:	2b 83       	std	Y+3, r18	; 0x03
    f518:	21 e4       	ldi	r18, 0x41	; 65
    f51a:	2c 83       	std	Y+4, r18	; 0x04
    f51c:	21 e0       	ldi	r18, 0x01	; 1
    f51e:	2d 83       	std	Y+5, r18	; 0x05
    f520:	1e 82       	std	Y+6, r1	; 0x06
    f522:	1f 82       	std	Y+7, r1	; 0x07
    f524:	fc 01       	movw	r30, r24
    f526:	22 87       	std	Z+10, r18	; 0x0a
    f528:	47 e0       	ldi	r20, 0x07	; 7
    f52a:	be 01       	movw	r22, r28
    f52c:	6f 5f       	subi	r22, 0xFF	; 255
    f52e:	7f 4f       	sbci	r23, 0xFF	; 255
    f530:	87 ec       	ldi	r24, 0xC7	; 199
    f532:	93 e1       	ldi	r25, 0x13	; 19
    f534:	55 d3       	rcall	.+1706   	; 0xfbe0 <_ZN4MIDI9sendSysExEPhh>
    f536:	27 96       	adiw	r28, 0x07	; 7
    f538:	0f b6       	in	r0, 0x3f	; 63
    f53a:	f8 94       	cli
    f53c:	de bf       	out	0x3e, r29	; 62
    f53e:	0f be       	out	0x3f, r0	; 63
    f540:	cd bf       	out	0x3d, r28	; 61
    f542:	df 91       	pop	r29
    f544:	cf 91       	pop	r28
    f546:	08 95       	ret

0000f548 <_ZN5SysEx12checkSpecialEPhh>:
    f548:	cf 93       	push	r28
    f54a:	46 30       	cpi	r20, 0x06	; 6
    f54c:	f9 f4       	brne	.+62     	; 0xf58c <_ZN5SysEx12checkSpecialEPhh+0x44>
    f54e:	db 01       	movw	r26, r22
    f550:	fc 01       	movw	r30, r24
    f552:	14 96       	adiw	r26, 0x04	; 4
    f554:	2c 91       	ld	r18, X
    f556:	2f 37       	cpi	r18, 0x7F	; 127
    f558:	61 f4       	brne	.+24     	; 0xf572 <_ZN5SysEx12checkSpecialEPhh+0x2a>
    f55a:	c2 85       	ldd	r28, Z+10	; 0x0a
    f55c:	cc 23       	and	r28, r28
    f55e:	29 f0       	breq	.+10     	; 0xf56a <_ZN5SysEx12checkSpecialEPhh+0x22>
    f560:	01 90       	ld	r0, Z+
    f562:	f0 81       	ld	r31, Z
    f564:	e0 2d       	mov	r30, r0
    f566:	09 95       	icall
    f568:	14 c0       	rjmp	.+40     	; 0xf592 <_ZN5SysEx12checkSpecialEPhh+0x4a>
    f56a:	60 e0       	ldi	r22, 0x00	; 0
    f56c:	00 df       	rcall	.-512    	; 0xf36e <_ZN5SysEx9sendErrorE10sysExError>
    f56e:	c1 e0       	ldi	r28, 0x01	; 1
    f570:	10 c0       	rjmp	.+32     	; 0xf592 <_ZN5SysEx12checkSpecialEPhh+0x4a>
    f572:	28 34       	cpi	r18, 0x48	; 72
    f574:	19 f4       	brne	.+6      	; 0xf57c <_ZN5SysEx12checkSpecialEPhh+0x34>
    f576:	c1 df       	rcall	.-126    	; 0xf4fa <_ZN5SysEx17sendHelloResponseEv>
    f578:	c1 e0       	ldi	r28, 0x01	; 1
    f57a:	0b c0       	rjmp	.+22     	; 0xf592 <_ZN5SysEx12checkSpecialEPhh+0x4a>
    f57c:	24 34       	cpi	r18, 0x44	; 68
    f57e:	41 f4       	brne	.+16     	; 0xf590 <_ZN5SysEx12checkSpecialEPhh+0x48>
    f580:	02 80       	ldd	r0, Z+2	; 0x02
    f582:	f3 81       	ldd	r31, Z+3	; 0x03
    f584:	e0 2d       	mov	r30, r0
    f586:	09 95       	icall
    f588:	c0 e0       	ldi	r28, 0x00	; 0
    f58a:	03 c0       	rjmp	.+6      	; 0xf592 <_ZN5SysEx12checkSpecialEPhh+0x4a>
    f58c:	c0 e0       	ldi	r28, 0x00	; 0
    f58e:	01 c0       	rjmp	.+2      	; 0xf592 <_ZN5SysEx12checkSpecialEPhh+0x4a>
    f590:	c0 e0       	ldi	r28, 0x00	; 0
    f592:	8c 2f       	mov	r24, r28
    f594:	cf 91       	pop	r28
    f596:	08 95       	ret

0000f598 <_ZN5SysEx12sendResponseEPhh>:
    f598:	8f 92       	push	r8
    f59a:	9f 92       	push	r9
    f59c:	af 92       	push	r10
    f59e:	bf 92       	push	r11
    f5a0:	cf 92       	push	r12
    f5a2:	df 92       	push	r13
    f5a4:	ef 92       	push	r14
    f5a6:	ff 92       	push	r15
    f5a8:	0f 93       	push	r16
    f5aa:	1f 93       	push	r17
    f5ac:	cf 93       	push	r28
    f5ae:	df 93       	push	r29
    f5b0:	cd b7       	in	r28, 0x3d	; 61
    f5b2:	de b7       	in	r29, 0x3e	; 62
    f5b4:	c8 54       	subi	r28, 0x48	; 72
    f5b6:	d1 09       	sbc	r29, r1
    f5b8:	0f b6       	in	r0, 0x3f	; 63
    f5ba:	f8 94       	cli
    f5bc:	de bf       	out	0x3e, r29	; 62
    f5be:	0f be       	out	0x3f, r0	; 63
    f5c0:	cd bf       	out	0x3d, r28	; 61
    f5c2:	4c 01       	movw	r8, r24
    f5c4:	6b 01       	movw	r12, r22
    f5c6:	19 82       	std	Y+1, r1	; 0x01
    f5c8:	83 e5       	ldi	r24, 0x53	; 83
    f5ca:	8a 83       	std	Y+2, r24	; 0x02
    f5cc:	83 e4       	ldi	r24, 0x43	; 67
    f5ce:	8b 83       	std	Y+3, r24	; 0x03
    f5d0:	81 e4       	ldi	r24, 0x41	; 65
    f5d2:	8c 83       	std	Y+4, r24	; 0x04
    f5d4:	db 01       	movw	r26, r22
    f5d6:	15 96       	adiw	r26, 0x05	; 5
    f5d8:	8c 91       	ld	r24, X
    f5da:	15 97       	sbiw	r26, 0x05	; 5
    f5dc:	81 30       	cpi	r24, 0x01	; 1
    f5de:	09 f0       	breq	.+2      	; 0xf5e2 <_ZN5SysEx12sendResponseEPhh+0x4a>
    f5e0:	aa c0       	rjmp	.+340    	; 0xf736 <_ZN5SysEx12sendResponseEPhh+0x19e>
    f5e2:	17 96       	adiw	r26, 0x07	; 7
    f5e4:	ec 91       	ld	r30, X
    f5e6:	17 97       	sbiw	r26, 0x07	; 7
    f5e8:	f0 e0       	ldi	r31, 0x00	; 0
    f5ea:	16 96       	adiw	r26, 0x06	; 6
    f5ec:	9c 91       	ld	r25, X
    f5ee:	ee 0f       	add	r30, r30
    f5f0:	ff 1f       	adc	r31, r31
    f5f2:	ee 0f       	add	r30, r30
    f5f4:	ff 1f       	adc	r31, r31
    f5f6:	be e1       	ldi	r27, 0x1E	; 30
    f5f8:	9b 9f       	mul	r25, r27
    f5fa:	e0 0d       	add	r30, r0
    f5fc:	f1 1d       	adc	r31, r1
    f5fe:	11 24       	eor	r1, r1
    f600:	e8 0d       	add	r30, r8
    f602:	f9 1d       	adc	r31, r9
    f604:	e7 84       	ldd	r14, Z+15	; 0x0f
    f606:	fb 01       	movw	r30, r22
    f608:	94 81       	ldd	r25, Z+4	; 0x04
    f60a:	91 30       	cpi	r25, 0x01	; 1
    f60c:	81 f1       	breq	.+96     	; 0xf66e <_ZN5SysEx12sendResponseEPhh+0xd6>
    f60e:	50 f0       	brcs	.+20     	; 0xf624 <_ZN5SysEx12sendResponseEPhh+0x8c>
    f610:	92 30       	cpi	r25, 0x02	; 2
    f612:	09 f4       	brne	.+2      	; 0xf616 <_ZN5SysEx12sendResponseEPhh+0x7e>
    f614:	5c c0       	rjmp	.+184    	; 0xf6ce <_ZN5SysEx12sendResponseEPhh+0x136>
    f616:	7f c0       	rjmp	.+254    	; 0xf716 <_ZN5SysEx12sendResponseEPhh+0x17e>
    f618:	d6 01       	movw	r26, r12
    f61a:	18 96       	adiw	r26, 0x08	; 8
    f61c:	fc 90       	ld	r15, X
    f61e:	ee 24       	eor	r14, r14
    f620:	e3 94       	inc	r14
    f622:	03 c0       	rjmp	.+6      	; 0xf62a <_ZN5SysEx12sendResponseEPhh+0x92>
    f624:	ee 20       	and	r14, r14
    f626:	f1 f0       	breq	.+60     	; 0xf664 <_ZN5SysEx12sendResponseEPhh+0xcc>
    f628:	f1 2c       	mov	r15, r1
    f62a:	8e 01       	movw	r16, r28
    f62c:	0b 5f       	subi	r16, 0xFB	; 251
    f62e:	1f 4f       	sbci	r17, 0xFF	; 255
    f630:	ce 01       	movw	r24, r28
    f632:	8e 0d       	add	r24, r14
    f634:	91 1d       	adc	r25, r1
    f636:	fc 01       	movw	r30, r24
    f638:	35 96       	adiw	r30, 0x05	; 5
    f63a:	5f 01       	movw	r10, r30
    f63c:	d4 01       	movw	r26, r8
    f63e:	14 96       	adiw	r26, 0x04	; 4
    f640:	ed 91       	ld	r30, X+
    f642:	fc 91       	ld	r31, X
    f644:	15 97       	sbiw	r26, 0x05	; 5
    f646:	4f 2d       	mov	r20, r15
    f648:	d6 01       	movw	r26, r12
    f64a:	17 96       	adiw	r26, 0x07	; 7
    f64c:	6c 91       	ld	r22, X
    f64e:	17 97       	sbiw	r26, 0x07	; 7
    f650:	16 96       	adiw	r26, 0x06	; 6
    f652:	8c 91       	ld	r24, X
    f654:	09 95       	icall
    f656:	f8 01       	movw	r30, r16
    f658:	81 93       	st	Z+, r24
    f65a:	8f 01       	movw	r16, r30
    f65c:	f3 94       	inc	r15
    f65e:	ea 15       	cp	r30, r10
    f660:	fb 05       	cpc	r31, r11
    f662:	61 f7       	brne	.-40     	; 0xf63c <_ZN5SysEx12sendResponseEPhh+0xa4>
    f664:	44 e0       	ldi	r20, 0x04	; 4
    f666:	4e 0d       	add	r20, r14
    f668:	75 c0       	rjmp	.+234    	; 0xf754 <_ZN5SysEx12sendResponseEPhh+0x1bc>
    f66a:	ee 24       	eor	r14, r14
    f66c:	e3 94       	inc	r14
    f66e:	81 30       	cpi	r24, 0x01	; 1
    f670:	29 f0       	breq	.+10     	; 0xf67c <_ZN5SysEx12sendResponseEPhh+0xe4>
    f672:	d6 01       	movw	r26, r12
    f674:	18 96       	adiw	r26, 0x08	; 8
    f676:	fc 90       	ld	r15, X
    f678:	89 e0       	ldi	r24, 0x09	; 9
    f67a:	02 c0       	rjmp	.+4      	; 0xf680 <_ZN5SysEx12sendResponseEPhh+0xe8>
    f67c:	88 e0       	ldi	r24, 0x08	; 8
    f67e:	f1 2c       	mov	r15, r1
    f680:	ee 20       	and	r14, r14
    f682:	09 f4       	brne	.+2      	; 0xf686 <_ZN5SysEx12sendResponseEPhh+0xee>
    f684:	64 c0       	rjmp	.+200    	; 0xf74e <_ZN5SysEx12sendResponseEPhh+0x1b6>
    f686:	a8 2e       	mov	r10, r24
    f688:	b1 2c       	mov	r11, r1
    f68a:	86 01       	movw	r16, r12
    f68c:	0a 0d       	add	r16, r10
    f68e:	1b 1d       	adc	r17, r11
    f690:	ae 0c       	add	r10, r14
    f692:	b1 1c       	adc	r11, r1
    f694:	ac 0c       	add	r10, r12
    f696:	bd 1c       	adc	r11, r13
    f698:	f8 01       	movw	r30, r16
    f69a:	21 91       	ld	r18, Z+
    f69c:	8f 01       	movw	r16, r30
    f69e:	d4 01       	movw	r26, r8
    f6a0:	16 96       	adiw	r26, 0x06	; 6
    f6a2:	ed 91       	ld	r30, X+
    f6a4:	fc 91       	ld	r31, X
    f6a6:	17 97       	sbiw	r26, 0x07	; 7
    f6a8:	4f 2d       	mov	r20, r15
    f6aa:	d6 01       	movw	r26, r12
    f6ac:	17 96       	adiw	r26, 0x07	; 7
    f6ae:	6c 91       	ld	r22, X
    f6b0:	17 97       	sbiw	r26, 0x07	; 7
    f6b2:	16 96       	adiw	r26, 0x06	; 6
    f6b4:	8c 91       	ld	r24, X
    f6b6:	09 95       	icall
    f6b8:	88 23       	and	r24, r24
    f6ba:	09 f4       	brne	.+2      	; 0xf6be <_ZN5SysEx12sendResponseEPhh+0x126>
    f6bc:	50 c0       	rjmp	.+160    	; 0xf75e <_ZN5SysEx12sendResponseEPhh+0x1c6>
    f6be:	f3 94       	inc	r15
    f6c0:	0a 15       	cp	r16, r10
    f6c2:	1b 05       	cpc	r17, r11
    f6c4:	49 f7       	brne	.-46     	; 0xf698 <_ZN5SysEx12sendResponseEPhh+0x100>
    f6c6:	44 e0       	ldi	r20, 0x04	; 4
    f6c8:	45 c0       	rjmp	.+138    	; 0xf754 <_ZN5SysEx12sendResponseEPhh+0x1bc>
    f6ca:	ee 24       	eor	r14, r14
    f6cc:	e3 94       	inc	r14
    f6ce:	81 30       	cpi	r24, 0x01	; 1
    f6d0:	19 f0       	breq	.+6      	; 0xf6d8 <_ZN5SysEx12sendResponseEPhh+0x140>
    f6d2:	f6 01       	movw	r30, r12
    f6d4:	f0 84       	ldd	r15, Z+8	; 0x08
    f6d6:	01 c0       	rjmp	.+2      	; 0xf6da <_ZN5SysEx12sendResponseEPhh+0x142>
    f6d8:	f1 2c       	mov	r15, r1
    f6da:	ae 2c       	mov	r10, r14
    f6dc:	b1 2c       	mov	r11, r1
    f6de:	1a 14       	cp	r1, r10
    f6e0:	1b 04       	cpc	r1, r11
    f6e2:	bc f5       	brge	.+110    	; 0xf752 <_ZN5SysEx12sendResponseEPhh+0x1ba>
    f6e4:	00 e0       	ldi	r16, 0x00	; 0
    f6e6:	10 e0       	ldi	r17, 0x00	; 0
    f6e8:	d4 01       	movw	r26, r8
    f6ea:	18 96       	adiw	r26, 0x08	; 8
    f6ec:	ed 91       	ld	r30, X+
    f6ee:	fc 91       	ld	r31, X
    f6f0:	19 97       	sbiw	r26, 0x09	; 9
    f6f2:	4f 2d       	mov	r20, r15
    f6f4:	40 0f       	add	r20, r16
    f6f6:	d6 01       	movw	r26, r12
    f6f8:	17 96       	adiw	r26, 0x07	; 7
    f6fa:	6c 91       	ld	r22, X
    f6fc:	17 97       	sbiw	r26, 0x07	; 7
    f6fe:	16 96       	adiw	r26, 0x06	; 6
    f700:	8c 91       	ld	r24, X
    f702:	09 95       	icall
    f704:	88 23       	and	r24, r24
    f706:	59 f1       	breq	.+86     	; 0xf75e <_ZN5SysEx12sendResponseEPhh+0x1c6>
    f708:	0f 5f       	subi	r16, 0xFF	; 255
    f70a:	1f 4f       	sbci	r17, 0xFF	; 255
    f70c:	0a 15       	cp	r16, r10
    f70e:	1b 05       	cpc	r17, r11
    f710:	59 f7       	brne	.-42     	; 0xf6e8 <_ZN5SysEx12sendResponseEPhh+0x150>
    f712:	44 e0       	ldi	r20, 0x04	; 4
    f714:	1f c0       	rjmp	.+62     	; 0xf754 <_ZN5SysEx12sendResponseEPhh+0x1bc>
    f716:	f4 01       	movw	r30, r8
    f718:	84 85       	ldd	r24, Z+12	; 0x0c
    f71a:	88 23       	and	r24, r24
    f71c:	29 f1       	breq	.+74     	; 0xf768 <_ZN5SysEx12sendResponseEPhh+0x1d0>
    f71e:	40 e0       	ldi	r20, 0x00	; 0
    f720:	be 01       	movw	r22, r28
    f722:	6f 5f       	subi	r22, 0xFF	; 255
    f724:	7f 4f       	sbci	r23, 0xFF	; 255
    f726:	87 ec       	ldi	r24, 0xC7	; 199
    f728:	93 e1       	ldi	r25, 0x13	; 19
    f72a:	5a d2       	rcall	.+1204   	; 0xfbe0 <_ZN4MIDI9sendSysExEPhh>
    f72c:	1d c0       	rjmp	.+58     	; 0xf768 <_ZN5SysEx12sendResponseEPhh+0x1d0>
    f72e:	68 e0       	ldi	r22, 0x08	; 8
    f730:	c4 01       	movw	r24, r8
    f732:	1d de       	rcall	.-966    	; 0xf36e <_ZN5SysEx9sendErrorE10sysExError>
    f734:	19 c0       	rjmp	.+50     	; 0xf768 <_ZN5SysEx12sendResponseEPhh+0x1d0>
    f736:	db 01       	movw	r26, r22
    f738:	14 96       	adiw	r26, 0x04	; 4
    f73a:	9c 91       	ld	r25, X
    f73c:	91 30       	cpi	r25, 0x01	; 1
    f73e:	09 f4       	brne	.+2      	; 0xf742 <_ZN5SysEx12sendResponseEPhh+0x1aa>
    f740:	94 cf       	rjmp	.-216    	; 0xf66a <_ZN5SysEx12sendResponseEPhh+0xd2>
    f742:	08 f4       	brcc	.+2      	; 0xf746 <_ZN5SysEx12sendResponseEPhh+0x1ae>
    f744:	69 cf       	rjmp	.-302    	; 0xf618 <_ZN5SysEx12sendResponseEPhh+0x80>
    f746:	92 30       	cpi	r25, 0x02	; 2
    f748:	09 f4       	brne	.+2      	; 0xf74c <_ZN5SysEx12sendResponseEPhh+0x1b4>
    f74a:	bf cf       	rjmp	.-130    	; 0xf6ca <_ZN5SysEx12sendResponseEPhh+0x132>
    f74c:	e4 cf       	rjmp	.-56     	; 0xf716 <_ZN5SysEx12sendResponseEPhh+0x17e>
    f74e:	44 e0       	ldi	r20, 0x04	; 4
    f750:	01 c0       	rjmp	.+2      	; 0xf754 <_ZN5SysEx12sendResponseEPhh+0x1bc>
    f752:	44 e0       	ldi	r20, 0x04	; 4
    f754:	f4 01       	movw	r30, r8
    f756:	84 85       	ldd	r24, Z+12	; 0x0c
    f758:	81 11       	cpse	r24, r1
    f75a:	e2 cf       	rjmp	.-60     	; 0xf720 <_ZN5SysEx12sendResponseEPhh+0x188>
    f75c:	05 c0       	rjmp	.+10     	; 0xf768 <_ZN5SysEx12sendResponseEPhh+0x1d0>
    f75e:	d4 01       	movw	r26, r8
    f760:	1c 96       	adiw	r26, 0x0c	; 12
    f762:	8c 91       	ld	r24, X
    f764:	81 11       	cpse	r24, r1
    f766:	e3 cf       	rjmp	.-58     	; 0xf72e <_ZN5SysEx12sendResponseEPhh+0x196>
    f768:	c8 5b       	subi	r28, 0xB8	; 184
    f76a:	df 4f       	sbci	r29, 0xFF	; 255
    f76c:	0f b6       	in	r0, 0x3f	; 63
    f76e:	f8 94       	cli
    f770:	de bf       	out	0x3e, r29	; 62
    f772:	0f be       	out	0x3f, r0	; 63
    f774:	cd bf       	out	0x3d, r28	; 61
    f776:	df 91       	pop	r29
    f778:	cf 91       	pop	r28
    f77a:	1f 91       	pop	r17
    f77c:	0f 91       	pop	r16
    f77e:	ff 90       	pop	r15
    f780:	ef 90       	pop	r14
    f782:	df 90       	pop	r13
    f784:	cf 90       	pop	r12
    f786:	bf 90       	pop	r11
    f788:	af 90       	pop	r10
    f78a:	9f 90       	pop	r9
    f78c:	8f 90       	pop	r8
    f78e:	08 95       	ret

0000f790 <_ZN5SysEx11handleSysExEPhh>:
    f790:	ff 92       	push	r15
    f792:	0f 93       	push	r16
    f794:	1f 93       	push	r17
    f796:	cf 93       	push	r28
    f798:	df 93       	push	r29
    f79a:	21 e0       	ldi	r18, 0x01	; 1
    f79c:	fc 01       	movw	r30, r24
    f79e:	24 87       	std	Z+12, r18	; 0x0c
    f7a0:	46 30       	cpi	r20, 0x06	; 6
    f7a2:	18 f1       	brcs	.+70     	; 0xf7ea <_ZN5SysEx11handleSysExEPhh+0x5a>
    f7a4:	f4 2e       	mov	r15, r20
    f7a6:	eb 01       	movw	r28, r22
    f7a8:	8c 01       	movw	r16, r24
    f7aa:	49 81       	ldd	r20, Y+1	; 0x01
    f7ac:	5a 81       	ldd	r21, Y+2	; 0x02
    f7ae:	6b 81       	ldd	r22, Y+3	; 0x03
    f7b0:	6c dd       	rcall	.-1320   	; 0xf28a <_ZN5SysEx7checkIDE19sysExManufacturerID>
    f7b2:	88 23       	and	r24, r24
    f7b4:	d1 f0       	breq	.+52     	; 0xf7ea <_ZN5SysEx11handleSysExEPhh+0x5a>
    f7b6:	4f 2d       	mov	r20, r15
    f7b8:	be 01       	movw	r22, r28
    f7ba:	c8 01       	movw	r24, r16
    f7bc:	c5 de       	rcall	.-630    	; 0xf548 <_ZN5SysEx12checkSpecialEPhh>
    f7be:	81 11       	cpse	r24, r1
    f7c0:	14 c0       	rjmp	.+40     	; 0xf7ea <_ZN5SysEx11handleSysExEPhh+0x5a>
    f7c2:	f8 01       	movw	r30, r16
    f7c4:	82 85       	ldd	r24, Z+10	; 0x0a
    f7c6:	81 11       	cpse	r24, r1
    f7c8:	04 c0       	rjmp	.+8      	; 0xf7d2 <_ZN5SysEx11handleSysExEPhh+0x42>
    f7ca:	60 e0       	ldi	r22, 0x00	; 0
    f7cc:	c8 01       	movw	r24, r16
    f7ce:	cf dd       	rcall	.-1122   	; 0xf36e <_ZN5SysEx9sendErrorE10sysExError>
    f7d0:	0c c0       	rjmp	.+24     	; 0xf7ea <_ZN5SysEx11handleSysExEPhh+0x5a>
    f7d2:	4f 2d       	mov	r20, r15
    f7d4:	be 01       	movw	r22, r28
    f7d6:	c8 01       	movw	r24, r16
    f7d8:	ef dd       	rcall	.-1058   	; 0xf3b8 <_ZN5SysEx20checkMessageValidityEPhh>
    f7da:	88 23       	and	r24, r24
    f7dc:	31 f0       	breq	.+12     	; 0xf7ea <_ZN5SysEx11handleSysExEPhh+0x5a>
    f7de:	4f 2d       	mov	r20, r15
    f7e0:	be 01       	movw	r22, r28
    f7e2:	c8 01       	movw	r24, r16
    f7e4:	d9 de       	rcall	.-590    	; 0xf598 <_ZN5SysEx12sendResponseEPhh>
    f7e6:	f8 01       	movw	r30, r16
    f7e8:	14 86       	std	Z+12, r1	; 0x0c
    f7ea:	df 91       	pop	r29
    f7ec:	cf 91       	pop	r28
    f7ee:	1f 91       	pop	r17
    f7f0:	0f 91       	pop	r16
    f7f2:	ff 90       	pop	r15
    f7f4:	08 95       	ret

0000f7f6 <_ZN5SysEx15setHandleRebootEPFvvE>:
    f7f6:	fc 01       	movw	r30, r24
    f7f8:	71 83       	std	Z+1, r23	; 0x01
    f7fa:	60 83       	st	Z, r22
    f7fc:	08 95       	ret

0000f7fe <_ZN5SysEx21setHandleFactoryResetEPFvvE>:
    f7fe:	fc 01       	movw	r30, r24
    f800:	73 83       	std	Z+3, r23	; 0x03
    f802:	62 83       	std	Z+2, r22	; 0x02
    f804:	08 95       	ret

0000f806 <_ZN5SysEx12setHandleGetEPFhhhhE>:
    f806:	fc 01       	movw	r30, r24
    f808:	75 83       	std	Z+5, r23	; 0x05
    f80a:	64 83       	std	Z+4, r22	; 0x04
    f80c:	08 95       	ret

0000f80e <_ZN5SysEx12setHandleSetEPFbhhhhE>:
    f80e:	fc 01       	movw	r30, r24
    f810:	77 83       	std	Z+7, r23	; 0x07
    f812:	66 83       	std	Z+6, r22	; 0x06
    f814:	08 95       	ret

0000f816 <_ZN5SysEx14setHandleResetEPFbhhhE>:
    f816:	fc 01       	movw	r30, r24
    f818:	71 87       	std	Z+9, r23	; 0x09
    f81a:	60 87       	std	Z+8, r22	; 0x08
    f81c:	08 95       	ret

0000f81e <_GLOBAL__sub_I__ZN5SysExC2Ev>:

SysEx sysEx;
    f81e:	88 ee       	ldi	r24, 0xE8	; 232
    f820:	92 e1       	ldi	r25, 0x12	; 18
    f822:	02 cd       	rjmp	.-1532   	; 0xf228 <_ZN5SysExC1Ev>
    f824:	08 95       	ret

0000f826 <_Z16checkNewRevisionv>:

    //current app crc is written to last flash location
    //previous crc is stored into eeprom
    //if two differ, app has changed

    uint16_t crc_eeprom = eeprom_read_word((uint16_t*)CRC_LOCATION_EEPROM);
    f826:	8c ef       	ldi	r24, 0xFC	; 252
    f828:	9f e0       	ldi	r25, 0x0F	; 15
    f82a:	06 d7       	rcall	.+3596   	; 0x10638 <eeprom_read_word>
    uint16_t crc_flash = pgm_read_word_far(CRC_LOCATION_FLASH);
    f82c:	4e ef       	ldi	r20, 0xFE	; 254
    f82e:	5f ed       	ldi	r21, 0xDF	; 223
    f830:	61 e0       	ldi	r22, 0x01	; 1
    f832:	70 e0       	ldi	r23, 0x00	; 0
    f834:	6b bf       	out	0x3b, r22	; 59
    f836:	fa 01       	movw	r30, r20
    f838:	67 91       	elpm	r22, Z+
    f83a:	76 91       	elpm	r23, Z

    if (crc_eeprom != crc_flash)   {
    f83c:	86 17       	cp	r24, r22
    f83e:	97 07       	cpc	r25, r23
    f840:	29 f0       	breq	.+10     	; 0xf84c <_Z16checkNewRevisionv+0x26>

        eeprom_update_word((uint16_t*)CRC_LOCATION_EEPROM, crc_flash);
    f842:	8c ef       	ldi	r24, 0xFC	; 252
    f844:	9f e0       	ldi	r25, 0x0F	; 15
    f846:	0f d7       	rcall	.+3614   	; 0x10666 <eeprom_update_word>
        return true;
    f848:	81 e0       	ldi	r24, 0x01	; 1
    f84a:	08 95       	ret

    }   return false;
    f84c:	80 e0       	ldi	r24, 0x00	; 0

    return false;

}
    f84e:	08 95       	ret

0000f850 <_Z12getSWversion11swVersion_t>:

int16_t getSWversion(swVersion_t point) {

    switch(point)   {
    f850:	84 30       	cpi	r24, 0x04	; 4
    f852:	80 f4       	brcc	.+32     	; 0xf874 <_Z12getSWversion11swVersion_t+0x24>

        case swVersion_major:
        case swVersion_minor:
        case swVersion_revision:
        case swVersion_development:
        return pgm_read_word_far(VERSION_POINT_LOCATION+(uint8_t)point*2);
    f854:	90 e0       	ldi	r25, 0x00	; 0
    f856:	88 0f       	add	r24, r24
    f858:	99 1f       	adc	r25, r25
    f85a:	09 2e       	mov	r0, r25
    f85c:	00 0c       	add	r0, r0
    f85e:	aa 0b       	sbc	r26, r26
    f860:	bb 0b       	sbc	r27, r27
    f862:	8a 50       	subi	r24, 0x0A	; 10
    f864:	90 42       	sbci	r25, 0x20	; 32
    f866:	ae 4f       	sbci	r26, 0xFE	; 254
    f868:	bf 4f       	sbci	r27, 0xFF	; 255
    f86a:	ab bf       	out	0x3b, r26	; 59
    f86c:	fc 01       	movw	r30, r24
    f86e:	87 91       	elpm	r24, Z+
    f870:	96 91       	elpm	r25, Z
    f872:	08 95       	ret

        default:
        return -1;
    f874:	8f ef       	ldi	r24, 0xFF	; 255
    f876:	9f ef       	ldi	r25, 0xFF	; 255

    }

    f878:	08 95       	ret

0000f87a <_Z8onRebootv>:

#if MODE_SERIAL < 1
#include "sysex/SysEx.h"
#endif

void onReboot()  {
    f87a:	08 95       	ret

0000f87c <_Z14onFactoryResetv>:
    ////this will reset the board into bootloader mode
    //reboot(BTLDR_REBOOT);

}

void onFactoryReset()   {
    f87c:	08 95       	ret

0000f87e <_Z5onGethhh>:
        case CONF_BLOCK_PRESSURE_SETTINGS:
        break;

    } return 0;

}
    f87e:	80 e0       	ldi	r24, 0x00	; 0
    f880:	08 95       	ret

0000f882 <_Z5onSethhhh>:
        case CONF_BLOCK_PRESSURE_SETTINGS:
        break;

    }   return false;

}
    f882:	80 e0       	ldi	r24, 0x00	; 0
    f884:	08 95       	ret

0000f886 <_Z7onResethhh>:
        case CONF_BLOCK_PRESSURE_SETTINGS:
        break;

    }   return false;

}
    f886:	80 e0       	ldi	r24, 0x00	; 0
    f888:	08 95       	ret

0000f88a <main>:

int main()    {

    globalInit();
    f88a:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <_Z10globalInitv>

    #if MODE_SERIAL < 1
    sysEx.setHandleReboot(onReboot);
    f88e:	6d e3       	ldi	r22, 0x3D	; 61
    f890:	7c e7       	ldi	r23, 0x7C	; 124
    f892:	88 ee       	ldi	r24, 0xE8	; 232
    f894:	92 e1       	ldi	r25, 0x12	; 18
    f896:	af df       	rcall	.-162    	; 0xf7f6 <_ZN5SysEx15setHandleRebootEPFvvE>
    sysEx.setHandleGet(onGet);
    f898:	6f e3       	ldi	r22, 0x3F	; 63
    f89a:	7c e7       	ldi	r23, 0x7C	; 124
    f89c:	88 ee       	ldi	r24, 0xE8	; 232
    f89e:	92 e1       	ldi	r25, 0x12	; 18
    f8a0:	b2 df       	rcall	.-156    	; 0xf806 <_ZN5SysEx12setHandleGetEPFhhhhE>
    sysEx.setHandleSet(onSet);
    f8a2:	61 e4       	ldi	r22, 0x41	; 65
    f8a4:	7c e7       	ldi	r23, 0x7C	; 124
    f8a6:	88 ee       	ldi	r24, 0xE8	; 232
    f8a8:	92 e1       	ldi	r25, 0x12	; 18
    f8aa:	b1 df       	rcall	.-158    	; 0xf80e <_ZN5SysEx12setHandleSetEPFbhhhhE>
    sysEx.setHandleReset(onReset);
    f8ac:	63 e4       	ldi	r22, 0x43	; 67
    f8ae:	7c e7       	ldi	r23, 0x7C	; 124
    f8b0:	88 ee       	ldi	r24, 0xE8	; 232
    f8b2:	92 e1       	ldi	r25, 0x12	; 18
    f8b4:	b0 df       	rcall	.-160    	; 0xf816 <_ZN5SysEx14setHandleResetEPFbhhhE>
    sysEx.setHandleFactoryReset(onFactoryReset);
    f8b6:	6e e3       	ldi	r22, 0x3E	; 62
    f8b8:	7c e7       	ldi	r23, 0x7C	; 124
    f8ba:	88 ee       	ldi	r24, 0xE8	; 232
    f8bc:	92 e1       	ldi	r25, 0x12	; 18
    f8be:	9f df       	rcall	.-194    	; 0xf7fe <_ZN5SysEx21setHandleFactoryResetEPFvvE>
    #endif

    while(1) {

        pads.update();
    f8c0:	8a e6       	ldi	r24, 0x6A	; 106
    f8c2:	9f e0       	ldi	r25, 0x0F	; 15
    f8c4:	0e 94 c7 54 	call	0xa98e	; 0xa98e <_ZN4Pads6updateEv>

        #ifdef MODULE_BUTTONS
        buttons.update();
    f8c8:	80 e4       	ldi	r24, 0x40	; 64
    f8ca:	98 e0       	ldi	r25, 0x08	; 8
    f8cc:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <_ZN7Buttons6updateEv>
        #endif

        #ifdef MODULE_ENCODERS
        encoders.update();
    f8d0:	61 e0       	ldi	r22, 0x01	; 1
    f8d2:	81 eb       	ldi	r24, 0xB1	; 177
    f8d4:	98 e0       	ldi	r25, 0x08	; 8
    f8d6:	0e 94 a6 28 	call	0x514c	; 0x514c <_ZN8Encoders6updateEb>
        #endif

        #ifdef MODULE_LCD
        display.update();
    f8da:	82 e6       	ldi	r24, 0x62	; 98
    f8dc:	9c e0       	ldi	r25, 0x0C	; 12
    f8de:	0e 94 57 44 	call	0x88ae	; 0x88ae <_ZN3LCD6updateEv>
        vserial.update();
        #endif

        #ifdef ENABLE_ASYNC_UPDATE
        //write to eeprom when all pads are released
        if (pads.allPadsReleased())
    f8e2:	8a e6       	ldi	r24, 0x6A	; 106
    f8e4:	9f e0       	ldi	r25, 0x0F	; 15
    f8e6:	0e 94 6e 69 	call	0xd2dc	; 0xd2dc <_ZN4Pads15allPadsReleasedEv>
    f8ea:	88 23       	and	r24, r24
    f8ec:	21 f0       	breq	.+8      	; 0xf8f6 <main+0x6c>
            configuration.update();
    f8ee:	8c e0       	ldi	r24, 0x0C	; 12
    f8f0:	92 e0       	ldi	r25, 0x02	; 2
    f8f2:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <_ZN13Configuration6updateEv>
        #endif

        #if MODE_SERIAL < 1
        midi.checkInput();
    f8f6:	87 ec       	ldi	r24, 0xC7	; 199
    f8f8:	93 e1       	ldi	r25, 0x13	; 19
    f8fa:	99 d0       	rcall	.+306    	; 0xfa2e <_ZN4MIDI10checkInputEv>

    }   return false;

}

int main()    {
    f8fc:	e1 cf       	rjmp	.-62     	; 0xf8c0 <main+0x36>

0000f8fe <_ZN4MIDI4initEv>:

    //default constructor

}

void MIDI::init() {
    f8fe:	ef 92       	push	r14
    f900:	ff 92       	push	r15
    f902:	0f 93       	push	r16
    f904:	1f 93       	push	r17
    f906:	cf 93       	push	r28
    f908:	df 93       	push	r29
    f90a:	8c 01       	movw	r16, r24

    //enable only midi out
    //listen only on channel 1

    hwMIDI.init(false, true, dinInterface);
    f90c:	20 e0       	ldi	r18, 0x00	; 0
    f90e:	41 e0       	ldi	r20, 0x01	; 1
    f910:	60 e0       	ldi	r22, 0x00	; 0
    f912:	81 ed       	ldi	r24, 0xD1	; 209
    f914:	96 e0       	ldi	r25, 0x06	; 6
    f916:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <_ZN6HWmidi4initEbb19midiInterfaceType_t>
    hwMIDI.init(false, true, usbInterface);
    f91a:	21 e0       	ldi	r18, 0x01	; 1
    f91c:	41 e0       	ldi	r20, 0x01	; 1
    f91e:	60 e0       	ldi	r22, 0x00	; 0
    f920:	81 ed       	ldi	r24, 0xD1	; 209
    f922:	96 e0       	ldi	r25, 0x06	; 6
    f924:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <_ZN6HWmidi4initEbb19midiInterfaceType_t>
    hwMIDI.setInputChannel(DEFAULT_MIDI_CHANNEL);
    f928:	61 e0       	ldi	r22, 0x01	; 1
    f92a:	81 ed       	ldi	r24, 0xD1	; 209
    f92c:	96 e0       	ldi	r25, 0x06	; 6
    f92e:	0e 94 c7 12 	call	0x258e	; 0x258e <_ZN6HWmidi15setInputChannelEh>
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    f932:	80 91 1f 05 	lds	r24, 0x051F
    f936:	90 91 20 05 	lds	r25, 0x0520
    f93a:	20 91 1d 05 	lds	r18, 0x051D
    f93e:	30 91 1e 05 	lds	r19, 0x051E
    f942:	28 0f       	add	r18, r24
    f944:	39 1f       	adc	r19, r25
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    f946:	80 91 47 05 	lds	r24, 0x0547
    f94a:	81 30       	cpi	r24, 0x01	; 1
    f94c:	81 f0       	breq	.+32     	; 0xf96e <_ZN4MIDI4initEv+0x70>
    f94e:	18 f0       	brcs	.+6      	; 0xf956 <_ZN4MIDI4initEv+0x58>
    f950:	82 30       	cpi	r24, 0x02	; 2
    f952:	91 f0       	breq	.+36     	; 0xf978 <_ZN4MIDI4initEv+0x7a>
    f954:	16 c0       	rjmp	.+44     	; 0xf982 <_ZN4MIDI4initEv+0x84>
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    f956:	c9 01       	movw	r24, r18
    f958:	05 96       	adiw	r24, 0x05	; 5

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
            if (startAddress > EEPROM_SIZE) {
    f95a:	81 30       	cpi	r24, 0x01	; 1
    f95c:	20 e1       	ldi	r18, 0x10	; 16
    f95e:	92 07       	cpc	r25, r18
    f960:	08 f0       	brcs	.+2      	; 0xf964 <_ZN4MIDI4initEv+0x66>
    f962:	46 c0       	rjmp	.+140    	; 0xf9f0 <_ZN4MIDI4initEv+0xf2>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    f964:	61 d6       	rcall	.+3266   	; 0x10628 <eeprom_read_byte>
    f966:	82 fb       	bst	r24, 2
    f968:	ee 24       	eor	r14, r14
    f96a:	e0 f8       	bld	r14, 0
    f96c:	43 c0       	rjmp	.+134    	; 0xf9f4 <_ZN4MIDI4initEv+0xf6>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    f96e:	c9 01       	movw	r24, r18
    f970:	07 96       	adiw	r24, 0x07	; 7
    f972:	5a d6       	rcall	.+3252   	; 0x10628 <eeprom_read_byte>
    f974:	e8 2e       	mov	r14, r24
    f976:	3e c0       	rjmp	.+124    	; 0xf9f4 <_ZN4MIDI4initEv+0xf6>
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    f978:	c9 01       	movw	r24, r18
    f97a:	09 96       	adiw	r24, 0x09	; 9
    f97c:	5d d6       	rcall	.+3258   	; 0x10638 <eeprom_read_word>
    f97e:	7c 01       	movw	r14, r24
    f980:	39 c0       	rjmp	.+114    	; 0xf9f4 <_ZN4MIDI4initEv+0xf6>

    noteOffType = (noteOffType_t)configuration.readParameter(CONF_BLOCK_MIDI, 0, MIDI_SETTING_NOTE_OFF_TYPE_ID);
    f982:	f8 01       	movw	r30, r16
    f984:	10 82       	st	Z, r1
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    f986:	80 91 1f 05 	lds	r24, 0x051F
    f98a:	90 91 20 05 	lds	r25, 0x0520
    f98e:	20 91 1d 05 	lds	r18, 0x051D
    f992:	30 91 1e 05 	lds	r19, 0x051E
    f996:	82 0f       	add	r24, r18
    f998:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    f99a:	20 91 47 05 	lds	r18, 0x0547
    f99e:	21 30       	cpi	r18, 0x01	; 1
    f9a0:	81 f0       	breq	.+32     	; 0xf9c2 <_ZN4MIDI4initEv+0xc4>
    f9a2:	18 f0       	brcs	.+6      	; 0xf9aa <_ZN4MIDI4initEv+0xac>
    f9a4:	22 30       	cpi	r18, 0x02	; 2
    f9a6:	91 f0       	breq	.+36     	; 0xf9cc <_ZN4MIDI4initEv+0xce>
    f9a8:	15 c0       	rjmp	.+42     	; 0xf9d4 <_ZN4MIDI4initEv+0xd6>
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    f9aa:	05 96       	adiw	r24, 0x05	; 5

            case BIT_PARAMETER:
            arrayIndex = parameterID/8;
            parameterIndex = parameterID - 8*arrayIndex;
            startAddress += arrayIndex;
            if (startAddress > EEPROM_SIZE) {
    f9ac:	81 30       	cpi	r24, 0x01	; 1
    f9ae:	f0 e1       	ldi	r31, 0x10	; 16
    f9b0:	9f 07       	cpc	r25, r31
    f9b2:	c8 f4       	brcc	.+50     	; 0xf9e6 <_ZN4MIDI4initEv+0xe8>
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;

            }
            return bitRead(eeprom_read_byte((uint8_t*)startAddress), parameterIndex);
    f9b4:	39 d6       	rcall	.+3186   	; 0x10628 <eeprom_read_byte>
    f9b6:	86 95       	lsr	r24
    f9b8:	81 70       	andi	r24, 0x01	; 1
    f9ba:	c8 2f       	mov	r28, r24
    f9bc:	20 e0       	ldi	r18, 0x00	; 0
    f9be:	d2 2f       	mov	r29, r18
    f9c0:	0b c0       	rjmp	.+22     	; 0xf9d8 <_ZN4MIDI4initEv+0xda>
            break;

            case BYTE_PARAMETER:
            startAddress += parameterID;
            return eeprom_read_byte((uint8_t*)startAddress);
    f9c2:	06 96       	adiw	r24, 0x06	; 6
    f9c4:	31 d6       	rcall	.+3170   	; 0x10628 <eeprom_read_byte>
    f9c6:	c8 2f       	mov	r28, r24
    f9c8:	d0 e0       	ldi	r29, 0x00	; 0
    f9ca:	06 c0       	rjmp	.+12     	; 0xf9d8 <_ZN4MIDI4initEv+0xda>
            break;

            case WORD_PARAMETER:
            startAddress += ((uint16_t)parameterID*2);
            return eeprom_read_word((uint16_t*)startAddress);
    f9cc:	07 96       	adiw	r24, 0x07	; 7
    f9ce:	34 d6       	rcall	.+3176   	; 0x10638 <eeprom_read_word>
    f9d0:	ec 01       	movw	r28, r24
    f9d2:	02 c0       	rjmp	.+4      	; 0xf9d8 <_ZN4MIDI4initEv+0xda>
            break;

        }   return 0;
    f9d4:	c0 e0       	ldi	r28, 0x00	; 0
    f9d6:	d0 e0       	ldi	r29, 0x00	; 0
    configuration.readParameter(CONF_BLOCK_MIDI, 0, MIDI_SETTING_RUNNING_STATUS_ID) ? hwMIDI.enableRunningStatus() : hwMIDI.disableRunningStatus();
    f9d8:	cd 2b       	or	r28, r29
    f9da:	29 f0       	breq	.+10     	; 0xf9e6 <_ZN4MIDI4initEv+0xe8>
    f9dc:	81 ed       	ldi	r24, 0xD1	; 209
    f9de:	96 e0       	ldi	r25, 0x06	; 6
    f9e0:	0e 94 3e 12 	call	0x247c	; 0x247c <_ZN6HWmidi19enableRunningStatusEv>
    f9e4:	1d c0       	rjmp	.+58     	; 0xfa20 <_ZN4MIDI4initEv+0x122>
    f9e6:	81 ed       	ldi	r24, 0xD1	; 209
    f9e8:	96 e0       	ldi	r25, 0x06	; 6
    f9ea:	0e 94 42 12 	call	0x2484	; 0x2484 <_ZN6HWmidi20disableRunningStatusEv>
    f9ee:	18 c0       	rjmp	.+48     	; 0xfa20 <_ZN4MIDI4initEv+0x122>
            if (startAddress > EEPROM_SIZE) {

                #if MODE_SERIAL > 0
                    printf("Requested address out of EEPROM memory range\n");
                #endif
                return 0;
    f9f0:	e1 2c       	mov	r14, r1
    f9f2:	f1 2c       	mov	r15, r1

    hwMIDI.init(false, true, dinInterface);
    hwMIDI.init(false, true, usbInterface);
    hwMIDI.setInputChannel(DEFAULT_MIDI_CHANNEL);

    noteOffType = (noteOffType_t)configuration.readParameter(CONF_BLOCK_MIDI, 0, MIDI_SETTING_NOTE_OFF_TYPE_ID);
    f9f4:	f8 01       	movw	r30, r16
    f9f6:	e0 82       	st	Z, r14
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    f9f8:	80 91 1f 05 	lds	r24, 0x051F
    f9fc:	90 91 20 05 	lds	r25, 0x0520
    fa00:	20 91 1d 05 	lds	r18, 0x051D
    fa04:	30 91 1e 05 	lds	r19, 0x051E
    fa08:	82 0f       	add	r24, r18
    fa0a:	93 1f       	adc	r25, r19
        uint8_t parameterType = getParameterType(blockID, sectionID);

        uint8_t arrayIndex;
        uint8_t parameterIndex;

        switch(parameterType)   {
    fa0c:	20 91 47 05 	lds	r18, 0x0547
    fa10:	21 30       	cpi	r18, 0x01	; 1
    fa12:	b9 f2       	breq	.-82     	; 0xf9c2 <_ZN4MIDI4initEv+0xc4>
    fa14:	18 f0       	brcs	.+6      	; 0xfa1c <_ZN4MIDI4initEv+0x11e>
    fa16:	22 30       	cpi	r18, 0x02	; 2
    fa18:	c9 f2       	breq	.-78     	; 0xf9cc <_ZN4MIDI4initEv+0xce>
    fa1a:	e5 cf       	rjmp	.-54     	; 0xf9e6 <_ZN4MIDI4initEv+0xe8>
    blockDescriptor blocks[CONF_BLOCKS];

    private:
    inline uint16_t getSectionAddress(uint8_t blockID, uint8_t sectionID)   {

        return blocks[blockID].blockStartAddress+blocks[blockID].sectionAddress[sectionID] + START_OFFSET;
    fa1c:	05 96       	adiw	r24, 0x05	; 5
    fa1e:	c6 cf       	rjmp	.-116    	; 0xf9ac <_ZN4MIDI4initEv+0xae>
    configuration.readParameter(CONF_BLOCK_MIDI, 0, MIDI_SETTING_RUNNING_STATUS_ID) ? hwMIDI.enableRunningStatus() : hwMIDI.disableRunningStatus();

}
    fa20:	df 91       	pop	r29
    fa22:	cf 91       	pop	r28
    fa24:	1f 91       	pop	r17
    fa26:	0f 91       	pop	r16
    fa28:	ff 90       	pop	r15
    fa2a:	ef 90       	pop	r14
    fa2c:	08 95       	ret

0000fa2e <_ZN4MIDI10checkInputEv>:

void MIDI::checkInput()   {
    fa2e:	0f 93       	push	r16
    fa30:	1f 93       	push	r17
    fa32:	cf 93       	push	r28
    fa34:	df 93       	push	r29
    fa36:	ec 01       	movw	r28, r24

    if (hwMIDI.read(usbInterface))   {   //new message on usb
    fa38:	61 e0       	ldi	r22, 0x01	; 1
    fa3a:	81 ed       	ldi	r24, 0xD1	; 209
    fa3c:	96 e0       	ldi	r25, 0x06	; 6
    fa3e:	0e 94 48 15 	call	0x2a90	; 0x2a90 <_ZN6HWmidi4readE19midiInterfaceType_t>
    fa42:	88 23       	and	r24, r24
    fa44:	41 f1       	breq	.+80     	; 0xfa96 <_ZN4MIDI10checkInputEv+0x68>

        midiMessageType_t messageType = hwMIDI.getType(usbInterface);
    fa46:	61 e0       	ldi	r22, 0x01	; 1
    fa48:	81 ed       	ldi	r24, 0xD1	; 209
    fa4a:	96 e0       	ldi	r25, 0x06	; 6
    fa4c:	0e 94 79 12 	call	0x24f2	; 0x24f2 <_ZNK6HWmidi7getTypeE19midiInterfaceType_t>
    fa50:	18 2f       	mov	r17, r24
        uint8_t data1 = hwMIDI.getData1(usbInterface);
    fa52:	61 e0       	ldi	r22, 0x01	; 1
    fa54:	81 ed       	ldi	r24, 0xD1	; 209
    fa56:	96 e0       	ldi	r25, 0x06	; 6
    fa58:	0e 94 86 12 	call	0x250c	; 0x250c <_ZNK6HWmidi8getData1E19midiInterfaceType_t>
        uint8_t data2 = hwMIDI.getData2(usbInterface);
    fa5c:	61 e0       	ldi	r22, 0x01	; 1
    fa5e:	81 ed       	ldi	r24, 0xD1	; 209
    fa60:	96 e0       	ldi	r25, 0x06	; 6
    fa62:	0e 94 93 12 	call	0x2526	; 0x2526 <_ZNK6HWmidi8getData2E19midiInterfaceType_t>

        switch(messageType) {
    fa66:	10 3f       	cpi	r17, 0xF0	; 240
    fa68:	b1 f4       	brne	.+44     	; 0xfa96 <_ZN4MIDI10checkInputEv+0x68>

            case midiMessageSystemExclusive:
            sysEx.handleSysEx(hwMIDI.getSysExArray(usbInterface), hwMIDI.getSysExArrayLength(usbInterface));
    fa6a:	61 e0       	ldi	r22, 0x01	; 1
    fa6c:	81 ed       	ldi	r24, 0xD1	; 209
    fa6e:	96 e0       	ldi	r25, 0x06	; 6
    fa70:	0e 94 ac 12 	call	0x2558	; 0x2558 <_ZN6HWmidi19getSysExArrayLengthE19midiInterfaceType_t>
    fa74:	18 2f       	mov	r17, r24
    fa76:	61 e0       	ldi	r22, 0x01	; 1
    fa78:	81 ed       	ldi	r24, 0xD1	; 209
    fa7a:	96 e0       	ldi	r25, 0x06	; 6
    fa7c:	0e 94 a0 12 	call	0x2540	; 0x2540 <_ZN6HWmidi13getSysExArrayE19midiInterfaceType_t>
    fa80:	bc 01       	movw	r22, r24
    fa82:	41 2f       	mov	r20, r17
    fa84:	88 ee       	ldi	r24, 0xE8	; 232
    fa86:	92 e1       	ldi	r25, 0x12	; 18
    fa88:	83 de       	rcall	.-762    	; 0xf790 <_ZN5SysEx11handleSysExEPhh>
            lastSysExMessageTime = rTimeMillis();
    fa8a:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z11rTimeMillisv>
    fa8e:	69 83       	std	Y+1, r22	; 0x01
    fa90:	7a 83       	std	Y+2, r23	; 0x02
    fa92:	8b 83       	std	Y+3, r24	; 0x03
    fa94:	9c 83       	std	Y+4, r25	; 0x04
        }

    }

    //disable sysex config after inactivity
    if (rTimeMillis() - lastSysExMessageTime > CONFIG_TIMEOUT)
    fa96:	0e 94 68 19 	call	0x32d0	; 0x32d0 <_Z11rTimeMillisv>
    fa9a:	09 81       	ldd	r16, Y+1	; 0x01
    fa9c:	1a 81       	ldd	r17, Y+2	; 0x02
    fa9e:	2b 81       	ldd	r18, Y+3	; 0x03
    faa0:	3c 81       	ldd	r19, Y+4	; 0x04
    faa2:	dc 01       	movw	r26, r24
    faa4:	cb 01       	movw	r24, r22
    faa6:	80 1b       	sub	r24, r16
    faa8:	91 0b       	sbc	r25, r17
    faaa:	a2 0b       	sbc	r26, r18
    faac:	b3 0b       	sbc	r27, r19
    faae:	81 36       	cpi	r24, 0x61	; 97
    fab0:	9a 4e       	sbci	r25, 0xEA	; 234
    fab2:	a1 05       	cpc	r26, r1
    fab4:	b1 05       	cpc	r27, r1
    fab6:	18 f0       	brcs	.+6      	; 0xfabe <_ZN4MIDI10checkInputEv+0x90>
        sysEx.disableConf();
    fab8:	88 ee       	ldi	r24, 0xE8	; 232
    faba:	92 e1       	ldi	r25, 0x12	; 18
    fabc:	e3 db       	rcall	.-2106   	; 0xf284 <_ZN5SysEx11disableConfEv>

}
    fabe:	df 91       	pop	r29
    fac0:	cf 91       	pop	r28
    fac2:	1f 91       	pop	r17
    fac4:	0f 91       	pop	r16
    fac6:	08 95       	ret

0000fac8 <_ZN4MIDI10sendNoteOnEhhh>:

void MIDI::sendNoteOn(uint8_t channel, uint8_t note, uint8_t velocity)  {
    fac8:	0f 93       	push	r16
    faca:	1f 93       	push	r17
    facc:	cf 93       	push	r28
    face:	df 93       	push	r29
    fad0:	16 2f       	mov	r17, r22
    fad2:	c4 2f       	mov	r28, r20
    fad4:	d2 2f       	mov	r29, r18

    hwMIDI.sendNoteOn(note, velocity, channel, dinInterface);
    fad6:	00 e0       	ldi	r16, 0x00	; 0
    fad8:	26 2f       	mov	r18, r22
    fada:	4d 2f       	mov	r20, r29
    fadc:	6c 2f       	mov	r22, r28
    fade:	81 ed       	ldi	r24, 0xD1	; 209
    fae0:	96 e0       	ldi	r25, 0x06	; 6
    fae2:	0e 94 07 12 	call	0x240e	; 0x240e <_ZN6HWmidi10sendNoteOnEhhh19midiInterfaceType_t>
    hwMIDI.sendNoteOn(note, velocity, channel, usbInterface);
    fae6:	01 e0       	ldi	r16, 0x01	; 1
    fae8:	21 2f       	mov	r18, r17
    faea:	4d 2f       	mov	r20, r29
    faec:	6c 2f       	mov	r22, r28
    faee:	81 ed       	ldi	r24, 0xD1	; 209
    faf0:	96 e0       	ldi	r25, 0x06	; 6
    faf2:	0e 94 07 12 	call	0x240e	; 0x240e <_ZN6HWmidi10sendNoteOnEhhh19midiInterfaceType_t>

}
    faf6:	df 91       	pop	r29
    faf8:	cf 91       	pop	r28
    fafa:	1f 91       	pop	r17
    fafc:	0f 91       	pop	r16
    fafe:	08 95       	ret

0000fb00 <_ZN4MIDI11sendNoteOffEhhh>:

void MIDI::sendNoteOff(uint8_t channel, uint8_t note, uint8_t velocity)  {
    fb00:	0f 93       	push	r16
    fb02:	1f 93       	push	r17
    fb04:	cf 93       	push	r28
    fb06:	df 93       	push	r29
    fb08:	c6 2f       	mov	r28, r22
    fb0a:	d4 2f       	mov	r29, r20
    fb0c:	12 2f       	mov	r17, r18

    if (noteOffType == noteOffType_standardNoteOff)    {
    fb0e:	fc 01       	movw	r30, r24
    fb10:	20 81       	ld	r18, Z
    fb12:	21 11       	cpse	r18, r1
    fb14:	11 c0       	rjmp	.+34     	; 0xfb38 <_ZN4MIDI11sendNoteOffEhhh+0x38>

        hwMIDI.sendNoteOff(note, velocity, channel, dinInterface);
    fb16:	00 e0       	ldi	r16, 0x00	; 0
    fb18:	26 2f       	mov	r18, r22
    fb1a:	41 2f       	mov	r20, r17
    fb1c:	6d 2f       	mov	r22, r29
    fb1e:	81 ed       	ldi	r24, 0xD1	; 209
    fb20:	96 e0       	ldi	r25, 0x06	; 6
    fb22:	0e 94 12 12 	call	0x2424	; 0x2424 <_ZN6HWmidi11sendNoteOffEhhh19midiInterfaceType_t>
        hwMIDI.sendNoteOff(note, velocity, channel, usbInterface);
    fb26:	01 e0       	ldi	r16, 0x01	; 1
    fb28:	2c 2f       	mov	r18, r28
    fb2a:	41 2f       	mov	r20, r17
    fb2c:	6d 2f       	mov	r22, r29
    fb2e:	81 ed       	ldi	r24, 0xD1	; 209
    fb30:	96 e0       	ldi	r25, 0x06	; 6
    fb32:	0e 94 12 12 	call	0x2424	; 0x2424 <_ZN6HWmidi11sendNoteOffEhhh19midiInterfaceType_t>
    fb36:	02 c0       	rjmp	.+4      	; 0xfb3c <_ZN4MIDI11sendNoteOffEhhh+0x3c>

    }   else {

        sendNoteOn(channel, note, velocity);
    fb38:	21 2f       	mov	r18, r17
    fb3a:	c6 df       	rcall	.-116    	; 0xfac8 <_ZN4MIDI10sendNoteOnEhhh>

    }

}
    fb3c:	df 91       	pop	r29
    fb3e:	cf 91       	pop	r28
    fb40:	1f 91       	pop	r17
    fb42:	0f 91       	pop	r16
    fb44:	08 95       	ret

0000fb46 <_ZN4MIDI17sendControlChangeEhhh>:

void MIDI::sendControlChange(uint8_t channel, uint8_t ccNumber, uint8_t ccValue) {
    fb46:	0f 93       	push	r16
    fb48:	1f 93       	push	r17
    fb4a:	cf 93       	push	r28
    fb4c:	df 93       	push	r29
    fb4e:	16 2f       	mov	r17, r22
    fb50:	c4 2f       	mov	r28, r20
    fb52:	d2 2f       	mov	r29, r18

    hwMIDI.sendControlChange(ccNumber, ccValue, channel, dinInterface);
    fb54:	00 e0       	ldi	r16, 0x00	; 0
    fb56:	26 2f       	mov	r18, r22
    fb58:	4d 2f       	mov	r20, r29
    fb5a:	6c 2f       	mov	r22, r28
    fb5c:	81 ed       	ldi	r24, 0xD1	; 209
    fb5e:	96 e0       	ldi	r25, 0x06	; 6
    fb60:	0e 94 1d 12 	call	0x243a	; 0x243a <_ZN6HWmidi17sendControlChangeEhhh19midiInterfaceType_t>
    hwMIDI.sendControlChange(ccNumber, ccValue, channel, usbInterface);
    fb64:	01 e0       	ldi	r16, 0x01	; 1
    fb66:	21 2f       	mov	r18, r17
    fb68:	4d 2f       	mov	r20, r29
    fb6a:	6c 2f       	mov	r22, r28
    fb6c:	81 ed       	ldi	r24, 0xD1	; 209
    fb6e:	96 e0       	ldi	r25, 0x06	; 6
    fb70:	0e 94 1d 12 	call	0x243a	; 0x243a <_ZN6HWmidi17sendControlChangeEhhh19midiInterfaceType_t>

}
    fb74:	df 91       	pop	r29
    fb76:	cf 91       	pop	r28
    fb78:	1f 91       	pop	r17
    fb7a:	0f 91       	pop	r16
    fb7c:	08 95       	ret

0000fb7e <_ZN4MIDI21sendChannelAftertouchEhh>:

void MIDI::sendChannelAftertouch(uint8_t channel, uint8_t pressure)   {
    fb7e:	cf 93       	push	r28
    fb80:	df 93       	push	r29
    fb82:	d6 2f       	mov	r29, r22
    fb84:	c4 2f       	mov	r28, r20

    hwMIDI.sendAfterTouch(pressure, channel, dinInterface);
    fb86:	20 e0       	ldi	r18, 0x00	; 0
    fb88:	46 2f       	mov	r20, r22
    fb8a:	6c 2f       	mov	r22, r28
    fb8c:	81 ed       	ldi	r24, 0xD1	; 209
    fb8e:	96 e0       	ldi	r25, 0x06	; 6
    fb90:	0e 94 33 12 	call	0x2466	; 0x2466 <_ZN6HWmidi14sendAfterTouchEhh19midiInterfaceType_t>
    hwMIDI.sendAfterTouch(pressure, channel, usbInterface);
    fb94:	21 e0       	ldi	r18, 0x01	; 1
    fb96:	4d 2f       	mov	r20, r29
    fb98:	6c 2f       	mov	r22, r28
    fb9a:	81 ed       	ldi	r24, 0xD1	; 209
    fb9c:	96 e0       	ldi	r25, 0x06	; 6
    fb9e:	0e 94 33 12 	call	0x2466	; 0x2466 <_ZN6HWmidi14sendAfterTouchEhh19midiInterfaceType_t>

}
    fba2:	df 91       	pop	r29
    fba4:	cf 91       	pop	r28
    fba6:	08 95       	ret

0000fba8 <_ZN4MIDI17sendKeyAftertouchEhhh>:

void MIDI::sendKeyAftertouch(uint8_t channel, uint8_t note, uint8_t pressure)   {
    fba8:	0f 93       	push	r16
    fbaa:	1f 93       	push	r17
    fbac:	cf 93       	push	r28
    fbae:	df 93       	push	r29
    fbb0:	16 2f       	mov	r17, r22
    fbb2:	c4 2f       	mov	r28, r20
    fbb4:	d2 2f       	mov	r29, r18

    hwMIDI.sendPolyPressure(note, pressure, channel, dinInterface);
    fbb6:	00 e0       	ldi	r16, 0x00	; 0
    fbb8:	26 2f       	mov	r18, r22
    fbba:	4d 2f       	mov	r20, r29
    fbbc:	6c 2f       	mov	r22, r28
    fbbe:	81 ed       	ldi	r24, 0xD1	; 209
    fbc0:	96 e0       	ldi	r25, 0x06	; 6
    fbc2:	0e 94 28 12 	call	0x2450	; 0x2450 <_ZN6HWmidi16sendPolyPressureEhhh19midiInterfaceType_t>
    hwMIDI.sendPolyPressure(note, pressure, channel, usbInterface);
    fbc6:	01 e0       	ldi	r16, 0x01	; 1
    fbc8:	21 2f       	mov	r18, r17
    fbca:	4d 2f       	mov	r20, r29
    fbcc:	6c 2f       	mov	r22, r28
    fbce:	81 ed       	ldi	r24, 0xD1	; 209
    fbd0:	96 e0       	ldi	r25, 0x06	; 6
    fbd2:	0e 94 28 12 	call	0x2450	; 0x2450 <_ZN6HWmidi16sendPolyPressureEhhh19midiInterfaceType_t>

}
    fbd6:	df 91       	pop	r29
    fbd8:	cf 91       	pop	r28
    fbda:	1f 91       	pop	r17
    fbdc:	0f 91       	pop	r16
    fbde:	08 95       	ret

0000fbe0 <_ZN4MIDI9sendSysExEPhh>:

void MIDI::sendSysEx(uint8_t *sysExArray, uint8_t arraySize)   {
    fbe0:	ef 92       	push	r14
    fbe2:	ff 92       	push	r15
    fbe4:	0f 93       	push	r16
    fbe6:	cf 93       	push	r28
    fbe8:	df 93       	push	r29
    fbea:	7b 01       	movw	r14, r22

    hwMIDI.sendSysEx(arraySize, sysExArray, true, dinInterface);
    fbec:	c4 2f       	mov	r28, r20
    fbee:	d0 e0       	ldi	r29, 0x00	; 0
    fbf0:	00 e0       	ldi	r16, 0x00	; 0
    fbf2:	21 e0       	ldi	r18, 0x01	; 1
    fbf4:	ab 01       	movw	r20, r22
    fbf6:	be 01       	movw	r22, r28
    fbf8:	81 ed       	ldi	r24, 0xD1	; 209
    fbfa:	96 e0       	ldi	r25, 0x06	; 6
    fbfc:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t>
    hwMIDI.sendSysEx(arraySize, sysExArray, true, usbInterface);
    fc00:	01 e0       	ldi	r16, 0x01	; 1
    fc02:	21 e0       	ldi	r18, 0x01	; 1
    fc04:	a7 01       	movw	r20, r14
    fc06:	be 01       	movw	r22, r28
    fc08:	81 ed       	ldi	r24, 0xD1	; 209
    fc0a:	96 e0       	ldi	r25, 0x06	; 6
    fc0c:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <_ZN6HWmidi9sendSysExEjPKhb19midiInterfaceType_t>

}
    fc10:	df 91       	pop	r29
    fc12:	cf 91       	pop	r28
    fc14:	0f 91       	pop	r16
    fc16:	ff 90       	pop	r15
    fc18:	ef 90       	pop	r14
    fc1a:	08 95       	ret

0000fc1c <_ZN4MIDI16getNoteOffStatusEv>:

noteOffType_t MIDI::getNoteOffStatus() {

    return noteOffType;

}
    fc1c:	fc 01       	movw	r30, r24
    fc1e:	80 81       	ld	r24, Z
    fc20:	08 95       	ret

0000fc22 <_ZN4MIDI16setNoteOffStatusE13noteOffType_t>:

void MIDI::setNoteOffStatus(noteOffType_t type) {
    fc22:	ef 92       	push	r14
    fc24:	0f 93       	push	r16
    fc26:	1f 93       	push	r17

    noteOffType = type;
    fc28:	fc 01       	movw	r30, r24
    fc2a:	60 83       	st	Z, r22
    configuration.writeParameter(CONF_BLOCK_MIDI, 0, MIDI_SETTING_NOTE_OFF_TYPE_ID, (uint8_t)type);
    fc2c:	06 2f       	mov	r16, r22
    fc2e:	10 e0       	ldi	r17, 0x00	; 0
    fc30:	e1 2c       	mov	r14, r1
    fc32:	22 e0       	ldi	r18, 0x02	; 2
    fc34:	30 e0       	ldi	r19, 0x00	; 0
    fc36:	40 e0       	ldi	r20, 0x00	; 0
    fc38:	63 e0       	ldi	r22, 0x03	; 3
    fc3a:	8c e0       	ldi	r24, 0x0C	; 12
    fc3c:	92 e0       	ldi	r25, 0x02	; 2
    fc3e:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN13Configuration14writeParameterEhhiib>

}
    fc42:	1f 91       	pop	r17
    fc44:	0f 91       	pop	r16
    fc46:	ef 90       	pop	r14
    fc48:	08 95       	ret

0000fc4a <_ZN4MIDI20runningStatusEnabledEv>:

bool MIDI::runningStatusEnabled()   {

    return hwMIDI.runningStatusEnabled();
    fc4a:	81 ed       	ldi	r24, 0xD1	; 209
    fc4c:	96 e0       	ldi	r25, 0x06	; 6
    fc4e:	0c 94 45 12 	jmp	0x248a	; 0x248a <_ZN6HWmidi20runningStatusEnabledEv>

}
    fc52:	08 95       	ret

0000fc54 <_ZN4MIDI16setRunningStatusEb>:

void MIDI::setRunningStatus(bool option)    {
    fc54:	ef 92       	push	r14
    fc56:	0f 93       	push	r16
    fc58:	1f 93       	push	r17
    fc5a:	06 2f       	mov	r16, r22

    option ? hwMIDI.enableRunningStatus() : hwMIDI.disableRunningStatus();
    fc5c:	66 23       	and	r22, r22
    fc5e:	29 f0       	breq	.+10     	; 0xfc6a <_ZN4MIDI16setRunningStatusEb+0x16>
    fc60:	81 ed       	ldi	r24, 0xD1	; 209
    fc62:	96 e0       	ldi	r25, 0x06	; 6
    fc64:	0e 94 3e 12 	call	0x247c	; 0x247c <_ZN6HWmidi19enableRunningStatusEv>
    fc68:	04 c0       	rjmp	.+8      	; 0xfc72 <_ZN4MIDI16setRunningStatusEb+0x1e>
    fc6a:	81 ed       	ldi	r24, 0xD1	; 209
    fc6c:	96 e0       	ldi	r25, 0x06	; 6
    fc6e:	0e 94 42 12 	call	0x2484	; 0x2484 <_ZN6HWmidi20disableRunningStatusEv>
    configuration.writeParameter(CONF_BLOCK_MIDI, 0, MIDI_SETTING_RUNNING_STATUS_ID, (uint8_t)option);
    fc72:	10 e0       	ldi	r17, 0x00	; 0
    fc74:	e1 2c       	mov	r14, r1
    fc76:	21 e0       	ldi	r18, 0x01	; 1
    fc78:	30 e0       	ldi	r19, 0x00	; 0
    fc7a:	40 e0       	ldi	r20, 0x00	; 0
    fc7c:	63 e0       	ldi	r22, 0x03	; 3
    fc7e:	8c e0       	ldi	r24, 0x0C	; 12
    fc80:	92 e0       	ldi	r25, 0x02	; 2
    fc82:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN13Configuration14writeParameterEhhiib>

}
    fc86:	1f 91       	pop	r17
    fc88:	0f 91       	pop	r16
    fc8a:	ef 90       	pop	r14
    fc8c:	08 95       	ret

0000fc8e <_Z16getNotesPerScale7scale_t>:
#include "Scales.h"

uint8_t getNotesPerScale(scale_t scale)    {

    switch(scale)   {
    fc8e:	85 30       	cpi	r24, 0x05	; 5
    fc90:	30 f0       	brcs	.+12     	; 0xfc9e <_Z16getNotesPerScale7scale_t+0x10>
    fc92:	87 30       	cpi	r24, 0x07	; 7
    fc94:	10 f4       	brcc	.+4      	; 0xfc9a <_Z16getNotesPerScale7scale_t+0xc>
        case scaleHarmonicMajor:
        return 7;

        case scaleMinorPentatonic:
        case scaleMajorPentatonic:
        return 5;
    fc96:	85 e0       	ldi	r24, 0x05	; 5
    fc98:	08 95       	ret

        default:
        return 0;
    fc9a:	80 e0       	ldi	r24, 0x00	; 0
    fc9c:	08 95       	ret
        case scaleNaturalMinor:
        case scaleMelodicMinor:
        case scaleHarmonicMinor:
        case scaleMajor:
        case scaleHarmonicMajor:
        return 7;
    fc9e:	87 e0       	ldi	r24, 0x07	; 7
        default:
        return 0;

    }

}
    fca0:	08 95       	ret

0000fca2 <_Z12getScaleNote7scale_th>:

note_t getScaleNote(scale_t scale, uint8_t note)  {

    //no error checking, be careful

    switch(scale)   {
    fca2:	90 e0       	ldi	r25, 0x00	; 0
    fca4:	87 30       	cpi	r24, 0x07	; 7
    fca6:	91 05       	cpc	r25, r1
    fca8:	70 f5       	brcc	.+92     	; 0xfd06 <_Z12getScaleNote7scale_th+0x64>
    fcaa:	fc 01       	movw	r30, r24
    fcac:	e5 5e       	subi	r30, 0xE5	; 229
    fcae:	fe 4f       	sbci	r31, 0xFE	; 254
    fcb0:	2b c4       	rjmp	.+2134   	; 0x10508 <__tablejump2__>

        case scaleNaturalMinor:
        return scaleNaturalMinor_notes[note];
    fcb2:	e6 2f       	mov	r30, r22
    fcb4:	f0 e0       	ldi	r31, 0x00	; 0
    fcb6:	ec 5f       	subi	r30, 0xFC	; 252
    fcb8:	fd 4f       	sbci	r31, 0xFD	; 253
    fcba:	80 81       	ld	r24, Z
    fcbc:	08 95       	ret
        break;

        case scaleMelodicMinor:
        return scaleMelodicMinor_notes[note];
    fcbe:	e6 2f       	mov	r30, r22
    fcc0:	f0 e0       	ldi	r31, 0x00	; 0
    fcc2:	e3 50       	subi	r30, 0x03	; 3
    fcc4:	fe 4f       	sbci	r31, 0xFE	; 254
    fcc6:	80 81       	ld	r24, Z
    fcc8:	08 95       	ret
        break;

        case scaleHarmonicMinor:
        return scaleHarmonicMinor_notes[note];
    fcca:	e6 2f       	mov	r30, r22
    fccc:	f0 e0       	ldi	r31, 0x00	; 0
    fcce:	ea 50       	subi	r30, 0x0A	; 10
    fcd0:	fe 4f       	sbci	r31, 0xFE	; 254
    fcd2:	80 81       	ld	r24, Z
    fcd4:	08 95       	ret
        break;

        case scaleMajor:
        return scaleMajor_notes[note];
    fcd6:	e6 2f       	mov	r30, r22
    fcd8:	f0 e0       	ldi	r31, 0x00	; 0
    fcda:	e1 51       	subi	r30, 0x11	; 17
    fcdc:	fe 4f       	sbci	r31, 0xFE	; 254
    fcde:	80 81       	ld	r24, Z
    fce0:	08 95       	ret
        break;

        case scaleHarmonicMajor:
        return scaleHarmonicMajor_notes[note];
    fce2:	e6 2f       	mov	r30, r22
    fce4:	f0 e0       	ldi	r31, 0x00	; 0
    fce6:	e8 51       	subi	r30, 0x18	; 24
    fce8:	fe 4f       	sbci	r31, 0xFE	; 254
    fcea:	80 81       	ld	r24, Z
    fcec:	08 95       	ret
        break;

        case scaleMinorPentatonic:
        return scaleMinorPentatonic_notes[note];
    fcee:	e6 2f       	mov	r30, r22
    fcf0:	f0 e0       	ldi	r31, 0x00	; 0
    fcf2:	ed 51       	subi	r30, 0x1D	; 29
    fcf4:	fe 4f       	sbci	r31, 0xFE	; 254
    fcf6:	80 81       	ld	r24, Z
    fcf8:	08 95       	ret
        break;

        case scaleMajorPentatonic:
        return scaleMajorPentatonic_notes[note];
    fcfa:	e6 2f       	mov	r30, r22
    fcfc:	f0 e0       	ldi	r31, 0x00	; 0
    fcfe:	e2 52       	subi	r30, 0x22	; 34
    fd00:	fe 4f       	sbci	r31, 0xFE	; 254
    fd02:	80 81       	ld	r24, Z
    fd04:	08 95       	ret
        break;

        default:
        return C;
    fd06:	80 e0       	ldi	r24, 0x00	; 0

    }

}
    fd08:	08 95       	ret

0000fd0a <__subsf3>:
    fd0a:	50 58       	subi	r21, 0x80	; 128

0000fd0c <__addsf3>:
    fd0c:	bb 27       	eor	r27, r27
    fd0e:	aa 27       	eor	r26, r26
    fd10:	0e d0       	rcall	.+28     	; 0xfd2e <__addsf3x>
    fd12:	70 c1       	rjmp	.+736    	; 0xfff4 <__fp_round>
    fd14:	61 d1       	rcall	.+706    	; 0xffd8 <__fp_pscA>
    fd16:	30 f0       	brcs	.+12     	; 0xfd24 <__addsf3+0x18>
    fd18:	66 d1       	rcall	.+716    	; 0xffe6 <__fp_pscB>
    fd1a:	20 f0       	brcs	.+8      	; 0xfd24 <__addsf3+0x18>
    fd1c:	31 f4       	brne	.+12     	; 0xfd2a <__addsf3+0x1e>
    fd1e:	9f 3f       	cpi	r25, 0xFF	; 255
    fd20:	11 f4       	brne	.+4      	; 0xfd26 <__addsf3+0x1a>
    fd22:	1e f4       	brtc	.+6      	; 0xfd2a <__addsf3+0x1e>
    fd24:	56 c1       	rjmp	.+684    	; 0xffd2 <__fp_nan>
    fd26:	0e f4       	brtc	.+2      	; 0xfd2a <__addsf3+0x1e>
    fd28:	e0 95       	com	r30
    fd2a:	e7 fb       	bst	r30, 7
    fd2c:	4c c1       	rjmp	.+664    	; 0xffc6 <__fp_inf>

0000fd2e <__addsf3x>:
    fd2e:	e9 2f       	mov	r30, r25
    fd30:	72 d1       	rcall	.+740    	; 0x10016 <__fp_split3>
    fd32:	80 f3       	brcs	.-32     	; 0xfd14 <__addsf3+0x8>
    fd34:	ba 17       	cp	r27, r26
    fd36:	62 07       	cpc	r22, r18
    fd38:	73 07       	cpc	r23, r19
    fd3a:	84 07       	cpc	r24, r20
    fd3c:	95 07       	cpc	r25, r21
    fd3e:	18 f0       	brcs	.+6      	; 0xfd46 <__addsf3x+0x18>
    fd40:	71 f4       	brne	.+28     	; 0xfd5e <__addsf3x+0x30>
    fd42:	9e f5       	brtc	.+102    	; 0xfdaa <__addsf3x+0x7c>
    fd44:	8a c1       	rjmp	.+788    	; 0x1005a <__fp_zero>
    fd46:	0e f4       	brtc	.+2      	; 0xfd4a <__addsf3x+0x1c>
    fd48:	e0 95       	com	r30
    fd4a:	0b 2e       	mov	r0, r27
    fd4c:	ba 2f       	mov	r27, r26
    fd4e:	a0 2d       	mov	r26, r0
    fd50:	0b 01       	movw	r0, r22
    fd52:	b9 01       	movw	r22, r18
    fd54:	90 01       	movw	r18, r0
    fd56:	0c 01       	movw	r0, r24
    fd58:	ca 01       	movw	r24, r20
    fd5a:	a0 01       	movw	r20, r0
    fd5c:	11 24       	eor	r1, r1
    fd5e:	ff 27       	eor	r31, r31
    fd60:	59 1b       	sub	r21, r25
    fd62:	99 f0       	breq	.+38     	; 0xfd8a <__addsf3x+0x5c>
    fd64:	59 3f       	cpi	r21, 0xF9	; 249
    fd66:	50 f4       	brcc	.+20     	; 0xfd7c <__addsf3x+0x4e>
    fd68:	50 3e       	cpi	r21, 0xE0	; 224
    fd6a:	68 f1       	brcs	.+90     	; 0xfdc6 <__addsf3x+0x98>
    fd6c:	1a 16       	cp	r1, r26
    fd6e:	f0 40       	sbci	r31, 0x00	; 0
    fd70:	a2 2f       	mov	r26, r18
    fd72:	23 2f       	mov	r18, r19
    fd74:	34 2f       	mov	r19, r20
    fd76:	44 27       	eor	r20, r20
    fd78:	58 5f       	subi	r21, 0xF8	; 248
    fd7a:	f3 cf       	rjmp	.-26     	; 0xfd62 <__addsf3x+0x34>
    fd7c:	46 95       	lsr	r20
    fd7e:	37 95       	ror	r19
    fd80:	27 95       	ror	r18
    fd82:	a7 95       	ror	r26
    fd84:	f0 40       	sbci	r31, 0x00	; 0
    fd86:	53 95       	inc	r21
    fd88:	c9 f7       	brne	.-14     	; 0xfd7c <__addsf3x+0x4e>
    fd8a:	7e f4       	brtc	.+30     	; 0xfdaa <__addsf3x+0x7c>
    fd8c:	1f 16       	cp	r1, r31
    fd8e:	ba 0b       	sbc	r27, r26
    fd90:	62 0b       	sbc	r22, r18
    fd92:	73 0b       	sbc	r23, r19
    fd94:	84 0b       	sbc	r24, r20
    fd96:	ba f0       	brmi	.+46     	; 0xfdc6 <__addsf3x+0x98>
    fd98:	91 50       	subi	r25, 0x01	; 1
    fd9a:	a1 f0       	breq	.+40     	; 0xfdc4 <__addsf3x+0x96>
    fd9c:	ff 0f       	add	r31, r31
    fd9e:	bb 1f       	adc	r27, r27
    fda0:	66 1f       	adc	r22, r22
    fda2:	77 1f       	adc	r23, r23
    fda4:	88 1f       	adc	r24, r24
    fda6:	c2 f7       	brpl	.-16     	; 0xfd98 <__addsf3x+0x6a>
    fda8:	0e c0       	rjmp	.+28     	; 0xfdc6 <__addsf3x+0x98>
    fdaa:	ba 0f       	add	r27, r26
    fdac:	62 1f       	adc	r22, r18
    fdae:	73 1f       	adc	r23, r19
    fdb0:	84 1f       	adc	r24, r20
    fdb2:	48 f4       	brcc	.+18     	; 0xfdc6 <__addsf3x+0x98>
    fdb4:	87 95       	ror	r24
    fdb6:	77 95       	ror	r23
    fdb8:	67 95       	ror	r22
    fdba:	b7 95       	ror	r27
    fdbc:	f7 95       	ror	r31
    fdbe:	9e 3f       	cpi	r25, 0xFE	; 254
    fdc0:	08 f0       	brcs	.+2      	; 0xfdc4 <__addsf3x+0x96>
    fdc2:	b3 cf       	rjmp	.-154    	; 0xfd2a <__addsf3+0x1e>
    fdc4:	93 95       	inc	r25
    fdc6:	88 0f       	add	r24, r24
    fdc8:	08 f0       	brcs	.+2      	; 0xfdcc <__addsf3x+0x9e>
    fdca:	99 27       	eor	r25, r25
    fdcc:	ee 0f       	add	r30, r30
    fdce:	97 95       	ror	r25
    fdd0:	87 95       	ror	r24
    fdd2:	08 95       	ret

0000fdd4 <__cmpsf2>:
    fdd4:	d4 d0       	rcall	.+424    	; 0xff7e <__fp_cmp>
    fdd6:	08 f4       	brcc	.+2      	; 0xfdda <__cmpsf2+0x6>
    fdd8:	81 e0       	ldi	r24, 0x01	; 1
    fdda:	08 95       	ret

0000fddc <__divsf3>:
    fddc:	0c d0       	rcall	.+24     	; 0xfdf6 <__divsf3x>
    fdde:	0a c1       	rjmp	.+532    	; 0xfff4 <__fp_round>
    fde0:	02 d1       	rcall	.+516    	; 0xffe6 <__fp_pscB>
    fde2:	40 f0       	brcs	.+16     	; 0xfdf4 <__divsf3+0x18>
    fde4:	f9 d0       	rcall	.+498    	; 0xffd8 <__fp_pscA>
    fde6:	30 f0       	brcs	.+12     	; 0xfdf4 <__divsf3+0x18>
    fde8:	21 f4       	brne	.+8      	; 0xfdf2 <__divsf3+0x16>
    fdea:	5f 3f       	cpi	r21, 0xFF	; 255
    fdec:	19 f0       	breq	.+6      	; 0xfdf4 <__divsf3+0x18>
    fdee:	eb c0       	rjmp	.+470    	; 0xffc6 <__fp_inf>
    fdf0:	51 11       	cpse	r21, r1
    fdf2:	34 c1       	rjmp	.+616    	; 0x1005c <__fp_szero>
    fdf4:	ee c0       	rjmp	.+476    	; 0xffd2 <__fp_nan>

0000fdf6 <__divsf3x>:
    fdf6:	0f d1       	rcall	.+542    	; 0x10016 <__fp_split3>
    fdf8:	98 f3       	brcs	.-26     	; 0xfde0 <__divsf3+0x4>

0000fdfa <__divsf3_pse>:
    fdfa:	99 23       	and	r25, r25
    fdfc:	c9 f3       	breq	.-14     	; 0xfdf0 <__divsf3+0x14>
    fdfe:	55 23       	and	r21, r21
    fe00:	b1 f3       	breq	.-20     	; 0xfdee <__divsf3+0x12>
    fe02:	95 1b       	sub	r25, r21
    fe04:	55 0b       	sbc	r21, r21
    fe06:	bb 27       	eor	r27, r27
    fe08:	aa 27       	eor	r26, r26
    fe0a:	62 17       	cp	r22, r18
    fe0c:	73 07       	cpc	r23, r19
    fe0e:	84 07       	cpc	r24, r20
    fe10:	38 f0       	brcs	.+14     	; 0xfe20 <__divsf3_pse+0x26>
    fe12:	9f 5f       	subi	r25, 0xFF	; 255
    fe14:	5f 4f       	sbci	r21, 0xFF	; 255
    fe16:	22 0f       	add	r18, r18
    fe18:	33 1f       	adc	r19, r19
    fe1a:	44 1f       	adc	r20, r20
    fe1c:	aa 1f       	adc	r26, r26
    fe1e:	a9 f3       	breq	.-22     	; 0xfe0a <__divsf3_pse+0x10>
    fe20:	33 d0       	rcall	.+102    	; 0xfe88 <__divsf3_pse+0x8e>
    fe22:	0e 2e       	mov	r0, r30
    fe24:	3a f0       	brmi	.+14     	; 0xfe34 <__divsf3_pse+0x3a>
    fe26:	e0 e8       	ldi	r30, 0x80	; 128
    fe28:	30 d0       	rcall	.+96     	; 0xfe8a <__divsf3_pse+0x90>
    fe2a:	91 50       	subi	r25, 0x01	; 1
    fe2c:	50 40       	sbci	r21, 0x00	; 0
    fe2e:	e6 95       	lsr	r30
    fe30:	00 1c       	adc	r0, r0
    fe32:	ca f7       	brpl	.-14     	; 0xfe26 <__divsf3_pse+0x2c>
    fe34:	29 d0       	rcall	.+82     	; 0xfe88 <__divsf3_pse+0x8e>
    fe36:	fe 2f       	mov	r31, r30
    fe38:	27 d0       	rcall	.+78     	; 0xfe88 <__divsf3_pse+0x8e>
    fe3a:	66 0f       	add	r22, r22
    fe3c:	77 1f       	adc	r23, r23
    fe3e:	88 1f       	adc	r24, r24
    fe40:	bb 1f       	adc	r27, r27
    fe42:	26 17       	cp	r18, r22
    fe44:	37 07       	cpc	r19, r23
    fe46:	48 07       	cpc	r20, r24
    fe48:	ab 07       	cpc	r26, r27
    fe4a:	b0 e8       	ldi	r27, 0x80	; 128
    fe4c:	09 f0       	breq	.+2      	; 0xfe50 <__divsf3_pse+0x56>
    fe4e:	bb 0b       	sbc	r27, r27
    fe50:	80 2d       	mov	r24, r0
    fe52:	bf 01       	movw	r22, r30
    fe54:	ff 27       	eor	r31, r31
    fe56:	93 58       	subi	r25, 0x83	; 131
    fe58:	5f 4f       	sbci	r21, 0xFF	; 255
    fe5a:	2a f0       	brmi	.+10     	; 0xfe66 <__divsf3_pse+0x6c>
    fe5c:	9e 3f       	cpi	r25, 0xFE	; 254
    fe5e:	51 05       	cpc	r21, r1
    fe60:	68 f0       	brcs	.+26     	; 0xfe7c <__divsf3_pse+0x82>
    fe62:	b1 c0       	rjmp	.+354    	; 0xffc6 <__fp_inf>
    fe64:	fb c0       	rjmp	.+502    	; 0x1005c <__fp_szero>
    fe66:	5f 3f       	cpi	r21, 0xFF	; 255
    fe68:	ec f3       	brlt	.-6      	; 0xfe64 <__divsf3_pse+0x6a>
    fe6a:	98 3e       	cpi	r25, 0xE8	; 232
    fe6c:	dc f3       	brlt	.-10     	; 0xfe64 <__divsf3_pse+0x6a>
    fe6e:	86 95       	lsr	r24
    fe70:	77 95       	ror	r23
    fe72:	67 95       	ror	r22
    fe74:	b7 95       	ror	r27
    fe76:	f7 95       	ror	r31
    fe78:	9f 5f       	subi	r25, 0xFF	; 255
    fe7a:	c9 f7       	brne	.-14     	; 0xfe6e <__divsf3_pse+0x74>
    fe7c:	88 0f       	add	r24, r24
    fe7e:	91 1d       	adc	r25, r1
    fe80:	96 95       	lsr	r25
    fe82:	87 95       	ror	r24
    fe84:	97 f9       	bld	r25, 7
    fe86:	08 95       	ret
    fe88:	e1 e0       	ldi	r30, 0x01	; 1
    fe8a:	66 0f       	add	r22, r22
    fe8c:	77 1f       	adc	r23, r23
    fe8e:	88 1f       	adc	r24, r24
    fe90:	bb 1f       	adc	r27, r27
    fe92:	62 17       	cp	r22, r18
    fe94:	73 07       	cpc	r23, r19
    fe96:	84 07       	cpc	r24, r20
    fe98:	ba 07       	cpc	r27, r26
    fe9a:	20 f0       	brcs	.+8      	; 0xfea4 <__divsf3_pse+0xaa>
    fe9c:	62 1b       	sub	r22, r18
    fe9e:	73 0b       	sbc	r23, r19
    fea0:	84 0b       	sbc	r24, r20
    fea2:	ba 0b       	sbc	r27, r26
    fea4:	ee 1f       	adc	r30, r30
    fea6:	88 f7       	brcc	.-30     	; 0xfe8a <__divsf3_pse+0x90>
    fea8:	e0 95       	com	r30
    feaa:	08 95       	ret

0000feac <__fixunssfsi>:
    feac:	bc d0       	rcall	.+376    	; 0x10026 <__fp_splitA>
    feae:	88 f0       	brcs	.+34     	; 0xfed2 <__fixunssfsi+0x26>
    feb0:	9f 57       	subi	r25, 0x7F	; 127
    feb2:	90 f0       	brcs	.+36     	; 0xfed8 <__fixunssfsi+0x2c>
    feb4:	b9 2f       	mov	r27, r25
    feb6:	99 27       	eor	r25, r25
    feb8:	b7 51       	subi	r27, 0x17	; 23
    feba:	a0 f0       	brcs	.+40     	; 0xfee4 <__fixunssfsi+0x38>
    febc:	d1 f0       	breq	.+52     	; 0xfef2 <__fixunssfsi+0x46>
    febe:	66 0f       	add	r22, r22
    fec0:	77 1f       	adc	r23, r23
    fec2:	88 1f       	adc	r24, r24
    fec4:	99 1f       	adc	r25, r25
    fec6:	1a f0       	brmi	.+6      	; 0xfece <__fixunssfsi+0x22>
    fec8:	ba 95       	dec	r27
    feca:	c9 f7       	brne	.-14     	; 0xfebe <__fixunssfsi+0x12>
    fecc:	12 c0       	rjmp	.+36     	; 0xfef2 <__fixunssfsi+0x46>
    fece:	b1 30       	cpi	r27, 0x01	; 1
    fed0:	81 f0       	breq	.+32     	; 0xfef2 <__fixunssfsi+0x46>
    fed2:	c3 d0       	rcall	.+390    	; 0x1005a <__fp_zero>
    fed4:	b1 e0       	ldi	r27, 0x01	; 1
    fed6:	08 95       	ret
    fed8:	c0 c0       	rjmp	.+384    	; 0x1005a <__fp_zero>
    feda:	67 2f       	mov	r22, r23
    fedc:	78 2f       	mov	r23, r24
    fede:	88 27       	eor	r24, r24
    fee0:	b8 5f       	subi	r27, 0xF8	; 248
    fee2:	39 f0       	breq	.+14     	; 0xfef2 <__fixunssfsi+0x46>
    fee4:	b9 3f       	cpi	r27, 0xF9	; 249
    fee6:	cc f3       	brlt	.-14     	; 0xfeda <__fixunssfsi+0x2e>
    fee8:	86 95       	lsr	r24
    feea:	77 95       	ror	r23
    feec:	67 95       	ror	r22
    feee:	b3 95       	inc	r27
    fef0:	d9 f7       	brne	.-10     	; 0xfee8 <__fixunssfsi+0x3c>
    fef2:	3e f4       	brtc	.+14     	; 0xff02 <__DATA_REGION_LENGTH__+0x2>
    fef4:	90 95       	com	r25
    fef6:	80 95       	com	r24
    fef8:	70 95       	com	r23
    fefa:	61 95       	neg	r22
    fefc:	7f 4f       	sbci	r23, 0xFF	; 255
    fefe:	8f 4f       	sbci	r24, 0xFF	; 255
    ff00:	9f 4f       	sbci	r25, 0xFF	; 255
    ff02:	08 95       	ret

0000ff04 <__floatunsisf>:
    ff04:	e8 94       	clt
    ff06:	09 c0       	rjmp	.+18     	; 0xff1a <__floatsisf+0x12>

0000ff08 <__floatsisf>:
    ff08:	97 fb       	bst	r25, 7
    ff0a:	3e f4       	brtc	.+14     	; 0xff1a <__floatsisf+0x12>
    ff0c:	90 95       	com	r25
    ff0e:	80 95       	com	r24
    ff10:	70 95       	com	r23
    ff12:	61 95       	neg	r22
    ff14:	7f 4f       	sbci	r23, 0xFF	; 255
    ff16:	8f 4f       	sbci	r24, 0xFF	; 255
    ff18:	9f 4f       	sbci	r25, 0xFF	; 255
    ff1a:	99 23       	and	r25, r25
    ff1c:	a9 f0       	breq	.+42     	; 0xff48 <__floatsisf+0x40>
    ff1e:	f9 2f       	mov	r31, r25
    ff20:	96 e9       	ldi	r25, 0x96	; 150
    ff22:	bb 27       	eor	r27, r27
    ff24:	93 95       	inc	r25
    ff26:	f6 95       	lsr	r31
    ff28:	87 95       	ror	r24
    ff2a:	77 95       	ror	r23
    ff2c:	67 95       	ror	r22
    ff2e:	b7 95       	ror	r27
    ff30:	f1 11       	cpse	r31, r1
    ff32:	f8 cf       	rjmp	.-16     	; 0xff24 <__floatsisf+0x1c>
    ff34:	fa f4       	brpl	.+62     	; 0xff74 <__floatsisf+0x6c>
    ff36:	bb 0f       	add	r27, r27
    ff38:	11 f4       	brne	.+4      	; 0xff3e <__floatsisf+0x36>
    ff3a:	60 ff       	sbrs	r22, 0
    ff3c:	1b c0       	rjmp	.+54     	; 0xff74 <__floatsisf+0x6c>
    ff3e:	6f 5f       	subi	r22, 0xFF	; 255
    ff40:	7f 4f       	sbci	r23, 0xFF	; 255
    ff42:	8f 4f       	sbci	r24, 0xFF	; 255
    ff44:	9f 4f       	sbci	r25, 0xFF	; 255
    ff46:	16 c0       	rjmp	.+44     	; 0xff74 <__floatsisf+0x6c>
    ff48:	88 23       	and	r24, r24
    ff4a:	11 f0       	breq	.+4      	; 0xff50 <__floatsisf+0x48>
    ff4c:	96 e9       	ldi	r25, 0x96	; 150
    ff4e:	11 c0       	rjmp	.+34     	; 0xff72 <__floatsisf+0x6a>
    ff50:	77 23       	and	r23, r23
    ff52:	21 f0       	breq	.+8      	; 0xff5c <__floatsisf+0x54>
    ff54:	9e e8       	ldi	r25, 0x8E	; 142
    ff56:	87 2f       	mov	r24, r23
    ff58:	76 2f       	mov	r23, r22
    ff5a:	05 c0       	rjmp	.+10     	; 0xff66 <__floatsisf+0x5e>
    ff5c:	66 23       	and	r22, r22
    ff5e:	71 f0       	breq	.+28     	; 0xff7c <__floatsisf+0x74>
    ff60:	96 e8       	ldi	r25, 0x86	; 134
    ff62:	86 2f       	mov	r24, r22
    ff64:	70 e0       	ldi	r23, 0x00	; 0
    ff66:	60 e0       	ldi	r22, 0x00	; 0
    ff68:	2a f0       	brmi	.+10     	; 0xff74 <__floatsisf+0x6c>
    ff6a:	9a 95       	dec	r25
    ff6c:	66 0f       	add	r22, r22
    ff6e:	77 1f       	adc	r23, r23
    ff70:	88 1f       	adc	r24, r24
    ff72:	da f7       	brpl	.-10     	; 0xff6a <__floatsisf+0x62>
    ff74:	88 0f       	add	r24, r24
    ff76:	96 95       	lsr	r25
    ff78:	87 95       	ror	r24
    ff7a:	97 f9       	bld	r25, 7
    ff7c:	08 95       	ret

0000ff7e <__fp_cmp>:
    ff7e:	99 0f       	add	r25, r25
    ff80:	00 08       	sbc	r0, r0
    ff82:	55 0f       	add	r21, r21
    ff84:	aa 0b       	sbc	r26, r26
    ff86:	e0 e8       	ldi	r30, 0x80	; 128
    ff88:	fe ef       	ldi	r31, 0xFE	; 254
    ff8a:	16 16       	cp	r1, r22
    ff8c:	17 06       	cpc	r1, r23
    ff8e:	e8 07       	cpc	r30, r24
    ff90:	f9 07       	cpc	r31, r25
    ff92:	c0 f0       	brcs	.+48     	; 0xffc4 <__fp_cmp+0x46>
    ff94:	12 16       	cp	r1, r18
    ff96:	13 06       	cpc	r1, r19
    ff98:	e4 07       	cpc	r30, r20
    ff9a:	f5 07       	cpc	r31, r21
    ff9c:	98 f0       	brcs	.+38     	; 0xffc4 <__fp_cmp+0x46>
    ff9e:	62 1b       	sub	r22, r18
    ffa0:	73 0b       	sbc	r23, r19
    ffa2:	84 0b       	sbc	r24, r20
    ffa4:	95 0b       	sbc	r25, r21
    ffa6:	39 f4       	brne	.+14     	; 0xffb6 <__fp_cmp+0x38>
    ffa8:	0a 26       	eor	r0, r26
    ffaa:	61 f0       	breq	.+24     	; 0xffc4 <__fp_cmp+0x46>
    ffac:	23 2b       	or	r18, r19
    ffae:	24 2b       	or	r18, r20
    ffb0:	25 2b       	or	r18, r21
    ffb2:	21 f4       	brne	.+8      	; 0xffbc <__fp_cmp+0x3e>
    ffb4:	08 95       	ret
    ffb6:	0a 26       	eor	r0, r26
    ffb8:	09 f4       	brne	.+2      	; 0xffbc <__fp_cmp+0x3e>
    ffba:	a1 40       	sbci	r26, 0x01	; 1
    ffbc:	a6 95       	lsr	r26
    ffbe:	8f ef       	ldi	r24, 0xFF	; 255
    ffc0:	81 1d       	adc	r24, r1
    ffc2:	81 1d       	adc	r24, r1
    ffc4:	08 95       	ret

0000ffc6 <__fp_inf>:
    ffc6:	97 f9       	bld	r25, 7
    ffc8:	9f 67       	ori	r25, 0x7F	; 127
    ffca:	80 e8       	ldi	r24, 0x80	; 128
    ffcc:	70 e0       	ldi	r23, 0x00	; 0
    ffce:	60 e0       	ldi	r22, 0x00	; 0
    ffd0:	08 95       	ret

0000ffd2 <__fp_nan>:
    ffd2:	9f ef       	ldi	r25, 0xFF	; 255
    ffd4:	80 ec       	ldi	r24, 0xC0	; 192
    ffd6:	08 95       	ret

0000ffd8 <__fp_pscA>:
    ffd8:	00 24       	eor	r0, r0
    ffda:	0a 94       	dec	r0
    ffdc:	16 16       	cp	r1, r22
    ffde:	17 06       	cpc	r1, r23
    ffe0:	18 06       	cpc	r1, r24
    ffe2:	09 06       	cpc	r0, r25
    ffe4:	08 95       	ret

0000ffe6 <__fp_pscB>:
    ffe6:	00 24       	eor	r0, r0
    ffe8:	0a 94       	dec	r0
    ffea:	12 16       	cp	r1, r18
    ffec:	13 06       	cpc	r1, r19
    ffee:	14 06       	cpc	r1, r20
    fff0:	05 06       	cpc	r0, r21
    fff2:	08 95       	ret

0000fff4 <__fp_round>:
    fff4:	09 2e       	mov	r0, r25
    fff6:	03 94       	inc	r0
    fff8:	00 0c       	add	r0, r0
    fffa:	11 f4       	brne	.+4      	; 0x10000 <__EEPROM_REGION_LENGTH__>
    fffc:	88 23       	and	r24, r24
    fffe:	52 f0       	brmi	.+20     	; 0x10014 <__EEPROM_REGION_LENGTH__+0x14>
   10000:	bb 0f       	add	r27, r27
   10002:	40 f4       	brcc	.+16     	; 0x10014 <__EEPROM_REGION_LENGTH__+0x14>
   10004:	bf 2b       	or	r27, r31
   10006:	11 f4       	brne	.+4      	; 0x1000c <__EEPROM_REGION_LENGTH__+0xc>
   10008:	60 ff       	sbrs	r22, 0
   1000a:	04 c0       	rjmp	.+8      	; 0x10014 <__EEPROM_REGION_LENGTH__+0x14>
   1000c:	6f 5f       	subi	r22, 0xFF	; 255
   1000e:	7f 4f       	sbci	r23, 0xFF	; 255
   10010:	8f 4f       	sbci	r24, 0xFF	; 255
   10012:	9f 4f       	sbci	r25, 0xFF	; 255
   10014:	08 95       	ret

00010016 <__fp_split3>:
   10016:	57 fd       	sbrc	r21, 7
   10018:	90 58       	subi	r25, 0x80	; 128
   1001a:	44 0f       	add	r20, r20
   1001c:	55 1f       	adc	r21, r21
   1001e:	59 f0       	breq	.+22     	; 0x10036 <__fp_splitA+0x10>
   10020:	5f 3f       	cpi	r21, 0xFF	; 255
   10022:	71 f0       	breq	.+28     	; 0x10040 <__fp_splitA+0x1a>
   10024:	47 95       	ror	r20

00010026 <__fp_splitA>:
   10026:	88 0f       	add	r24, r24
   10028:	97 fb       	bst	r25, 7
   1002a:	99 1f       	adc	r25, r25
   1002c:	61 f0       	breq	.+24     	; 0x10046 <__fp_splitA+0x20>
   1002e:	9f 3f       	cpi	r25, 0xFF	; 255
   10030:	79 f0       	breq	.+30     	; 0x10050 <__fp_splitA+0x2a>
   10032:	87 95       	ror	r24
   10034:	08 95       	ret
   10036:	12 16       	cp	r1, r18
   10038:	13 06       	cpc	r1, r19
   1003a:	14 06       	cpc	r1, r20
   1003c:	55 1f       	adc	r21, r21
   1003e:	f2 cf       	rjmp	.-28     	; 0x10024 <__fp_split3+0xe>
   10040:	46 95       	lsr	r20
   10042:	f1 df       	rcall	.-30     	; 0x10026 <__fp_splitA>
   10044:	08 c0       	rjmp	.+16     	; 0x10056 <__fp_splitA+0x30>
   10046:	16 16       	cp	r1, r22
   10048:	17 06       	cpc	r1, r23
   1004a:	18 06       	cpc	r1, r24
   1004c:	99 1f       	adc	r25, r25
   1004e:	f1 cf       	rjmp	.-30     	; 0x10032 <__fp_splitA+0xc>
   10050:	86 95       	lsr	r24
   10052:	71 05       	cpc	r23, r1
   10054:	61 05       	cpc	r22, r1
   10056:	08 94       	sec
   10058:	08 95       	ret

0001005a <__fp_zero>:
   1005a:	e8 94       	clt

0001005c <__fp_szero>:
   1005c:	bb 27       	eor	r27, r27
   1005e:	66 27       	eor	r22, r22
   10060:	77 27       	eor	r23, r23
   10062:	cb 01       	movw	r24, r22
   10064:	97 f9       	bld	r25, 7
   10066:	08 95       	ret
   10068:	0e f0       	brts	.+2      	; 0x1006c <__fp_szero+0x10>
   1006a:	5e c1       	rjmp	.+700    	; 0x10328 <__fp_mpack>
   1006c:	b2 cf       	rjmp	.-156    	; 0xffd2 <__fp_nan>
   1006e:	68 94       	set
   10070:	aa cf       	rjmp	.-172    	; 0xffc6 <__fp_inf>

00010072 <log>:
   10072:	d9 df       	rcall	.-78     	; 0x10026 <__fp_splitA>
   10074:	c8 f3       	brcs	.-14     	; 0x10068 <__fp_szero+0xc>
   10076:	99 23       	and	r25, r25
   10078:	d1 f3       	breq	.-12     	; 0x1006e <__fp_szero+0x12>
   1007a:	c6 f3       	brts	.-16     	; 0x1006c <__fp_szero+0x10>
   1007c:	df 93       	push	r29
   1007e:	cf 93       	push	r28
   10080:	1f 93       	push	r17
   10082:	0f 93       	push	r16
   10084:	ff 92       	push	r15
   10086:	c9 2f       	mov	r28, r25
   10088:	dd 27       	eor	r29, r29
   1008a:	88 23       	and	r24, r24
   1008c:	2a f0       	brmi	.+10     	; 0x10098 <log+0x26>
   1008e:	21 97       	sbiw	r28, 0x01	; 1
   10090:	66 0f       	add	r22, r22
   10092:	77 1f       	adc	r23, r23
   10094:	88 1f       	adc	r24, r24
   10096:	da f7       	brpl	.-10     	; 0x1008e <log+0x1c>
   10098:	20 e0       	ldi	r18, 0x00	; 0
   1009a:	30 e0       	ldi	r19, 0x00	; 0
   1009c:	40 e8       	ldi	r20, 0x80	; 128
   1009e:	5f eb       	ldi	r21, 0xBF	; 191
   100a0:	9f e3       	ldi	r25, 0x3F	; 63
   100a2:	88 39       	cpi	r24, 0x98	; 152
   100a4:	20 f0       	brcs	.+8      	; 0x100ae <log+0x3c>
   100a6:	80 3e       	cpi	r24, 0xE0	; 224
   100a8:	30 f0       	brcs	.+12     	; 0x100b6 <log+0x44>
   100aa:	21 96       	adiw	r28, 0x01	; 1
   100ac:	8f 77       	andi	r24, 0x7F	; 127
   100ae:	2e de       	rcall	.-932    	; 0xfd0c <__addsf3>
   100b0:	e4 e4       	ldi	r30, 0x44	; 68
   100b2:	f2 e0       	ldi	r31, 0x02	; 2
   100b4:	03 c0       	rjmp	.+6      	; 0x100bc <log+0x4a>
   100b6:	2a de       	rcall	.-940    	; 0xfd0c <__addsf3>
   100b8:	e1 e7       	ldi	r30, 0x71	; 113
   100ba:	f2 e0       	ldi	r31, 0x02	; 2
   100bc:	43 d1       	rcall	.+646    	; 0x10344 <__fp_powser>
   100be:	8b 01       	movw	r16, r22
   100c0:	be 01       	movw	r22, r28
   100c2:	ec 01       	movw	r28, r24
   100c4:	fb 2e       	mov	r15, r27
   100c6:	6f 57       	subi	r22, 0x7F	; 127
   100c8:	71 09       	sbc	r23, r1
   100ca:	75 95       	asr	r23
   100cc:	77 1f       	adc	r23, r23
   100ce:	88 0b       	sbc	r24, r24
   100d0:	99 0b       	sbc	r25, r25
   100d2:	1a df       	rcall	.-460    	; 0xff08 <__floatsisf>
   100d4:	28 e1       	ldi	r18, 0x18	; 24
   100d6:	32 e7       	ldi	r19, 0x72	; 114
   100d8:	41 e3       	ldi	r20, 0x31	; 49
   100da:	5f e3       	ldi	r21, 0x3F	; 63
   100dc:	16 d0       	rcall	.+44     	; 0x1010a <__mulsf3x>
   100de:	af 2d       	mov	r26, r15
   100e0:	98 01       	movw	r18, r16
   100e2:	ae 01       	movw	r20, r28
   100e4:	ff 90       	pop	r15
   100e6:	0f 91       	pop	r16
   100e8:	1f 91       	pop	r17
   100ea:	cf 91       	pop	r28
   100ec:	df 91       	pop	r29
   100ee:	1f de       	rcall	.-962    	; 0xfd2e <__addsf3x>
   100f0:	81 cf       	rjmp	.-254    	; 0xfff4 <__fp_round>

000100f2 <__mulsf3>:
   100f2:	0b d0       	rcall	.+22     	; 0x1010a <__mulsf3x>
   100f4:	7f cf       	rjmp	.-258    	; 0xfff4 <__fp_round>
   100f6:	70 df       	rcall	.-288    	; 0xffd8 <__fp_pscA>
   100f8:	28 f0       	brcs	.+10     	; 0x10104 <__mulsf3+0x12>
   100fa:	75 df       	rcall	.-278    	; 0xffe6 <__fp_pscB>
   100fc:	18 f0       	brcs	.+6      	; 0x10104 <__mulsf3+0x12>
   100fe:	95 23       	and	r25, r21
   10100:	09 f0       	breq	.+2      	; 0x10104 <__mulsf3+0x12>
   10102:	61 cf       	rjmp	.-318    	; 0xffc6 <__fp_inf>
   10104:	66 cf       	rjmp	.-308    	; 0xffd2 <__fp_nan>
   10106:	11 24       	eor	r1, r1
   10108:	a9 cf       	rjmp	.-174    	; 0x1005c <__fp_szero>

0001010a <__mulsf3x>:
   1010a:	85 df       	rcall	.-246    	; 0x10016 <__fp_split3>
   1010c:	a0 f3       	brcs	.-24     	; 0x100f6 <__mulsf3+0x4>

0001010e <__mulsf3_pse>:
   1010e:	95 9f       	mul	r25, r21
   10110:	d1 f3       	breq	.-12     	; 0x10106 <__mulsf3+0x14>
   10112:	95 0f       	add	r25, r21
   10114:	50 e0       	ldi	r21, 0x00	; 0
   10116:	55 1f       	adc	r21, r21
   10118:	62 9f       	mul	r22, r18
   1011a:	f0 01       	movw	r30, r0
   1011c:	72 9f       	mul	r23, r18
   1011e:	bb 27       	eor	r27, r27
   10120:	f0 0d       	add	r31, r0
   10122:	b1 1d       	adc	r27, r1
   10124:	63 9f       	mul	r22, r19
   10126:	aa 27       	eor	r26, r26
   10128:	f0 0d       	add	r31, r0
   1012a:	b1 1d       	adc	r27, r1
   1012c:	aa 1f       	adc	r26, r26
   1012e:	64 9f       	mul	r22, r20
   10130:	66 27       	eor	r22, r22
   10132:	b0 0d       	add	r27, r0
   10134:	a1 1d       	adc	r26, r1
   10136:	66 1f       	adc	r22, r22
   10138:	82 9f       	mul	r24, r18
   1013a:	22 27       	eor	r18, r18
   1013c:	b0 0d       	add	r27, r0
   1013e:	a1 1d       	adc	r26, r1
   10140:	62 1f       	adc	r22, r18
   10142:	73 9f       	mul	r23, r19
   10144:	b0 0d       	add	r27, r0
   10146:	a1 1d       	adc	r26, r1
   10148:	62 1f       	adc	r22, r18
   1014a:	83 9f       	mul	r24, r19
   1014c:	a0 0d       	add	r26, r0
   1014e:	61 1d       	adc	r22, r1
   10150:	22 1f       	adc	r18, r18
   10152:	74 9f       	mul	r23, r20
   10154:	33 27       	eor	r19, r19
   10156:	a0 0d       	add	r26, r0
   10158:	61 1d       	adc	r22, r1
   1015a:	23 1f       	adc	r18, r19
   1015c:	84 9f       	mul	r24, r20
   1015e:	60 0d       	add	r22, r0
   10160:	21 1d       	adc	r18, r1
   10162:	82 2f       	mov	r24, r18
   10164:	76 2f       	mov	r23, r22
   10166:	6a 2f       	mov	r22, r26
   10168:	11 24       	eor	r1, r1
   1016a:	9f 57       	subi	r25, 0x7F	; 127
   1016c:	50 40       	sbci	r21, 0x00	; 0
   1016e:	8a f0       	brmi	.+34     	; 0x10192 <__mulsf3_pse+0x84>
   10170:	e1 f0       	breq	.+56     	; 0x101aa <__mulsf3_pse+0x9c>
   10172:	88 23       	and	r24, r24
   10174:	4a f0       	brmi	.+18     	; 0x10188 <__mulsf3_pse+0x7a>
   10176:	ee 0f       	add	r30, r30
   10178:	ff 1f       	adc	r31, r31
   1017a:	bb 1f       	adc	r27, r27
   1017c:	66 1f       	adc	r22, r22
   1017e:	77 1f       	adc	r23, r23
   10180:	88 1f       	adc	r24, r24
   10182:	91 50       	subi	r25, 0x01	; 1
   10184:	50 40       	sbci	r21, 0x00	; 0
   10186:	a9 f7       	brne	.-22     	; 0x10172 <__mulsf3_pse+0x64>
   10188:	9e 3f       	cpi	r25, 0xFE	; 254
   1018a:	51 05       	cpc	r21, r1
   1018c:	70 f0       	brcs	.+28     	; 0x101aa <__mulsf3_pse+0x9c>
   1018e:	1b cf       	rjmp	.-458    	; 0xffc6 <__fp_inf>
   10190:	65 cf       	rjmp	.-310    	; 0x1005c <__fp_szero>
   10192:	5f 3f       	cpi	r21, 0xFF	; 255
   10194:	ec f3       	brlt	.-6      	; 0x10190 <__mulsf3_pse+0x82>
   10196:	98 3e       	cpi	r25, 0xE8	; 232
   10198:	dc f3       	brlt	.-10     	; 0x10190 <__mulsf3_pse+0x82>
   1019a:	86 95       	lsr	r24
   1019c:	77 95       	ror	r23
   1019e:	67 95       	ror	r22
   101a0:	b7 95       	ror	r27
   101a2:	f7 95       	ror	r31
   101a4:	e7 95       	ror	r30
   101a6:	9f 5f       	subi	r25, 0xFF	; 255
   101a8:	c1 f7       	brne	.-16     	; 0x1019a <__mulsf3_pse+0x8c>
   101aa:	fe 2b       	or	r31, r30
   101ac:	88 0f       	add	r24, r24
   101ae:	91 1d       	adc	r25, r1
   101b0:	96 95       	lsr	r25
   101b2:	87 95       	ror	r24
   101b4:	97 f9       	bld	r25, 7
   101b6:	08 95       	ret

000101b8 <pow>:
   101b8:	fa 01       	movw	r30, r20
   101ba:	ee 0f       	add	r30, r30
   101bc:	ff 1f       	adc	r31, r31
   101be:	30 96       	adiw	r30, 0x00	; 0
   101c0:	21 05       	cpc	r18, r1
   101c2:	31 05       	cpc	r19, r1
   101c4:	99 f1       	breq	.+102    	; 0x1022c <pow+0x74>
   101c6:	61 15       	cp	r22, r1
   101c8:	71 05       	cpc	r23, r1
   101ca:	61 f4       	brne	.+24     	; 0x101e4 <pow+0x2c>
   101cc:	80 38       	cpi	r24, 0x80	; 128
   101ce:	bf e3       	ldi	r27, 0x3F	; 63
   101d0:	9b 07       	cpc	r25, r27
   101d2:	49 f1       	breq	.+82     	; 0x10226 <pow+0x6e>
   101d4:	68 94       	set
   101d6:	90 38       	cpi	r25, 0x80	; 128
   101d8:	81 05       	cpc	r24, r1
   101da:	61 f0       	breq	.+24     	; 0x101f4 <pow+0x3c>
   101dc:	80 38       	cpi	r24, 0x80	; 128
   101de:	bf ef       	ldi	r27, 0xFF	; 255
   101e0:	9b 07       	cpc	r25, r27
   101e2:	41 f0       	breq	.+16     	; 0x101f4 <pow+0x3c>
   101e4:	99 23       	and	r25, r25
   101e6:	42 f5       	brpl	.+80     	; 0x10238 <pow+0x80>
   101e8:	ff 3f       	cpi	r31, 0xFF	; 255
   101ea:	e1 05       	cpc	r30, r1
   101ec:	31 05       	cpc	r19, r1
   101ee:	21 05       	cpc	r18, r1
   101f0:	11 f1       	breq	.+68     	; 0x10236 <pow+0x7e>
   101f2:	e8 94       	clt
   101f4:	08 94       	sec
   101f6:	e7 95       	ror	r30
   101f8:	d9 01       	movw	r26, r18
   101fa:	aa 23       	and	r26, r26
   101fc:	29 f4       	brne	.+10     	; 0x10208 <pow+0x50>
   101fe:	ab 2f       	mov	r26, r27
   10200:	be 2f       	mov	r27, r30
   10202:	f8 5f       	subi	r31, 0xF8	; 248
   10204:	d0 f3       	brcs	.-12     	; 0x101fa <pow+0x42>
   10206:	10 c0       	rjmp	.+32     	; 0x10228 <pow+0x70>
   10208:	ff 5f       	subi	r31, 0xFF	; 255
   1020a:	70 f4       	brcc	.+28     	; 0x10228 <pow+0x70>
   1020c:	a6 95       	lsr	r26
   1020e:	e0 f7       	brcc	.-8      	; 0x10208 <pow+0x50>
   10210:	f7 39       	cpi	r31, 0x97	; 151
   10212:	50 f0       	brcs	.+20     	; 0x10228 <pow+0x70>
   10214:	19 f0       	breq	.+6      	; 0x1021c <pow+0x64>
   10216:	ff 3a       	cpi	r31, 0xAF	; 175
   10218:	38 f4       	brcc	.+14     	; 0x10228 <pow+0x70>
   1021a:	9f 77       	andi	r25, 0x7F	; 127
   1021c:	9f 93       	push	r25
   1021e:	0c d0       	rcall	.+24     	; 0x10238 <pow+0x80>
   10220:	0f 90       	pop	r0
   10222:	07 fc       	sbrc	r0, 7
   10224:	90 58       	subi	r25, 0x80	; 128
   10226:	08 95       	ret
   10228:	3e f0       	brts	.+14     	; 0x10238 <pow+0x80>
   1022a:	d3 ce       	rjmp	.-602    	; 0xffd2 <__fp_nan>
   1022c:	60 e0       	ldi	r22, 0x00	; 0
   1022e:	70 e0       	ldi	r23, 0x00	; 0
   10230:	80 e8       	ldi	r24, 0x80	; 128
   10232:	9f e3       	ldi	r25, 0x3F	; 63
   10234:	08 95       	ret
   10236:	4f e7       	ldi	r20, 0x7F	; 127
   10238:	9f 77       	andi	r25, 0x7F	; 127
   1023a:	5f 93       	push	r21
   1023c:	4f 93       	push	r20
   1023e:	3f 93       	push	r19
   10240:	2f 93       	push	r18
   10242:	17 df       	rcall	.-466    	; 0x10072 <log>
   10244:	2f 91       	pop	r18
   10246:	3f 91       	pop	r19
   10248:	4f 91       	pop	r20
   1024a:	5f 91       	pop	r21
   1024c:	52 df       	rcall	.-348    	; 0x100f2 <__mulsf3>
   1024e:	25 c0       	rjmp	.+74     	; 0x1029a <exp>

00010250 <round>:
   10250:	ea de       	rcall	.-556    	; 0x10026 <__fp_splitA>
   10252:	e0 f0       	brcs	.+56     	; 0x1028c <round+0x3c>
   10254:	9e 37       	cpi	r25, 0x7E	; 126
   10256:	d8 f0       	brcs	.+54     	; 0x1028e <round+0x3e>
   10258:	96 39       	cpi	r25, 0x96	; 150
   1025a:	b8 f4       	brcc	.+46     	; 0x1028a <round+0x3a>
   1025c:	9e 38       	cpi	r25, 0x8E	; 142
   1025e:	48 f4       	brcc	.+18     	; 0x10272 <round+0x22>
   10260:	67 2f       	mov	r22, r23
   10262:	78 2f       	mov	r23, r24
   10264:	88 27       	eor	r24, r24
   10266:	98 5f       	subi	r25, 0xF8	; 248
   10268:	f9 cf       	rjmp	.-14     	; 0x1025c <round+0xc>
   1026a:	86 95       	lsr	r24
   1026c:	77 95       	ror	r23
   1026e:	67 95       	ror	r22
   10270:	93 95       	inc	r25
   10272:	95 39       	cpi	r25, 0x95	; 149
   10274:	d0 f3       	brcs	.-12     	; 0x1026a <round+0x1a>
   10276:	b6 2f       	mov	r27, r22
   10278:	b1 70       	andi	r27, 0x01	; 1
   1027a:	6b 0f       	add	r22, r27
   1027c:	71 1d       	adc	r23, r1
   1027e:	81 1d       	adc	r24, r1
   10280:	20 f4       	brcc	.+8      	; 0x1028a <round+0x3a>
   10282:	87 95       	ror	r24
   10284:	77 95       	ror	r23
   10286:	67 95       	ror	r22
   10288:	93 95       	inc	r25
   1028a:	33 c0       	rjmp	.+102    	; 0x102f2 <__fp_mintl>
   1028c:	4d c0       	rjmp	.+154    	; 0x10328 <__fp_mpack>
   1028e:	e6 ce       	rjmp	.-564    	; 0x1005c <__fp_szero>
   10290:	19 f4       	brne	.+6      	; 0x10298 <round+0x48>
   10292:	0e f0       	brts	.+2      	; 0x10296 <round+0x46>
   10294:	98 ce       	rjmp	.-720    	; 0xffc6 <__fp_inf>
   10296:	e1 ce       	rjmp	.-574    	; 0x1005a <__fp_zero>
   10298:	9c ce       	rjmp	.-712    	; 0xffd2 <__fp_nan>

0001029a <exp>:
   1029a:	c5 de       	rcall	.-630    	; 0x10026 <__fp_splitA>
   1029c:	c8 f3       	brcs	.-14     	; 0x10290 <round+0x40>
   1029e:	96 38       	cpi	r25, 0x86	; 134
   102a0:	c0 f7       	brcc	.-16     	; 0x10292 <round+0x42>
   102a2:	07 f8       	bld	r0, 7
   102a4:	0f 92       	push	r0
   102a6:	e8 94       	clt
   102a8:	2b e3       	ldi	r18, 0x3B	; 59
   102aa:	3a ea       	ldi	r19, 0xAA	; 170
   102ac:	48 eb       	ldi	r20, 0xB8	; 184
   102ae:	5f e7       	ldi	r21, 0x7F	; 127
   102b0:	2e df       	rcall	.-420    	; 0x1010e <__mulsf3_pse>
   102b2:	0f 92       	push	r0
   102b4:	0f 92       	push	r0
   102b6:	0f 92       	push	r0
   102b8:	4d b7       	in	r20, 0x3d	; 61
   102ba:	5e b7       	in	r21, 0x3e	; 62
   102bc:	0f 92       	push	r0
   102be:	a4 d0       	rcall	.+328    	; 0x10408 <modf>
   102c0:	ee e9       	ldi	r30, 0x9E	; 158
   102c2:	f2 e0       	ldi	r31, 0x02	; 2
   102c4:	3f d0       	rcall	.+126    	; 0x10344 <__fp_powser>
   102c6:	4f 91       	pop	r20
   102c8:	5f 91       	pop	r21
   102ca:	ef 91       	pop	r30
   102cc:	ff 91       	pop	r31
   102ce:	e5 95       	asr	r30
   102d0:	ee 1f       	adc	r30, r30
   102d2:	ff 1f       	adc	r31, r31
   102d4:	49 f0       	breq	.+18     	; 0x102e8 <exp+0x4e>
   102d6:	fe 57       	subi	r31, 0x7E	; 126
   102d8:	e0 68       	ori	r30, 0x80	; 128
   102da:	44 27       	eor	r20, r20
   102dc:	ee 0f       	add	r30, r30
   102de:	44 1f       	adc	r20, r20
   102e0:	fa 95       	dec	r31
   102e2:	e1 f7       	brne	.-8      	; 0x102dc <exp+0x42>
   102e4:	41 95       	neg	r20
   102e6:	55 0b       	sbc	r21, r21
   102e8:	5b d0       	rcall	.+182    	; 0x103a0 <ldexp>
   102ea:	0f 90       	pop	r0
   102ec:	07 fe       	sbrs	r0, 7
   102ee:	4f c0       	rjmp	.+158    	; 0x1038e <inverse>
   102f0:	08 95       	ret

000102f2 <__fp_mintl>:
   102f2:	88 23       	and	r24, r24
   102f4:	71 f4       	brne	.+28     	; 0x10312 <__fp_mintl+0x20>
   102f6:	77 23       	and	r23, r23
   102f8:	21 f0       	breq	.+8      	; 0x10302 <__fp_mintl+0x10>
   102fa:	98 50       	subi	r25, 0x08	; 8
   102fc:	87 2b       	or	r24, r23
   102fe:	76 2f       	mov	r23, r22
   10300:	07 c0       	rjmp	.+14     	; 0x10310 <__fp_mintl+0x1e>
   10302:	66 23       	and	r22, r22
   10304:	11 f4       	brne	.+4      	; 0x1030a <__fp_mintl+0x18>
   10306:	99 27       	eor	r25, r25
   10308:	0d c0       	rjmp	.+26     	; 0x10324 <__fp_mintl+0x32>
   1030a:	90 51       	subi	r25, 0x10	; 16
   1030c:	86 2b       	or	r24, r22
   1030e:	70 e0       	ldi	r23, 0x00	; 0
   10310:	60 e0       	ldi	r22, 0x00	; 0
   10312:	2a f0       	brmi	.+10     	; 0x1031e <__fp_mintl+0x2c>
   10314:	9a 95       	dec	r25
   10316:	66 0f       	add	r22, r22
   10318:	77 1f       	adc	r23, r23
   1031a:	88 1f       	adc	r24, r24
   1031c:	da f7       	brpl	.-10     	; 0x10314 <__fp_mintl+0x22>
   1031e:	88 0f       	add	r24, r24
   10320:	96 95       	lsr	r25
   10322:	87 95       	ror	r24
   10324:	97 f9       	bld	r25, 7
   10326:	08 95       	ret

00010328 <__fp_mpack>:
   10328:	9f 3f       	cpi	r25, 0xFF	; 255
   1032a:	31 f0       	breq	.+12     	; 0x10338 <__fp_mpack_finite+0xc>

0001032c <__fp_mpack_finite>:
   1032c:	91 50       	subi	r25, 0x01	; 1
   1032e:	20 f4       	brcc	.+8      	; 0x10338 <__fp_mpack_finite+0xc>
   10330:	87 95       	ror	r24
   10332:	77 95       	ror	r23
   10334:	67 95       	ror	r22
   10336:	b7 95       	ror	r27
   10338:	88 0f       	add	r24, r24
   1033a:	91 1d       	adc	r25, r1
   1033c:	96 95       	lsr	r25
   1033e:	87 95       	ror	r24
   10340:	97 f9       	bld	r25, 7
   10342:	08 95       	ret

00010344 <__fp_powser>:
   10344:	df 93       	push	r29
   10346:	cf 93       	push	r28
   10348:	1f 93       	push	r17
   1034a:	0f 93       	push	r16
   1034c:	ff 92       	push	r15
   1034e:	ef 92       	push	r14
   10350:	df 92       	push	r13
   10352:	7b 01       	movw	r14, r22
   10354:	8c 01       	movw	r16, r24
   10356:	68 94       	set
   10358:	05 c0       	rjmp	.+10     	; 0x10364 <__fp_powser+0x20>
   1035a:	da 2e       	mov	r13, r26
   1035c:	ef 01       	movw	r28, r30
   1035e:	d5 de       	rcall	.-598    	; 0x1010a <__mulsf3x>
   10360:	fe 01       	movw	r30, r28
   10362:	e8 94       	clt
   10364:	a5 91       	lpm	r26, Z+
   10366:	25 91       	lpm	r18, Z+
   10368:	35 91       	lpm	r19, Z+
   1036a:	45 91       	lpm	r20, Z+
   1036c:	55 91       	lpm	r21, Z+
   1036e:	ae f3       	brts	.-22     	; 0x1035a <__fp_powser+0x16>
   10370:	ef 01       	movw	r28, r30
   10372:	dd dc       	rcall	.-1606   	; 0xfd2e <__addsf3x>
   10374:	fe 01       	movw	r30, r28
   10376:	97 01       	movw	r18, r14
   10378:	a8 01       	movw	r20, r16
   1037a:	da 94       	dec	r13
   1037c:	79 f7       	brne	.-34     	; 0x1035c <__fp_powser+0x18>
   1037e:	df 90       	pop	r13
   10380:	ef 90       	pop	r14
   10382:	ff 90       	pop	r15
   10384:	0f 91       	pop	r16
   10386:	1f 91       	pop	r17
   10388:	cf 91       	pop	r28
   1038a:	df 91       	pop	r29
   1038c:	08 95       	ret

0001038e <inverse>:
   1038e:	9b 01       	movw	r18, r22
   10390:	ac 01       	movw	r20, r24
   10392:	60 e0       	ldi	r22, 0x00	; 0
   10394:	70 e0       	ldi	r23, 0x00	; 0
   10396:	80 e8       	ldi	r24, 0x80	; 128
   10398:	9f e3       	ldi	r25, 0x3F	; 63
   1039a:	20 cd       	rjmp	.-1472   	; 0xfddc <__divsf3>
   1039c:	14 ce       	rjmp	.-984    	; 0xffc6 <__fp_inf>
   1039e:	c4 cf       	rjmp	.-120    	; 0x10328 <__fp_mpack>

000103a0 <ldexp>:
   103a0:	42 de       	rcall	.-892    	; 0x10026 <__fp_splitA>
   103a2:	e8 f3       	brcs	.-6      	; 0x1039e <inverse+0x10>
   103a4:	99 23       	and	r25, r25
   103a6:	d9 f3       	breq	.-10     	; 0x1039e <inverse+0x10>
   103a8:	94 0f       	add	r25, r20
   103aa:	51 1d       	adc	r21, r1
   103ac:	bb f3       	brvs	.-18     	; 0x1039c <inverse+0xe>
   103ae:	91 50       	subi	r25, 0x01	; 1
   103b0:	50 40       	sbci	r21, 0x00	; 0
   103b2:	94 f0       	brlt	.+36     	; 0x103d8 <ldexp+0x38>
   103b4:	59 f0       	breq	.+22     	; 0x103cc <ldexp+0x2c>
   103b6:	88 23       	and	r24, r24
   103b8:	32 f0       	brmi	.+12     	; 0x103c6 <ldexp+0x26>
   103ba:	66 0f       	add	r22, r22
   103bc:	77 1f       	adc	r23, r23
   103be:	88 1f       	adc	r24, r24
   103c0:	91 50       	subi	r25, 0x01	; 1
   103c2:	50 40       	sbci	r21, 0x00	; 0
   103c4:	c1 f7       	brne	.-16     	; 0x103b6 <ldexp+0x16>
   103c6:	9e 3f       	cpi	r25, 0xFE	; 254
   103c8:	51 05       	cpc	r21, r1
   103ca:	44 f7       	brge	.-48     	; 0x1039c <inverse+0xe>
   103cc:	88 0f       	add	r24, r24
   103ce:	91 1d       	adc	r25, r1
   103d0:	96 95       	lsr	r25
   103d2:	87 95       	ror	r24
   103d4:	97 f9       	bld	r25, 7
   103d6:	08 95       	ret
   103d8:	5f 3f       	cpi	r21, 0xFF	; 255
   103da:	ac f0       	brlt	.+42     	; 0x10406 <ldexp+0x66>
   103dc:	98 3e       	cpi	r25, 0xE8	; 232
   103de:	9c f0       	brlt	.+38     	; 0x10406 <ldexp+0x66>
   103e0:	bb 27       	eor	r27, r27
   103e2:	86 95       	lsr	r24
   103e4:	77 95       	ror	r23
   103e6:	67 95       	ror	r22
   103e8:	b7 95       	ror	r27
   103ea:	08 f4       	brcc	.+2      	; 0x103ee <ldexp+0x4e>
   103ec:	b1 60       	ori	r27, 0x01	; 1
   103ee:	93 95       	inc	r25
   103f0:	c1 f7       	brne	.-16     	; 0x103e2 <ldexp+0x42>
   103f2:	bb 0f       	add	r27, r27
   103f4:	58 f7       	brcc	.-42     	; 0x103cc <ldexp+0x2c>
   103f6:	11 f4       	brne	.+4      	; 0x103fc <ldexp+0x5c>
   103f8:	60 ff       	sbrs	r22, 0
   103fa:	e8 cf       	rjmp	.-48     	; 0x103cc <ldexp+0x2c>
   103fc:	6f 5f       	subi	r22, 0xFF	; 255
   103fe:	7f 4f       	sbci	r23, 0xFF	; 255
   10400:	8f 4f       	sbci	r24, 0xFF	; 255
   10402:	9f 4f       	sbci	r25, 0xFF	; 255
   10404:	e3 cf       	rjmp	.-58     	; 0x103cc <ldexp+0x2c>
   10406:	2a ce       	rjmp	.-940    	; 0x1005c <__fp_szero>

00010408 <modf>:
   10408:	fa 01       	movw	r30, r20
   1040a:	dc 01       	movw	r26, r24
   1040c:	aa 0f       	add	r26, r26
   1040e:	bb 1f       	adc	r27, r27
   10410:	9b 01       	movw	r18, r22
   10412:	ac 01       	movw	r20, r24
   10414:	bf 57       	subi	r27, 0x7F	; 127
   10416:	28 f4       	brcc	.+10     	; 0x10422 <modf+0x1a>
   10418:	22 27       	eor	r18, r18
   1041a:	33 27       	eor	r19, r19
   1041c:	44 27       	eor	r20, r20
   1041e:	50 78       	andi	r21, 0x80	; 128
   10420:	1f c0       	rjmp	.+62     	; 0x10460 <modf+0x58>
   10422:	b7 51       	subi	r27, 0x17	; 23
   10424:	88 f4       	brcc	.+34     	; 0x10448 <modf+0x40>
   10426:	ab 2f       	mov	r26, r27
   10428:	00 24       	eor	r0, r0
   1042a:	46 95       	lsr	r20
   1042c:	37 95       	ror	r19
   1042e:	27 95       	ror	r18
   10430:	01 1c       	adc	r0, r1
   10432:	a3 95       	inc	r26
   10434:	d2 f3       	brmi	.-12     	; 0x1042a <modf+0x22>
   10436:	00 20       	and	r0, r0
   10438:	69 f0       	breq	.+26     	; 0x10454 <modf+0x4c>
   1043a:	22 0f       	add	r18, r18
   1043c:	33 1f       	adc	r19, r19
   1043e:	44 1f       	adc	r20, r20
   10440:	b3 95       	inc	r27
   10442:	da f3       	brmi	.-10     	; 0x1043a <modf+0x32>
   10444:	0d d0       	rcall	.+26     	; 0x10460 <modf+0x58>
   10446:	61 cc       	rjmp	.-1854   	; 0xfd0a <__subsf3>
   10448:	61 30       	cpi	r22, 0x01	; 1
   1044a:	71 05       	cpc	r23, r1
   1044c:	a0 e8       	ldi	r26, 0x80	; 128
   1044e:	8a 07       	cpc	r24, r26
   10450:	b9 46       	sbci	r27, 0x69	; 105
   10452:	30 f4       	brcc	.+12     	; 0x10460 <modf+0x58>
   10454:	9b 01       	movw	r18, r22
   10456:	ac 01       	movw	r20, r24
   10458:	66 27       	eor	r22, r22
   1045a:	77 27       	eor	r23, r23
   1045c:	88 27       	eor	r24, r24
   1045e:	90 78       	andi	r25, 0x80	; 128
   10460:	30 96       	adiw	r30, 0x00	; 0
   10462:	21 f0       	breq	.+8      	; 0x1046c <modf+0x64>
   10464:	20 83       	st	Z, r18
   10466:	31 83       	std	Z+1, r19	; 0x01
   10468:	42 83       	std	Z+2, r20	; 0x02
   1046a:	53 83       	std	Z+3, r21	; 0x03
   1046c:	08 95       	ret

0001046e <__mulsi3>:
   1046e:	db 01       	movw	r26, r22
   10470:	8f 93       	push	r24
   10472:	9f 93       	push	r25
   10474:	61 d0       	rcall	.+194    	; 0x10538 <__muluhisi3>
   10476:	bf 91       	pop	r27
   10478:	af 91       	pop	r26
   1047a:	a2 9f       	mul	r26, r18
   1047c:	80 0d       	add	r24, r0
   1047e:	91 1d       	adc	r25, r1
   10480:	a3 9f       	mul	r26, r19
   10482:	90 0d       	add	r25, r0
   10484:	b2 9f       	mul	r27, r18
   10486:	90 0d       	add	r25, r0
   10488:	11 24       	eor	r1, r1
   1048a:	08 95       	ret

0001048c <__udivmodsi4>:
   1048c:	a1 e2       	ldi	r26, 0x21	; 33
   1048e:	1a 2e       	mov	r1, r26
   10490:	aa 1b       	sub	r26, r26
   10492:	bb 1b       	sub	r27, r27
   10494:	fd 01       	movw	r30, r26
   10496:	0d c0       	rjmp	.+26     	; 0x104b2 <__udivmodsi4_ep>

00010498 <__udivmodsi4_loop>:
   10498:	aa 1f       	adc	r26, r26
   1049a:	bb 1f       	adc	r27, r27
   1049c:	ee 1f       	adc	r30, r30
   1049e:	ff 1f       	adc	r31, r31
   104a0:	a2 17       	cp	r26, r18
   104a2:	b3 07       	cpc	r27, r19
   104a4:	e4 07       	cpc	r30, r20
   104a6:	f5 07       	cpc	r31, r21
   104a8:	20 f0       	brcs	.+8      	; 0x104b2 <__udivmodsi4_ep>
   104aa:	a2 1b       	sub	r26, r18
   104ac:	b3 0b       	sbc	r27, r19
   104ae:	e4 0b       	sbc	r30, r20
   104b0:	f5 0b       	sbc	r31, r21

000104b2 <__udivmodsi4_ep>:
   104b2:	66 1f       	adc	r22, r22
   104b4:	77 1f       	adc	r23, r23
   104b6:	88 1f       	adc	r24, r24
   104b8:	99 1f       	adc	r25, r25
   104ba:	1a 94       	dec	r1
   104bc:	69 f7       	brne	.-38     	; 0x10498 <__udivmodsi4_loop>
   104be:	60 95       	com	r22
   104c0:	70 95       	com	r23
   104c2:	80 95       	com	r24
   104c4:	90 95       	com	r25
   104c6:	9b 01       	movw	r18, r22
   104c8:	ac 01       	movw	r20, r24
   104ca:	bd 01       	movw	r22, r26
   104cc:	cf 01       	movw	r24, r30
   104ce:	08 95       	ret

000104d0 <__divmodsi4>:
   104d0:	05 2e       	mov	r0, r21
   104d2:	97 fb       	bst	r25, 7
   104d4:	16 f4       	brtc	.+4      	; 0x104da <__divmodsi4+0xa>
   104d6:	00 94       	com	r0
   104d8:	0f d0       	rcall	.+30     	; 0x104f8 <__negsi2>
   104da:	57 fd       	sbrc	r21, 7
   104dc:	05 d0       	rcall	.+10     	; 0x104e8 <__divmodsi4_neg2>
   104de:	d6 df       	rcall	.-84     	; 0x1048c <__udivmodsi4>
   104e0:	07 fc       	sbrc	r0, 7
   104e2:	02 d0       	rcall	.+4      	; 0x104e8 <__divmodsi4_neg2>
   104e4:	46 f4       	brtc	.+16     	; 0x104f6 <__divmodsi4_exit>
   104e6:	08 c0       	rjmp	.+16     	; 0x104f8 <__negsi2>

000104e8 <__divmodsi4_neg2>:
   104e8:	50 95       	com	r21
   104ea:	40 95       	com	r20
   104ec:	30 95       	com	r19
   104ee:	21 95       	neg	r18
   104f0:	3f 4f       	sbci	r19, 0xFF	; 255
   104f2:	4f 4f       	sbci	r20, 0xFF	; 255
   104f4:	5f 4f       	sbci	r21, 0xFF	; 255

000104f6 <__divmodsi4_exit>:
   104f6:	08 95       	ret

000104f8 <__negsi2>:
   104f8:	90 95       	com	r25
   104fa:	80 95       	com	r24
   104fc:	70 95       	com	r23
   104fe:	61 95       	neg	r22
   10500:	7f 4f       	sbci	r23, 0xFF	; 255
   10502:	8f 4f       	sbci	r24, 0xFF	; 255
   10504:	9f 4f       	sbci	r25, 0xFF	; 255
   10506:	08 95       	ret

00010508 <__tablejump2__>:
   10508:	ee 0f       	add	r30, r30
   1050a:	ff 1f       	adc	r31, r31
   1050c:	00 24       	eor	r0, r0
   1050e:	00 1c       	adc	r0, r0
   10510:	0b be       	out	0x3b, r0	; 59
   10512:	07 90       	elpm	r0, Z+
   10514:	f6 91       	elpm	r31, Z
   10516:	e0 2d       	mov	r30, r0
   10518:	09 94       	ijmp

0001051a <__umulhisi3>:
   1051a:	a2 9f       	mul	r26, r18
   1051c:	b0 01       	movw	r22, r0
   1051e:	b3 9f       	mul	r27, r19
   10520:	c0 01       	movw	r24, r0
   10522:	a3 9f       	mul	r26, r19
   10524:	70 0d       	add	r23, r0
   10526:	81 1d       	adc	r24, r1
   10528:	11 24       	eor	r1, r1
   1052a:	91 1d       	adc	r25, r1
   1052c:	b2 9f       	mul	r27, r18
   1052e:	70 0d       	add	r23, r0
   10530:	81 1d       	adc	r24, r1
   10532:	11 24       	eor	r1, r1
   10534:	91 1d       	adc	r25, r1
   10536:	08 95       	ret

00010538 <__muluhisi3>:
   10538:	f0 df       	rcall	.-32     	; 0x1051a <__umulhisi3>
   1053a:	a5 9f       	mul	r26, r21
   1053c:	90 0d       	add	r25, r0
   1053e:	b4 9f       	mul	r27, r20
   10540:	90 0d       	add	r25, r0
   10542:	a4 9f       	mul	r26, r20
   10544:	80 0d       	add	r24, r0
   10546:	91 1d       	adc	r25, r1
   10548:	11 24       	eor	r1, r1
   1054a:	08 95       	ret

0001054c <memcpy_P>:
   1054c:	fb 01       	movw	r30, r22
   1054e:	dc 01       	movw	r26, r24
   10550:	02 c0       	rjmp	.+4      	; 0x10556 <memcpy_P+0xa>
   10552:	05 90       	lpm	r0, Z+
   10554:	0d 92       	st	X+, r0
   10556:	41 50       	subi	r20, 0x01	; 1
   10558:	50 40       	sbci	r21, 0x00	; 0
   1055a:	d8 f7       	brcc	.-10     	; 0x10552 <memcpy_P+0x6>
   1055c:	08 95       	ret

0001055e <strcpy_P>:
   1055e:	fb 01       	movw	r30, r22
   10560:	dc 01       	movw	r26, r24
   10562:	05 90       	lpm	r0, Z+
   10564:	0d 92       	st	X+, r0
   10566:	00 20       	and	r0, r0
   10568:	e1 f7       	brne	.-8      	; 0x10562 <strcpy_P+0x4>
   1056a:	08 95       	ret

0001056c <__strlen_P>:
   1056c:	fc 01       	movw	r30, r24
   1056e:	05 90       	lpm	r0, Z+
   10570:	00 20       	and	r0, r0
   10572:	e9 f7       	brne	.-6      	; 0x1056e <__strlen_P+0x2>
   10574:	80 95       	com	r24
   10576:	90 95       	com	r25
   10578:	8e 0f       	add	r24, r30
   1057a:	9f 1f       	adc	r25, r31
   1057c:	08 95       	ret

0001057e <strcat>:
   1057e:	fb 01       	movw	r30, r22
   10580:	dc 01       	movw	r26, r24
   10582:	0d 90       	ld	r0, X+
   10584:	00 20       	and	r0, r0
   10586:	e9 f7       	brne	.-6      	; 0x10582 <strcat+0x4>
   10588:	11 97       	sbiw	r26, 0x01	; 1
   1058a:	01 90       	ld	r0, Z+
   1058c:	0d 92       	st	X+, r0
   1058e:	00 20       	and	r0, r0
   10590:	e1 f7       	brne	.-8      	; 0x1058a <strcat+0xc>
   10592:	08 95       	ret

00010594 <strcpy>:
   10594:	fb 01       	movw	r30, r22
   10596:	dc 01       	movw	r26, r24
   10598:	01 90       	ld	r0, Z+
   1059a:	0d 92       	st	X+, r0
   1059c:	00 20       	and	r0, r0
   1059e:	e1 f7       	brne	.-8      	; 0x10598 <strcpy+0x4>
   105a0:	08 95       	ret

000105a2 <strncat>:
   105a2:	fb 01       	movw	r30, r22
   105a4:	dc 01       	movw	r26, r24
   105a6:	0d 90       	ld	r0, X+
   105a8:	00 20       	and	r0, r0
   105aa:	e9 f7       	brne	.-6      	; 0x105a6 <strncat+0x4>
   105ac:	11 97       	sbiw	r26, 0x01	; 1
   105ae:	41 50       	subi	r20, 0x01	; 1
   105b0:	50 40       	sbci	r21, 0x00	; 0
   105b2:	28 f0       	brcs	.+10     	; 0x105be <strncat+0x1c>
   105b4:	01 90       	ld	r0, Z+
   105b6:	00 20       	and	r0, r0
   105b8:	0d 92       	st	X+, r0
   105ba:	c9 f7       	brne	.-14     	; 0x105ae <strncat+0xc>
   105bc:	08 95       	ret
   105be:	1c 92       	st	X, r1
   105c0:	08 95       	ret

000105c2 <__itoa_ncheck>:
   105c2:	bb 27       	eor	r27, r27
   105c4:	4a 30       	cpi	r20, 0x0A	; 10
   105c6:	31 f4       	brne	.+12     	; 0x105d4 <__itoa_ncheck+0x12>
   105c8:	99 23       	and	r25, r25
   105ca:	22 f4       	brpl	.+8      	; 0x105d4 <__itoa_ncheck+0x12>
   105cc:	bd e2       	ldi	r27, 0x2D	; 45
   105ce:	90 95       	com	r25
   105d0:	81 95       	neg	r24
   105d2:	9f 4f       	sbci	r25, 0xFF	; 255
   105d4:	01 c0       	rjmp	.+2      	; 0x105d8 <__utoa_common>

000105d6 <__utoa_ncheck>:
   105d6:	bb 27       	eor	r27, r27

000105d8 <__utoa_common>:
   105d8:	fb 01       	movw	r30, r22
   105da:	55 27       	eor	r21, r21
   105dc:	aa 27       	eor	r26, r26
   105de:	88 0f       	add	r24, r24
   105e0:	99 1f       	adc	r25, r25
   105e2:	aa 1f       	adc	r26, r26
   105e4:	a4 17       	cp	r26, r20
   105e6:	10 f0       	brcs	.+4      	; 0x105ec <__utoa_common+0x14>
   105e8:	a4 1b       	sub	r26, r20
   105ea:	83 95       	inc	r24
   105ec:	50 51       	subi	r21, 0x10	; 16
   105ee:	b9 f7       	brne	.-18     	; 0x105de <__utoa_common+0x6>
   105f0:	a0 5d       	subi	r26, 0xD0	; 208
   105f2:	aa 33       	cpi	r26, 0x3A	; 58
   105f4:	08 f0       	brcs	.+2      	; 0x105f8 <__utoa_common+0x20>
   105f6:	a9 5d       	subi	r26, 0xD9	; 217
   105f8:	a1 93       	st	Z+, r26
   105fa:	00 97       	sbiw	r24, 0x00	; 0
   105fc:	79 f7       	brne	.-34     	; 0x105dc <__utoa_common+0x4>
   105fe:	b1 11       	cpse	r27, r1
   10600:	b1 93       	st	Z+, r27
   10602:	11 92       	st	Z+, r1
   10604:	cb 01       	movw	r24, r22
   10606:	00 c0       	rjmp	.+0      	; 0x10608 <strrev>

00010608 <strrev>:
   10608:	dc 01       	movw	r26, r24
   1060a:	fc 01       	movw	r30, r24
   1060c:	67 2f       	mov	r22, r23
   1060e:	71 91       	ld	r23, Z+
   10610:	77 23       	and	r23, r23
   10612:	e1 f7       	brne	.-8      	; 0x1060c <strrev+0x4>
   10614:	32 97       	sbiw	r30, 0x02	; 2
   10616:	04 c0       	rjmp	.+8      	; 0x10620 <strrev+0x18>
   10618:	7c 91       	ld	r23, X
   1061a:	6d 93       	st	X+, r22
   1061c:	70 83       	st	Z, r23
   1061e:	62 91       	ld	r22, -Z
   10620:	ae 17       	cp	r26, r30
   10622:	bf 07       	cpc	r27, r31
   10624:	c8 f3       	brcs	.-14     	; 0x10618 <strrev+0x10>
   10626:	08 95       	ret

00010628 <eeprom_read_byte>:
   10628:	f9 99       	sbic	0x1f, 1	; 31
   1062a:	fe cf       	rjmp	.-4      	; 0x10628 <eeprom_read_byte>
   1062c:	92 bd       	out	0x22, r25	; 34
   1062e:	81 bd       	out	0x21, r24	; 33
   10630:	f8 9a       	sbi	0x1f, 0	; 31
   10632:	99 27       	eor	r25, r25
   10634:	80 b5       	in	r24, 0x20	; 32
   10636:	08 95       	ret

00010638 <eeprom_read_word>:
   10638:	a8 e1       	ldi	r26, 0x18	; 24
   1063a:	b0 e0       	ldi	r27, 0x00	; 0
   1063c:	42 e0       	ldi	r20, 0x02	; 2
   1063e:	50 e0       	ldi	r21, 0x00	; 0
   10640:	18 c0       	rjmp	.+48     	; 0x10672 <eeprom_read_blraw>

00010642 <eeprom_update_byte>:
   10642:	26 2f       	mov	r18, r22

00010644 <eeprom_update_r18>:
   10644:	f9 99       	sbic	0x1f, 1	; 31
   10646:	fe cf       	rjmp	.-4      	; 0x10644 <eeprom_update_r18>
   10648:	92 bd       	out	0x22, r25	; 34
   1064a:	81 bd       	out	0x21, r24	; 33
   1064c:	f8 9a       	sbi	0x1f, 0	; 31
   1064e:	01 97       	sbiw	r24, 0x01	; 1
   10650:	00 b4       	in	r0, 0x20	; 32
   10652:	02 16       	cp	r0, r18
   10654:	39 f0       	breq	.+14     	; 0x10664 <eeprom_update_r18+0x20>
   10656:	1f ba       	out	0x1f, r1	; 31
   10658:	20 bd       	out	0x20, r18	; 32
   1065a:	0f b6       	in	r0, 0x3f	; 63
   1065c:	f8 94       	cli
   1065e:	fa 9a       	sbi	0x1f, 2	; 31
   10660:	f9 9a       	sbi	0x1f, 1	; 31
   10662:	0f be       	out	0x3f, r0	; 63
   10664:	08 95       	ret

00010666 <eeprom_update_word>:
   10666:	01 96       	adiw	r24, 0x01	; 1
   10668:	27 2f       	mov	r18, r23
   1066a:	ec df       	rcall	.-40     	; 0x10644 <eeprom_update_r18>
   1066c:	ea cf       	rjmp	.-44     	; 0x10642 <eeprom_update_byte>

0001066e <eeprom_read_block>:
   1066e:	dc 01       	movw	r26, r24
   10670:	cb 01       	movw	r24, r22

00010672 <eeprom_read_blraw>:
   10672:	fc 01       	movw	r30, r24
   10674:	f9 99       	sbic	0x1f, 1	; 31
   10676:	fe cf       	rjmp	.-4      	; 0x10674 <eeprom_read_blraw+0x2>
   10678:	06 c0       	rjmp	.+12     	; 0x10686 <eeprom_read_blraw+0x14>
   1067a:	f2 bd       	out	0x22, r31	; 34
   1067c:	e1 bd       	out	0x21, r30	; 33
   1067e:	f8 9a       	sbi	0x1f, 0	; 31
   10680:	31 96       	adiw	r30, 0x01	; 1
   10682:	00 b4       	in	r0, 0x20	; 32
   10684:	0d 92       	st	X+, r0
   10686:	41 50       	subi	r20, 0x01	; 1
   10688:	50 40       	sbci	r21, 0x00	; 0
   1068a:	b8 f7       	brcc	.-18     	; 0x1067a <eeprom_read_blraw+0x8>
   1068c:	08 95       	ret

0001068e <_exit>:
   1068e:	f8 94       	cli

00010690 <__stop_program>:
   10690:	ff cf       	rjmp	.-2      	; 0x10690 <__stop_program>
