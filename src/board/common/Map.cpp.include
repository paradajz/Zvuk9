/*

Copyright 2015-2021 Igor Petrovic

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/

#include "board/Internal.h"

namespace Board
{
    namespace detail
    {
        namespace map
        {
#ifdef ANALOG_SUPPORTED
            uint32_t adcChannel(uint8_t index)
            {
                return detail::map::adcChannel(aInPins[index]);
            }

            const core::io::mcuPin_t& adcPin(uint8_t index)
            {
                return aInPins[index];
            }

            uint8_t adcIndex(uint8_t index)
            {
#ifndef ANALOG_INDEXING
                return index;
#else
                return analogIndexes[index];
#endif
            }
#endif

#if defined(NATIVE_BUTTON_INPUTS) || (defined(NUMBER_OF_BUTTON_ROWS) && !defined(NUMBER_OF_IN_SR))
            const core::io::mcuPin_t& buttonPin(uint8_t index)
            {
                return dInPins[index];
            }
#endif

            uint8_t buttonIndex(uint8_t index)
            {
#ifndef BUTTON_INDEXING
                return index;
#else
                return buttonIndexes[index];
#endif
            }

#if defined(NATIVE_LED_OUTPUTS) || defined(NUMBER_OF_LED_ROWS)
            const core::io::mcuPin_t& ledPin(uint8_t index)
            {
                return dOutPins[index];
            }
#endif

            uint8_t ledIndex(uint8_t index)
            {
#ifndef LED_INDEXING
                return index;
#else
                return ledIndexes[index];
#endif
            }

#ifdef TOTAL_UNUSED_IO
            const core::io::mcuPin_t& unusedPin(uint8_t index)
            {
                return unusedPins[index];
            }

            bool unusedPinState(uint8_t index)
            {
                return unusedPinsStates[index];
            }
#endif
        }
    }
}