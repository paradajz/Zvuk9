
Bootloader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000100  00800100  0001f496  0000156a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .apitable_jumptable 00000018  0001ffe0  0001ffe0  00001690  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .apitable_signatures 00000008  0001fff8  0001fff8  000016a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .apitable_trampolines 00000026  0001ffa0  0001ffa0  0000166a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .text         00001496  0001e000  0001e000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .bss          0000000b  00800200  00800200  000016b0  2**0
                  ALLOC
  6 .comment      00000030  00000000  00000000  000016b0  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016e0  2**2
                  CONTENTS, READONLY
  8 .debug_aranges 00000338  00000000  00000000  00001720  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00006abe  00000000  00000000  00001a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000021c3  00000000  00000000  00008516  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000a101  00000000  00000000  0000a6d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000b38  00000000  00000000  000147dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0001767b  00000000  00000000  00015314  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003feb  00000000  00000000  0002c98f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c60  00000000  00000000  00030980  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00007d36  00000000  00000000  000315e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .apitable_jumptable:

0001ffe0 <BootloaderAPI_JumpTable>:
; API function jump table
.section .apitable_jumptable, "ax"
.global BootloaderAPI_JumpTable
BootloaderAPI_JumpTable:

	rjmp BootloaderAPI_ErasePage_Trampoline
   1ffe0:	df cf       	rjmp	.-66     	; 0x1ffa0 <BootloaderAPI_Trampolines>
	rjmp BootloaderAPI_WritePage_Trampoline
   1ffe2:	e0 cf       	rjmp	.-64     	; 0x1ffa4 <BootloaderAPI_WritePage_Trampoline>
	rjmp BootloaderAPI_FillWord_Trampoline
   1ffe4:	e1 cf       	rjmp	.-62     	; 0x1ffa8 <BootloaderAPI_FillWord_Trampoline>
	rjmp BootloaderAPI_ReadSignature_Trampoline
   1ffe6:	e2 cf       	rjmp	.-60     	; 0x1ffac <BootloaderAPI_ReadSignature_Trampoline>
	rjmp BootloaderAPI_ReadFuse_Trampoline
   1ffe8:	e3 cf       	rjmp	.-58     	; 0x1ffb0 <BootloaderAPI_ReadFuse_Trampoline>
	rjmp BootloaderAPI_ReadLock_Trampoline
   1ffea:	e4 cf       	rjmp	.-56     	; 0x1ffb4 <BootloaderAPI_ReadLock_Trampoline>
	rjmp BootloaderAPI_WriteLock_Trampoline
   1ffec:	e5 cf       	rjmp	.-54     	; 0x1ffb8 <BootloaderAPI_WriteLock_Trampoline>
	rjmp BootloaderAPI_UNUSED1 ; UNUSED ENTRY 1
   1ffee:	e6 cf       	rjmp	.-52     	; 0x1ffbc <BootloaderAPI_UNUSED1>
	rjmp BootloaderAPI_UNUSED2 ; UNUSED ENTRY 2
   1fff0:	e6 cf       	rjmp	.-52     	; 0x1ffbe <BootloaderAPI_UNUSED2>
	rjmp BootloaderAPI_UNUSED3 ; UNUSED ENTRY 3
   1fff2:	e6 cf       	rjmp	.-52     	; 0x1ffc0 <BootloaderAPI_UNUSED3>
	rjmp BootloaderAPI_UNUSED4 ; UNUSED ENTRY 4
   1fff4:	e6 cf       	rjmp	.-52     	; 0x1ffc2 <BootloaderAPI_UNUSED4>
	rjmp BootloaderAPI_UNUSED5 ; UNUSED ENTRY 5
   1fff6:	e6 cf       	rjmp	.-52     	; 0x1ffc4 <BootloaderAPI_UNUSED5>

Disassembly of section .apitable_signatures:

0001fff8 <BootloaderAPI_Signatures>:
   1fff8:	00 e0       	ldi	r16, 0x00	; 0
   1fffa:	01 00       	.word	0x0001	; ????
   1fffc:	30 df       	rcall	.-416    	; 0x1fe5e <__data_load_end+0x8c8>
   1fffe:	fb dc       	rcall	.-1546   	; 0x1f9f6 <__data_load_end+0x460>

Disassembly of section .apitable_trampolines:

0001ffa0 <BootloaderAPI_Trampolines>:
.section .apitable_trampolines, "ax"
.global BootloaderAPI_Trampolines
BootloaderAPI_Trampolines:

	BootloaderAPI_ErasePage_Trampoline:
		jmp BootloaderAPI_ErasePage
   1ffa0:	0c 94 90 f0 	jmp	0x1e120	; 0x1e120 <BootloaderAPI_ErasePage>

0001ffa4 <BootloaderAPI_WritePage_Trampoline>:
	BootloaderAPI_WritePage_Trampoline:
		jmp BootloaderAPI_WritePage
   1ffa4:	0c 94 a4 f0 	jmp	0x1e148	; 0x1e148 <BootloaderAPI_WritePage>

0001ffa8 <BootloaderAPI_FillWord_Trampoline>:
	BootloaderAPI_FillWord_Trampoline:
		jmp BootloaderAPI_FillWord
   1ffa8:	0c 94 b8 f0 	jmp	0x1e170	; 0x1e170 <BootloaderAPI_FillWord>

0001ffac <BootloaderAPI_ReadSignature_Trampoline>:
	BootloaderAPI_ReadSignature_Trampoline:
		jmp BootloaderAPI_ReadSignature
   1ffac:	0c 94 c7 f0 	jmp	0x1e18e	; 0x1e18e <BootloaderAPI_ReadSignature>

0001ffb0 <BootloaderAPI_ReadFuse_Trampoline>:
	BootloaderAPI_ReadFuse_Trampoline:
		jmp BootloaderAPI_ReadFuse
   1ffb0:	0c 94 cd f0 	jmp	0x1e19a	; 0x1e19a <BootloaderAPI_ReadFuse>

0001ffb4 <BootloaderAPI_ReadLock_Trampoline>:
	BootloaderAPI_ReadLock_Trampoline:
		jmp BootloaderAPI_ReadLock
   1ffb4:	0c 94 d3 f0 	jmp	0x1e1a6	; 0x1e1a6 <BootloaderAPI_ReadLock>

0001ffb8 <BootloaderAPI_WriteLock_Trampoline>:
	BootloaderAPI_WriteLock_Trampoline:
		jmp BootloaderAPI_WriteLock
   1ffb8:	0c 94 da f0 	jmp	0x1e1b4	; 0x1e1b4 <BootloaderAPI_WriteLock>

0001ffbc <BootloaderAPI_UNUSED1>:
	BootloaderAPI_UNUSED1:
		ret
   1ffbc:	08 95       	ret

0001ffbe <BootloaderAPI_UNUSED2>:
	BootloaderAPI_UNUSED2:
		ret
   1ffbe:	08 95       	ret

0001ffc0 <BootloaderAPI_UNUSED3>:
	BootloaderAPI_UNUSED3:
		ret
   1ffc0:	08 95       	ret

0001ffc2 <BootloaderAPI_UNUSED4>:
	BootloaderAPI_UNUSED4:
		ret
   1ffc2:	08 95       	ret

0001ffc4 <BootloaderAPI_UNUSED5>:
	BootloaderAPI_UNUSED5:
		ret
   1ffc4:	08 95       	ret

Disassembly of section .text:

0001e000 <__vectors>:
   1e000:	4b c0       	rjmp	.+150    	; 0x1e098 <__ctors_end>
   1e002:	00 00       	nop
   1e004:	8c c0       	rjmp	.+280    	; 0x1e11e <__bad_interrupt>
   1e006:	00 00       	nop
   1e008:	8a c0       	rjmp	.+276    	; 0x1e11e <__bad_interrupt>
   1e00a:	00 00       	nop
   1e00c:	88 c0       	rjmp	.+272    	; 0x1e11e <__bad_interrupt>
   1e00e:	00 00       	nop
   1e010:	86 c0       	rjmp	.+268    	; 0x1e11e <__bad_interrupt>
   1e012:	00 00       	nop
   1e014:	84 c0       	rjmp	.+264    	; 0x1e11e <__bad_interrupt>
   1e016:	00 00       	nop
   1e018:	82 c0       	rjmp	.+260    	; 0x1e11e <__bad_interrupt>
   1e01a:	00 00       	nop
   1e01c:	80 c0       	rjmp	.+256    	; 0x1e11e <__bad_interrupt>
   1e01e:	00 00       	nop
   1e020:	7e c0       	rjmp	.+252    	; 0x1e11e <__bad_interrupt>
   1e022:	00 00       	nop
   1e024:	7c c0       	rjmp	.+248    	; 0x1e11e <__bad_interrupt>
   1e026:	00 00       	nop
   1e028:	bb c7       	rjmp	.+3958   	; 0x1efa0 <__vector_10>
   1e02a:	00 00       	nop
   1e02c:	0c 94 85 f8 	jmp	0x1f10a	; 0x1f10a <__vector_11>
   1e030:	76 c0       	rjmp	.+236    	; 0x1e11e <__bad_interrupt>
   1e032:	00 00       	nop
   1e034:	74 c0       	rjmp	.+232    	; 0x1e11e <__bad_interrupt>
   1e036:	00 00       	nop
   1e038:	72 c0       	rjmp	.+228    	; 0x1e11e <__bad_interrupt>
   1e03a:	00 00       	nop
   1e03c:	70 c0       	rjmp	.+224    	; 0x1e11e <__bad_interrupt>
   1e03e:	00 00       	nop
   1e040:	6e c0       	rjmp	.+220    	; 0x1e11e <__bad_interrupt>
   1e042:	00 00       	nop
   1e044:	6c c0       	rjmp	.+216    	; 0x1e11e <__bad_interrupt>
   1e046:	00 00       	nop
   1e048:	6a c0       	rjmp	.+212    	; 0x1e11e <__bad_interrupt>
   1e04a:	00 00       	nop
   1e04c:	68 c0       	rjmp	.+208    	; 0x1e11e <__bad_interrupt>
   1e04e:	00 00       	nop
   1e050:	66 c0       	rjmp	.+204    	; 0x1e11e <__bad_interrupt>
   1e052:	00 00       	nop
   1e054:	64 c0       	rjmp	.+200    	; 0x1e11e <__bad_interrupt>
   1e056:	00 00       	nop
   1e058:	62 c0       	rjmp	.+196    	; 0x1e11e <__bad_interrupt>
   1e05a:	00 00       	nop
   1e05c:	60 c0       	rjmp	.+192    	; 0x1e11e <__bad_interrupt>
   1e05e:	00 00       	nop
   1e060:	5e c0       	rjmp	.+188    	; 0x1e11e <__bad_interrupt>
   1e062:	00 00       	nop
   1e064:	5c c0       	rjmp	.+184    	; 0x1e11e <__bad_interrupt>
   1e066:	00 00       	nop
   1e068:	5a c0       	rjmp	.+180    	; 0x1e11e <__bad_interrupt>
   1e06a:	00 00       	nop
   1e06c:	58 c0       	rjmp	.+176    	; 0x1e11e <__bad_interrupt>
   1e06e:	00 00       	nop
   1e070:	56 c0       	rjmp	.+172    	; 0x1e11e <__bad_interrupt>
   1e072:	00 00       	nop
   1e074:	54 c0       	rjmp	.+168    	; 0x1e11e <__bad_interrupt>
   1e076:	00 00       	nop
   1e078:	52 c0       	rjmp	.+164    	; 0x1e11e <__bad_interrupt>
   1e07a:	00 00       	nop
   1e07c:	50 c0       	rjmp	.+160    	; 0x1e11e <__bad_interrupt>
   1e07e:	00 00       	nop
   1e080:	4e c0       	rjmp	.+156    	; 0x1e11e <__bad_interrupt>
   1e082:	00 00       	nop
   1e084:	4c c0       	rjmp	.+152    	; 0x1e11e <__bad_interrupt>
   1e086:	00 00       	nop
   1e088:	4a c0       	rjmp	.+148    	; 0x1e11e <__bad_interrupt>
   1e08a:	00 00       	nop
   1e08c:	48 c0       	rjmp	.+144    	; 0x1e11e <__bad_interrupt>
   1e08e:	00 00       	nop
   1e090:	46 c0       	rjmp	.+140    	; 0x1e11e <__bad_interrupt>
   1e092:	00 00       	nop
   1e094:	44 c0       	rjmp	.+136    	; 0x1e11e <__bad_interrupt>
	...

0001e098 <__ctors_end>:
   1e098:	11 24       	eor	r1, r1
   1e09a:	1f be       	out	0x3f, r1	; 63
   1e09c:	cf ef       	ldi	r28, 0xFF	; 255
   1e09e:	d0 e2       	ldi	r29, 0x20	; 32
   1e0a0:	de bf       	out	0x3e, r29	; 62
   1e0a2:	cd bf       	out	0x3d, r28	; 61

0001e0a4 <Application_Jump_Check>:
{
    //getCurrentCRC();
    bool JumpToApplication = false;

    //make sure bootloader button is configured as input
    setInputMacro(BTLDR_BUTTON_DDR, BTLDR_BUTTON_PIN_INDEX);
   1e0a4:	6a 98       	cbi	0x0d, 2	; 13

    //a bit of cheating - HWBE fuse is unprogrammed, however, we are using HWB pin to
    //detect whether we should run bootloader or not
    //check if buton on HWB pin is released
    if (!((BTLDR_BUTTON_PIN_REGISTER >> BTLDR_BUTTON_PIN_INDEX) & 0x01))  {
   1e0a6:	8c b1       	in	r24, 0x0c	; 12
   1e0a8:	82 fb       	bst	r24, 2
   1e0aa:	88 27       	eor	r24, r24
   1e0ac:	80 f9       	bld	r24, 0
        JumpToApplication = true;

    }

    /* Clear external reset source if source is external*/
    if (!(MCUSR & (1 << EXTRF)))
   1e0ae:	04 b6       	in	r0, 0x34	; 52
   1e0b0:	01 fc       	sbrc	r0, 1
   1e0b2:	03 c0       	rjmp	.+6      	; 0x1e0ba <Application_Jump_Check+0x16>
    MCUSR &= ~(1 << EXTRF);
   1e0b4:	94 b7       	in	r25, 0x34	; 52
   1e0b6:	9d 7f       	andi	r25, 0xFD	; 253
   1e0b8:	94 bf       	out	0x34, r25	; 52

    /* Don't run the user application if the reset vector is blank (no app loaded) */
    bool ApplicationValid = (pgm_read_word_near(0) != 0xFFFF);
   1e0ba:	e0 e0       	ldi	r30, 0x00	; 0
   1e0bc:	f0 e0       	ldi	r31, 0x00	; 0
   1e0be:	25 91       	lpm	r18, Z+
   1e0c0:	34 91       	lpm	r19, Z

    /* If a request has been made to jump to the user application, honor it */
    if (JumpToApplication && ApplicationValid)
   1e0c2:	81 11       	cpse	r24, r1
   1e0c4:	14 c0       	rjmp	.+40     	; 0x1e0ee <__do_copy_data>
   1e0c6:	2f 3f       	cpi	r18, 0xFF	; 255
   1e0c8:	3f 4f       	sbci	r19, 0xFF	; 255
   1e0ca:	89 f0       	breq	.+34     	; 0x1e0ee <__do_copy_data>
    {
        /* Turn off the watchdog */
        MCUSR &= ~(1 << WDRF);
   1e0cc:	84 b7       	in	r24, 0x34	; 52
   1e0ce:	87 7f       	andi	r24, 0xF7	; 247
   1e0d0:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
   1e0d2:	0f b6       	in	r0, 0x3f	; 63
   1e0d4:	f8 94       	cli
   1e0d6:	a8 95       	wdr
   1e0d8:	80 91 60 00 	lds	r24, 0x0060
   1e0dc:	88 61       	ori	r24, 0x18	; 24
   1e0de:	80 93 60 00 	sts	0x0060, r24
   1e0e2:	10 92 60 00 	sts	0x0060, r1
   1e0e6:	0f be       	out	0x3f, r0	; 63
        wdt_disable();
        // cppcheck-suppress constStatement
        ((void (*)(void))0x0000)();
   1e0e8:	e0 e0       	ldi	r30, 0x00	; 0
   1e0ea:	f0 e0       	ldi	r31, 0x00	; 0
   1e0ec:	09 95       	icall

0001e0ee <__do_copy_data>:
   1e0ee:	12 e0       	ldi	r17, 0x02	; 2
   1e0f0:	a0 e0       	ldi	r26, 0x00	; 0
   1e0f2:	b1 e0       	ldi	r27, 0x01	; 1
   1e0f4:	e6 e9       	ldi	r30, 0x96	; 150
   1e0f6:	f4 ef       	ldi	r31, 0xF4	; 244
   1e0f8:	01 e0       	ldi	r16, 0x01	; 1
   1e0fa:	0b bf       	out	0x3b, r16	; 59
   1e0fc:	02 c0       	rjmp	.+4      	; 0x1e102 <__do_copy_data+0x14>
   1e0fe:	07 90       	elpm	r0, Z+
   1e100:	0d 92       	st	X+, r0
   1e102:	a0 30       	cpi	r26, 0x00	; 0
   1e104:	b1 07       	cpc	r27, r17
   1e106:	d9 f7       	brne	.-10     	; 0x1e0fe <__do_copy_data+0x10>

0001e108 <__do_clear_bss>:
   1e108:	22 e0       	ldi	r18, 0x02	; 2
   1e10a:	a0 e0       	ldi	r26, 0x00	; 0
   1e10c:	b2 e0       	ldi	r27, 0x02	; 2
   1e10e:	01 c0       	rjmp	.+2      	; 0x1e112 <.do_clear_bss_start>

0001e110 <.do_clear_bss_loop>:
   1e110:	1d 92       	st	X+, r1

0001e112 <.do_clear_bss_start>:
   1e112:	ab 30       	cpi	r26, 0x0B	; 11
   1e114:	b2 07       	cpc	r27, r18
   1e116:	e1 f7       	brne	.-8      	; 0x1e110 <.do_clear_bss_loop>
   1e118:	5b d0       	rcall	.+182    	; 0x1e1d0 <main>
   1e11a:	0c 94 49 fa 	jmp	0x1f492	; 0x1f492 <_exit>

0001e11e <__bad_interrupt>:
   1e11e:	70 cf       	rjmp	.-288    	; 0x1e000 <__vectors>

0001e120 <BootloaderAPI_ErasePage>:

#include "BootloaderAPI.h"

void BootloaderAPI_ErasePage(const uint32_t Address)
{
	boot_page_erase_safe(Address);
   1e120:	07 b6       	in	r0, 0x37	; 55
   1e122:	00 fc       	sbrc	r0, 0
   1e124:	fd cf       	rjmp	.-6      	; 0x1e120 <BootloaderAPI_ErasePage>
   1e126:	f9 99       	sbic	0x1f, 1	; 31
   1e128:	fe cf       	rjmp	.-4      	; 0x1e126 <BootloaderAPI_ErasePage+0x6>
   1e12a:	23 e0       	ldi	r18, 0x03	; 3
   1e12c:	fb 01       	movw	r30, r22
   1e12e:	80 93 5b 00 	sts	0x005B, r24
   1e132:	20 93 57 00 	sts	0x0057, r18
   1e136:	e8 95       	spm
	boot_spm_busy_wait();
   1e138:	07 b6       	in	r0, 0x37	; 55
   1e13a:	00 fc       	sbrc	r0, 0
   1e13c:	fd cf       	rjmp	.-6      	; 0x1e138 <BootloaderAPI_ErasePage+0x18>
	boot_rww_enable();
   1e13e:	81 e1       	ldi	r24, 0x11	; 17
   1e140:	80 93 57 00 	sts	0x0057, r24
   1e144:	e8 95       	spm
   1e146:	08 95       	ret

0001e148 <BootloaderAPI_WritePage>:
}

void BootloaderAPI_WritePage(const uint32_t Address)
{
	boot_page_write_safe(Address);
   1e148:	07 b6       	in	r0, 0x37	; 55
   1e14a:	00 fc       	sbrc	r0, 0
   1e14c:	fd cf       	rjmp	.-6      	; 0x1e148 <BootloaderAPI_WritePage>
   1e14e:	f9 99       	sbic	0x1f, 1	; 31
   1e150:	fe cf       	rjmp	.-4      	; 0x1e14e <BootloaderAPI_WritePage+0x6>
   1e152:	25 e0       	ldi	r18, 0x05	; 5
   1e154:	fb 01       	movw	r30, r22
   1e156:	80 93 5b 00 	sts	0x005B, r24
   1e15a:	20 93 57 00 	sts	0x0057, r18
   1e15e:	e8 95       	spm
	boot_spm_busy_wait();
   1e160:	07 b6       	in	r0, 0x37	; 55
   1e162:	00 fc       	sbrc	r0, 0
   1e164:	fd cf       	rjmp	.-6      	; 0x1e160 <BootloaderAPI_WritePage+0x18>
	boot_rww_enable();
   1e166:	81 e1       	ldi	r24, 0x11	; 17
   1e168:	80 93 57 00 	sts	0x0057, r24
   1e16c:	e8 95       	spm
   1e16e:	08 95       	ret

0001e170 <BootloaderAPI_FillWord>:
}

void BootloaderAPI_FillWord(const uint32_t Address, const uint16_t Word)
{
	boot_page_fill_safe(Address, Word);
   1e170:	07 b6       	in	r0, 0x37	; 55
   1e172:	00 fc       	sbrc	r0, 0
   1e174:	fd cf       	rjmp	.-6      	; 0x1e170 <BootloaderAPI_FillWord>
   1e176:	f9 99       	sbic	0x1f, 1	; 31
   1e178:	fe cf       	rjmp	.-4      	; 0x1e176 <BootloaderAPI_FillWord+0x6>
   1e17a:	21 e0       	ldi	r18, 0x01	; 1
   1e17c:	0a 01       	movw	r0, r20
   1e17e:	fb 01       	movw	r30, r22
   1e180:	80 93 5b 00 	sts	0x005B, r24
   1e184:	20 93 57 00 	sts	0x0057, r18
   1e188:	e8 95       	spm
   1e18a:	11 24       	eor	r1, r1
   1e18c:	08 95       	ret

0001e18e <BootloaderAPI_ReadSignature>:
}

uint8_t BootloaderAPI_ReadSignature(const uint16_t Address)
{
	return boot_signature_byte_get(Address);
   1e18e:	21 e2       	ldi	r18, 0x21	; 33
   1e190:	fc 01       	movw	r30, r24
   1e192:	20 93 57 00 	sts	0x0057, r18
   1e196:	84 91       	lpm	r24, Z
}
   1e198:	08 95       	ret

0001e19a <BootloaderAPI_ReadFuse>:

uint8_t BootloaderAPI_ReadFuse(const uint16_t Address)
{
	return boot_lock_fuse_bits_get(Address);
   1e19a:	29 e0       	ldi	r18, 0x09	; 9
   1e19c:	fc 01       	movw	r30, r24
   1e19e:	20 93 57 00 	sts	0x0057, r18
   1e1a2:	84 91       	lpm	r24, Z
}
   1e1a4:	08 95       	ret

0001e1a6 <BootloaderAPI_ReadLock>:

uint8_t BootloaderAPI_ReadLock(void)
{
	return boot_lock_fuse_bits_get(GET_LOCK_BITS);
   1e1a6:	e1 e0       	ldi	r30, 0x01	; 1
   1e1a8:	f0 e0       	ldi	r31, 0x00	; 0
   1e1aa:	89 e0       	ldi	r24, 0x09	; 9
   1e1ac:	80 93 57 00 	sts	0x0057, r24
   1e1b0:	84 91       	lpm	r24, Z
}
   1e1b2:	08 95       	ret

0001e1b4 <BootloaderAPI_WriteLock>:

void BootloaderAPI_WriteLock(const uint8_t LockBits)
{
	boot_lock_bits_set_safe(LockBits);
   1e1b4:	07 b6       	in	r0, 0x37	; 55
   1e1b6:	00 fc       	sbrc	r0, 0
   1e1b8:	fd cf       	rjmp	.-6      	; 0x1e1b4 <BootloaderAPI_WriteLock>
   1e1ba:	f9 99       	sbic	0x1f, 1	; 31
   1e1bc:	fe cf       	rjmp	.-4      	; 0x1e1ba <BootloaderAPI_WriteLock+0x6>
   1e1be:	80 95       	com	r24
   1e1c0:	99 e0       	ldi	r25, 0x09	; 9
   1e1c2:	e1 e0       	ldi	r30, 0x01	; 1
   1e1c4:	f0 e0       	ldi	r31, 0x00	; 0
   1e1c6:	08 2e       	mov	r0, r24
   1e1c8:	90 93 57 00 	sts	0x0057, r25
   1e1cc:	e8 95       	spm
   1e1ce:	08 95       	ret

0001e1d0 <main>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
static void SetupHardware(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
   1e1d0:	84 b7       	in	r24, 0x34	; 52
   1e1d2:	87 7f       	andi	r24, 0xF7	; 247
   1e1d4:	84 bf       	out	0x34, r24	; 52
   1e1d6:	0f b6       	in	r0, 0x3f	; 63
   1e1d8:	f8 94       	cli
   1e1da:	a8 95       	wdr
   1e1dc:	80 91 60 00 	lds	r24, 0x0060
   1e1e0:	88 61       	ori	r24, 0x18	; 24
   1e1e2:	80 93 60 00 	sts	0x0060, r24
   1e1e6:	10 92 60 00 	sts	0x0060, r1
   1e1ea:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
   1e1ec:	90 e0       	ldi	r25, 0x00	; 0
   1e1ee:	80 e8       	ldi	r24, 0x80	; 128
   1e1f0:	0f b6       	in	r0, 0x3f	; 63
   1e1f2:	f8 94       	cli
   1e1f4:	80 93 61 00 	sts	0x0061, r24
   1e1f8:	90 93 61 00 	sts	0x0061, r25
   1e1fc:	0f be       	out	0x3f, r0	; 63

    /* Disable clock division */
    clock_prescale_set(clock_div_1);

    /* Relocate the interrupt vector table to the bootloader section */
    MCUCR = (1 << IVCE);
   1e1fe:	81 e0       	ldi	r24, 0x01	; 1
   1e200:	85 bf       	out	0x35, r24	; 53
    MCUCR = (1 << IVSEL);
   1e202:	82 e0       	ldi	r24, 0x02	; 2
   1e204:	85 bf       	out	0x35, r24	; 53

    /* Hardware Initialization */
    USB_Init();
   1e206:	b0 d6       	rcall	.+3424   	; 0x1ef68 <USB_Init>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
   1e208:	78 94       	sei
				__builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				sei();
				#endif

				GCC_MEMORY_BARRIER();
   1e20a:	05 c0       	rjmp	.+10     	; 0x1e216 <main+0x46>

    GlobalInterruptEnable();

    while (RunBootloader || TicksSinceLastCommand++ < 0xFF)
    {
        MS_Device_USBTask(&Disk_MS_Interface);
   1e20c:	81 e0       	ldi	r24, 0x01	; 1
   1e20e:	91 e0       	ldi	r25, 0x01	; 1
   1e210:	d8 d2       	rcall	.+1456   	; 0x1e7c2 <MS_Device_USBTask>
        USB_USBTask();
   1e212:	0e 94 30 fa 	call	0x1f460	; 0x1f460 <USB_USBTask>
{
    SetupHardware();

    GlobalInterruptEnable();

    while (RunBootloader || TicksSinceLastCommand++ < 0xFF)
   1e216:	80 91 00 01 	lds	r24, 0x0100
   1e21a:	81 11       	cpse	r24, r1
   1e21c:	f7 cf       	rjmp	.-18     	; 0x1e20c <main+0x3c>
   1e21e:	80 91 00 02 	lds	r24, 0x0200
   1e222:	91 e0       	ldi	r25, 0x01	; 1
   1e224:	98 0f       	add	r25, r24
   1e226:	90 93 00 02 	sts	0x0200, r25
   1e22a:	8f 3f       	cpi	r24, 0xFF	; 255
   1e22c:	79 f7       	brne	.-34     	; 0x1e20c <main+0x3c>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
   1e22e:	e0 ee       	ldi	r30, 0xE0	; 224
   1e230:	f0 e0       	ldi	r31, 0x00	; 0
   1e232:	80 81       	ld	r24, Z
   1e234:	81 60       	ori	r24, 0x01	; 1
   1e236:	80 83       	st	Z, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
   1e238:	9c e0       	ldi	r25, 0x0C	; 12
   1e23a:	88 e1       	ldi	r24, 0x18	; 24
   1e23c:	0f b6       	in	r0, 0x3f	; 63
   1e23e:	f8 94       	cli
   1e240:	a8 95       	wdr
   1e242:	80 93 60 00 	sts	0x0060, r24
   1e246:	0f be       	out	0x3f, r0	; 63
   1e248:	90 93 60 00 	sts	0x0060, r25
    USB_Detach();

    /* Enable the watchdog and force a timeout to reset the AVR */
    wdt_enable(WDTO_250MS);

    for (;;);
   1e24c:	ff cf       	rjmp	.-2      	; 0x1e24c <main+0x7c>

0001e24e <EVENT_USB_Device_Connect>:
    USB_Init();
}

/** Event handler for the USB_Connect event. This indicates that the device is enumerating via the status LEDs. */
void EVENT_USB_Device_Connect(void)
{
   1e24e:	08 95       	ret

0001e250 <EVENT_USB_Device_Disconnect>:

/** Event handler for the USB_Disconnect event. This indicates that the device is no longer connected to a host via
 *  the status LEDs and stops the Mass Storage management task.
 */
void EVENT_USB_Device_Disconnect(void)
{
   1e250:	08 95       	ret

0001e252 <EVENT_USB_Device_ConfigurationChanged>:
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	/* Setup Mass Storage Data Endpoints */
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
   1e252:	81 e0       	ldi	r24, 0x01	; 1
   1e254:	91 e0       	ldi	r25, 0x01	; 1
   1e256:	9b c2       	rjmp	.+1334   	; 0x1e78e <MS_Device_ConfigureEndpoints>
   1e258:	08 95       	ret

0001e25a <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
   1e25a:	81 e0       	ldi	r24, 0x01	; 1
   1e25c:	91 e0       	ldi	r25, 0x01	; 1
   1e25e:	5a c2       	rjmp	.+1204   	; 0x1e714 <MS_Device_ProcessControlRequest>
   1e260:	08 95       	ret

0001e262 <CALLBACK_MS_Device_SCSICommandReceived>:
 */
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess;

	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
   1e262:	73 d0       	rcall	.+230    	; 0x1e34a <SCSI_DecodeSCSICommand>

	/* Signal that a command was processed, must not exit bootloader yet */
	TicksSinceLastCommand = 0;
   1e264:	10 92 00 02 	sts	0x0200, r1

	return CommandSuccess;
}
   1e268:	08 95       	ret

0001e26a <CALLBACK_USB_GetDescriptor>:

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	/* If/Else If chain compiles slightly smaller than a switch case */
	if (DescriptorType == DTYPE_Device)
   1e26a:	91 30       	cpi	r25, 0x01	; 1
   1e26c:	39 f0       	breq	.+14     	; 0x1e27c <CALLBACK_USB_GetDescriptor+0x12>
	{
		Address = &DeviceDescriptor;
		Size    = sizeof(USB_Descriptor_Device_t);
	}
	else if (DescriptorType == DTYPE_Configuration)
   1e26e:	92 30       	cpi	r25, 0x02	; 2
   1e270:	51 f4       	brne	.+20     	; 0x1e286 <CALLBACK_USB_GetDescriptor+0x1c>
	{
		Address = &ConfigurationDescriptor;
		Size    = sizeof(USB_Descriptor_Configuration_t);
   1e272:	80 e2       	ldi	r24, 0x20	; 32
   1e274:	90 e0       	ldi	r25, 0x00	; 0
		Address = &DeviceDescriptor;
		Size    = sizeof(USB_Descriptor_Device_t);
	}
	else if (DescriptorType == DTYPE_Configuration)
	{
		Address = &ConfigurationDescriptor;
   1e276:	2c e6       	ldi	r18, 0x6C	; 108
   1e278:	31 e0       	ldi	r19, 0x01	; 1
   1e27a:	09 c0       	rjmp	.+18     	; 0x1e28e <CALLBACK_USB_GetDescriptor+0x24>

	/* If/Else If chain compiles slightly smaller than a switch case */
	if (DescriptorType == DTYPE_Device)
	{
		Address = &DeviceDescriptor;
		Size    = sizeof(USB_Descriptor_Device_t);
   1e27c:	82 e1       	ldi	r24, 0x12	; 18
   1e27e:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	/* If/Else If chain compiles slightly smaller than a switch case */
	if (DescriptorType == DTYPE_Device)
	{
		Address = &DeviceDescriptor;
   1e280:	2c e8       	ldi	r18, 0x8C	; 140
   1e282:	31 e0       	ldi	r19, 0x01	; 1
   1e284:	04 c0       	rjmp	.+8      	; 0x1e28e <CALLBACK_USB_GetDescriptor+0x24>
                                    const void** const DescriptorAddress)
{
	const uint8_t DescriptorType = (wValue >> 8);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
   1e286:	80 e0       	ldi	r24, 0x00	; 0
   1e288:	90 e0       	ldi	r25, 0x00	; 0
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t DescriptorType = (wValue >> 8);

	const void* Address = NULL;
   1e28a:	20 e0       	ldi	r18, 0x00	; 0
   1e28c:	30 e0       	ldi	r19, 0x00	; 0
	{
		Address = &ConfigurationDescriptor;
		Size    = sizeof(USB_Descriptor_Configuration_t);
	}

	*DescriptorAddress = Address;
   1e28e:	fa 01       	movw	r30, r20
   1e290:	31 83       	std	Z+1, r19	; 0x01
   1e292:	20 83       	st	Z, r18
	return Size;
}
   1e294:	08 95       	ret

0001e296 <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
   1e296:	bf 92       	push	r11
   1e298:	cf 92       	push	r12
   1e29a:	df 92       	push	r13
   1e29c:	ef 92       	push	r14
   1e29e:	ff 92       	push	r15
   1e2a0:	0f 93       	push	r16
   1e2a2:	1f 93       	push	r17
   1e2a4:	cf 93       	push	r28
   1e2a6:	df 93       	push	r29
   1e2a8:	fc 01       	movw	r30, r24
   1e2aa:	b6 2e       	mov	r11, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
   1e2ac:	40 a1       	ldd	r20, Z+32	; 0x20
   1e2ae:	57 8d       	ldd	r21, Z+31	; 0x1f

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
   1e2b0:	e3 a0       	ldd	r14, Z+35	; 0x23
   1e2b2:	f2 a0       	ldd	r15, Z+34	; 0x22

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
   1e2b4:	48 31       	cpi	r20, 0x18	; 24
   1e2b6:	81 e0       	ldi	r24, 0x01	; 1
   1e2b8:	58 07       	cpc	r21, r24
   1e2ba:	28 f4       	brcc	.+10     	; 0x1e2c6 <SCSI_Command_ReadWrite_10+0x30>
   1e2bc:	8f 01       	movw	r16, r30

		return false;
	}

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	for (uint16_t i = 0; i < TotalBlocks; i++)
   1e2be:	e1 14       	cp	r14, r1
   1e2c0:	f1 04       	cpc	r15, r1
   1e2c2:	71 f4       	brne	.+28     	; 0x1e2e0 <SCSI_Command_ReadWrite_10+0x4a>
   1e2c4:	1c c0       	rjmp	.+56     	; 0x1e2fe <SCSI_Command_ReadWrite_10+0x68>

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
   1e2c6:	ec e3       	ldi	r30, 0x3C	; 60
   1e2c8:	f1 e0       	ldi	r31, 0x01	; 1
   1e2ca:	80 81       	ld	r24, Z
   1e2cc:	80 7f       	andi	r24, 0xF0	; 240
   1e2ce:	85 60       	ori	r24, 0x05	; 5
   1e2d0:	80 83       	st	Z, r24
   1e2d2:	ea e3       	ldi	r30, 0x3A	; 58
   1e2d4:	f1 e0       	ldi	r31, 0x01	; 1
   1e2d6:	81 e2       	ldi	r24, 0x21	; 33
   1e2d8:	84 87       	std	Z+12, r24	; 0x0c
   1e2da:	15 86       	std	Z+13, r1	; 0x0d
		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
   1e2dc:	80 e0       	ldi	r24, 0x00	; 0
   1e2de:	2b c0       	rjmp	.+86     	; 0x1e336 <SCSI_Command_ReadWrite_10+0xa0>
   1e2e0:	ea 01       	movw	r28, r20
   1e2e2:	67 01       	movw	r12, r14
   1e2e4:	c4 0e       	add	r12, r20
   1e2e6:	d5 1e       	adc	r13, r21
	}

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	for (uint16_t i = 0; i < TotalBlocks; i++)
	{
		if (IsDataRead == DATA_READ)
   1e2e8:	bb 20       	and	r11, r11
   1e2ea:	19 f0       	breq	.+6      	; 0x1e2f2 <SCSI_Command_ReadWrite_10+0x5c>
		  VirtualFAT_ReadBlock(BlockAddress + i);
   1e2ec:	ce 01       	movw	r24, r28
   1e2ee:	bb d1       	rcall	.+886    	; 0x1e666 <VirtualFAT_ReadBlock>
   1e2f0:	02 c0       	rjmp	.+4      	; 0x1e2f6 <SCSI_Command_ReadWrite_10+0x60>
		else
    		VirtualFAT_WriteBlock(BlockAddress + i);
   1e2f2:	ce 01       	movw	r24, r28
   1e2f4:	25 d1       	rcall	.+586    	; 0x1e540 <VirtualFAT_WriteBlock>
   1e2f6:	21 96       	adiw	r28, 0x01	; 1

		return false;
	}

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	for (uint16_t i = 0; i < TotalBlocks; i++)
   1e2f8:	cc 15       	cp	r28, r12
   1e2fa:	dd 05       	cpc	r29, r13
   1e2fc:	a9 f7       	brne	.-22     	; 0x1e2e8 <SCSI_Command_ReadWrite_10+0x52>
		else
    		VirtualFAT_WriteBlock(BlockAddress + i);
	}

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * SECTOR_SIZE_BYTES);
   1e2fe:	c7 01       	movw	r24, r14
   1e300:	a0 e0       	ldi	r26, 0x00	; 0
   1e302:	b0 e0       	ldi	r27, 0x00	; 0
   1e304:	07 2e       	mov	r0, r23
   1e306:	79 e0       	ldi	r23, 0x09	; 9
   1e308:	88 0f       	add	r24, r24
   1e30a:	99 1f       	adc	r25, r25
   1e30c:	aa 1f       	adc	r26, r26
   1e30e:	bb 1f       	adc	r27, r27
   1e310:	7a 95       	dec	r23
   1e312:	d1 f7       	brne	.-12     	; 0x1e308 <SCSI_Command_ReadWrite_10+0x72>
   1e314:	70 2d       	mov	r23, r0
   1e316:	f8 01       	movw	r30, r16
   1e318:	44 89       	ldd	r20, Z+20	; 0x14
   1e31a:	55 89       	ldd	r21, Z+21	; 0x15
   1e31c:	66 89       	ldd	r22, Z+22	; 0x16
   1e31e:	77 89       	ldd	r23, Z+23	; 0x17
   1e320:	6a 01       	movw	r12, r20
   1e322:	7b 01       	movw	r14, r22
   1e324:	c8 1a       	sub	r12, r24
   1e326:	d9 0a       	sbc	r13, r25
   1e328:	ea 0a       	sbc	r14, r26
   1e32a:	fb 0a       	sbc	r15, r27
   1e32c:	c4 8a       	std	Z+20, r12	; 0x14
   1e32e:	d5 8a       	std	Z+21, r13	; 0x15
   1e330:	e6 8a       	std	Z+22, r14	; 0x16
   1e332:	f7 8a       	std	Z+23, r15	; 0x17

	return true;
   1e334:	81 e0       	ldi	r24, 0x01	; 1
}
   1e336:	df 91       	pop	r29
   1e338:	cf 91       	pop	r28
   1e33a:	1f 91       	pop	r17
   1e33c:	0f 91       	pop	r16
   1e33e:	ff 90       	pop	r15
   1e340:	ef 90       	pop	r14
   1e342:	df 90       	pop	r13
   1e344:	cf 90       	pop	r12
   1e346:	bf 90       	pop	r11
   1e348:	08 95       	ret

0001e34a <SCSI_DecodeSCSICommand>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
   1e34a:	ef 92       	push	r14
   1e34c:	ff 92       	push	r15
   1e34e:	0f 93       	push	r16
   1e350:	1f 93       	push	r17
   1e352:	cf 93       	push	r28
   1e354:	df 93       	push	r29
   1e356:	ec 01       	movw	r28, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
   1e358:	9b 8d       	ldd	r25, Y+27	; 0x1b
   1e35a:	9f 31       	cpi	r25, 0x1F	; 31
   1e35c:	a0 f4       	brcc	.+40     	; 0x1e386 <SCSI_DecodeSCSICommand+0x3c>
   1e35e:	9d 31       	cpi	r25, 0x1D	; 29
   1e360:	08 f0       	brcs	.+2      	; 0x1e364 <SCSI_DecodeSCSICommand+0x1a>
   1e362:	c6 c0       	rjmp	.+396    	; 0x1e4f0 <SCSI_DecodeSCSICommand+0x1a6>
   1e364:	92 31       	cpi	r25, 0x12	; 18
   1e366:	f1 f0       	breq	.+60     	; 0x1e3a4 <SCSI_DecodeSCSICommand+0x5a>
   1e368:	38 f4       	brcc	.+14     	; 0x1e378 <SCSI_DecodeSCSICommand+0x2e>
   1e36a:	99 23       	and	r25, r25
   1e36c:	09 f4       	brne	.+2      	; 0x1e370 <SCSI_DecodeSCSICommand+0x26>
   1e36e:	c0 c0       	rjmp	.+384    	; 0x1e4f0 <SCSI_DecodeSCSICommand+0x1a6>
   1e370:	93 30       	cpi	r25, 0x03	; 3
   1e372:	09 f4       	brne	.+2      	; 0x1e376 <SCSI_DecodeSCSICommand+0x2c>
   1e374:	52 c0       	rjmp	.+164    	; 0x1e41a <SCSI_DecodeSCSICommand+0xd0>
   1e376:	c1 c0       	rjmp	.+386    	; 0x1e4fa <SCSI_DecodeSCSICommand+0x1b0>
   1e378:	9a 31       	cpi	r25, 0x1A	; 26
   1e37a:	09 f4       	brne	.+2      	; 0x1e37e <SCSI_DecodeSCSICommand+0x34>
   1e37c:	9a c0       	rjmp	.+308    	; 0x1e4b2 <SCSI_DecodeSCSICommand+0x168>
   1e37e:	9b 31       	cpi	r25, 0x1B	; 27
   1e380:	09 f4       	brne	.+2      	; 0x1e384 <SCSI_DecodeSCSICommand+0x3a>
   1e382:	ae c0       	rjmp	.+348    	; 0x1e4e0 <SCSI_DecodeSCSICommand+0x196>
   1e384:	ba c0       	rjmp	.+372    	; 0x1e4fa <SCSI_DecodeSCSICommand+0x1b0>
   1e386:	98 32       	cpi	r25, 0x28	; 40
   1e388:	09 f4       	brne	.+2      	; 0x1e38c <SCSI_DecodeSCSICommand+0x42>
   1e38a:	8f c0       	rjmp	.+286    	; 0x1e4aa <SCSI_DecodeSCSICommand+0x160>
   1e38c:	20 f4       	brcc	.+8      	; 0x1e396 <SCSI_DecodeSCSICommand+0x4c>
   1e38e:	95 32       	cpi	r25, 0x25	; 37
   1e390:	09 f4       	brne	.+2      	; 0x1e394 <SCSI_DecodeSCSICommand+0x4a>
   1e392:	69 c0       	rjmp	.+210    	; 0x1e466 <SCSI_DecodeSCSICommand+0x11c>
   1e394:	b2 c0       	rjmp	.+356    	; 0x1e4fa <SCSI_DecodeSCSICommand+0x1b0>
   1e396:	9a 32       	cpi	r25, 0x2A	; 42
   1e398:	09 f4       	brne	.+2      	; 0x1e39c <SCSI_DecodeSCSICommand+0x52>
   1e39a:	83 c0       	rjmp	.+262    	; 0x1e4a2 <SCSI_DecodeSCSICommand+0x158>
   1e39c:	9f 32       	cpi	r25, 0x2F	; 47
   1e39e:	09 f4       	brne	.+2      	; 0x1e3a2 <SCSI_DecodeSCSICommand+0x58>
   1e3a0:	a7 c0       	rjmp	.+334    	; 0x1e4f0 <SCSI_DecodeSCSICommand+0x1a6>
   1e3a2:	ab c0       	rjmp	.+342    	; 0x1e4fa <SCSI_DecodeSCSICommand+0x1b0>
   1e3a4:	0f 8d       	ldd	r16, Y+31	; 0x1f
   1e3a6:	1e 8d       	ldd	r17, Y+30	; 0x1e
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
   1e3a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
   1e3aa:	93 70       	andi	r25, 0x03	; 3
   1e3ac:	19 f4       	brne	.+6      	; 0x1e3b4 <SCSI_DecodeSCSICommand+0x6a>
   1e3ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
   1e3b0:	88 23       	and	r24, r24
   1e3b2:	61 f0       	breq	.+24     	; 0x1e3cc <SCSI_DecodeSCSICommand+0x82>
	     MSInterfaceInfo->State.CommandBlock.SCSICommandData[2])
	{
		/* Optional but unsupported bits set - update the SENSE key and fail the request */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
   1e3b4:	ec e3       	ldi	r30, 0x3C	; 60
   1e3b6:	f1 e0       	ldi	r31, 0x01	; 1
   1e3b8:	80 81       	ld	r24, Z
   1e3ba:	80 7f       	andi	r24, 0xF0	; 240
   1e3bc:	85 60       	ori	r24, 0x05	; 5
   1e3be:	80 83       	st	Z, r24
   1e3c0:	ea e3       	ldi	r30, 0x3A	; 58
   1e3c2:	f1 e0       	ldi	r31, 0x01	; 1
   1e3c4:	84 e2       	ldi	r24, 0x24	; 36
   1e3c6:	84 87       	std	Z+12, r24	; 0x0c
   1e3c8:	15 86       	std	Z+13, r1	; 0x0d
   1e3ca:	b2 c0       	rjmp	.+356    	; 0x1e530 <SCSI_DecodeSCSICommand+0x1e6>
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
   1e3cc:	78 01       	movw	r14, r16
   1e3ce:	05 32       	cpi	r16, 0x25	; 37
   1e3d0:	11 05       	cpc	r17, r1
   1e3d2:	28 f0       	brcs	.+10     	; 0x1e3de <SCSI_DecodeSCSICommand+0x94>
   1e3d4:	0f 2e       	mov	r0, r31
   1e3d6:	f4 e2       	ldi	r31, 0x24	; 36
   1e3d8:	ef 2e       	mov	r14, r31
   1e3da:	f1 2c       	mov	r15, r1
   1e3dc:	f0 2d       	mov	r31, r0
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
   1e3de:	40 e0       	ldi	r20, 0x00	; 0
   1e3e0:	50 e0       	ldi	r21, 0x00	; 0
   1e3e2:	b7 01       	movw	r22, r14
   1e3e4:	8e e9       	ldi	r24, 0x9E	; 158
   1e3e6:	91 e0       	ldi	r25, 0x01	; 1
   1e3e8:	6e d3       	rcall	.+1756   	; 0x1eac6 <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
   1e3ea:	60 e0       	ldi	r22, 0x00	; 0
   1e3ec:	70 e0       	ldi	r23, 0x00	; 0
   1e3ee:	c8 01       	movw	r24, r16
   1e3f0:	8e 19       	sub	r24, r14
   1e3f2:	9f 09       	sbc	r25, r15
   1e3f4:	19 d3       	rcall	.+1586   	; 0x1ea28 <Endpoint_Null_Stream>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e3f6:	e8 ee       	ldi	r30, 0xE8	; 232
   1e3f8:	f0 e0       	ldi	r31, 0x00	; 0
   1e3fa:	80 81       	ld	r24, Z
   1e3fc:	8e 77       	andi	r24, 0x7E	; 126
   1e3fe:	80 83       	st	Z, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
   1e400:	8c 89       	ldd	r24, Y+20	; 0x14
   1e402:	9d 89       	ldd	r25, Y+21	; 0x15
   1e404:	ae 89       	ldd	r26, Y+22	; 0x16
   1e406:	bf 89       	ldd	r27, Y+23	; 0x17
   1e408:	8e 19       	sub	r24, r14
   1e40a:	9f 09       	sbc	r25, r15
   1e40c:	a1 09       	sbc	r26, r1
   1e40e:	b1 09       	sbc	r27, r1
   1e410:	8c 8b       	std	Y+20, r24	; 0x14
   1e412:	9d 8b       	std	Y+21, r25	; 0x15
   1e414:	ae 8b       	std	Y+22, r26	; 0x16
   1e416:	bf 8b       	std	Y+23, r27	; 0x17
   1e418:	7e c0       	rjmp	.+252    	; 0x1e516 <SCSI_DecodeSCSICommand+0x1cc>
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
   1e41a:	1f 8d       	ldd	r17, Y+31	; 0x1f
	uint8_t BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
   1e41c:	01 2f       	mov	r16, r17
   1e41e:	13 31       	cpi	r17, 0x13	; 19
   1e420:	08 f0       	brcs	.+2      	; 0x1e424 <SCSI_DecodeSCSICommand+0xda>
   1e422:	02 e1       	ldi	r16, 0x12	; 18

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
   1e424:	e0 2e       	mov	r14, r16
   1e426:	f1 2c       	mov	r15, r1
   1e428:	40 e0       	ldi	r20, 0x00	; 0
   1e42a:	50 e0       	ldi	r21, 0x00	; 0
   1e42c:	b7 01       	movw	r22, r14
   1e42e:	8a e3       	ldi	r24, 0x3A	; 58
   1e430:	91 e0       	ldi	r25, 0x01	; 1
   1e432:	49 d3       	rcall	.+1682   	; 0x1eac6 <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
   1e434:	81 2f       	mov	r24, r17
   1e436:	90 e0       	ldi	r25, 0x00	; 0
   1e438:	60 e0       	ldi	r22, 0x00	; 0
   1e43a:	70 e0       	ldi	r23, 0x00	; 0
   1e43c:	8e 19       	sub	r24, r14
   1e43e:	9f 09       	sbc	r25, r15
   1e440:	f3 d2       	rcall	.+1510   	; 0x1ea28 <Endpoint_Null_Stream>
   1e442:	e8 ee       	ldi	r30, 0xE8	; 232
   1e444:	f0 e0       	ldi	r31, 0x00	; 0
   1e446:	80 81       	ld	r24, Z
   1e448:	8e 77       	andi	r24, 0x7E	; 126
   1e44a:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
   1e44c:	8c 89       	ldd	r24, Y+20	; 0x14
   1e44e:	9d 89       	ldd	r25, Y+21	; 0x15
   1e450:	ae 89       	ldd	r26, Y+22	; 0x16
   1e452:	bf 89       	ldd	r27, Y+23	; 0x17
   1e454:	80 1b       	sub	r24, r16
   1e456:	91 09       	sbc	r25, r1
   1e458:	a1 09       	sbc	r26, r1
   1e45a:	b1 09       	sbc	r27, r1
   1e45c:	8c 8b       	std	Y+20, r24	; 0x14
   1e45e:	9d 8b       	std	Y+21, r25	; 0x15
   1e460:	ae 8b       	std	Y+22, r26	; 0x16
   1e462:	bf 8b       	std	Y+23, r27	; 0x17
		case SCSI_CMD_INQUIRY:
			CommandSuccess = SCSI_Command_Inquiry(MSInterfaceInfo);
			break;
		case SCSI_CMD_REQUEST_SENSE:
			CommandSuccess = SCSI_Command_Request_Sense(MSInterfaceInfo);
			break;
   1e464:	58 c0       	rjmp	.+176    	; 0x1e516 <SCSI_DecodeSCSICommand+0x1cc>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_BE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_BE(const uint32_t Data)
			{
				UEDATX = (Data >> 24);
   1e466:	e1 ef       	ldi	r30, 0xF1	; 241
   1e468:	f0 e0       	ldi	r31, 0x00	; 0
   1e46a:	10 82       	st	Z, r1
				UEDATX = (Data >> 16);
   1e46c:	10 82       	st	Z, r1
				UEDATX = (Data >> 8);
   1e46e:	81 e0       	ldi	r24, 0x01	; 1
   1e470:	80 83       	st	Z, r24
				UEDATX = (Data &  0xFF);
   1e472:	87 e1       	ldi	r24, 0x17	; 23
   1e474:	80 83       	st	Z, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_BE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_BE(const uint32_t Data)
			{
				UEDATX = (Data >> 24);
   1e476:	10 82       	st	Z, r1
				UEDATX = (Data >> 16);
   1e478:	10 82       	st	Z, r1
				UEDATX = (Data >> 8);
   1e47a:	82 e0       	ldi	r24, 0x02	; 2
   1e47c:	80 83       	st	Z, r24
				UEDATX = (Data &  0xFF);
   1e47e:	10 82       	st	Z, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e480:	e8 ee       	ldi	r30, 0xE8	; 232
   1e482:	f0 e0       	ldi	r31, 0x00	; 0
   1e484:	80 81       	ld	r24, Z
   1e486:	8e 77       	andi	r24, 0x7E	; 126
   1e488:	80 83       	st	Z, r24
	Endpoint_Write_32_BE(LUN_MEDIA_BLOCKS - 1);
	Endpoint_Write_32_BE(SECTOR_SIZE_BYTES);
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
   1e48a:	8c 89       	ldd	r24, Y+20	; 0x14
   1e48c:	9d 89       	ldd	r25, Y+21	; 0x15
   1e48e:	ae 89       	ldd	r26, Y+22	; 0x16
   1e490:	bf 89       	ldd	r27, Y+23	; 0x17
   1e492:	08 97       	sbiw	r24, 0x08	; 8
   1e494:	a1 09       	sbc	r26, r1
   1e496:	b1 09       	sbc	r27, r1
   1e498:	8c 8b       	std	Y+20, r24	; 0x14
   1e49a:	9d 8b       	std	Y+21, r25	; 0x15
   1e49c:	ae 8b       	std	Y+22, r26	; 0x16
   1e49e:	bf 8b       	std	Y+23, r27	; 0x17
		case SCSI_CMD_REQUEST_SENSE:
			CommandSuccess = SCSI_Command_Request_Sense(MSInterfaceInfo);
			break;
		case SCSI_CMD_READ_CAPACITY_10:
			CommandSuccess = SCSI_Command_Read_Capacity_10(MSInterfaceInfo);
			break;
   1e4a0:	3a c0       	rjmp	.+116    	; 0x1e516 <SCSI_DecodeSCSICommand+0x1cc>
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
   1e4a2:	60 e0       	ldi	r22, 0x00	; 0
   1e4a4:	ce 01       	movw	r24, r28
   1e4a6:	f7 de       	rcall	.-530    	; 0x1e296 <SCSI_Command_ReadWrite_10>
			break;
   1e4a8:	34 c0       	rjmp	.+104    	; 0x1e512 <SCSI_DecodeSCSICommand+0x1c8>
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
   1e4aa:	61 e0       	ldi	r22, 0x01	; 1
   1e4ac:	ce 01       	movw	r24, r28
   1e4ae:	f3 de       	rcall	.-538    	; 0x1e296 <SCSI_Command_ReadWrite_10>
			break;
   1e4b0:	30 c0       	rjmp	.+96     	; 0x1e512 <SCSI_DecodeSCSICommand+0x1c8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
   1e4b2:	e1 ef       	ldi	r30, 0xF1	; 241
   1e4b4:	f0 e0       	ldi	r31, 0x00	; 0
   1e4b6:	10 82       	st	Z, r1
				UEDATX = (Data >> 8);
   1e4b8:	10 82       	st	Z, r1
				UEDATX = (Data >> 16);
   1e4ba:	10 82       	st	Z, r1
				UEDATX = (Data >> 24);
   1e4bc:	10 82       	st	Z, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e4be:	e8 ee       	ldi	r30, 0xE8	; 232
   1e4c0:	f0 e0       	ldi	r31, 0x00	; 0
   1e4c2:	80 81       	ld	r24, Z
   1e4c4:	8e 77       	andi	r24, 0x7E	; 126
   1e4c6:	80 83       	st	Z, r24
	/* Send an empty header response indicating Write Protect flag is off */
	Endpoint_Write_32_LE(0);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
   1e4c8:	8c 89       	ldd	r24, Y+20	; 0x14
   1e4ca:	9d 89       	ldd	r25, Y+21	; 0x15
   1e4cc:	ae 89       	ldd	r26, Y+22	; 0x16
   1e4ce:	bf 89       	ldd	r27, Y+23	; 0x17
   1e4d0:	04 97       	sbiw	r24, 0x04	; 4
   1e4d2:	a1 09       	sbc	r26, r1
   1e4d4:	b1 09       	sbc	r27, r1
   1e4d6:	8c 8b       	std	Y+20, r24	; 0x14
   1e4d8:	9d 8b       	std	Y+21, r25	; 0x15
   1e4da:	ae 8b       	std	Y+22, r26	; 0x16
   1e4dc:	bf 8b       	std	Y+23, r27	; 0x17
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
			break;
		case SCSI_CMD_MODE_SENSE_6:
			CommandSuccess = SCSI_Command_ModeSense_6(MSInterfaceInfo);
			break;
   1e4de:	1b c0       	rjmp	.+54     	; 0x1e516 <SCSI_DecodeSCSICommand+0x1cc>
		case SCSI_CMD_START_STOP_UNIT:
#if !defined(NO_APP_START_ON_EJECT)
			/* If the user ejected the volume, signal bootloader exit at next opportunity. */
			RunBootloader = ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[4] & 0x03) != 0x02);
   1e4e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
   1e4e2:	83 70       	andi	r24, 0x03	; 3
   1e4e4:	91 e0       	ldi	r25, 0x01	; 1
   1e4e6:	82 30       	cpi	r24, 0x02	; 2
   1e4e8:	09 f4       	brne	.+2      	; 0x1e4ec <SCSI_DecodeSCSICommand+0x1a2>
   1e4ea:	90 e0       	ldi	r25, 0x00	; 0
   1e4ec:	90 93 00 01 	sts	0x0100, r25
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
   1e4f0:	1c 8a       	std	Y+20, r1	; 0x14
   1e4f2:	1d 8a       	std	Y+21, r1	; 0x15
   1e4f4:	1e 8a       	std	Y+22, r1	; 0x16
   1e4f6:	1f 8a       	std	Y+23, r1	; 0x17
			break;
   1e4f8:	0e c0       	rjmp	.+28     	; 0x1e516 <SCSI_DecodeSCSICommand+0x1cc>
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
   1e4fa:	ec e3       	ldi	r30, 0x3C	; 60
   1e4fc:	f1 e0       	ldi	r31, 0x01	; 1
   1e4fe:	80 81       	ld	r24, Z
   1e500:	80 7f       	andi	r24, 0xF0	; 240
   1e502:	85 60       	ori	r24, 0x05	; 5
   1e504:	80 83       	st	Z, r24
   1e506:	ea e3       	ldi	r30, 0x3A	; 58
   1e508:	f1 e0       	ldi	r31, 0x01	; 1
   1e50a:	80 e2       	ldi	r24, 0x20	; 32
   1e50c:	84 87       	std	Z+12, r24	; 0x0c
   1e50e:	15 86       	std	Z+13, r1	; 0x0d
		                   SCSI_ASENSE_INVALID_COMMAND,
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
   1e510:	0f c0       	rjmp	.+30     	; 0x1e530 <SCSI_DecodeSCSICommand+0x1e6>
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
   1e512:	88 23       	and	r24, r24
   1e514:	59 f0       	breq	.+22     	; 0x1e52c <SCSI_DecodeSCSICommand+0x1e2>
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
   1e516:	ec e3       	ldi	r30, 0x3C	; 60
   1e518:	f1 e0       	ldi	r31, 0x01	; 1
   1e51a:	80 81       	ld	r24, Z
   1e51c:	80 7f       	andi	r24, 0xF0	; 240
   1e51e:	80 83       	st	Z, r24
   1e520:	ea e3       	ldi	r30, 0x3A	; 58
   1e522:	f1 e0       	ldi	r31, 0x01	; 1
   1e524:	14 86       	std	Z+12, r1	; 0x0c
   1e526:	15 86       	std	Z+13, r1	; 0x0d
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
   1e528:	81 e0       	ldi	r24, 0x01	; 1
   1e52a:	03 c0       	rjmp	.+6      	; 0x1e532 <SCSI_DecodeSCSICommand+0x1e8>
	}

	return false;
   1e52c:	80 e0       	ldi	r24, 0x00	; 0
   1e52e:	01 c0       	rjmp	.+2      	; 0x1e532 <SCSI_DecodeSCSICommand+0x1e8>
   1e530:	80 e0       	ldi	r24, 0x00	; 0
}
   1e532:	df 91       	pop	r29
   1e534:	cf 91       	pop	r28
   1e536:	1f 91       	pop	r17
   1e538:	0f 91       	pop	r16
   1e53a:	ff 90       	pop	r15
   1e53c:	ef 90       	pop	r14
   1e53e:	08 95       	ret

0001e540 <VirtualFAT_WriteBlock>:
 *  Storage interface.
 *
 *  \param[in]  BlockNumber  Index of the block to write.
 */
void VirtualFAT_WriteBlock(const uint16_t BlockNumber)  //firmware update
{
   1e540:	4f 92       	push	r4
   1e542:	5f 92       	push	r5
   1e544:	6f 92       	push	r6
   1e546:	7f 92       	push	r7
   1e548:	8f 92       	push	r8
   1e54a:	9f 92       	push	r9
   1e54c:	af 92       	push	r10
   1e54e:	bf 92       	push	r11
   1e550:	cf 92       	push	r12
   1e552:	df 92       	push	r13
   1e554:	ef 92       	push	r14
   1e556:	ff 92       	push	r15
   1e558:	0f 93       	push	r16
   1e55a:	1f 93       	push	r17
   1e55c:	cf 93       	push	r28
   1e55e:	df 93       	push	r29
   1e560:	cd b7       	in	r28, 0x3d	; 61
   1e562:	de b7       	in	r29, 0x3e	; 62
   1e564:	d2 50       	subi	r29, 0x02	; 2
   1e566:	0f b6       	in	r0, 0x3f	; 63
   1e568:	f8 94       	cli
   1e56a:	de bf       	out	0x3e, r29	; 62
   1e56c:	0f be       	out	0x3f, r0	; 63
   1e56e:	cd bf       	out	0x3d, r28	; 61
   1e570:	6c 01       	movw	r12, r24
	uint8_t BlockBuffer[SECTOR_SIZE_BYTES];

	/* Buffer the entire block to be written from the host */
	Endpoint_Read_Stream_LE(BlockBuffer, sizeof(BlockBuffer), NULL);
   1e572:	40 e0       	ldi	r20, 0x00	; 0
   1e574:	50 e0       	ldi	r21, 0x00	; 0
   1e576:	60 e0       	ldi	r22, 0x00	; 0
   1e578:	72 e0       	ldi	r23, 0x02	; 2
   1e57a:	ce 01       	movw	r24, r28
   1e57c:	01 96       	adiw	r24, 0x01	; 1
   1e57e:	ff d2       	rcall	.+1534   	; 0x1eb7e <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1e580:	e8 ee       	ldi	r30, 0xE8	; 232
   1e582:	f0 e0       	ldi	r31, 0x00	; 0
   1e584:	90 81       	ld	r25, Z
   1e586:	9b 77       	andi	r25, 0x7B	; 123
   1e588:	90 83       	st	Z, r25
	Endpoint_ClearOUT();

	switch (BlockNumber)
   1e58a:	83 e0       	ldi	r24, 0x03	; 3
   1e58c:	c8 16       	cp	r12, r24
   1e58e:	d1 04       	cpc	r13, r1
   1e590:	08 f4       	brcc	.+2      	; 0x1e594 <VirtualFAT_WriteBlock+0x54>
   1e592:	52 c0       	rjmp	.+164    	; 0x1e638 <VirtualFAT_WriteBlock+0xf8>
   1e594:	e3 e0       	ldi	r30, 0x03	; 3
   1e596:	ce 16       	cp	r12, r30
   1e598:	d1 04       	cpc	r13, r1
   1e59a:	51 f4       	brne	.+20     	; 0x1e5b0 <VirtualFAT_WriteBlock+0x70>

			break;

		case DISK_BLOCK_RootFilesBlock:
			/* Copy over the updated directory entries */
			memcpy(FirmwareFileEntries, BlockBuffer, sizeof(FirmwareFileEntries));
   1e59c:	80 e2       	ldi	r24, 0x20	; 32
   1e59e:	fe 01       	movw	r30, r28
   1e5a0:	31 96       	adiw	r30, 0x01	; 1
   1e5a2:	ac e4       	ldi	r26, 0x4C	; 76
   1e5a4:	b1 e0       	ldi	r27, 0x01	; 1
   1e5a6:	01 90       	ld	r0, Z+
   1e5a8:	0d 92       	st	X+, r0
   1e5aa:	8a 95       	dec	r24
   1e5ac:	e1 f7       	brne	.-8      	; 0x1e5a6 <VirtualFAT_WriteBlock+0x66>

			break;
   1e5ae:	44 c0       	rjmp	.+136    	; 0x1e638 <VirtualFAT_WriteBlock+0xf8>
	uint16_t FileStartBlock = DISK_BLOCK_DataStartBlock /*+ (*FLASHFileStartCluster - 2)*/ * SECTOR_PER_CLUSTER;
	uint16_t FileEndBlock   = FileStartBlock + (FILE_SECTORS(FLASH_FILE_SIZE_BYTES) - 1);

	/* Range check the write request - abort if requested block is not within the
	 * virtual firmware file sector range */
	if (!((BlockNumber >= FileStartBlock) && (BlockNumber <= FileEndBlock)))
   1e5b0:	c6 01       	movw	r24, r12
   1e5b2:	40 97       	sbiw	r24, 0x10	; 16
   1e5b4:	80 3f       	cpi	r24, 0xF0	; 240
   1e5b6:	91 05       	cpc	r25, r1
   1e5b8:	08 f0       	brcs	.+2      	; 0x1e5bc <VirtualFAT_WriteBlock+0x7c>
   1e5ba:	3e c0       	rjmp	.+124    	; 0x1e638 <VirtualFAT_WriteBlock+0xf8>
	  return;

	#if (FLASHEND > 0xFFFF)
	uint32_t FlashAddress = (uint32_t)(BlockNumber - FileStartBlock) * SECTOR_SIZE_BYTES;
   1e5bc:	6c 01       	movw	r12, r24
   1e5be:	e1 2c       	mov	r14, r1
   1e5c0:	f1 2c       	mov	r15, r1
   1e5c2:	0b 2e       	mov	r0, r27
   1e5c4:	b9 e0       	ldi	r27, 0x09	; 9
   1e5c6:	cc 0c       	add	r12, r12
   1e5c8:	dd 1c       	adc	r13, r13
   1e5ca:	ee 1c       	adc	r14, r14
   1e5cc:	ff 1c       	adc	r15, r15
   1e5ce:	ba 95       	dec	r27
   1e5d0:	d1 f7       	brne	.-12     	; 0x1e5c6 <VirtualFAT_WriteBlock+0x86>
   1e5d2:	b0 2d       	mov	r27, r0
   1e5d4:	8e 01       	movw	r16, r28
   1e5d6:	0e 5f       	subi	r16, 0xFE	; 254
   1e5d8:	1f 4f       	sbci	r17, 0xFF	; 255
   1e5da:	46 01       	movw	r8, r12
   1e5dc:	57 01       	movw	r10, r14
   1e5de:	82 e0       	ldi	r24, 0x02	; 2
   1e5e0:	98 0e       	add	r9, r24
   1e5e2:	a1 1c       	adc	r10, r1
   1e5e4:	b1 1c       	adc	r11, r1
   1e5e6:	02 c0       	rjmp	.+4      	; 0x1e5ec <VirtualFAT_WriteBlock+0xac>
				BootloaderAPI_ErasePage(FlashAddress);
			}

			/* Write the next data word to the FLASH page */
			BootloaderAPI_FillWord(FlashAddress, (BlockBuffer[i + 1] << 8) | BlockBuffer[i]);
			FlashAddress += 2;
   1e5e8:	73 01       	movw	r14, r6
   1e5ea:	62 01       	movw	r12, r4
	//else
	//{
		/* Write out the mapped block of data to the device's FLASH */
		for (uint16_t i = 0; i < SECTOR_SIZE_BYTES; i += 2)
		{
			if ((FlashAddress % SPM_PAGESIZE) == 0)
   1e5ec:	c1 10       	cpse	r12, r1
   1e5ee:	03 c0       	rjmp	.+6      	; 0x1e5f6 <VirtualFAT_WriteBlock+0xb6>
			{
				/* Erase the given FLASH page, ready to be programmed */
				BootloaderAPI_ErasePage(FlashAddress);
   1e5f0:	c7 01       	movw	r24, r14
   1e5f2:	b6 01       	movw	r22, r12
   1e5f4:	95 dd       	rcall	.-1238   	; 0x1e120 <BootloaderAPI_ErasePage>
   1e5f6:	f8 01       	movw	r30, r16
   1e5f8:	31 97       	sbiw	r30, 0x01	; 1
			}

			/* Write the next data word to the FLASH page */
			BootloaderAPI_FillWord(FlashAddress, (BlockBuffer[i + 1] << 8) | BlockBuffer[i]);
   1e5fa:	40 81       	ld	r20, Z
   1e5fc:	f8 01       	movw	r30, r16
   1e5fe:	80 81       	ld	r24, Z
   1e600:	50 e0       	ldi	r21, 0x00	; 0
   1e602:	58 2b       	or	r21, r24
   1e604:	c7 01       	movw	r24, r14
   1e606:	b6 01       	movw	r22, r12
   1e608:	b3 dd       	rcall	.-1178   	; 0x1e170 <BootloaderAPI_FillWord>
			FlashAddress += 2;
   1e60a:	26 01       	movw	r4, r12
   1e60c:	37 01       	movw	r6, r14
   1e60e:	f2 e0       	ldi	r31, 0x02	; 2
   1e610:	4f 0e       	add	r4, r31
   1e612:	51 1c       	adc	r5, r1
   1e614:	61 1c       	adc	r6, r1
   1e616:	71 1c       	adc	r7, r1

			if ((FlashAddress % SPM_PAGESIZE) == 0)
   1e618:	41 10       	cpse	r4, r1
   1e61a:	07 c0       	rjmp	.+14     	; 0x1e62a <VirtualFAT_WriteBlock+0xea>
   1e61c:	c7 01       	movw	r24, r14
   1e61e:	b6 01       	movw	r22, r12
   1e620:	6e 5f       	subi	r22, 0xFE	; 254
   1e622:	71 09       	sbc	r23, r1
   1e624:	81 09       	sbc	r24, r1
   1e626:	91 09       	sbc	r25, r1
			{
				/* Write the filled FLASH page to memory */
				BootloaderAPI_WritePage(FlashAddress - SPM_PAGESIZE);
   1e628:	8f dd       	rcall	.-1250   	; 0x1e148 <BootloaderAPI_WritePage>
   1e62a:	0e 5f       	subi	r16, 0xFE	; 254
   1e62c:	1f 4f       	sbci	r17, 0xFF	; 255
		//}
	//}
	//else
	//{
		/* Write out the mapped block of data to the device's FLASH */
		for (uint16_t i = 0; i < SECTOR_SIZE_BYTES; i += 2)
   1e62e:	48 14       	cp	r4, r8
   1e630:	59 04       	cpc	r5, r9
   1e632:	6a 04       	cpc	r6, r10
   1e634:	7b 04       	cpc	r7, r11
   1e636:	c1 f6       	brne	.-80     	; 0x1e5e8 <VirtualFAT_WriteBlock+0xa8>
		default:
			ReadWriteFLASHFileBlock(BlockNumber, BlockBuffer, false);

			break;
	}
}
   1e638:	de 5f       	subi	r29, 0xFE	; 254
   1e63a:	0f b6       	in	r0, 0x3f	; 63
   1e63c:	f8 94       	cli
   1e63e:	de bf       	out	0x3e, r29	; 62
   1e640:	0f be       	out	0x3f, r0	; 63
   1e642:	cd bf       	out	0x3d, r28	; 61
   1e644:	df 91       	pop	r29
   1e646:	cf 91       	pop	r28
   1e648:	1f 91       	pop	r17
   1e64a:	0f 91       	pop	r16
   1e64c:	ff 90       	pop	r15
   1e64e:	ef 90       	pop	r14
   1e650:	df 90       	pop	r13
   1e652:	cf 90       	pop	r12
   1e654:	bf 90       	pop	r11
   1e656:	af 90       	pop	r10
   1e658:	9f 90       	pop	r9
   1e65a:	8f 90       	pop	r8
   1e65c:	7f 90       	pop	r7
   1e65e:	6f 90       	pop	r6
   1e660:	5f 90       	pop	r5
   1e662:	4f 90       	pop	r4
   1e664:	08 95       	ret

0001e666 <VirtualFAT_ReadBlock>:
 *  host via the USB Mass Storage interface.
 *
 *  \param[in]  BlockNumber  Index of the block to read.
 */
void VirtualFAT_ReadBlock(const uint16_t BlockNumber)   //read files
{
   1e666:	cf 93       	push	r28
   1e668:	df 93       	push	r29
   1e66a:	cd b7       	in	r28, 0x3d	; 61
   1e66c:	de b7       	in	r29, 0x3e	; 62
   1e66e:	d2 50       	subi	r29, 0x02	; 2
   1e670:	0f b6       	in	r0, 0x3f	; 63
   1e672:	f8 94       	cli
   1e674:	de bf       	out	0x3e, r29	; 62
   1e676:	0f be       	out	0x3f, r0	; 63
   1e678:	cd bf       	out	0x3d, r28	; 61
	uint8_t BlockBuffer[SECTOR_SIZE_BYTES];
	memset(BlockBuffer, 0x00, sizeof(BlockBuffer));
   1e67a:	fe 01       	movw	r30, r28
   1e67c:	31 96       	adiw	r30, 0x01	; 1
   1e67e:	20 e0       	ldi	r18, 0x00	; 0
   1e680:	32 e0       	ldi	r19, 0x02	; 2
   1e682:	df 01       	movw	r26, r30
   1e684:	a9 01       	movw	r20, r18
   1e686:	1d 92       	st	X+, r1
   1e688:	41 50       	subi	r20, 0x01	; 1
   1e68a:	50 40       	sbci	r21, 0x00	; 0
   1e68c:	e1 f7       	brne	.-8      	; 0x1e686 <VirtualFAT_ReadBlock+0x20>

	switch (BlockNumber)
   1e68e:	83 30       	cpi	r24, 0x03	; 3
   1e690:	91 05       	cpc	r25, r1
   1e692:	18 f4       	brcc	.+6      	; 0x1e69a <VirtualFAT_ReadBlock+0x34>
   1e694:	01 97       	sbiw	r24, 0x01	; 1
   1e696:	20 f0       	brcs	.+8      	; 0x1e6a0 <VirtualFAT_ReadBlock+0x3a>
   1e698:	19 c0       	rjmp	.+50     	; 0x1e6cc <VirtualFAT_ReadBlock+0x66>
   1e69a:	03 97       	sbiw	r24, 0x03	; 3
   1e69c:	e9 f0       	breq	.+58     	; 0x1e6d8 <VirtualFAT_ReadBlock+0x72>
   1e69e:	25 c0       	rjmp	.+74     	; 0x1e6ea <VirtualFAT_ReadBlock+0x84>
	{
		case DISK_BLOCK_BootBlock:
			memcpy(BlockBuffer, &BootBlock, sizeof(FATBootBlock_t));
   1e6a0:	8e e3       	ldi	r24, 0x3E	; 62
   1e6a2:	e2 ec       	ldi	r30, 0xC2	; 194
   1e6a4:	f1 e0       	ldi	r31, 0x01	; 1
   1e6a6:	de 01       	movw	r26, r28
   1e6a8:	11 96       	adiw	r26, 0x01	; 1
   1e6aa:	01 90       	ld	r0, Z+
   1e6ac:	0d 92       	st	X+, r0
   1e6ae:	8a 95       	dec	r24
   1e6b0:	e1 f7       	brne	.-8      	; 0x1e6aa <VirtualFAT_ReadBlock+0x44>

			/* Add the magic signature to the end of the block */
			BlockBuffer[SECTOR_SIZE_BYTES - 2] = 0x55;
   1e6b2:	85 e5       	ldi	r24, 0x55	; 85
   1e6b4:	c1 50       	subi	r28, 0x01	; 1
   1e6b6:	de 4f       	sbci	r29, 0xFE	; 254
   1e6b8:	88 83       	st	Y, r24
   1e6ba:	cf 5f       	subi	r28, 0xFF	; 255
   1e6bc:	d1 40       	sbci	r29, 0x01	; 1
			BlockBuffer[SECTOR_SIZE_BYTES - 1] = 0xAA;
   1e6be:	8a ea       	ldi	r24, 0xAA	; 170
   1e6c0:	c0 50       	subi	r28, 0x00	; 0
   1e6c2:	de 4f       	sbci	r29, 0xFE	; 254
   1e6c4:	88 83       	st	Y, r24
   1e6c6:	c0 50       	subi	r28, 0x00	; 0
   1e6c8:	d2 40       	sbci	r29, 0x02	; 2

			break;
   1e6ca:	0f c0       	rjmp	.+30     	; 0x1e6ea <VirtualFAT_ReadBlock+0x84>
		FATTable[FATOffset]     = (FATTable[FATOffset] & 0x0F) | ((ChainEntry & 0x0F) << 4);
		FATTable[FATOffset + 1] = (ChainEntry >> 4);
	}
	else
	{
		FATTable[FATOffset]     = ChainEntry;
   1e6cc:	88 ef       	ldi	r24, 0xF8	; 248
   1e6ce:	89 83       	std	Y+1, r24	; 0x01
		FATTable[FATOffset + 1] = (FATTable[FATOffset] & 0xF0) | (ChainEntry >> 8);
   1e6d0:	8f ef       	ldi	r24, 0xFF	; 255
   1e6d2:	8a 83       	std	Y+2, r24	; 0x02
	/* Check if the start of the entry is at an upper nibble of the byte, fill
	 * out FAT12 entry as required */
	if (UpperNibble)
	{
		FATTable[FATOffset]     = (FATTable[FATOffset] & 0x0F) | ((ChainEntry & 0x0F) << 4);
		FATTable[FATOffset + 1] = (ChainEntry >> 4);
   1e6d4:	8b 83       	std	Y+3, r24	; 0x03
   1e6d6:	09 c0       	rjmp	.+18     	; 0x1e6ea <VirtualFAT_ReadBlock+0x84>
			UpdateFAT12ClusterEntry(BlockBuffer, 1, 0xFFF);

			break;

		case DISK_BLOCK_RootFilesBlock:
			memcpy(BlockBuffer, FirmwareFileEntries, sizeof(FirmwareFileEntries));
   1e6d8:	80 e2       	ldi	r24, 0x20	; 32
   1e6da:	ec e4       	ldi	r30, 0x4C	; 76
   1e6dc:	f1 e0       	ldi	r31, 0x01	; 1
   1e6de:	de 01       	movw	r26, r28
   1e6e0:	11 96       	adiw	r26, 0x01	; 1
   1e6e2:	01 90       	ld	r0, Z+
   1e6e4:	0d 92       	st	X+, r0
   1e6e6:	8a 95       	dec	r24
   1e6e8:	e1 f7       	brne	.-8      	; 0x1e6e2 <VirtualFAT_ReadBlock+0x7c>
		default:
			break;
	}

	/* Write the entire read block Buffer to the host */
	Endpoint_Write_Stream_LE(BlockBuffer, sizeof(BlockBuffer), NULL);
   1e6ea:	40 e0       	ldi	r20, 0x00	; 0
   1e6ec:	50 e0       	ldi	r21, 0x00	; 0
   1e6ee:	60 e0       	ldi	r22, 0x00	; 0
   1e6f0:	72 e0       	ldi	r23, 0x02	; 2
   1e6f2:	ce 01       	movw	r24, r28
   1e6f4:	01 96       	adiw	r24, 0x01	; 1
   1e6f6:	e7 d1       	rcall	.+974    	; 0x1eac6 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e6f8:	e8 ee       	ldi	r30, 0xE8	; 232
   1e6fa:	f0 e0       	ldi	r31, 0x00	; 0
   1e6fc:	80 81       	ld	r24, Z
   1e6fe:	8e 77       	andi	r24, 0x7E	; 126
   1e700:	80 83       	st	Z, r24
	Endpoint_ClearIN();
}
   1e702:	de 5f       	subi	r29, 0xFE	; 254
   1e704:	0f b6       	in	r0, 0x3f	; 63
   1e706:	f8 94       	cli
   1e708:	de bf       	out	0x3e, r29	; 62
   1e70a:	0f be       	out	0x3f, r0	; 63
   1e70c:	cd bf       	out	0x3d, r28	; 61
   1e70e:	df 91       	pop	r29
   1e710:	cf 91       	pop	r28
   1e712:	08 95       	ret

0001e714 <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorageClassDevice.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
   1e714:	cf 93       	push	r28
   1e716:	df 93       	push	r29
   1e718:	fc 01       	movw	r30, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1e71a:	90 91 e8 00 	lds	r25, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
   1e71e:	93 ff       	sbrs	r25, 3
   1e720:	33 c0       	rjmp	.+102    	; 0x1e788 <MS_Device_ProcessControlRequest+0x74>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
   1e722:	20 81       	ld	r18, Z
   1e724:	30 e0       	ldi	r19, 0x00	; 0
   1e726:	80 91 07 02 	lds	r24, 0x0207
   1e72a:	90 91 08 02 	lds	r25, 0x0208
   1e72e:	82 17       	cp	r24, r18
   1e730:	93 07       	cpc	r25, r19
   1e732:	51 f5       	brne	.+84     	; 0x1e788 <MS_Device_ProcessControlRequest+0x74>
   1e734:	ef 01       	movw	r28, r30
	  return;

	switch (USB_ControlRequest.bRequest)
   1e736:	80 91 04 02 	lds	r24, 0x0204
   1e73a:	8e 3f       	cpi	r24, 0xFE	; 254
   1e73c:	79 f0       	breq	.+30     	; 0x1e75c <MS_Device_ProcessControlRequest+0x48>
   1e73e:	8f 3f       	cpi	r24, 0xFF	; 255
   1e740:	19 f5       	brne	.+70     	; 0x1e788 <MS_Device_ProcessControlRequest+0x74>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
   1e742:	80 91 03 02 	lds	r24, 0x0203
   1e746:	81 32       	cpi	r24, 0x21	; 33
   1e748:	f9 f4       	brne	.+62     	; 0x1e788 <MS_Device_ProcessControlRequest+0x74>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e74a:	e8 ee       	ldi	r30, 0xE8	; 232
   1e74c:	f0 e0       	ldi	r31, 0x00	; 0
   1e74e:	80 81       	ld	r24, Z
   1e750:	87 7f       	andi	r24, 0xF7	; 247
   1e752:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
   1e754:	67 d3       	rcall	.+1742   	; 0x1ee24 <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
   1e756:	81 e0       	ldi	r24, 0x01	; 1
   1e758:	88 af       	std	Y+56, r24	; 0x38
   1e75a:	16 c0       	rjmp	.+44     	; 0x1e788 <MS_Device_ProcessControlRequest+0x74>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
   1e75c:	80 91 03 02 	lds	r24, 0x0203
   1e760:	81 3a       	cpi	r24, 0xA1	; 161
   1e762:	91 f4       	brne	.+36     	; 0x1e788 <MS_Device_ProcessControlRequest+0x74>
   1e764:	e8 ee       	ldi	r30, 0xE8	; 232
   1e766:	f0 e0       	ldi	r31, 0x00	; 0
   1e768:	80 81       	ld	r24, Z
   1e76a:	87 7f       	andi	r24, 0xF7	; 247
   1e76c:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e76e:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
   1e770:	80 ff       	sbrs	r24, 0
   1e772:	fd cf       	rjmp	.-6      	; 0x1e76e <MS_Device_ProcessControlRequest+0x5a>
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
   1e774:	8b 85       	ldd	r24, Y+11	; 0x0b
   1e776:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1e778:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e77c:	e8 ee       	ldi	r30, 0xE8	; 232
   1e77e:	f0 e0       	ldi	r31, 0x00	; 0
   1e780:	80 81       	ld	r24, Z
   1e782:	8e 77       	andi	r24, 0x7E	; 126
   1e784:	80 83       	st	Z, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
   1e786:	4e d3       	rcall	.+1692   	; 0x1ee24 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
   1e788:	df 91       	pop	r29
   1e78a:	cf 91       	pop	r28
   1e78c:	08 95       	ret

0001e78e <MS_Device_ConfigureEndpoints>:

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
   1e78e:	cf 93       	push	r28
   1e790:	df 93       	push	r29
   1e792:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
   1e794:	fc 01       	movw	r30, r24
   1e796:	3c 96       	adiw	r30, 0x0c	; 12
   1e798:	8d e2       	ldi	r24, 0x2D	; 45
   1e79a:	df 01       	movw	r26, r30
   1e79c:	1d 92       	st	X+, r1
   1e79e:	8a 95       	dec	r24
   1e7a0:	e9 f7       	brne	.-6      	; 0x1e79c <MS_Device_ConfigureEndpoints+0xe>

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
   1e7a2:	82 e0       	ldi	r24, 0x02	; 2
   1e7a4:	8c 83       	std	Y+4, r24	; 0x04
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
   1e7a6:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
   1e7a8:	61 e0       	ldi	r22, 0x01	; 1
   1e7aa:	ce 01       	movw	r24, r28
   1e7ac:	01 96       	adiw	r24, 0x01	; 1
   1e7ae:	d4 d2       	rcall	.+1448   	; 0x1ed58 <Endpoint_ConfigureEndpointTable>
   1e7b0:	88 23       	and	r24, r24
   1e7b2:	21 f0       	breq	.+8      	; 0x1e7bc <MS_Device_ConfigureEndpoints+0x2e>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
   1e7b4:	61 e0       	ldi	r22, 0x01	; 1
   1e7b6:	ce 01       	movw	r24, r28
   1e7b8:	06 96       	adiw	r24, 0x06	; 6
   1e7ba:	ce d2       	rcall	.+1436   	; 0x1ed58 <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
   1e7bc:	df 91       	pop	r29
   1e7be:	cf 91       	pop	r28
   1e7c0:	08 95       	ret

0001e7c2 <MS_Device_USBTask>:

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
   1e7c2:	ef 92       	push	r14
   1e7c4:	ff 92       	push	r15
   1e7c6:	0f 93       	push	r16
   1e7c8:	1f 93       	push	r17
   1e7ca:	cf 93       	push	r28
   1e7cc:	df 93       	push	r29
   1e7ce:	00 d0       	rcall	.+0      	; 0x1e7d0 <MS_Device_USBTask+0xe>
   1e7d0:	cd b7       	in	r28, 0x3d	; 61
   1e7d2:	de b7       	in	r29, 0x3e	; 62
   1e7d4:	8c 01       	movw	r16, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
   1e7d6:	9e b3       	in	r25, 0x1e	; 30
   1e7d8:	94 30       	cpi	r25, 0x04	; 4
   1e7da:	09 f0       	breq	.+2      	; 0x1e7de <MS_Device_USBTask+0x1c>
   1e7dc:	1c c1       	rjmp	.+568    	; 0x1ea16 <MS_Device_USBTask+0x254>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e7de:	d8 01       	movw	r26, r16
   1e7e0:	16 96       	adiw	r26, 0x06	; 6
   1e7e2:	8c 91       	ld	r24, X
   1e7e4:	16 97       	sbiw	r26, 0x06	; 6
   1e7e6:	8f 70       	andi	r24, 0x0F	; 15
   1e7e8:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e7ec:	80 91 e8 00 	lds	r24, 0x00E8
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
   1e7f0:	82 ff       	sbrs	r24, 2
   1e7f2:	d2 c0       	rjmp	.+420    	; 0x1e998 <MS_Device_USBTask+0x1d6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e7f4:	16 96       	adiw	r26, 0x06	; 6
   1e7f6:	8c 91       	ld	r24, X
   1e7f8:	8f 70       	andi	r24, 0x0F	; 15
   1e7fa:	80 93 e9 00 	sts	0x00E9, r24
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	BytesProcessed = 0;
   1e7fe:	1a 82       	std	Y+2, r1	; 0x02
   1e800:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
   1e802:	78 01       	movw	r14, r16
   1e804:	bc e0       	ldi	r27, 0x0C	; 12
   1e806:	eb 0e       	add	r14, r27
   1e808:	f1 1c       	adc	r15, r1
   1e80a:	04 c0       	rjmp	.+8      	; 0x1e814 <MS_Device_USBTask+0x52>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
   1e80c:	f8 01       	movw	r30, r16
   1e80e:	90 ad       	ldd	r25, Z+56	; 0x38
   1e810:	91 11       	cpse	r25, r1
   1e812:	c2 c0       	rjmp	.+388    	; 0x1e998 <MS_Device_USBTask+0x1d6>
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
   1e814:	ae 01       	movw	r20, r28
   1e816:	4f 5f       	subi	r20, 0xFF	; 255
   1e818:	5f 4f       	sbci	r21, 0xFF	; 255
   1e81a:	6f e0       	ldi	r22, 0x0F	; 15
   1e81c:	70 e0       	ldi	r23, 0x00	; 0
   1e81e:	c7 01       	movw	r24, r14
   1e820:	ae d1       	rcall	.+860    	; 0x1eb7e <Endpoint_Read_Stream_LE>
   1e822:	85 30       	cpi	r24, 0x05	; 5
   1e824:	99 f3       	breq	.-26     	; 0x1e80c <MS_Device_USBTask+0x4a>
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
   1e826:	f8 01       	movw	r30, r16
   1e828:	84 85       	ldd	r24, Z+12	; 0x0c
   1e82a:	95 85       	ldd	r25, Z+13	; 0x0d
   1e82c:	a6 85       	ldd	r26, Z+14	; 0x0e
   1e82e:	b7 85       	ldd	r27, Z+15	; 0x0f
   1e830:	85 35       	cpi	r24, 0x55	; 85
   1e832:	93 45       	sbci	r25, 0x53	; 83
   1e834:	a2 44       	sbci	r26, 0x42	; 66
   1e836:	b3 44       	sbci	r27, 0x43	; 67
   1e838:	99 f4       	brne	.+38     	; 0x1e860 <MS_Device_USBTask+0x9e>
   1e83a:	d8 01       	movw	r26, r16
   1e83c:	59 96       	adiw	r26, 0x19	; 25
   1e83e:	9c 91       	ld	r25, X
   1e840:	59 97       	sbiw	r26, 0x19	; 25
   1e842:	1b 96       	adiw	r26, 0x0b	; 11
   1e844:	8c 91       	ld	r24, X
   1e846:	1b 97       	sbiw	r26, 0x0b	; 11
   1e848:	98 17       	cp	r25, r24
   1e84a:	50 f4       	brcc	.+20     	; 0x1e860 <MS_Device_USBTask+0x9e>
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
   1e84c:	58 96       	adiw	r26, 0x18	; 24
   1e84e:	8c 91       	ld	r24, X
   1e850:	58 97       	sbiw	r26, 0x18	; 24
   1e852:	8f 71       	andi	r24, 0x1F	; 31
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
   1e854:	29 f4       	brne	.+10     	; 0x1e860 <MS_Device_USBTask+0x9e>
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
   1e856:	5a 96       	adiw	r26, 0x1a	; 26
   1e858:	8c 91       	ld	r24, X
   1e85a:	81 50       	subi	r24, 0x01	; 1
   1e85c:	80 31       	cpi	r24, 0x10	; 16
   1e85e:	78 f0       	brcs	.+30     	; 0x1e87e <MS_Device_USBTask+0xbc>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1e860:	eb ee       	ldi	r30, 0xEB	; 235
   1e862:	f0 e0       	ldi	r31, 0x00	; 0
   1e864:	80 81       	ld	r24, Z
   1e866:	80 62       	ori	r24, 0x20	; 32
   1e868:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e86a:	d8 01       	movw	r26, r16
   1e86c:	11 96       	adiw	r26, 0x01	; 1
   1e86e:	8c 91       	ld	r24, X
   1e870:	8f 70       	andi	r24, 0x0F	; 15
   1e872:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1e876:	80 81       	ld	r24, Z
   1e878:	80 62       	ori	r24, 0x20	; 32
   1e87a:	80 83       	st	Z, r24
   1e87c:	8d c0       	rjmp	.+282    	; 0x1e998 <MS_Device_USBTask+0x1d6>
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
   1e87e:	1a 82       	std	Y+2, r1	; 0x02
   1e880:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
   1e882:	78 01       	movw	r14, r16
   1e884:	bb e1       	ldi	r27, 0x1B	; 27
   1e886:	eb 0e       	add	r14, r27
   1e888:	f1 1c       	adc	r15, r1
   1e88a:	04 c0       	rjmp	.+8      	; 0x1e894 <MS_Device_USBTask+0xd2>
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
   1e88c:	f8 01       	movw	r30, r16
   1e88e:	90 ad       	ldd	r25, Z+56	; 0x38
   1e890:	91 11       	cpse	r25, r1
   1e892:	82 c0       	rjmp	.+260    	; 0x1e998 <MS_Device_USBTask+0x1d6>

		return false;
	}

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
   1e894:	d8 01       	movw	r26, r16
   1e896:	5a 96       	adiw	r26, 0x1a	; 26
   1e898:	6c 91       	ld	r22, X
   1e89a:	70 e0       	ldi	r23, 0x00	; 0
   1e89c:	ae 01       	movw	r20, r28
   1e89e:	4f 5f       	subi	r20, 0xFF	; 255
   1e8a0:	5f 4f       	sbci	r21, 0xFF	; 255
   1e8a2:	c7 01       	movw	r24, r14
   1e8a4:	6c d1       	rcall	.+728    	; 0x1eb7e <Endpoint_Read_Stream_LE>
   1e8a6:	85 30       	cpi	r24, 0x05	; 5
   1e8a8:	89 f3       	breq	.-30     	; 0x1e88c <MS_Device_USBTask+0xca>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1e8aa:	e8 ee       	ldi	r30, 0xE8	; 232
   1e8ac:	f0 e0       	ldi	r31, 0x00	; 0
   1e8ae:	80 81       	ld	r24, Z
   1e8b0:	8b 77       	andi	r24, 0x7B	; 123
   1e8b2:	80 83       	st	Z, r24

	if (Endpoint_IsOUTReceived())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
   1e8b4:	f8 01       	movw	r30, r16
   1e8b6:	80 8d       	ldd	r24, Z+24	; 0x18
   1e8b8:	88 23       	and	r24, r24
   1e8ba:	24 f4       	brge	.+8      	; 0x1e8c4 <MS_Device_USBTask+0x102>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e8bc:	81 81       	ldd	r24, Z+1	; 0x01
   1e8be:	8f 70       	andi	r24, 0x0F	; 15
   1e8c0:	80 93 e9 00 	sts	0x00E9, r24
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
   1e8c4:	c8 01       	movw	r24, r16
   1e8c6:	cd dc       	rcall	.-1638   	; 0x1e262 <CALLBACK_MS_Device_SCSICommandReceived>

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
   1e8c8:	91 e0       	ldi	r25, 0x01	; 1
   1e8ca:	98 27       	eor	r25, r24
   1e8cc:	d8 01       	movw	r26, r16
   1e8ce:	d7 96       	adiw	r26, 0x37	; 55
   1e8d0:	9c 93       	st	X, r25
   1e8d2:	d7 97       	sbiw	r26, 0x37	; 55
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
   1e8d4:	45 e5       	ldi	r20, 0x55	; 85
   1e8d6:	53 e5       	ldi	r21, 0x53	; 83
   1e8d8:	62 e4       	ldi	r22, 0x42	; 66
   1e8da:	73 e5       	ldi	r23, 0x53	; 83
   1e8dc:	f8 01       	movw	r30, r16
   1e8de:	43 a7       	std	Z+43, r20	; 0x2b
   1e8e0:	54 a7       	std	Z+44, r21	; 0x2c
   1e8e2:	65 a7       	std	Z+45, r22	; 0x2d
   1e8e4:	76 a7       	std	Z+46, r23	; 0x2e
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
   1e8e6:	40 89       	ldd	r20, Z+16	; 0x10
   1e8e8:	51 89       	ldd	r21, Z+17	; 0x11
   1e8ea:	62 89       	ldd	r22, Z+18	; 0x12
   1e8ec:	73 89       	ldd	r23, Z+19	; 0x13
   1e8ee:	9f 96       	adiw	r26, 0x2f	; 47
   1e8f0:	4d 93       	st	X+, r20
   1e8f2:	5d 93       	st	X+, r21
   1e8f4:	6d 93       	st	X+, r22
   1e8f6:	7c 93       	st	X, r23
   1e8f8:	d2 97       	sbiw	r26, 0x32	; 50
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
   1e8fa:	54 96       	adiw	r26, 0x14	; 20
   1e8fc:	4d 91       	ld	r20, X+
   1e8fe:	5d 91       	ld	r21, X+
   1e900:	6d 91       	ld	r22, X+
   1e902:	7c 91       	ld	r23, X
   1e904:	57 97       	sbiw	r26, 0x17	; 23
   1e906:	43 ab       	std	Z+51, r20	; 0x33
   1e908:	54 ab       	std	Z+52, r21	; 0x34
   1e90a:	65 ab       	std	Z+53, r22	; 0x35
   1e90c:	76 ab       	std	Z+54, r23	; 0x36

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
   1e90e:	81 11       	cpse	r24, r1
   1e910:	09 c0       	rjmp	.+18     	; 0x1e924 <MS_Device_USBTask+0x162>
   1e912:	45 2b       	or	r20, r21
   1e914:	46 2b       	or	r20, r22
   1e916:	47 2b       	or	r20, r23
   1e918:	29 f0       	breq	.+10     	; 0x1e924 <MS_Device_USBTask+0x162>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1e91a:	eb ee       	ldi	r30, 0xEB	; 235
   1e91c:	f0 e0       	ldi	r31, 0x00	; 0
   1e91e:	80 81       	ld	r24, Z
   1e920:	80 62       	ori	r24, 0x20	; 32
   1e922:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e924:	d8 01       	movw	r26, r16
   1e926:	16 96       	adiw	r26, 0x06	; 6
   1e928:	8c 91       	ld	r24, X
   1e92a:	8f 70       	andi	r24, 0x0F	; 15
   1e92c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
   1e930:	eb ee       	ldi	r30, 0xEB	; 235
   1e932:	f0 e0       	ldi	r31, 0x00	; 0
   1e934:	05 c0       	rjmp	.+10     	; 0x1e940 <MS_Device_USBTask+0x17e>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
   1e936:	d8 01       	movw	r26, r16
   1e938:	d8 96       	adiw	r26, 0x38	; 56
   1e93a:	8c 91       	ld	r24, X
   1e93c:	81 11       	cpse	r24, r1
   1e93e:	2c c0       	rjmp	.+88     	; 0x1e998 <MS_Device_USBTask+0x1d6>
   1e940:	80 81       	ld	r24, Z

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	while (Endpoint_IsStalled())
   1e942:	85 fd       	sbrc	r24, 5
   1e944:	f8 cf       	rjmp	.-16     	; 0x1e936 <MS_Device_USBTask+0x174>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e946:	f8 01       	movw	r30, r16
   1e948:	81 81       	ldd	r24, Z+1	; 0x01
   1e94a:	8f 70       	andi	r24, 0x0F	; 15
   1e94c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
   1e950:	eb ee       	ldi	r30, 0xEB	; 235
   1e952:	f0 e0       	ldi	r31, 0x00	; 0
   1e954:	05 c0       	rjmp	.+10     	; 0x1e960 <MS_Device_USBTask+0x19e>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
   1e956:	d8 01       	movw	r26, r16
   1e958:	d8 96       	adiw	r26, 0x38	; 56
   1e95a:	8c 91       	ld	r24, X
   1e95c:	81 11       	cpse	r24, r1
   1e95e:	1c c0       	rjmp	.+56     	; 0x1e998 <MS_Device_USBTask+0x1d6>
   1e960:	80 81       	ld	r24, Z
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

	while (Endpoint_IsStalled())
   1e962:	85 fd       	sbrc	r24, 5
   1e964:	f8 cf       	rjmp	.-16     	; 0x1e956 <MS_Device_USBTask+0x194>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
   1e966:	1a 82       	std	Y+2, r1	; 0x02
   1e968:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
   1e96a:	78 01       	movw	r14, r16
   1e96c:	bb e2       	ldi	r27, 0x2B	; 43
   1e96e:	eb 0e       	add	r14, r27
   1e970:	f1 1c       	adc	r15, r1
   1e972:	04 c0       	rjmp	.+8      	; 0x1e97c <MS_Device_USBTask+0x1ba>
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
   1e974:	f8 01       	movw	r30, r16
   1e976:	90 ad       	ldd	r25, Z+56	; 0x38
   1e978:	91 11       	cpse	r25, r1
   1e97a:	0e c0       	rjmp	.+28     	; 0x1e998 <MS_Device_USBTask+0x1d6>
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
   1e97c:	ae 01       	movw	r20, r28
   1e97e:	4f 5f       	subi	r20, 0xFF	; 255
   1e980:	5f 4f       	sbci	r21, 0xFF	; 255
   1e982:	6d e0       	ldi	r22, 0x0D	; 13
   1e984:	70 e0       	ldi	r23, 0x00	; 0
   1e986:	c7 01       	movw	r24, r14
   1e988:	9e d0       	rcall	.+316    	; 0x1eac6 <Endpoint_Write_Stream_LE>
   1e98a:	85 30       	cpi	r24, 0x05	; 5
   1e98c:	99 f3       	breq	.-26     	; 0x1e974 <MS_Device_USBTask+0x1b2>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e98e:	e8 ee       	ldi	r30, 0xE8	; 232
   1e990:	f0 e0       	ldi	r31, 0x00	; 0
   1e992:	80 81       	ld	r24, Z
   1e994:	8e 77       	andi	r24, 0x7E	; 126
   1e996:	80 83       	st	Z, r24

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
   1e998:	d8 01       	movw	r26, r16
   1e99a:	d8 96       	adiw	r26, 0x38	; 56
   1e99c:	8c 91       	ld	r24, X
   1e99e:	d8 97       	sbiw	r26, 0x38	; 56
   1e9a0:	88 23       	and	r24, r24
   1e9a2:	c9 f1       	breq	.+114    	; 0x1ea16 <MS_Device_USBTask+0x254>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
   1e9a4:	16 96       	adiw	r26, 0x06	; 6
   1e9a6:	2c 91       	ld	r18, X
   1e9a8:	16 97       	sbiw	r26, 0x06	; 6
   1e9aa:	2f 70       	andi	r18, 0x0F	; 15
   1e9ac:	81 e0       	ldi	r24, 0x01	; 1
   1e9ae:	90 e0       	ldi	r25, 0x00	; 0
   1e9b0:	fc 01       	movw	r30, r24
   1e9b2:	02 c0       	rjmp	.+4      	; 0x1e9b8 <MS_Device_USBTask+0x1f6>
   1e9b4:	ee 0f       	add	r30, r30
   1e9b6:	ff 1f       	adc	r31, r31
   1e9b8:	2a 95       	dec	r18
   1e9ba:	e2 f7       	brpl	.-8      	; 0x1e9b4 <MS_Device_USBTask+0x1f2>
   1e9bc:	9f 01       	movw	r18, r30
   1e9be:	ea ee       	ldi	r30, 0xEA	; 234
   1e9c0:	f0 e0       	ldi	r31, 0x00	; 0
   1e9c2:	20 83       	st	Z, r18
				UERST = 0;
   1e9c4:	10 82       	st	Z, r1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
   1e9c6:	11 96       	adiw	r26, 0x01	; 1
   1e9c8:	2c 91       	ld	r18, X
   1e9ca:	11 97       	sbiw	r26, 0x01	; 1
   1e9cc:	2f 70       	andi	r18, 0x0F	; 15
   1e9ce:	02 c0       	rjmp	.+4      	; 0x1e9d4 <MS_Device_USBTask+0x212>
   1e9d0:	88 0f       	add	r24, r24
   1e9d2:	99 1f       	adc	r25, r25
   1e9d4:	2a 95       	dec	r18
   1e9d6:	e2 f7       	brpl	.-8      	; 0x1e9d0 <MS_Device_USBTask+0x20e>
   1e9d8:	80 83       	st	Z, r24
				UERST = 0;
   1e9da:	10 82       	st	Z, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e9dc:	16 96       	adiw	r26, 0x06	; 6
   1e9de:	8c 91       	ld	r24, X
   1e9e0:	8f 70       	andi	r24, 0x0F	; 15
   1e9e2:	29 ee       	ldi	r18, 0xE9	; 233
   1e9e4:	30 e0       	ldi	r19, 0x00	; 0
   1e9e6:	d9 01       	movw	r26, r18
   1e9e8:	8c 93       	st	X, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
   1e9ea:	eb ee       	ldi	r30, 0xEB	; 235
   1e9ec:	f0 e0       	ldi	r31, 0x00	; 0
   1e9ee:	80 81       	ld	r24, Z
   1e9f0:	80 61       	ori	r24, 0x10	; 16
   1e9f2:	80 83       	st	Z, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
   1e9f4:	80 81       	ld	r24, Z
   1e9f6:	88 60       	ori	r24, 0x08	; 8
   1e9f8:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e9fa:	d8 01       	movw	r26, r16
   1e9fc:	11 96       	adiw	r26, 0x01	; 1
   1e9fe:	8c 91       	ld	r24, X
   1ea00:	8f 70       	andi	r24, 0x0F	; 15
   1ea02:	d9 01       	movw	r26, r18
   1ea04:	8c 93       	st	X, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
   1ea06:	80 81       	ld	r24, Z
   1ea08:	80 61       	ori	r24, 0x10	; 16
   1ea0a:	80 83       	st	Z, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
   1ea0c:	80 81       	ld	r24, Z
   1ea0e:	88 60       	ori	r24, 0x08	; 8
   1ea10:	80 83       	st	Z, r24
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
   1ea12:	f8 01       	movw	r30, r16
   1ea14:	10 ae       	std	Z+56, r1	; 0x38
	}
}
   1ea16:	0f 90       	pop	r0
   1ea18:	0f 90       	pop	r0
   1ea1a:	df 91       	pop	r29
   1ea1c:	cf 91       	pop	r28
   1ea1e:	1f 91       	pop	r17
   1ea20:	0f 91       	pop	r16
   1ea22:	ff 90       	pop	r15
   1ea24:	ef 90       	pop	r14
   1ea26:	08 95       	ret

0001ea28 <Endpoint_Null_Stream>:
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
   1ea28:	af 92       	push	r10
   1ea2a:	bf 92       	push	r11
   1ea2c:	cf 92       	push	r12
   1ea2e:	df 92       	push	r13
   1ea30:	ef 92       	push	r14
   1ea32:	ff 92       	push	r15
   1ea34:	0f 93       	push	r16
   1ea36:	1f 93       	push	r17
   1ea38:	cf 93       	push	r28
   1ea3a:	df 93       	push	r29
   1ea3c:	ec 01       	movw	r28, r24
   1ea3e:	6b 01       	movw	r12, r22
   1ea40:	13 d2       	rcall	.+1062   	; 0x1ee68 <Endpoint_WaitUntilReady>
   1ea42:	81 11       	cpse	r24, r1
   1ea44:	35 c0       	rjmp	.+106    	; 0x1eab0 <Endpoint_Null_Stream+0x88>
   1ea46:	c1 14       	cp	r12, r1
   1ea48:	d1 04       	cpc	r13, r1
   1ea4a:	29 f0       	breq	.+10     	; 0x1ea56 <Endpoint_Null_Stream+0x2e>
   1ea4c:	f6 01       	movw	r30, r12
   1ea4e:	80 81       	ld	r24, Z
   1ea50:	91 81       	ldd	r25, Z+1	; 0x01
   1ea52:	c8 1b       	sub	r28, r24
   1ea54:	d9 0b       	sbc	r29, r25
   1ea56:	20 97       	sbiw	r28, 0x00	; 0
   1ea58:	51 f1       	breq	.+84     	; 0x1eaae <Endpoint_Null_Stream+0x86>
   1ea5a:	e1 2c       	mov	r14, r1
   1ea5c:	f1 2c       	mov	r15, r1
   1ea5e:	08 ee       	ldi	r16, 0xE8	; 232
   1ea60:	10 e0       	ldi	r17, 0x00	; 0
   1ea62:	0f 2e       	mov	r0, r31
   1ea64:	f1 ef       	ldi	r31, 0xF1	; 241
   1ea66:	af 2e       	mov	r10, r31
   1ea68:	b1 2c       	mov	r11, r1
   1ea6a:	f0 2d       	mov	r31, r0
   1ea6c:	f8 01       	movw	r30, r16
   1ea6e:	80 81       	ld	r24, Z
   1ea70:	85 fd       	sbrc	r24, 5
   1ea72:	13 c0       	rjmp	.+38     	; 0x1ea9a <Endpoint_Null_Stream+0x72>
   1ea74:	80 81       	ld	r24, Z
   1ea76:	8e 77       	andi	r24, 0x7E	; 126
   1ea78:	80 83       	st	Z, r24
   1ea7a:	c1 14       	cp	r12, r1
   1ea7c:	d1 04       	cpc	r13, r1
   1ea7e:	49 f0       	breq	.+18     	; 0x1ea92 <Endpoint_Null_Stream+0x6a>
   1ea80:	f6 01       	movw	r30, r12
   1ea82:	80 81       	ld	r24, Z
   1ea84:	91 81       	ldd	r25, Z+1	; 0x01
   1ea86:	e8 0e       	add	r14, r24
   1ea88:	f9 1e       	adc	r15, r25
   1ea8a:	f1 82       	std	Z+1, r15	; 0x01
   1ea8c:	e0 82       	st	Z, r14
   1ea8e:	85 e0       	ldi	r24, 0x05	; 5
   1ea90:	0f c0       	rjmp	.+30     	; 0x1eab0 <Endpoint_Null_Stream+0x88>
   1ea92:	ea d1       	rcall	.+980    	; 0x1ee68 <Endpoint_WaitUntilReady>
   1ea94:	88 23       	and	r24, r24
   1ea96:	39 f0       	breq	.+14     	; 0x1eaa6 <Endpoint_Null_Stream+0x7e>
   1ea98:	0b c0       	rjmp	.+22     	; 0x1eab0 <Endpoint_Null_Stream+0x88>
   1ea9a:	f5 01       	movw	r30, r10
   1ea9c:	10 82       	st	Z, r1
   1ea9e:	21 97       	sbiw	r28, 0x01	; 1
   1eaa0:	ff ef       	ldi	r31, 0xFF	; 255
   1eaa2:	ef 1a       	sub	r14, r31
   1eaa4:	ff 0a       	sbc	r15, r31
   1eaa6:	20 97       	sbiw	r28, 0x00	; 0
   1eaa8:	09 f7       	brne	.-62     	; 0x1ea6c <Endpoint_Null_Stream+0x44>
   1eaaa:	80 e0       	ldi	r24, 0x00	; 0
   1eaac:	01 c0       	rjmp	.+2      	; 0x1eab0 <Endpoint_Null_Stream+0x88>
   1eaae:	80 e0       	ldi	r24, 0x00	; 0
   1eab0:	df 91       	pop	r29
   1eab2:	cf 91       	pop	r28
   1eab4:	1f 91       	pop	r17
   1eab6:	0f 91       	pop	r16
   1eab8:	ff 90       	pop	r15
   1eaba:	ef 90       	pop	r14
   1eabc:	df 90       	pop	r13
   1eabe:	cf 90       	pop	r12
   1eac0:	bf 90       	pop	r11
   1eac2:	af 90       	pop	r10
   1eac4:	08 95       	ret

0001eac6 <Endpoint_Write_Stream_LE>:
   1eac6:	8f 92       	push	r8
   1eac8:	9f 92       	push	r9
   1eaca:	af 92       	push	r10
   1eacc:	bf 92       	push	r11
   1eace:	cf 92       	push	r12
   1ead0:	df 92       	push	r13
   1ead2:	ef 92       	push	r14
   1ead4:	ff 92       	push	r15
   1ead6:	0f 93       	push	r16
   1ead8:	1f 93       	push	r17
   1eada:	cf 93       	push	r28
   1eadc:	df 93       	push	r29
   1eade:	8c 01       	movw	r16, r24
   1eae0:	eb 01       	movw	r28, r22
   1eae2:	6a 01       	movw	r12, r20
   1eae4:	c1 d1       	rcall	.+898    	; 0x1ee68 <Endpoint_WaitUntilReady>
   1eae6:	81 11       	cpse	r24, r1
   1eae8:	3d c0       	rjmp	.+122    	; 0x1eb64 <Endpoint_Write_Stream_LE+0x9e>
   1eaea:	c1 14       	cp	r12, r1
   1eaec:	d1 04       	cpc	r13, r1
   1eaee:	39 f0       	breq	.+14     	; 0x1eafe <Endpoint_Write_Stream_LE+0x38>
   1eaf0:	f6 01       	movw	r30, r12
   1eaf2:	80 81       	ld	r24, Z
   1eaf4:	91 81       	ldd	r25, Z+1	; 0x01
   1eaf6:	c8 1b       	sub	r28, r24
   1eaf8:	d9 0b       	sbc	r29, r25
   1eafa:	08 0f       	add	r16, r24
   1eafc:	19 1f       	adc	r17, r25
   1eafe:	20 97       	sbiw	r28, 0x00	; 0
   1eb00:	81 f1       	breq	.+96     	; 0x1eb62 <Endpoint_Write_Stream_LE+0x9c>
   1eb02:	e1 2c       	mov	r14, r1
   1eb04:	f1 2c       	mov	r15, r1
   1eb06:	0f 2e       	mov	r0, r31
   1eb08:	f8 ee       	ldi	r31, 0xE8	; 232
   1eb0a:	8f 2e       	mov	r8, r31
   1eb0c:	91 2c       	mov	r9, r1
   1eb0e:	f0 2d       	mov	r31, r0
   1eb10:	0f 2e       	mov	r0, r31
   1eb12:	f1 ef       	ldi	r31, 0xF1	; 241
   1eb14:	af 2e       	mov	r10, r31
   1eb16:	b1 2c       	mov	r11, r1
   1eb18:	f0 2d       	mov	r31, r0
   1eb1a:	f4 01       	movw	r30, r8
   1eb1c:	80 81       	ld	r24, Z
   1eb1e:	85 fd       	sbrc	r24, 5
   1eb20:	13 c0       	rjmp	.+38     	; 0x1eb48 <Endpoint_Write_Stream_LE+0x82>
   1eb22:	80 81       	ld	r24, Z
   1eb24:	8e 77       	andi	r24, 0x7E	; 126
   1eb26:	80 83       	st	Z, r24
   1eb28:	c1 14       	cp	r12, r1
   1eb2a:	d1 04       	cpc	r13, r1
   1eb2c:	49 f0       	breq	.+18     	; 0x1eb40 <Endpoint_Write_Stream_LE+0x7a>
   1eb2e:	f6 01       	movw	r30, r12
   1eb30:	80 81       	ld	r24, Z
   1eb32:	91 81       	ldd	r25, Z+1	; 0x01
   1eb34:	e8 0e       	add	r14, r24
   1eb36:	f9 1e       	adc	r15, r25
   1eb38:	f1 82       	std	Z+1, r15	; 0x01
   1eb3a:	e0 82       	st	Z, r14
   1eb3c:	85 e0       	ldi	r24, 0x05	; 5
   1eb3e:	12 c0       	rjmp	.+36     	; 0x1eb64 <Endpoint_Write_Stream_LE+0x9e>
   1eb40:	93 d1       	rcall	.+806    	; 0x1ee68 <Endpoint_WaitUntilReady>
   1eb42:	88 23       	and	r24, r24
   1eb44:	51 f0       	breq	.+20     	; 0x1eb5a <Endpoint_Write_Stream_LE+0x94>
   1eb46:	0e c0       	rjmp	.+28     	; 0x1eb64 <Endpoint_Write_Stream_LE+0x9e>
   1eb48:	f8 01       	movw	r30, r16
   1eb4a:	81 91       	ld	r24, Z+
   1eb4c:	8f 01       	movw	r16, r30
   1eb4e:	f5 01       	movw	r30, r10
   1eb50:	80 83       	st	Z, r24
   1eb52:	21 97       	sbiw	r28, 0x01	; 1
   1eb54:	ff ef       	ldi	r31, 0xFF	; 255
   1eb56:	ef 1a       	sub	r14, r31
   1eb58:	ff 0a       	sbc	r15, r31
   1eb5a:	20 97       	sbiw	r28, 0x00	; 0
   1eb5c:	f1 f6       	brne	.-68     	; 0x1eb1a <Endpoint_Write_Stream_LE+0x54>
   1eb5e:	80 e0       	ldi	r24, 0x00	; 0
   1eb60:	01 c0       	rjmp	.+2      	; 0x1eb64 <Endpoint_Write_Stream_LE+0x9e>
   1eb62:	80 e0       	ldi	r24, 0x00	; 0
   1eb64:	df 91       	pop	r29
   1eb66:	cf 91       	pop	r28
   1eb68:	1f 91       	pop	r17
   1eb6a:	0f 91       	pop	r16
   1eb6c:	ff 90       	pop	r15
   1eb6e:	ef 90       	pop	r14
   1eb70:	df 90       	pop	r13
   1eb72:	cf 90       	pop	r12
   1eb74:	bf 90       	pop	r11
   1eb76:	af 90       	pop	r10
   1eb78:	9f 90       	pop	r9
   1eb7a:	8f 90       	pop	r8
   1eb7c:	08 95       	ret

0001eb7e <Endpoint_Read_Stream_LE>:
   1eb7e:	8f 92       	push	r8
   1eb80:	9f 92       	push	r9
   1eb82:	af 92       	push	r10
   1eb84:	bf 92       	push	r11
   1eb86:	cf 92       	push	r12
   1eb88:	df 92       	push	r13
   1eb8a:	ef 92       	push	r14
   1eb8c:	ff 92       	push	r15
   1eb8e:	0f 93       	push	r16
   1eb90:	1f 93       	push	r17
   1eb92:	cf 93       	push	r28
   1eb94:	df 93       	push	r29
   1eb96:	8c 01       	movw	r16, r24
   1eb98:	eb 01       	movw	r28, r22
   1eb9a:	6a 01       	movw	r12, r20
   1eb9c:	65 d1       	rcall	.+714    	; 0x1ee68 <Endpoint_WaitUntilReady>
   1eb9e:	81 11       	cpse	r24, r1
   1eba0:	3d c0       	rjmp	.+122    	; 0x1ec1c <Endpoint_Read_Stream_LE+0x9e>
   1eba2:	c1 14       	cp	r12, r1
   1eba4:	d1 04       	cpc	r13, r1
   1eba6:	39 f0       	breq	.+14     	; 0x1ebb6 <Endpoint_Read_Stream_LE+0x38>
   1eba8:	f6 01       	movw	r30, r12
   1ebaa:	80 81       	ld	r24, Z
   1ebac:	91 81       	ldd	r25, Z+1	; 0x01
   1ebae:	c8 1b       	sub	r28, r24
   1ebb0:	d9 0b       	sbc	r29, r25
   1ebb2:	08 0f       	add	r16, r24
   1ebb4:	19 1f       	adc	r17, r25
   1ebb6:	20 97       	sbiw	r28, 0x00	; 0
   1ebb8:	81 f1       	breq	.+96     	; 0x1ec1a <Endpoint_Read_Stream_LE+0x9c>
   1ebba:	e1 2c       	mov	r14, r1
   1ebbc:	f1 2c       	mov	r15, r1
   1ebbe:	0f 2e       	mov	r0, r31
   1ebc0:	f8 ee       	ldi	r31, 0xE8	; 232
   1ebc2:	8f 2e       	mov	r8, r31
   1ebc4:	91 2c       	mov	r9, r1
   1ebc6:	f0 2d       	mov	r31, r0
   1ebc8:	0f 2e       	mov	r0, r31
   1ebca:	f1 ef       	ldi	r31, 0xF1	; 241
   1ebcc:	af 2e       	mov	r10, r31
   1ebce:	b1 2c       	mov	r11, r1
   1ebd0:	f0 2d       	mov	r31, r0
   1ebd2:	f4 01       	movw	r30, r8
   1ebd4:	80 81       	ld	r24, Z
   1ebd6:	85 fd       	sbrc	r24, 5
   1ebd8:	13 c0       	rjmp	.+38     	; 0x1ec00 <Endpoint_Read_Stream_LE+0x82>
   1ebda:	80 81       	ld	r24, Z
   1ebdc:	8b 77       	andi	r24, 0x7B	; 123
   1ebde:	80 83       	st	Z, r24
   1ebe0:	c1 14       	cp	r12, r1
   1ebe2:	d1 04       	cpc	r13, r1
   1ebe4:	49 f0       	breq	.+18     	; 0x1ebf8 <Endpoint_Read_Stream_LE+0x7a>
   1ebe6:	f6 01       	movw	r30, r12
   1ebe8:	80 81       	ld	r24, Z
   1ebea:	91 81       	ldd	r25, Z+1	; 0x01
   1ebec:	e8 0e       	add	r14, r24
   1ebee:	f9 1e       	adc	r15, r25
   1ebf0:	f1 82       	std	Z+1, r15	; 0x01
   1ebf2:	e0 82       	st	Z, r14
   1ebf4:	85 e0       	ldi	r24, 0x05	; 5
   1ebf6:	12 c0       	rjmp	.+36     	; 0x1ec1c <Endpoint_Read_Stream_LE+0x9e>
   1ebf8:	37 d1       	rcall	.+622    	; 0x1ee68 <Endpoint_WaitUntilReady>
   1ebfa:	88 23       	and	r24, r24
   1ebfc:	51 f0       	breq	.+20     	; 0x1ec12 <Endpoint_Read_Stream_LE+0x94>
   1ebfe:	0e c0       	rjmp	.+28     	; 0x1ec1c <Endpoint_Read_Stream_LE+0x9e>
   1ec00:	f5 01       	movw	r30, r10
   1ec02:	80 81       	ld	r24, Z
   1ec04:	f8 01       	movw	r30, r16
   1ec06:	81 93       	st	Z+, r24
   1ec08:	8f 01       	movw	r16, r30
   1ec0a:	21 97       	sbiw	r28, 0x01	; 1
   1ec0c:	ff ef       	ldi	r31, 0xFF	; 255
   1ec0e:	ef 1a       	sub	r14, r31
   1ec10:	ff 0a       	sbc	r15, r31
   1ec12:	20 97       	sbiw	r28, 0x00	; 0
   1ec14:	f1 f6       	brne	.-68     	; 0x1ebd2 <Endpoint_Read_Stream_LE+0x54>
   1ec16:	80 e0       	ldi	r24, 0x00	; 0
   1ec18:	01 c0       	rjmp	.+2      	; 0x1ec1c <Endpoint_Read_Stream_LE+0x9e>
   1ec1a:	80 e0       	ldi	r24, 0x00	; 0
   1ec1c:	df 91       	pop	r29
   1ec1e:	cf 91       	pop	r28
   1ec20:	1f 91       	pop	r17
   1ec22:	0f 91       	pop	r16
   1ec24:	ff 90       	pop	r15
   1ec26:	ef 90       	pop	r14
   1ec28:	df 90       	pop	r13
   1ec2a:	cf 90       	pop	r12
   1ec2c:	bf 90       	pop	r11
   1ec2e:	af 90       	pop	r10
   1ec30:	9f 90       	pop	r9
   1ec32:	8f 90       	pop	r8
   1ec34:	08 95       	ret

0001ec36 <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
   1ec36:	ef 92       	push	r14
   1ec38:	ff 92       	push	r15
   1ec3a:	0f 93       	push	r16
   1ec3c:	1f 93       	push	r17
   1ec3e:	cf 93       	push	r28
   1ec40:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
   1ec42:	20 91 09 02 	lds	r18, 0x0209
   1ec46:	30 91 0a 02 	lds	r19, 0x020A
   1ec4a:	26 17       	cp	r18, r22
   1ec4c:	37 07       	cpc	r19, r23
   1ec4e:	58 f0       	brcs	.+22     	; 0x1ec66 <Endpoint_Write_Control_Stream_LE+0x30>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
   1ec50:	61 15       	cp	r22, r1
   1ec52:	71 05       	cpc	r23, r1
   1ec54:	39 f4       	brne	.+14     	; 0x1ec64 <Endpoint_Write_Control_Stream_LE+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1ec56:	e8 ee       	ldi	r30, 0xE8	; 232
   1ec58:	f0 e0       	ldi	r31, 0x00	; 0
   1ec5a:	20 81       	ld	r18, Z
   1ec5c:	2e 77       	andi	r18, 0x7E	; 126
   1ec5e:	20 83       	st	Z, r18
   1ec60:	9b 01       	movw	r18, r22
   1ec62:	01 c0       	rjmp	.+2      	; 0x1ec66 <Endpoint_Write_Control_Stream_LE+0x30>
   1ec64:	9b 01       	movw	r18, r22
   1ec66:	a8 2f       	mov	r26, r24
   1ec68:	b9 2f       	mov	r27, r25
   1ec6a:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ec6c:	e8 ee       	ldi	r30, 0xE8	; 232
   1ec6e:	f0 e0       	ldi	r31, 0x00	; 0
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   1ec70:	62 ef       	ldi	r22, 0xF2	; 242
   1ec72:	70 e0       	ldi	r23, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1ec74:	0f 2e       	mov	r0, r31
   1ec76:	f1 ef       	ldi	r31, 0xF1	; 241
   1ec78:	ef 2e       	mov	r14, r31
   1ec7a:	f1 2c       	mov	r15, r1
   1ec7c:	f0 2d       	mov	r31, r0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
   1ec7e:	11 e0       	ldi	r17, 0x01	; 1
   1ec80:	00 e0       	ldi	r16, 0x00	; 0
   1ec82:	2e c0       	rjmp	.+92     	; 0x1ece0 <Endpoint_Write_Control_Stream_LE+0xaa>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1ec84:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1ec86:	88 23       	and	r24, r24
   1ec88:	09 f4       	brne	.+2      	; 0x1ec8c <Endpoint_Write_Control_Stream_LE+0x56>
   1ec8a:	40 c0       	rjmp	.+128    	; 0x1ed0c <Endpoint_Write_Control_Stream_LE+0xd6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1ec8c:	85 30       	cpi	r24, 0x05	; 5
   1ec8e:	09 f4       	brne	.+2      	; 0x1ec92 <Endpoint_Write_Control_Stream_LE+0x5c>
   1ec90:	3f c0       	rjmp	.+126    	; 0x1ed10 <Endpoint_Write_Control_Stream_LE+0xda>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ec92:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1ec94:	83 fd       	sbrc	r24, 3
   1ec96:	3e c0       	rjmp	.+124    	; 0x1ed14 <Endpoint_Write_Control_Stream_LE+0xde>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1ec98:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
   1ec9a:	82 fd       	sbrc	r24, 2
   1ec9c:	30 c0       	rjmp	.+96     	; 0x1ecfe <Endpoint_Write_Control_Stream_LE+0xc8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1ec9e:	80 81       	ld	r24, Z
		  break;

		if (Endpoint_IsINReady())
   1eca0:	80 ff       	sbrs	r24, 0
   1eca2:	1e c0       	rjmp	.+60     	; 0x1ece0 <Endpoint_Write_Control_Stream_LE+0xaa>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   1eca4:	eb 01       	movw	r28, r22
   1eca6:	48 81       	ld	r20, Y
   1eca8:	59 81       	ldd	r21, Y+1	; 0x01
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
   1ecaa:	21 15       	cp	r18, r1
   1ecac:	31 05       	cpc	r19, r1
   1ecae:	81 f0       	breq	.+32     	; 0x1ecd0 <Endpoint_Write_Control_Stream_LE+0x9a>
   1ecb0:	48 30       	cpi	r20, 0x08	; 8
   1ecb2:	51 05       	cpc	r21, r1
   1ecb4:	68 f4       	brcc	.+26     	; 0x1ecd0 <Endpoint_Write_Control_Stream_LE+0x9a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
   1ecb6:	8d 91       	ld	r24, X+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1ecb8:	e7 01       	movw	r28, r14
   1ecba:	88 83       	st	Y, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
   1ecbc:	21 50       	subi	r18, 0x01	; 1
   1ecbe:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
   1ecc0:	4f 5f       	subi	r20, 0xFF	; 255
   1ecc2:	5f 4f       	sbci	r21, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
   1ecc4:	21 15       	cp	r18, r1
   1ecc6:	31 05       	cpc	r19, r1
   1ecc8:	19 f0       	breq	.+6      	; 0x1ecd0 <Endpoint_Write_Control_Stream_LE+0x9a>
   1ecca:	48 30       	cpi	r20, 0x08	; 8
   1eccc:	51 05       	cpc	r21, r1
   1ecce:	99 f7       	brne	.-26     	; 0x1ecb6 <Endpoint_Write_Control_Stream_LE+0x80>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
   1ecd0:	91 2f       	mov	r25, r17
   1ecd2:	48 30       	cpi	r20, 0x08	; 8
   1ecd4:	51 05       	cpc	r21, r1
   1ecd6:	09 f0       	breq	.+2      	; 0x1ecda <Endpoint_Write_Control_Stream_LE+0xa4>
   1ecd8:	90 2f       	mov	r25, r16
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1ecda:	80 81       	ld	r24, Z
   1ecdc:	8e 77       	andi	r24, 0x7E	; 126
   1ecde:	80 83       	st	Z, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
   1ece0:	21 15       	cp	r18, r1
   1ece2:	31 05       	cpc	r19, r1
   1ece4:	79 f6       	brne	.-98     	; 0x1ec84 <Endpoint_Write_Control_Stream_LE+0x4e>
   1ece6:	91 11       	cpse	r25, r1
   1ece8:	cd cf       	rjmp	.-102    	; 0x1ec84 <Endpoint_Write_Control_Stream_LE+0x4e>
   1ecea:	09 c0       	rjmp	.+18     	; 0x1ecfe <Endpoint_Write_Control_Stream_LE+0xc8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1ecec:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1ecee:	88 23       	and	r24, r24
   1ecf0:	99 f0       	breq	.+38     	; 0x1ed18 <Endpoint_Write_Control_Stream_LE+0xe2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1ecf2:	85 30       	cpi	r24, 0x05	; 5
   1ecf4:	99 f0       	breq	.+38     	; 0x1ed1c <Endpoint_Write_Control_Stream_LE+0xe6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ecf6:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1ecf8:	83 ff       	sbrs	r24, 3
   1ecfa:	03 c0       	rjmp	.+6      	; 0x1ed02 <Endpoint_Write_Control_Stream_LE+0xcc>
   1ecfc:	11 c0       	rjmp	.+34     	; 0x1ed20 <Endpoint_Write_Control_Stream_LE+0xea>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1ecfe:	e8 ee       	ldi	r30, 0xE8	; 232
   1ed00:	f0 e0       	ldi	r31, 0x00	; 0
   1ed02:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
   1ed04:	82 ff       	sbrs	r24, 2
   1ed06:	f2 cf       	rjmp	.-28     	; 0x1ecec <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
   1ed08:	80 e0       	ldi	r24, 0x00	; 0
   1ed0a:	0b c0       	rjmp	.+22     	; 0x1ed22 <Endpoint_Write_Control_Stream_LE+0xec>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
   1ed0c:	82 e0       	ldi	r24, 0x02	; 2
   1ed0e:	09 c0       	rjmp	.+18     	; 0x1ed22 <Endpoint_Write_Control_Stream_LE+0xec>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
   1ed10:	83 e0       	ldi	r24, 0x03	; 3
   1ed12:	07 c0       	rjmp	.+14     	; 0x1ed22 <Endpoint_Write_Control_Stream_LE+0xec>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
   1ed14:	81 e0       	ldi	r24, 0x01	; 1
   1ed16:	05 c0       	rjmp	.+10     	; 0x1ed22 <Endpoint_Write_Control_Stream_LE+0xec>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
   1ed18:	82 e0       	ldi	r24, 0x02	; 2
   1ed1a:	03 c0       	rjmp	.+6      	; 0x1ed22 <Endpoint_Write_Control_Stream_LE+0xec>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
   1ed1c:	83 e0       	ldi	r24, 0x03	; 3
   1ed1e:	01 c0       	rjmp	.+2      	; 0x1ed22 <Endpoint_Write_Control_Stream_LE+0xec>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
   1ed20:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
   1ed22:	df 91       	pop	r29
   1ed24:	cf 91       	pop	r28
   1ed26:	1f 91       	pop	r17
   1ed28:	0f 91       	pop	r16
   1ed2a:	ff 90       	pop	r15
   1ed2c:	ef 90       	pop	r14
   1ed2e:	08 95       	ret

0001ed30 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
   1ed30:	8f 70       	andi	r24, 0x0F	; 15
   1ed32:	80 93 e9 00 	sts	0x00E9, r24
   1ed36:	eb ee       	ldi	r30, 0xEB	; 235
   1ed38:	f0 e0       	ldi	r31, 0x00	; 0
   1ed3a:	80 81       	ld	r24, Z
   1ed3c:	81 60       	ori	r24, 0x01	; 1
   1ed3e:	80 83       	st	Z, r24
   1ed40:	ed ee       	ldi	r30, 0xED	; 237
   1ed42:	f0 e0       	ldi	r31, 0x00	; 0
   1ed44:	10 82       	st	Z, r1
   1ed46:	60 93 ec 00 	sts	0x00EC, r22
   1ed4a:	40 83       	st	Z, r20
   1ed4c:	80 91 ee 00 	lds	r24, 0x00EE
   1ed50:	88 1f       	adc	r24, r24
   1ed52:	88 27       	eor	r24, r24
   1ed54:	88 1f       	adc	r24, r24
   1ed56:	08 95       	ret

0001ed58 <Endpoint_ConfigureEndpointTable>:
   1ed58:	9f 92       	push	r9
   1ed5a:	af 92       	push	r10
   1ed5c:	bf 92       	push	r11
   1ed5e:	cf 92       	push	r12
   1ed60:	df 92       	push	r13
   1ed62:	ef 92       	push	r14
   1ed64:	ff 92       	push	r15
   1ed66:	0f 93       	push	r16
   1ed68:	1f 93       	push	r17
   1ed6a:	cf 93       	push	r28
   1ed6c:	df 93       	push	r29
   1ed6e:	66 23       	and	r22, r22
   1ed70:	09 f4       	brne	.+2      	; 0x1ed74 <Endpoint_ConfigureEndpointTable+0x1c>
   1ed72:	49 c0       	rjmp	.+146    	; 0x1ee06 <Endpoint_ConfigureEndpointTable+0xae>
   1ed74:	e6 2e       	mov	r14, r22
   1ed76:	8c 01       	movw	r16, r24
   1ed78:	ec 01       	movw	r28, r24
   1ed7a:	0c 5f       	subi	r16, 0xFC	; 252
   1ed7c:	1f 4f       	sbci	r17, 0xFF	; 255
   1ed7e:	f1 2c       	mov	r15, r1
   1ed80:	d1 2c       	mov	r13, r1
   1ed82:	68 94       	set
   1ed84:	bb 24       	eor	r11, r11
   1ed86:	b3 f8       	bld	r11, 3
   1ed88:	c1 2c       	mov	r12, r1
   1ed8a:	0f 2e       	mov	r0, r31
   1ed8c:	f6 e0       	ldi	r31, 0x06	; 6
   1ed8e:	af 2e       	mov	r10, r31
   1ed90:	f0 2d       	mov	r31, r0
   1ed92:	68 94       	set
   1ed94:	99 24       	eor	r9, r9
   1ed96:	91 f8       	bld	r9, 1
   1ed98:	58 81       	ld	r21, Y
   1ed9a:	55 23       	and	r21, r21
   1ed9c:	61 f1       	breq	.+88     	; 0x1edf6 <Endpoint_ConfigureEndpointTable+0x9e>
   1ed9e:	f8 01       	movw	r30, r16
   1eda0:	90 81       	ld	r25, Z
   1eda2:	e9 81       	ldd	r30, Y+1	; 0x01
   1eda4:	fa 81       	ldd	r31, Y+2	; 0x02
   1eda6:	d8 01       	movw	r26, r16
   1eda8:	11 97       	sbiw	r26, 0x01	; 1
   1edaa:	6c 91       	ld	r22, X
   1edac:	85 2f       	mov	r24, r21
   1edae:	8f 70       	andi	r24, 0x0F	; 15
   1edb0:	87 30       	cpi	r24, 0x07	; 7
   1edb2:	58 f5       	brcc	.+86     	; 0x1ee0a <Endpoint_ConfigureEndpointTable+0xb2>
   1edb4:	92 30       	cpi	r25, 0x02	; 2
   1edb6:	10 f4       	brcc	.+4      	; 0x1edbc <Endpoint_ConfigureEndpointTable+0x64>
   1edb8:	49 2d       	mov	r20, r9
   1edba:	01 c0       	rjmp	.+2      	; 0x1edbe <Endpoint_ConfigureEndpointTable+0x66>
   1edbc:	4a 2d       	mov	r20, r10
   1edbe:	e9 30       	cpi	r30, 0x09	; 9
   1edc0:	f1 05       	cpc	r31, r1
   1edc2:	50 f0       	brcs	.+20     	; 0x1edd8 <Endpoint_ConfigureEndpointTable+0x80>
   1edc4:	2b 2d       	mov	r18, r11
   1edc6:	3c 2d       	mov	r19, r12
   1edc8:	9d 2d       	mov	r25, r13
   1edca:	9f 5f       	subi	r25, 0xFF	; 255
   1edcc:	22 0f       	add	r18, r18
   1edce:	33 1f       	adc	r19, r19
   1edd0:	2e 17       	cp	r18, r30
   1edd2:	3f 07       	cpc	r19, r31
   1edd4:	d0 f3       	brcs	.-12     	; 0x1edca <Endpoint_ConfigureEndpointTable+0x72>
   1edd6:	01 c0       	rjmp	.+2      	; 0x1edda <Endpoint_ConfigureEndpointTable+0x82>
   1edd8:	9d 2d       	mov	r25, r13
   1edda:	92 95       	swap	r25
   1eddc:	90 7f       	andi	r25, 0xF0	; 240
   1edde:	49 2b       	or	r20, r25
   1ede0:	f0 e4       	ldi	r31, 0x40	; 64
   1ede2:	6f 9f       	mul	r22, r31
   1ede4:	b0 01       	movw	r22, r0
   1ede6:	11 24       	eor	r1, r1
   1ede8:	55 1f       	adc	r21, r21
   1edea:	55 27       	eor	r21, r21
   1edec:	55 1f       	adc	r21, r21
   1edee:	65 2b       	or	r22, r21
   1edf0:	9f df       	rcall	.-194    	; 0x1ed30 <Endpoint_ConfigureEndpoint_Prv>
   1edf2:	88 23       	and	r24, r24
   1edf4:	59 f0       	breq	.+22     	; 0x1ee0c <Endpoint_ConfigureEndpointTable+0xb4>
   1edf6:	f3 94       	inc	r15
   1edf8:	25 96       	adiw	r28, 0x05	; 5
   1edfa:	0b 5f       	subi	r16, 0xFB	; 251
   1edfc:	1f 4f       	sbci	r17, 0xFF	; 255
   1edfe:	fe 10       	cpse	r15, r14
   1ee00:	cb cf       	rjmp	.-106    	; 0x1ed98 <Endpoint_ConfigureEndpointTable+0x40>
   1ee02:	81 e0       	ldi	r24, 0x01	; 1
   1ee04:	03 c0       	rjmp	.+6      	; 0x1ee0c <Endpoint_ConfigureEndpointTable+0xb4>
   1ee06:	81 e0       	ldi	r24, 0x01	; 1
   1ee08:	01 c0       	rjmp	.+2      	; 0x1ee0c <Endpoint_ConfigureEndpointTable+0xb4>
   1ee0a:	80 e0       	ldi	r24, 0x00	; 0
   1ee0c:	df 91       	pop	r29
   1ee0e:	cf 91       	pop	r28
   1ee10:	1f 91       	pop	r17
   1ee12:	0f 91       	pop	r16
   1ee14:	ff 90       	pop	r15
   1ee16:	ef 90       	pop	r14
   1ee18:	df 90       	pop	r13
   1ee1a:	cf 90       	pop	r12
   1ee1c:	bf 90       	pop	r11
   1ee1e:	af 90       	pop	r10
   1ee20:	9f 90       	pop	r9
   1ee22:	08 95       	ret

0001ee24 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
   1ee24:	80 91 03 02 	lds	r24, 0x0203
   1ee28:	88 23       	and	r24, r24
   1ee2a:	3c f0       	brlt	.+14     	; 0x1ee3a <Endpoint_ClearStatusStage+0x16>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1ee2c:	e8 ee       	ldi	r30, 0xE8	; 232
   1ee2e:	f0 e0       	ldi	r31, 0x00	; 0
   1ee30:	12 c0       	rjmp	.+36     	; 0x1ee56 <Endpoint_ClearStatusStage+0x32>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1ee32:	8e b3       	in	r24, 0x1e	; 30
   1ee34:	81 11       	cpse	r24, r1
   1ee36:	03 c0       	rjmp	.+6      	; 0x1ee3e <Endpoint_ClearStatusStage+0x1a>
   1ee38:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1ee3a:	e8 ee       	ldi	r30, 0xE8	; 232
   1ee3c:	f0 e0       	ldi	r31, 0x00	; 0
   1ee3e:	80 81       	ld	r24, Z

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
   1ee40:	82 ff       	sbrs	r24, 2
   1ee42:	f7 cf       	rjmp	.-18     	; 0x1ee32 <Endpoint_ClearStatusStage+0xe>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1ee44:	e8 ee       	ldi	r30, 0xE8	; 232
   1ee46:	f0 e0       	ldi	r31, 0x00	; 0
   1ee48:	80 81       	ld	r24, Z
   1ee4a:	8b 77       	andi	r24, 0x7B	; 123
   1ee4c:	80 83       	st	Z, r24
   1ee4e:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1ee50:	8e b3       	in	r24, 0x1e	; 30
   1ee52:	88 23       	and	r24, r24
   1ee54:	41 f0       	breq	.+16     	; 0x1ee66 <Endpoint_ClearStatusStage+0x42>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1ee56:	80 81       	ld	r24, Z

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
   1ee58:	80 ff       	sbrs	r24, 0
   1ee5a:	fa cf       	rjmp	.-12     	; 0x1ee50 <Endpoint_ClearStatusStage+0x2c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1ee5c:	e8 ee       	ldi	r30, 0xE8	; 232
   1ee5e:	f0 e0       	ldi	r31, 0x00	; 0
   1ee60:	80 81       	ld	r24, Z
   1ee62:	8e 77       	andi	r24, 0x7E	; 126
   1ee64:	80 83       	st	Z, r24
   1ee66:	08 95       	ret

0001ee68 <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
   1ee68:	0f 93       	push	r16
   1ee6a:	1f 93       	push	r17
   1ee6c:	cf 93       	push	r28
   1ee6e:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
   1ee70:	20 91 e4 00 	lds	r18, 0x00E4
   1ee74:	30 91 e5 00 	lds	r19, 0x00E5
   1ee78:	65 e6       	ldi	r22, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
   1ee7a:	ac ee       	ldi	r26, 0xEC	; 236
   1ee7c:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1ee7e:	e8 ee       	ldi	r30, 0xE8	; 232
   1ee80:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
   1ee82:	0b ee       	ldi	r16, 0xEB	; 235
   1ee84:	10 e0       	ldi	r17, 0x00	; 0
   1ee86:	44 ee       	ldi	r20, 0xE4	; 228
   1ee88:	50 e0       	ldi	r21, 0x00	; 0
   1ee8a:	01 c0       	rjmp	.+2      	; 0x1ee8e <Endpoint_WaitUntilReady+0x26>
   1ee8c:	9c 01       	movw	r18, r24
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
   1ee8e:	9c 91       	ld	r25, X
   1ee90:	89 2f       	mov	r24, r25
   1ee92:	81 70       	andi	r24, 0x01	; 1
   1ee94:	90 fd       	sbrc	r25, 0
   1ee96:	1c c0       	rjmp	.+56     	; 0x1eed0 <Endpoint_WaitUntilReady+0x68>
   1ee98:	1f c0       	rjmp	.+62     	; 0x1eed8 <Endpoint_WaitUntilReady+0x70>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1ee9a:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1ee9c:	88 23       	and	r24, r24
   1ee9e:	81 f0       	breq	.+32     	; 0x1eec0 <Endpoint_WaitUntilReady+0x58>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1eea0:	85 30       	cpi	r24, 0x05	; 5
   1eea2:	81 f0       	breq	.+32     	; 0x1eec4 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
   1eea4:	e8 01       	movw	r28, r16
   1eea6:	88 81       	ld	r24, Y
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
   1eea8:	85 fd       	sbrc	r24, 5
   1eeaa:	0e c0       	rjmp	.+28     	; 0x1eec8 <Endpoint_WaitUntilReady+0x60>
   1eeac:	ea 01       	movw	r28, r20
   1eeae:	88 81       	ld	r24, Y
   1eeb0:	99 81       	ldd	r25, Y+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
   1eeb2:	28 17       	cp	r18, r24
   1eeb4:	39 07       	cpc	r19, r25
   1eeb6:	59 f3       	breq	.-42     	; 0x1ee8e <Endpoint_WaitUntilReady+0x26>
   1eeb8:	61 50       	subi	r22, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
   1eeba:	41 f7       	brne	.-48     	; 0x1ee8c <Endpoint_WaitUntilReady+0x24>
			  return ENDPOINT_READYWAIT_Timeout;
   1eebc:	84 e0       	ldi	r24, 0x04	; 4
   1eebe:	0f c0       	rjmp	.+30     	; 0x1eede <Endpoint_WaitUntilReady+0x76>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
   1eec0:	82 e0       	ldi	r24, 0x02	; 2
   1eec2:	0d c0       	rjmp	.+26     	; 0x1eede <Endpoint_WaitUntilReady+0x76>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
   1eec4:	83 e0       	ldi	r24, 0x03	; 3
   1eec6:	0b c0       	rjmp	.+22     	; 0x1eede <Endpoint_WaitUntilReady+0x76>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
   1eec8:	81 e0       	ldi	r24, 0x01	; 1
   1eeca:	09 c0       	rjmp	.+18     	; 0x1eede <Endpoint_WaitUntilReady+0x76>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
   1eecc:	80 e0       	ldi	r24, 0x00	; 0
   1eece:	07 c0       	rjmp	.+14     	; 0x1eede <Endpoint_WaitUntilReady+0x76>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1eed0:	80 81       	ld	r24, Z

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
   1eed2:	80 ff       	sbrs	r24, 0
   1eed4:	e2 cf       	rjmp	.-60     	; 0x1ee9a <Endpoint_WaitUntilReady+0x32>
   1eed6:	fa cf       	rjmp	.-12     	; 0x1eecc <Endpoint_WaitUntilReady+0x64>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1eed8:	90 81       	ld	r25, Z
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
   1eeda:	92 ff       	sbrs	r25, 2
   1eedc:	de cf       	rjmp	.-68     	; 0x1ee9a <Endpoint_WaitUntilReady+0x32>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
   1eede:	df 91       	pop	r29
   1eee0:	cf 91       	pop	r28
   1eee2:	1f 91       	pop	r17
   1eee4:	0f 91       	pop	r16
   1eee6:	08 95       	ret

0001eee8 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
   1eee8:	0f 93       	push	r16
   1eeea:	1f 93       	push	r17
   1eeec:	cf 93       	push	r28
   1eeee:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
   1eef0:	4a d0       	rcall	.+148    	; 0x1ef86 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
   1eef2:	51 d0       	rcall	.+162    	; 0x1ef96 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
   1eef4:	c8 ed       	ldi	r28, 0xD8	; 216
   1eef6:	d0 e0       	ldi	r29, 0x00	; 0
   1eef8:	88 81       	ld	r24, Y
   1eefa:	8f 77       	andi	r24, 0x7F	; 127
   1eefc:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
   1eefe:	88 81       	ld	r24, Y
   1ef00:	80 68       	ori	r24, 0x80	; 128
   1ef02:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
   1ef04:	88 81       	ld	r24, Y
   1ef06:	8f 7d       	andi	r24, 0xDF	; 223
   1ef08:	88 83       	st	Y, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
   1ef0a:	e7 ed       	ldi	r30, 0xD7	; 215
   1ef0c:	f0 e0       	ldi	r31, 0x00	; 0
   1ef0e:	80 81       	ld	r24, Z
   1ef10:	80 68       	ori	r24, 0x80	; 128
   1ef12:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1ef14:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
   1ef16:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
   1ef18:	10 92 01 02 	sts	0x0201, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
   1ef1c:	00 ee       	ldi	r16, 0xE0	; 224
   1ef1e:	10 e0       	ldi	r17, 0x00	; 0
   1ef20:	f8 01       	movw	r30, r16
   1ef22:	80 81       	ld	r24, Z
   1ef24:	8b 7f       	andi	r24, 0xFB	; 251
   1ef26:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
   1ef28:	88 81       	ld	r24, Y
   1ef2a:	81 60       	ori	r24, 0x01	; 1
   1ef2c:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   1ef2e:	42 e0       	ldi	r20, 0x02	; 2
   1ef30:	60 e0       	ldi	r22, 0x00	; 0
   1ef32:	80 e0       	ldi	r24, 0x00	; 0
   1ef34:	fd de       	rcall	.-518    	; 0x1ed30 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1ef36:	e1 ee       	ldi	r30, 0xE1	; 225
   1ef38:	f0 e0       	ldi	r31, 0x00	; 0
   1ef3a:	80 81       	ld	r24, Z
   1ef3c:	8e 7f       	andi	r24, 0xFE	; 254
   1ef3e:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1ef40:	e2 ee       	ldi	r30, 0xE2	; 226
   1ef42:	f0 e0       	ldi	r31, 0x00	; 0
   1ef44:	80 81       	ld	r24, Z
   1ef46:	81 60       	ori	r24, 0x01	; 1
   1ef48:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
   1ef4a:	80 81       	ld	r24, Z
   1ef4c:	88 60       	ori	r24, 0x08	; 8
   1ef4e:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
   1ef50:	f8 01       	movw	r30, r16
   1ef52:	80 81       	ld	r24, Z
   1ef54:	8e 7f       	andi	r24, 0xFE	; 254
   1ef56:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
   1ef58:	88 81       	ld	r24, Y
   1ef5a:	80 61       	ori	r24, 0x10	; 16
   1ef5c:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
   1ef5e:	df 91       	pop	r29
   1ef60:	cf 91       	pop	r28
   1ef62:	1f 91       	pop	r17
   1ef64:	0f 91       	pop	r16
   1ef66:	08 95       	ret

0001ef68 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
   1ef68:	e8 ed       	ldi	r30, 0xD8	; 216
   1ef6a:	f0 e0       	ldi	r31, 0x00	; 0
   1ef6c:	80 81       	ld	r24, Z
   1ef6e:	8f 7e       	andi	r24, 0xEF	; 239
   1ef70:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
   1ef72:	e7 ed       	ldi	r30, 0xD7	; 215
   1ef74:	f0 e0       	ldi	r31, 0x00	; 0
   1ef76:	80 81       	ld	r24, Z
   1ef78:	81 60       	ori	r24, 0x01	; 1
   1ef7a:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
   1ef7c:	81 e0       	ldi	r24, 0x01	; 1
   1ef7e:	80 93 02 02 	sts	0x0202, r24

	USB_ResetInterface();
   1ef82:	b2 cf       	rjmp	.-156    	; 0x1eee8 <USB_ResetInterface>
   1ef84:	08 95       	ret

0001ef86 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
   1ef86:	e8 ed       	ldi	r30, 0xD8	; 216
   1ef88:	f0 e0       	ldi	r31, 0x00	; 0
   1ef8a:	80 81       	ld	r24, Z
   1ef8c:	8c 7f       	andi	r24, 0xFC	; 252
   1ef8e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
   1ef90:	10 92 e2 00 	sts	0x00E2, r1
   1ef94:	08 95       	ret

0001ef96 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
   1ef96:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
   1ef9a:	10 92 e1 00 	sts	0x00E1, r1
   1ef9e:	08 95       	ret

0001efa0 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
   1efa0:	1f 92       	push	r1
   1efa2:	0f 92       	push	r0
   1efa4:	0f b6       	in	r0, 0x3f	; 63
   1efa6:	0f 92       	push	r0
   1efa8:	11 24       	eor	r1, r1
   1efaa:	0b b6       	in	r0, 0x3b	; 59
   1efac:	0f 92       	push	r0
   1efae:	2f 93       	push	r18
   1efb0:	3f 93       	push	r19
   1efb2:	4f 93       	push	r20
   1efb4:	5f 93       	push	r21
   1efb6:	6f 93       	push	r22
   1efb8:	7f 93       	push	r23
   1efba:	8f 93       	push	r24
   1efbc:	9f 93       	push	r25
   1efbe:	af 93       	push	r26
   1efc0:	bf 93       	push	r27
   1efc2:	ef 93       	push	r30
   1efc4:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
   1efc6:	80 91 da 00 	lds	r24, 0x00DA
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
   1efca:	80 ff       	sbrs	r24, 0
   1efcc:	1b c0       	rjmp	.+54     	; 0x1f004 <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
   1efce:	80 91 d8 00 	lds	r24, 0x00D8
   1efd2:	80 ff       	sbrs	r24, 0
   1efd4:	17 c0       	rjmp	.+46     	; 0x1f004 <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
   1efd6:	ea ed       	ldi	r30, 0xDA	; 218
   1efd8:	f0 e0       	ldi	r31, 0x00	; 0
   1efda:	80 81       	ld	r24, Z
   1efdc:	8e 7f       	andi	r24, 0xFE	; 254
   1efde:	80 83       	st	Z, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
   1efe0:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
   1efe4:	80 ff       	sbrs	r24, 0
   1efe6:	0b c0       	rjmp	.+22     	; 0x1effe <__vector_10+0x5e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1efe8:	84 e1       	ldi	r24, 0x14	; 20
   1efea:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1efec:	86 e1       	ldi	r24, 0x16	; 22
   1efee:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
   1eff0:	09 b4       	in	r0, 0x29	; 41
   1eff2:	00 fe       	sbrs	r0, 0
   1eff4:	fd cf       	rjmp	.-6      	; 0x1eff0 <__vector_10+0x50>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
   1eff6:	81 e0       	ldi	r24, 0x01	; 1
   1eff8:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
   1effa:	29 d9       	rcall	.-3502   	; 0x1e24e <EVENT_USB_Device_Connect>
   1effc:	03 c0       	rjmp	.+6      	; 0x1f004 <__vector_10+0x64>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1effe:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
   1f000:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
   1f002:	26 d9       	rcall	.-3508   	; 0x1e250 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
   1f004:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
   1f008:	80 ff       	sbrs	r24, 0
   1f00a:	15 c0       	rjmp	.+42     	; 0x1f036 <__vector_10+0x96>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
   1f00c:	80 91 e2 00 	lds	r24, 0x00E2
   1f010:	80 ff       	sbrs	r24, 0
   1f012:	11 c0       	rjmp	.+34     	; 0x1f036 <__vector_10+0x96>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1f014:	e2 ee       	ldi	r30, 0xE2	; 226
   1f016:	f0 e0       	ldi	r31, 0x00	; 0
   1f018:	80 81       	ld	r24, Z
   1f01a:	8e 7f       	andi	r24, 0xFE	; 254
   1f01c:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1f01e:	80 81       	ld	r24, Z
   1f020:	80 61       	ori	r24, 0x10	; 16
   1f022:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
   1f024:	e8 ed       	ldi	r30, 0xD8	; 216
   1f026:	f0 e0       	ldi	r31, 0x00	; 0
   1f028:	80 81       	ld	r24, Z
   1f02a:	80 62       	ori	r24, 0x20	; 32
   1f02c:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1f02e:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
   1f030:	85 e0       	ldi	r24, 0x05	; 5
   1f032:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
   1f034:	14 d2       	rcall	.+1064   	; 0x1f45e <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
   1f036:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
   1f03a:	84 ff       	sbrs	r24, 4
   1f03c:	2d c0       	rjmp	.+90     	; 0x1f098 <__vector_10+0xf8>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
   1f03e:	80 91 e2 00 	lds	r24, 0x00E2
   1f042:	84 ff       	sbrs	r24, 4
   1f044:	29 c0       	rjmp	.+82     	; 0x1f098 <__vector_10+0xf8>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1f046:	84 e1       	ldi	r24, 0x14	; 20
   1f048:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1f04a:	86 e1       	ldi	r24, 0x16	; 22
   1f04c:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
   1f04e:	09 b4       	in	r0, 0x29	; 41
   1f050:	00 fe       	sbrs	r0, 0
   1f052:	fd cf       	rjmp	.-6      	; 0x1f04e <__vector_10+0xae>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
   1f054:	e8 ed       	ldi	r30, 0xD8	; 216
   1f056:	f0 e0       	ldi	r31, 0x00	; 0
   1f058:	80 81       	ld	r24, Z
   1f05a:	8f 7d       	andi	r24, 0xDF	; 223
   1f05c:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
   1f05e:	e1 ee       	ldi	r30, 0xE1	; 225
   1f060:	f0 e0       	ldi	r31, 0x00	; 0
   1f062:	80 81       	ld	r24, Z
   1f064:	8f 7e       	andi	r24, 0xEF	; 239
   1f066:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
   1f068:	e2 ee       	ldi	r30, 0xE2	; 226
   1f06a:	f0 e0       	ldi	r31, 0x00	; 0
   1f06c:	80 81       	ld	r24, Z
   1f06e:	8f 7e       	andi	r24, 0xEF	; 239
   1f070:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1f072:	80 81       	ld	r24, Z
   1f074:	81 60       	ori	r24, 0x01	; 1
   1f076:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
   1f078:	80 91 01 02 	lds	r24, 0x0201
   1f07c:	88 23       	and	r24, r24
   1f07e:	19 f0       	breq	.+6      	; 0x1f086 <__vector_10+0xe6>
		  USB_DeviceState = DEVICE_STATE_Configured;
   1f080:	84 e0       	ldi	r24, 0x04	; 4
   1f082:	8e bb       	out	0x1e, r24	; 30
   1f084:	08 c0       	rjmp	.+16     	; 0x1f096 <__vector_10+0xf6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1f086:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
   1f08a:	88 23       	and	r24, r24
   1f08c:	14 f0       	brlt	.+4      	; 0x1f092 <__vector_10+0xf2>
   1f08e:	81 e0       	ldi	r24, 0x01	; 1
   1f090:	01 c0       	rjmp	.+2      	; 0x1f094 <__vector_10+0xf4>
   1f092:	83 e0       	ldi	r24, 0x03	; 3
   1f094:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
   1f096:	e3 d1       	rcall	.+966    	; 0x1f45e <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
   1f098:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
   1f09c:	83 ff       	sbrs	r24, 3
   1f09e:	22 c0       	rjmp	.+68     	; 0x1f0e4 <__vector_10+0x144>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
   1f0a0:	80 91 e2 00 	lds	r24, 0x00E2
   1f0a4:	83 ff       	sbrs	r24, 3
   1f0a6:	1e c0       	rjmp	.+60     	; 0x1f0e4 <__vector_10+0x144>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
   1f0a8:	e1 ee       	ldi	r30, 0xE1	; 225
   1f0aa:	f0 e0       	ldi	r31, 0x00	; 0
   1f0ac:	80 81       	ld	r24, Z
   1f0ae:	87 7f       	andi	r24, 0xF7	; 247
   1f0b0:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
   1f0b2:	82 e0       	ldi	r24, 0x02	; 2
   1f0b4:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
   1f0b6:	10 92 01 02 	sts	0x0201, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1f0ba:	80 81       	ld	r24, Z
   1f0bc:	8e 7f       	andi	r24, 0xFE	; 254
   1f0be:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1f0c0:	e2 ee       	ldi	r30, 0xE2	; 226
   1f0c2:	f0 e0       	ldi	r31, 0x00	; 0
   1f0c4:	80 81       	ld	r24, Z
   1f0c6:	8e 7f       	andi	r24, 0xFE	; 254
   1f0c8:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1f0ca:	80 81       	ld	r24, Z
   1f0cc:	80 61       	ori	r24, 0x10	; 16
   1f0ce:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   1f0d0:	42 e0       	ldi	r20, 0x02	; 2
   1f0d2:	60 e0       	ldi	r22, 0x00	; 0
   1f0d4:	80 e0       	ldi	r24, 0x00	; 0
   1f0d6:	2c de       	rcall	.-936    	; 0x1ed30 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
   1f0d8:	e0 ef       	ldi	r30, 0xF0	; 240
   1f0da:	f0 e0       	ldi	r31, 0x00	; 0
   1f0dc:	80 81       	ld	r24, Z
   1f0de:	88 60       	ori	r24, 0x08	; 8
   1f0e0:	80 83       	st	Z, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
   1f0e2:	bd d1       	rcall	.+890    	; 0x1f45e <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
   1f0e4:	ff 91       	pop	r31
   1f0e6:	ef 91       	pop	r30
   1f0e8:	bf 91       	pop	r27
   1f0ea:	af 91       	pop	r26
   1f0ec:	9f 91       	pop	r25
   1f0ee:	8f 91       	pop	r24
   1f0f0:	7f 91       	pop	r23
   1f0f2:	6f 91       	pop	r22
   1f0f4:	5f 91       	pop	r21
   1f0f6:	4f 91       	pop	r20
   1f0f8:	3f 91       	pop	r19
   1f0fa:	2f 91       	pop	r18
   1f0fc:	0f 90       	pop	r0
   1f0fe:	0b be       	out	0x3b, r0	; 59
   1f100:	0f 90       	pop	r0
   1f102:	0f be       	out	0x3f, r0	; 63
   1f104:	0f 90       	pop	r0
   1f106:	1f 90       	pop	r1
   1f108:	18 95       	reti

0001f10a <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
   1f10a:	1f 92       	push	r1
   1f10c:	0f 92       	push	r0
   1f10e:	0f b6       	in	r0, 0x3f	; 63
   1f110:	0f 92       	push	r0
   1f112:	11 24       	eor	r1, r1
   1f114:	0b b6       	in	r0, 0x3b	; 59
   1f116:	0f 92       	push	r0
   1f118:	ef 92       	push	r14
   1f11a:	ff 92       	push	r15
   1f11c:	0f 93       	push	r16
   1f11e:	1f 93       	push	r17
   1f120:	2f 93       	push	r18
   1f122:	3f 93       	push	r19
   1f124:	4f 93       	push	r20
   1f126:	5f 93       	push	r21
   1f128:	6f 93       	push	r22
   1f12a:	7f 93       	push	r23
   1f12c:	8f 93       	push	r24
   1f12e:	9f 93       	push	r25
   1f130:	af 93       	push	r26
   1f132:	bf 93       	push	r27
   1f134:	cf 93       	push	r28
   1f136:	df 93       	push	r29
   1f138:	ef 93       	push	r30
   1f13a:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
   1f13c:	c0 91 e9 00 	lds	r28, 0x00E9
   1f140:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
   1f142:	80 91 ec 00 	lds	r24, 0x00EC
   1f146:	d8 2f       	mov	r29, r24
   1f148:	d1 70       	andi	r29, 0x01	; 1
   1f14a:	80 fd       	sbrc	r24, 0
   1f14c:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1f14e:	0f 2e       	mov	r0, r31
   1f150:	f9 ee       	ldi	r31, 0xE9	; 233
   1f152:	ef 2e       	mov	r14, r31
   1f154:	f1 2c       	mov	r15, r1
   1f156:	f0 2d       	mov	r31, r0
   1f158:	f7 01       	movw	r30, r14
   1f15a:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
   1f15c:	00 ef       	ldi	r16, 0xF0	; 240
   1f15e:	10 e0       	ldi	r17, 0x00	; 0
   1f160:	f8 01       	movw	r30, r16
   1f162:	80 81       	ld	r24, Z
   1f164:	87 7f       	andi	r24, 0xF7	; 247
   1f166:	80 83       	st	Z, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
   1f168:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
   1f16a:	23 d0       	rcall	.+70     	; 0x1f1b2 <USB_Device_ProcessControlRequest>
   1f16c:	f7 01       	movw	r30, r14
   1f16e:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
   1f170:	f8 01       	movw	r30, r16
   1f172:	80 81       	ld	r24, Z
   1f174:	88 60       	ori	r24, 0x08	; 8
   1f176:	80 83       	st	Z, r24
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
   1f178:	cd 2b       	or	r28, r29
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1f17a:	cf 70       	andi	r28, 0x0F	; 15
   1f17c:	f7 01       	movw	r30, r14
   1f17e:	c0 83       	st	Z, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
   1f180:	ff 91       	pop	r31
   1f182:	ef 91       	pop	r30
   1f184:	df 91       	pop	r29
   1f186:	cf 91       	pop	r28
   1f188:	bf 91       	pop	r27
   1f18a:	af 91       	pop	r26
   1f18c:	9f 91       	pop	r25
   1f18e:	8f 91       	pop	r24
   1f190:	7f 91       	pop	r23
   1f192:	6f 91       	pop	r22
   1f194:	5f 91       	pop	r21
   1f196:	4f 91       	pop	r20
   1f198:	3f 91       	pop	r19
   1f19a:	2f 91       	pop	r18
   1f19c:	1f 91       	pop	r17
   1f19e:	0f 91       	pop	r16
   1f1a0:	ff 90       	pop	r15
   1f1a2:	ef 90       	pop	r14
   1f1a4:	0f 90       	pop	r0
   1f1a6:	0b be       	out	0x3b, r0	; 59
   1f1a8:	0f 90       	pop	r0
   1f1aa:	0f be       	out	0x3f, r0	; 63
   1f1ac:	0f 90       	pop	r0
   1f1ae:	1f 90       	pop	r1
   1f1b0:	18 95       	reti

0001f1b2 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
   1f1b2:	0f 93       	push	r16
   1f1b4:	1f 93       	push	r17
   1f1b6:	cf 93       	push	r28
   1f1b8:	df 93       	push	r29
   1f1ba:	cd b7       	in	r28, 0x3d	; 61
   1f1bc:	de b7       	in	r29, 0x3e	; 62
   1f1be:	aa 97       	sbiw	r28, 0x2a	; 42
   1f1c0:	0f b6       	in	r0, 0x3f	; 63
   1f1c2:	f8 94       	cli
   1f1c4:	de bf       	out	0x3e, r29	; 62
   1f1c6:	0f be       	out	0x3f, r0	; 63
   1f1c8:	cd bf       	out	0x3d, r28	; 61
   1f1ca:	e3 e0       	ldi	r30, 0x03	; 3
   1f1cc:	f2 e0       	ldi	r31, 0x02	; 2
   1f1ce:	2b e0       	ldi	r18, 0x0B	; 11
   1f1d0:	32 e0       	ldi	r19, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1f1d2:	a1 ef       	ldi	r26, 0xF1	; 241
   1f1d4:	b0 e0       	ldi	r27, 0x00	; 0
   1f1d6:	8c 91       	ld	r24, X
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
   1f1d8:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
   1f1da:	e2 17       	cp	r30, r18
   1f1dc:	f3 07       	cpc	r31, r19
   1f1de:	d9 f7       	brne	.-10     	; 0x1f1d6 <USB_Device_ProcessControlRequest+0x24>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
   1f1e0:	3c d8       	rcall	.-3976   	; 0x1e25a <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1f1e2:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
   1f1e6:	83 ff       	sbrs	r24, 3
   1f1e8:	1a c1       	rjmp	.+564    	; 0x1f41e <USB_Device_ProcessControlRequest+0x26c>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
   1f1ea:	e3 e0       	ldi	r30, 0x03	; 3
   1f1ec:	f2 e0       	ldi	r31, 0x02	; 2
   1f1ee:	90 81       	ld	r25, Z

		switch (USB_ControlRequest.bRequest)
   1f1f0:	81 81       	ldd	r24, Z+1	; 0x01
   1f1f2:	85 30       	cpi	r24, 0x05	; 5
   1f1f4:	09 f4       	brne	.+2      	; 0x1f1f8 <USB_Device_ProcessControlRequest+0x46>
   1f1f6:	68 c0       	rjmp	.+208    	; 0x1f2c8 <USB_Device_ProcessControlRequest+0x116>
   1f1f8:	30 f4       	brcc	.+12     	; 0x1f206 <USB_Device_ProcessControlRequest+0x54>
   1f1fa:	81 30       	cpi	r24, 0x01	; 1
   1f1fc:	79 f1       	breq	.+94     	; 0x1f25c <USB_Device_ProcessControlRequest+0xaa>
   1f1fe:	68 f0       	brcs	.+26     	; 0x1f21a <USB_Device_ProcessControlRequest+0x68>
   1f200:	83 30       	cpi	r24, 0x03	; 3
   1f202:	61 f1       	breq	.+88     	; 0x1f25c <USB_Device_ProcessControlRequest+0xaa>
   1f204:	0c c1       	rjmp	.+536    	; 0x1f41e <USB_Device_ProcessControlRequest+0x26c>
   1f206:	88 30       	cpi	r24, 0x08	; 8
   1f208:	09 f4       	brne	.+2      	; 0x1f20c <USB_Device_ProcessControlRequest+0x5a>
   1f20a:	d8 c0       	rjmp	.+432    	; 0x1f3bc <USB_Device_ProcessControlRequest+0x20a>
   1f20c:	89 30       	cpi	r24, 0x09	; 9
   1f20e:	09 f4       	brne	.+2      	; 0x1f212 <USB_Device_ProcessControlRequest+0x60>
   1f210:	e5 c0       	rjmp	.+458    	; 0x1f3dc <USB_Device_ProcessControlRequest+0x22a>
   1f212:	86 30       	cpi	r24, 0x06	; 6
   1f214:	09 f0       	breq	.+2      	; 0x1f218 <USB_Device_ProcessControlRequest+0x66>
   1f216:	03 c1       	rjmp	.+518    	; 0x1f41e <USB_Device_ProcessControlRequest+0x26c>
   1f218:	79 c0       	rjmp	.+242    	; 0x1f30c <USB_Device_ProcessControlRequest+0x15a>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1f21a:	90 38       	cpi	r25, 0x80	; 128
   1f21c:	81 f0       	breq	.+32     	; 0x1f23e <USB_Device_ProcessControlRequest+0x8c>
   1f21e:	92 38       	cpi	r25, 0x82	; 130
   1f220:	09 f0       	breq	.+2      	; 0x1f224 <USB_Device_ProcessControlRequest+0x72>
   1f222:	fd c0       	rjmp	.+506    	; 0x1f41e <USB_Device_ProcessControlRequest+0x26c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1f224:	80 91 07 02 	lds	r24, 0x0207
   1f228:	8f 70       	andi	r24, 0x0F	; 15
   1f22a:	e9 ee       	ldi	r30, 0xE9	; 233
   1f22c:	f0 e0       	ldi	r31, 0x00	; 0
   1f22e:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
   1f230:	90 91 eb 00 	lds	r25, 0x00EB
   1f234:	95 fb       	bst	r25, 5
   1f236:	99 27       	eor	r25, r25
   1f238:	90 f9       	bld	r25, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1f23a:	10 82       	st	Z, r1
   1f23c:	01 c0       	rjmp	.+2      	; 0x1f240 <USB_Device_ProcessControlRequest+0x8e>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
   1f23e:	90 e0       	ldi	r25, 0x00	; 0
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f240:	e8 ee       	ldi	r30, 0xE8	; 232
   1f242:	f0 e0       	ldi	r31, 0x00	; 0
   1f244:	80 81       	ld	r24, Z
   1f246:	87 7f       	andi	r24, 0xF7	; 247
   1f248:	80 83       	st	Z, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
   1f24a:	a1 ef       	ldi	r26, 0xF1	; 241
   1f24c:	b0 e0       	ldi	r27, 0x00	; 0
   1f24e:	9c 93       	st	X, r25
				UEDATX = (Data >> 8);
   1f250:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1f252:	80 81       	ld	r24, Z
   1f254:	8e 77       	andi	r24, 0x7E	; 126
   1f256:	80 83       	st	Z, r24
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
   1f258:	e5 dd       	rcall	.-1078   	; 0x1ee24 <Endpoint_ClearStatusStage>
   1f25a:	e1 c0       	rjmp	.+450    	; 0x1f41e <USB_Device_ProcessControlRequest+0x26c>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1f25c:	92 30       	cpi	r25, 0x02	; 2
   1f25e:	09 f4       	brne	.+2      	; 0x1f262 <USB_Device_ProcessControlRequest+0xb0>
   1f260:	ed c0       	rjmp	.+474    	; 0x1f43c <USB_Device_ProcessControlRequest+0x28a>
   1f262:	dd c0       	rjmp	.+442    	; 0x1f41e <USB_Device_ProcessControlRequest+0x26c>
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
   1f264:	80 91 07 02 	lds	r24, 0x0207
   1f268:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
   1f26a:	09 f4       	brne	.+2      	; 0x1f26e <USB_Device_ProcessControlRequest+0xbc>
   1f26c:	d8 c0       	rjmp	.+432    	; 0x1f41e <USB_Device_ProcessControlRequest+0x26c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1f26e:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
   1f272:	90 91 eb 00 	lds	r25, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
   1f276:	90 ff       	sbrs	r25, 0
   1f278:	1e c0       	rjmp	.+60     	; 0x1f2b6 <USB_Device_ProcessControlRequest+0x104>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
   1f27a:	90 91 04 02 	lds	r25, 0x0204
   1f27e:	93 30       	cpi	r25, 0x03	; 3
   1f280:	31 f4       	brne	.+12     	; 0x1f28e <USB_Device_ProcessControlRequest+0xdc>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1f282:	eb ee       	ldi	r30, 0xEB	; 235
   1f284:	f0 e0       	ldi	r31, 0x00	; 0
   1f286:	80 81       	ld	r24, Z
   1f288:	80 62       	ori	r24, 0x20	; 32
   1f28a:	80 83       	st	Z, r24
   1f28c:	14 c0       	rjmp	.+40     	; 0x1f2b6 <USB_Device_ProcessControlRequest+0x104>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
   1f28e:	eb ee       	ldi	r30, 0xEB	; 235
   1f290:	f0 e0       	ldi	r31, 0x00	; 0
   1f292:	90 81       	ld	r25, Z
   1f294:	90 61       	ori	r25, 0x10	; 16
   1f296:	90 83       	st	Z, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
   1f298:	21 e0       	ldi	r18, 0x01	; 1
   1f29a:	30 e0       	ldi	r19, 0x00	; 0
   1f29c:	a9 01       	movw	r20, r18
   1f29e:	02 c0       	rjmp	.+4      	; 0x1f2a4 <USB_Device_ProcessControlRequest+0xf2>
   1f2a0:	44 0f       	add	r20, r20
   1f2a2:	55 1f       	adc	r21, r21
   1f2a4:	8a 95       	dec	r24
   1f2a6:	e2 f7       	brpl	.-8      	; 0x1f2a0 <USB_Device_ProcessControlRequest+0xee>
   1f2a8:	aa ee       	ldi	r26, 0xEA	; 234
   1f2aa:	b0 e0       	ldi	r27, 0x00	; 0
   1f2ac:	4c 93       	st	X, r20
				UERST = 0;
   1f2ae:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
   1f2b0:	80 81       	ld	r24, Z
   1f2b2:	88 60       	ori	r24, 0x08	; 8
   1f2b4:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1f2b6:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f2ba:	e8 ee       	ldi	r30, 0xE8	; 232
   1f2bc:	f0 e0       	ldi	r31, 0x00	; 0
   1f2be:	80 81       	ld	r24, Z
   1f2c0:	87 7f       	andi	r24, 0xF7	; 247
   1f2c2:	80 83       	st	Z, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
   1f2c4:	af dd       	rcall	.-1186   	; 0x1ee24 <Endpoint_ClearStatusStage>
   1f2c6:	ab c0       	rjmp	.+342    	; 0x1f41e <USB_Device_ProcessControlRequest+0x26c>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1f2c8:	91 11       	cpse	r25, r1
   1f2ca:	a9 c0       	rjmp	.+338    	; 0x1f41e <USB_Device_ProcessControlRequest+0x26c>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
   1f2cc:	10 91 05 02 	lds	r17, 0x0205
   1f2d0:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
   1f2d2:	e3 ee       	ldi	r30, 0xE3	; 227
   1f2d4:	f0 e0       	ldi	r31, 0x00	; 0
   1f2d6:	80 81       	ld	r24, Z
   1f2d8:	80 78       	andi	r24, 0x80	; 128
   1f2da:	81 2b       	or	r24, r17
   1f2dc:	80 83       	st	Z, r24
   1f2de:	e8 ee       	ldi	r30, 0xE8	; 232
   1f2e0:	f0 e0       	ldi	r31, 0x00	; 0
   1f2e2:	80 81       	ld	r24, Z
   1f2e4:	87 7f       	andi	r24, 0xF7	; 247
   1f2e6:	80 83       	st	Z, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
   1f2e8:	9d dd       	rcall	.-1222   	; 0x1ee24 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1f2ea:	e8 ee       	ldi	r30, 0xE8	; 232
   1f2ec:	f0 e0       	ldi	r31, 0x00	; 0
   1f2ee:	80 81       	ld	r24, Z

	while (!(Endpoint_IsINReady()));
   1f2f0:	80 ff       	sbrs	r24, 0
   1f2f2:	fd cf       	rjmp	.-6      	; 0x1f2ee <USB_Device_ProcessControlRequest+0x13c>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
   1f2f4:	e3 ee       	ldi	r30, 0xE3	; 227
   1f2f6:	f0 e0       	ldi	r31, 0x00	; 0
   1f2f8:	80 81       	ld	r24, Z
   1f2fa:	80 68       	ori	r24, 0x80	; 128
   1f2fc:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
   1f2fe:	11 11       	cpse	r17, r1
   1f300:	02 c0       	rjmp	.+4      	; 0x1f306 <USB_Device_ProcessControlRequest+0x154>
   1f302:	82 e0       	ldi	r24, 0x02	; 2
   1f304:	01 c0       	rjmp	.+2      	; 0x1f308 <USB_Device_ProcessControlRequest+0x156>
   1f306:	83 e0       	ldi	r24, 0x03	; 3
   1f308:	8e bb       	out	0x1e, r24	; 30
   1f30a:	89 c0       	rjmp	.+274    	; 0x1f41e <USB_Device_ProcessControlRequest+0x26c>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1f30c:	90 58       	subi	r25, 0x80	; 128
   1f30e:	92 30       	cpi	r25, 0x02	; 2
   1f310:	08 f0       	brcs	.+2      	; 0x1f314 <USB_Device_ProcessControlRequest+0x162>
   1f312:	85 c0       	rjmp	.+266    	; 0x1f41e <USB_Device_ProcessControlRequest+0x26c>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
   1f314:	80 91 05 02 	lds	r24, 0x0205
   1f318:	90 91 06 02 	lds	r25, 0x0206
   1f31c:	8c 3d       	cpi	r24, 0xDC	; 220
   1f31e:	53 e0       	ldi	r21, 0x03	; 3
   1f320:	95 07       	cpc	r25, r21
   1f322:	99 f5       	brne	.+102    	; 0x1f38a <USB_Device_ProcessControlRequest+0x1d8>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
   1f324:	83 e0       	ldi	r24, 0x03	; 3
   1f326:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
   1f328:	8a e2       	ldi	r24, 0x2A	; 42
   1f32a:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
   1f32c:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
   1f32e:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
   1f330:	de 01       	movw	r26, r28
   1f332:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
   1f334:	20 e0       	ldi	r18, 0x00	; 0
			{

				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
   1f336:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
   1f338:	41 e2       	ldi	r20, 0x21	; 33
   1f33a:	e3 2f       	mov	r30, r19
   1f33c:	f0 e0       	ldi	r31, 0x00	; 0
   1f33e:	40 93 57 00 	sts	0x0057, r20
   1f342:	84 91       	lpm	r24, Z

					if (SerialCharNum & 0x01)
   1f344:	20 ff       	sbrs	r18, 0
   1f346:	03 c0       	rjmp	.+6      	; 0x1f34e <USB_Device_ProcessControlRequest+0x19c>
					{
						SerialByte >>= 4;
   1f348:	82 95       	swap	r24
   1f34a:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
   1f34c:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
   1f34e:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
   1f350:	8a 30       	cpi	r24, 0x0A	; 10
   1f352:	18 f0       	brcs	.+6      	; 0x1f35a <USB_Device_ProcessControlRequest+0x1a8>
   1f354:	90 e0       	ldi	r25, 0x00	; 0
   1f356:	c7 96       	adiw	r24, 0x37	; 55
   1f358:	02 c0       	rjmp	.+4      	; 0x1f35e <USB_Device_ProcessControlRequest+0x1ac>
   1f35a:	90 e0       	ldi	r25, 0x00	; 0
   1f35c:	c0 96       	adiw	r24, 0x30	; 48
   1f35e:	8d 93       	st	X+, r24
   1f360:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
   1f362:	2f 5f       	subi	r18, 0xFF	; 255
   1f364:	24 31       	cpi	r18, 0x14	; 20
   1f366:	49 f7       	brne	.-46     	; 0x1f33a <USB_Device_ProcessControlRequest+0x188>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
   1f368:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f36a:	08 ee       	ldi	r16, 0xE8	; 232
   1f36c:	10 e0       	ldi	r17, 0x00	; 0
   1f36e:	f8 01       	movw	r30, r16
   1f370:	80 81       	ld	r24, Z
   1f372:	87 7f       	andi	r24, 0xF7	; 247
   1f374:	80 83       	st	Z, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
   1f376:	6a e2       	ldi	r22, 0x2A	; 42
   1f378:	70 e0       	ldi	r23, 0x00	; 0
   1f37a:	ce 01       	movw	r24, r28
   1f37c:	01 96       	adiw	r24, 0x01	; 1
   1f37e:	5b dc       	rcall	.-1866   	; 0x1ec36 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1f380:	f8 01       	movw	r30, r16
   1f382:	80 81       	ld	r24, Z
   1f384:	8b 77       	andi	r24, 0x7B	; 123
   1f386:	80 83       	st	Z, r24
   1f388:	4a c0       	rjmp	.+148    	; 0x1f41e <USB_Device_ProcessControlRequest+0x26c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
   1f38a:	ae 01       	movw	r20, r28
   1f38c:	4f 5f       	subi	r20, 0xFF	; 255
   1f38e:	5f 4f       	sbci	r21, 0xFF	; 255
   1f390:	60 91 07 02 	lds	r22, 0x0207
   1f394:	0e 94 35 f1 	call	0x1e26a	; 0x1e26a <CALLBACK_USB_GetDescriptor>
   1f398:	bc 01       	movw	r22, r24
   1f39a:	89 2b       	or	r24, r25
   1f39c:	09 f4       	brne	.+2      	; 0x1f3a0 <USB_Device_ProcessControlRequest+0x1ee>
   1f39e:	3f c0       	rjmp	.+126    	; 0x1f41e <USB_Device_ProcessControlRequest+0x26c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f3a0:	08 ee       	ldi	r16, 0xE8	; 232
   1f3a2:	10 e0       	ldi	r17, 0x00	; 0
   1f3a4:	f8 01       	movw	r30, r16
   1f3a6:	90 81       	ld	r25, Z
   1f3a8:	97 7f       	andi	r25, 0xF7	; 247
   1f3aa:	90 83       	st	Z, r25
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
   1f3ac:	89 81       	ldd	r24, Y+1	; 0x01
   1f3ae:	9a 81       	ldd	r25, Y+2	; 0x02
   1f3b0:	42 dc       	rcall	.-1916   	; 0x1ec36 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1f3b2:	f8 01       	movw	r30, r16
   1f3b4:	80 81       	ld	r24, Z
   1f3b6:	8b 77       	andi	r24, 0x7B	; 123
   1f3b8:	80 83       	st	Z, r24
   1f3ba:	31 c0       	rjmp	.+98     	; 0x1f41e <USB_Device_ProcessControlRequest+0x26c>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
   1f3bc:	90 38       	cpi	r25, 0x80	; 128
   1f3be:	79 f5       	brne	.+94     	; 0x1f41e <USB_Device_ProcessControlRequest+0x26c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f3c0:	e8 ee       	ldi	r30, 0xE8	; 232
   1f3c2:	f0 e0       	ldi	r31, 0x00	; 0
   1f3c4:	80 81       	ld	r24, Z
   1f3c6:	87 7f       	andi	r24, 0xF7	; 247
   1f3c8:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
   1f3ca:	80 91 01 02 	lds	r24, 0x0201
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1f3ce:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1f3d2:	80 81       	ld	r24, Z
   1f3d4:	8e 77       	andi	r24, 0x7E	; 126
   1f3d6:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
   1f3d8:	25 dd       	rcall	.-1462   	; 0x1ee24 <Endpoint_ClearStatusStage>
   1f3da:	21 c0       	rjmp	.+66     	; 0x1f41e <USB_Device_ProcessControlRequest+0x26c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1f3dc:	91 11       	cpse	r25, r1
   1f3de:	1f c0       	rjmp	.+62     	; 0x1f41e <USB_Device_ProcessControlRequest+0x26c>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
   1f3e0:	80 91 05 02 	lds	r24, 0x0205
   1f3e4:	82 30       	cpi	r24, 0x02	; 2
   1f3e6:	d8 f4       	brcc	.+54     	; 0x1f41e <USB_Device_ProcessControlRequest+0x26c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f3e8:	e8 ee       	ldi	r30, 0xE8	; 232
   1f3ea:	f0 e0       	ldi	r31, 0x00	; 0
   1f3ec:	80 81       	ld	r24, Z
   1f3ee:	87 7f       	andi	r24, 0xF7	; 247
   1f3f0:	80 83       	st	Z, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
   1f3f2:	80 91 05 02 	lds	r24, 0x0205
   1f3f6:	80 93 01 02 	sts	0x0201, r24

	Endpoint_ClearStatusStage();
   1f3fa:	14 dd       	rcall	.-1496   	; 0x1ee24 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
   1f3fc:	80 91 01 02 	lds	r24, 0x0201
   1f400:	88 23       	and	r24, r24
   1f402:	19 f0       	breq	.+6      	; 0x1f40a <USB_Device_ProcessControlRequest+0x258>
	  USB_DeviceState = DEVICE_STATE_Configured;
   1f404:	84 e0       	ldi	r24, 0x04	; 4
   1f406:	8e bb       	out	0x1e, r24	; 30
   1f408:	08 c0       	rjmp	.+16     	; 0x1f41a <USB_Device_ProcessControlRequest+0x268>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1f40a:	80 91 e3 00 	lds	r24, 0x00E3
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
   1f40e:	88 23       	and	r24, r24
   1f410:	14 f0       	brlt	.+4      	; 0x1f416 <USB_Device_ProcessControlRequest+0x264>
   1f412:	81 e0       	ldi	r24, 0x01	; 1
   1f414:	01 c0       	rjmp	.+2      	; 0x1f418 <USB_Device_ProcessControlRequest+0x266>
   1f416:	84 e0       	ldi	r24, 0x04	; 4
   1f418:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
   1f41a:	0e 94 29 f1 	call	0x1e252	; 0x1e252 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1f41e:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
   1f422:	83 ff       	sbrs	r24, 3
   1f424:	11 c0       	rjmp	.+34     	; 0x1f448 <USB_Device_ProcessControlRequest+0x296>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f426:	e8 ee       	ldi	r30, 0xE8	; 232
   1f428:	f0 e0       	ldi	r31, 0x00	; 0
   1f42a:	80 81       	ld	r24, Z
   1f42c:	87 7f       	andi	r24, 0xF7	; 247
   1f42e:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1f430:	eb ee       	ldi	r30, 0xEB	; 235
   1f432:	f0 e0       	ldi	r31, 0x00	; 0
   1f434:	80 81       	ld	r24, Z
   1f436:	80 62       	ori	r24, 0x20	; 32
   1f438:	80 83       	st	Z, r24
   1f43a:	06 c0       	rjmp	.+12     	; 0x1f448 <USB_Device_ProcessControlRequest+0x296>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
   1f43c:	80 91 05 02 	lds	r24, 0x0205
   1f440:	88 23       	and	r24, r24
   1f442:	09 f4       	brne	.+2      	; 0x1f446 <USB_Device_ProcessControlRequest+0x294>
   1f444:	0f cf       	rjmp	.-482    	; 0x1f264 <USB_Device_ProcessControlRequest+0xb2>
   1f446:	37 cf       	rjmp	.-402    	; 0x1f2b6 <USB_Device_ProcessControlRequest+0x104>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
   1f448:	aa 96       	adiw	r28, 0x2a	; 42
   1f44a:	0f b6       	in	r0, 0x3f	; 63
   1f44c:	f8 94       	cli
   1f44e:	de bf       	out	0x3e, r29	; 62
   1f450:	0f be       	out	0x3f, r0	; 63
   1f452:	cd bf       	out	0x3d, r28	; 61
   1f454:	df 91       	pop	r29
   1f456:	cf 91       	pop	r28
   1f458:	1f 91       	pop	r17
   1f45a:	0f 91       	pop	r16
   1f45c:	08 95       	ret

0001f45e <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
   1f45e:	08 95       	ret

0001f460 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
   1f460:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f462:	8e b3       	in	r24, 0x1e	; 30
   1f464:	88 23       	and	r24, r24
   1f466:	99 f0       	breq	.+38     	; 0x1f48e <USB_USBTask+0x2e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
   1f468:	c0 91 e9 00 	lds	r28, 0x00E9
   1f46c:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
   1f46e:	80 91 ec 00 	lds	r24, 0x00EC
   1f472:	98 2f       	mov	r25, r24
   1f474:	91 70       	andi	r25, 0x01	; 1
   1f476:	80 fd       	sbrc	r24, 0
   1f478:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
   1f47a:	c9 2b       	or	r28, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1f47c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1f480:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
   1f484:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
   1f486:	95 de       	rcall	.-726    	; 0x1f1b2 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1f488:	cf 70       	andi	r28, 0x0F	; 15
   1f48a:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
   1f48e:	cf 91       	pop	r28
   1f490:	08 95       	ret

0001f492 <_exit>:
   1f492:	f8 94       	cli

0001f494 <__stop_program>:
   1f494:	ff cf       	rjmp	.-2      	; 0x1f494 <__stop_program>
